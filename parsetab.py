
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COLON COMA CTE_F CTE_I CTE_STRING DIFFERENT DIVIDE DOUBLEEQUAL ELSE EQUAL FLOAT FOR FUNCTION ID IF INT LBRACE LOWERTHAN LPAREN MAIN MINUS MORETHAN OR PLUS PRINT PROGRAM RBRACE RPAREN SEMICOLON TIMES VAR VOID WHILEprogram : PROGRAM ID COLON vars main function\n               | PROGRAM ID COLON main function\n               | PROGRAM ID COLON vars main\n               | PROGRAM ID COLON main\n    main : nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE\n            | nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE\n     nomMain : MAIN\n    vars : VAR varAux1\n    varAux1 : tipo varAux2 SEMICOLON\n               | tipo varAux2 SEMICOLON varAux1\n    varAux2 : ID\n            | ID COMA varAux2\n    tipo : INT\n            | FLOAT\n            | CHAR\n    tipoFunc : INT\n            | FLOAT\n            | CHAR\n            | VOID\n    bloque : LBRACE RBRACE\n              | LBRACE bloqueAux RBRACE\n    function : FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE\n              | FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE\n              | FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function\n              | FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function\n              | FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE\n              | FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE\n              | FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function\n              | FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function\n    param : tipo ID\n             | tipo ID COMA param\n    nomFunc : ID\n    bloqueAux : estatuto\n                 | estatuto bloqueAux\n    while : WHILE LPAREN expresion RPAREN bloque\n    estatuto : asignacion\n                | condicion\n                | escritura\n                | while\n                | comparacion\n    asignacion : ID push_id EQUAL push_poper expresion create_asign SEMICOLON\n    create_asign :comparacion : ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON\n    condicion : IF LPAREN expresion RPAREN cond bloque SEMICOLON condFinal\n                 | IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque SEMICOLON condFinal\n    cond :condElse :condFinal :escritura : PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON\n    quad_print :escrituraAux : expresion\n                    | CTE_STRING\n                    | expresion COMA escrituraAux\n                    | CTE_STRING COMA escrituraAux\n    expresion : exp\n                 | exp LOWERTHAN push_poper exp quad_comp\n                 | exp MORETHAN push_poper exp quad_comp\n                 | exp DIFFERENT push_poper exp quad_comp\n    quad_comp :exp : termino quad_term\n           | termino quad_term exp1\n    exp1 : PLUS push_poper exp\n            | MINUS push_poper exp\n    quad_term :quad_fact :termino : factor quad_fact\n               | factor quad_fact termino1\n    termino1 : TIMES push_poper termino\n                | DIVIDE push_poper termino\n    factor : LPAREN expresion RPAREN\n              | factorAux\n    factorAux : PLUS push_poper var_cte\n                 | MINUS push_poper var_cte\n                 | var_cte \n    push_id :push_cte :push_poper :var_cte : ID push_id\n               | CTE_I push_cte\n               | CTE_F push_cte\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,6,10,11,19,51,61,78,98,100,121,122,137,138,151,],[0,-4,-3,-2,-1,-5,-6,-22,-24,-26,-23,-28,-25,-27,-29,]),'ID':([2,13,14,15,16,17,20,21,22,23,24,30,31,32,34,37,38,39,40,41,42,43,50,55,57,62,63,64,70,72,76,79,82,83,86,87,88,91,92,101,107,108,109,111,112,114,115,119,120,125,130,131,132,133,135,139,140,149,150,152,155,156,],[3,-8,26,-13,-14,-15,29,-16,-17,-18,-19,-9,26,44,-10,44,44,-36,-37,-38,-39,-40,60,73,73,-77,-77,73,-77,-77,73,44,73,73,-77,-77,-77,73,73,44,73,73,73,-77,-77,-77,-77,-35,44,-43,73,73,73,73,-20,-41,-48,-49,-21,-44,-48,-45,]),'COLON':([3,],[4,]),'VAR':([4,32,58,80,],[7,7,7,7,]),'MAIN':([4,5,13,30,34,],[9,9,-8,-9,-10,]),'FUNCTION':([6,10,51,61,78,100,121,138,],[12,12,-5,-6,12,12,12,12,]),'INT':([7,12,30,33,81,],[15,21,15,15,15,]),'FLOAT':([7,12,30,33,81,],[16,22,16,16,16,]),'CHAR':([7,12,30,33,81,],[17,23,17,17,17,]),'LPAREN':([8,9,28,29,45,46,47,55,56,57,62,63,64,76,82,83,86,87,88,107,108,109,111,112,114,115,130,131,132,133,],[18,-7,33,-32,55,-77,57,64,76,64,-77,-77,64,64,64,64,-77,-77,-77,64,64,64,-77,-77,-77,-77,64,64,64,64,]),'VOID':([12,],[24,]),'IF':([13,30,32,34,37,38,39,40,41,42,43,79,101,119,120,125,135,139,140,149,150,152,155,156,],[-8,-9,45,-10,45,45,-36,-37,-38,-39,-40,45,45,-35,45,-43,-20,-41,-48,-49,-21,-44,-48,-45,]),'PRINT':([13,30,32,34,37,38,39,40,41,42,43,79,101,119,120,125,135,139,140,149,150,152,155,156,],[-8,-9,46,-10,46,46,-36,-37,-38,-39,-40,46,46,-35,46,-43,-20,-41,-48,-49,-21,-44,-48,-45,]),'WHILE':([13,30,32,34,37,38,39,40,41,42,43,79,101,119,120,125,135,139,140,149,150,152,155,156,],[-8,-9,47,-10,47,47,-36,-37,-38,-39,-40,47,47,-35,47,-43,-20,-41,-48,-49,-21,-44,-48,-45,]),'RPAREN':([18,33,49,60,65,66,67,68,69,71,73,74,75,77,84,89,90,93,94,95,96,102,105,110,113,116,117,127,128,129,142,143,144,145,146,147,148,],[27,48,59,-30,85,-55,-64,-65,-71,-74,-75,-76,-76,97,105,-60,-66,-78,-79,-80,118,-31,-70,-61,-67,-72,-73,-59,-59,-59,-56,-57,-58,-62,-63,-68,-69,]),'SEMICOLON':([25,26,35,66,67,68,69,71,73,74,75,89,90,93,94,95,103,104,105,110,113,116,117,118,124,126,127,128,129,134,135,142,143,144,145,146,147,148,150,154,],[30,-11,-12,-55,-64,-65,-71,-74,-75,-76,-76,-60,-66,-78,-79,-80,-42,125,-70,-61,-67,-72,-73,-50,139,140,-59,-59,-59,149,-20,-56,-57,-58,-62,-63,-68,-69,-21,155,]),'COMA':([26,60,],[31,81,]),'LBRACE':([27,48,59,85,97,106,141,153,],[32,58,80,-46,120,120,-47,120,]),'RBRACE':([36,38,39,40,41,42,43,52,53,58,80,99,119,120,123,125,135,136,139,140,149,150,152,155,156,],[51,-33,-36,-37,-38,-39,-40,61,-34,78,100,121,-35,135,138,-43,-20,150,-41,-48,-49,-21,-44,-48,-45,]),'EQUAL':([44,54,],[-75,62,]),'DOUBLEEQUAL':([44,54,],[-75,63,]),'PLUS':([55,57,62,63,64,67,68,69,71,73,74,75,76,82,83,86,87,88,89,90,93,94,95,105,107,108,109,111,112,113,114,115,116,117,130,131,132,133,147,148,],[70,70,-77,-77,70,-64,-65,-71,-74,-75,-76,-76,70,70,70,-77,-77,-77,111,-66,-78,-79,-80,-70,70,70,70,-77,-77,-67,-77,-77,-72,-73,70,70,70,70,-68,-69,]),'MINUS':([55,57,62,63,64,67,68,69,71,73,74,75,76,82,83,86,87,88,89,90,93,94,95,105,107,108,109,111,112,113,114,115,116,117,130,131,132,133,147,148,],[72,72,-77,-77,72,-64,-65,-71,-74,-75,-76,-76,72,72,72,-77,-77,-77,112,-66,-78,-79,-80,-70,72,72,72,-77,-77,-67,-77,-77,-72,-73,72,72,72,72,-68,-69,]),'CTE_I':([55,57,62,63,64,70,72,76,82,83,86,87,88,91,92,107,108,109,111,112,114,115,130,131,132,133,],[74,74,-77,-77,74,-77,-77,74,74,74,-77,-77,-77,74,74,74,74,74,-77,-77,-77,-77,74,74,74,74,]),'CTE_F':([55,57,62,63,64,70,72,76,82,83,86,87,88,91,92,107,108,109,111,112,114,115,130,131,132,133,],[75,75,-77,-77,75,-77,-77,75,75,75,-77,-77,-77,75,75,75,75,75,-77,-77,-77,-77,75,75,75,75,]),'LOWERTHAN':([66,67,68,69,71,73,74,75,89,90,93,94,95,105,110,113,116,117,145,146,147,148,],[86,-64,-65,-71,-74,-75,-76,-76,-60,-66,-78,-79,-80,-70,-61,-67,-72,-73,-62,-63,-68,-69,]),'MORETHAN':([66,67,68,69,71,73,74,75,89,90,93,94,95,105,110,113,116,117,145,146,147,148,],[87,-64,-65,-71,-74,-75,-76,-76,-60,-66,-78,-79,-80,-70,-61,-67,-72,-73,-62,-63,-68,-69,]),'DIFFERENT':([66,67,68,69,71,73,74,75,89,90,93,94,95,105,110,113,116,117,145,146,147,148,],[88,-64,-65,-71,-74,-75,-76,-76,-60,-66,-78,-79,-80,-70,-61,-67,-72,-73,-62,-63,-68,-69,]),'TIMES':([68,69,71,73,74,75,90,93,94,95,105,116,117,],[-65,-71,-74,-75,-76,-76,114,-78,-79,-80,-70,-72,-73,]),'DIVIDE':([68,69,71,73,74,75,90,93,94,95,105,116,117,],[-65,-71,-74,-75,-76,-76,115,-78,-79,-80,-70,-72,-73,]),'ELSE':([126,135,150,],[141,-20,-21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,32,58,80,],[5,37,79,101,]),'main':([4,5,],[6,10,]),'nomMain':([4,5,],[8,8,]),'function':([6,10,78,100,121,138,],[11,19,98,122,137,151,]),'varAux1':([7,30,],[13,34,]),'tipo':([7,30,33,81,],[14,14,50,50,]),'tipoFunc':([12,],[20,]),'varAux2':([14,31,],[25,35,]),'nomFunc':([20,],[28,]),'bloqueAux':([32,37,38,79,101,120,],[36,52,53,99,123,136,]),'estatuto':([32,37,38,79,101,120,],[38,38,38,38,38,38,]),'asignacion':([32,37,38,79,101,120,],[39,39,39,39,39,39,]),'condicion':([32,37,38,79,101,120,],[40,40,40,40,40,40,]),'escritura':([32,37,38,79,101,120,],[41,41,41,41,41,41,]),'while':([32,37,38,79,101,120,],[42,42,42,42,42,42,]),'comparacion':([32,37,38,79,101,120,],[43,43,43,43,43,43,]),'param':([33,81,],[49,102,]),'push_id':([44,73,],[54,93,]),'push_poper':([46,62,63,70,72,86,87,88,111,112,114,115,],[56,82,83,91,92,107,108,109,130,131,132,133,]),'expresion':([55,57,64,82,83,],[65,77,84,103,104,]),'exp':([55,57,64,76,82,83,107,108,109,130,131,],[66,66,66,96,66,66,127,128,129,145,146,]),'termino':([55,57,64,76,82,83,107,108,109,130,131,132,133,],[67,67,67,67,67,67,67,67,67,67,67,147,148,]),'factor':([55,57,64,76,82,83,107,108,109,130,131,132,133,],[68,68,68,68,68,68,68,68,68,68,68,68,68,]),'factorAux':([55,57,64,76,82,83,107,108,109,130,131,132,133,],[69,69,69,69,69,69,69,69,69,69,69,69,69,]),'var_cte':([55,57,64,76,82,83,91,92,107,108,109,130,131,132,133,],[71,71,71,71,71,71,116,117,71,71,71,71,71,71,71,]),'quad_term':([67,],[89,]),'quad_fact':([68,],[90,]),'push_cte':([74,75,],[94,95,]),'cond':([85,],[106,]),'exp1':([89,],[110,]),'termino1':([90,],[113,]),'bloque':([97,106,153,],[119,126,154,]),'create_asign':([103,],[124,]),'quad_print':([118,],[134,]),'quad_comp':([127,128,129,],[142,143,144,]),'condFinal':([140,155,],[152,156,]),'condElse':([141,],[153,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID COLON vars main function','program',6,'p_program','lexAndSyn.py',117),
  ('program -> PROGRAM ID COLON main function','program',5,'p_program','lexAndSyn.py',118),
  ('program -> PROGRAM ID COLON vars main','program',5,'p_program','lexAndSyn.py',119),
  ('program -> PROGRAM ID COLON main','program',4,'p_program','lexAndSyn.py',120),
  ('main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE','main',6,'p_main','lexAndSyn.py',126),
  ('main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE','main',7,'p_main','lexAndSyn.py',127),
  ('nomMain -> MAIN','nomMain',1,'p_nomMain','lexAndSyn.py',131),
  ('vars -> VAR varAux1','vars',2,'p_vars','lexAndSyn.py',140),
  ('varAux1 -> tipo varAux2 SEMICOLON','varAux1',3,'p_varAux1','lexAndSyn.py',144),
  ('varAux1 -> tipo varAux2 SEMICOLON varAux1','varAux1',4,'p_varAux1','lexAndSyn.py',145),
  ('varAux2 -> ID','varAux2',1,'p_varAux2','lexAndSyn.py',149),
  ('varAux2 -> ID COMA varAux2','varAux2',3,'p_varAux2','lexAndSyn.py',150),
  ('tipo -> INT','tipo',1,'p_tipo','lexAndSyn.py',168),
  ('tipo -> FLOAT','tipo',1,'p_tipo','lexAndSyn.py',169),
  ('tipo -> CHAR','tipo',1,'p_tipo','lexAndSyn.py',170),
  ('tipoFunc -> INT','tipoFunc',1,'p_tipoFunc','lexAndSyn.py',175),
  ('tipoFunc -> FLOAT','tipoFunc',1,'p_tipoFunc','lexAndSyn.py',176),
  ('tipoFunc -> CHAR','tipoFunc',1,'p_tipoFunc','lexAndSyn.py',177),
  ('tipoFunc -> VOID','tipoFunc',1,'p_tipoFunc','lexAndSyn.py',178),
  ('bloque -> LBRACE RBRACE','bloque',2,'p_bloque','lexAndSyn.py',183),
  ('bloque -> LBRACE bloqueAux RBRACE','bloque',3,'p_bloque','lexAndSyn.py',184),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE','function',7,'p_function','lexAndSyn.py',188),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE','function',9,'p_function','lexAndSyn.py',189),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function','function',8,'p_function','lexAndSyn.py',190),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function','function',10,'p_function','lexAndSyn.py',191),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE','function',8,'p_function','lexAndSyn.py',192),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE','function',10,'p_function','lexAndSyn.py',193),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function','function',9,'p_function','lexAndSyn.py',194),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function','function',11,'p_function','lexAndSyn.py',195),
  ('param -> tipo ID','param',2,'p_param','lexAndSyn.py',199),
  ('param -> tipo ID COMA param','param',4,'p_param','lexAndSyn.py',200),
  ('nomFunc -> ID','nomFunc',1,'p_nomFunc','lexAndSyn.py',205),
  ('bloqueAux -> estatuto','bloqueAux',1,'p_bloqueAux','lexAndSyn.py',214),
  ('bloqueAux -> estatuto bloqueAux','bloqueAux',2,'p_bloqueAux','lexAndSyn.py',215),
  ('while -> WHILE LPAREN expresion RPAREN bloque','while',5,'p_while','lexAndSyn.py',219),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','lexAndSyn.py',223),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','lexAndSyn.py',224),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','lexAndSyn.py',225),
  ('estatuto -> while','estatuto',1,'p_estatuto','lexAndSyn.py',226),
  ('estatuto -> comparacion','estatuto',1,'p_estatuto','lexAndSyn.py',227),
  ('asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON','asignacion',7,'p_asignacion','lexAndSyn.py',231),
  ('create_asign -> <empty>','create_asign',0,'p_create_asign','lexAndSyn.py',236),
  ('comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON','comparacion',6,'p_comparacion','lexAndSyn.py',240),
  ('condicion -> IF LPAREN expresion RPAREN cond bloque SEMICOLON condFinal','condicion',8,'p_condicion','lexAndSyn.py',244),
  ('condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque SEMICOLON condFinal','condicion',11,'p_condicion','lexAndSyn.py',245),
  ('cond -> <empty>','cond',0,'p_quad_cond','lexAndSyn.py',249),
  ('condElse -> <empty>','condElse',0,'p_quad_condElse','lexAndSyn.py',253),
  ('condFinal -> <empty>','condFinal',0,'p_quad_condFinal','lexAndSyn.py',257),
  ('escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON','escritura',7,'p_escritura','lexAndSyn.py',261),
  ('quad_print -> <empty>','quad_print',0,'p_quad_print','lexAndSyn.py',265),
  ('escrituraAux -> expresion','escrituraAux',1,'p_escrituraAux','lexAndSyn.py',269),
  ('escrituraAux -> CTE_STRING','escrituraAux',1,'p_escrituraAux','lexAndSyn.py',270),
  ('escrituraAux -> expresion COMA escrituraAux','escrituraAux',3,'p_escrituraAux','lexAndSyn.py',271),
  ('escrituraAux -> CTE_STRING COMA escrituraAux','escrituraAux',3,'p_escrituraAux','lexAndSyn.py',272),
  ('expresion -> exp','expresion',1,'p_expresion','lexAndSyn.py',276),
  ('expresion -> exp LOWERTHAN push_poper exp quad_comp','expresion',5,'p_expresion','lexAndSyn.py',277),
  ('expresion -> exp MORETHAN push_poper exp quad_comp','expresion',5,'p_expresion','lexAndSyn.py',278),
  ('expresion -> exp DIFFERENT push_poper exp quad_comp','expresion',5,'p_expresion','lexAndSyn.py',279),
  ('quad_comp -> <empty>','quad_comp',0,'p_quad_comp','lexAndSyn.py',283),
  ('exp -> termino quad_term','exp',2,'p_exp','lexAndSyn.py',287),
  ('exp -> termino quad_term exp1','exp',3,'p_exp','lexAndSyn.py',288),
  ('exp1 -> PLUS push_poper exp','exp1',3,'p_exp1','lexAndSyn.py',292),
  ('exp1 -> MINUS push_poper exp','exp1',3,'p_exp1','lexAndSyn.py',293),
  ('quad_term -> <empty>','quad_term',0,'p_quad_term','lexAndSyn.py',297),
  ('quad_fact -> <empty>','quad_fact',0,'p_quad_fact','lexAndSyn.py',301),
  ('termino -> factor quad_fact','termino',2,'p_termino','lexAndSyn.py',305),
  ('termino -> factor quad_fact termino1','termino',3,'p_termino','lexAndSyn.py',306),
  ('termino1 -> TIMES push_poper termino','termino1',3,'p_termino1','lexAndSyn.py',310),
  ('termino1 -> DIVIDE push_poper termino','termino1',3,'p_termino1','lexAndSyn.py',311),
  ('factor -> LPAREN expresion RPAREN','factor',3,'p_factor','lexAndSyn.py',315),
  ('factor -> factorAux','factor',1,'p_factor','lexAndSyn.py',316),
  ('factorAux -> PLUS push_poper var_cte','factorAux',3,'p_factorAux','lexAndSyn.py',320),
  ('factorAux -> MINUS push_poper var_cte','factorAux',3,'p_factorAux','lexAndSyn.py',321),
  ('factorAux -> var_cte','factorAux',1,'p_factorAux','lexAndSyn.py',322),
  ('push_id -> <empty>','push_id',0,'p_push_id','lexAndSyn.py',326),
  ('push_cte -> <empty>','push_cte',0,'p_push_cte','lexAndSyn.py',331),
  ('push_poper -> <empty>','push_poper',0,'p_push_poper','lexAndSyn.py',336),
  ('var_cte -> ID push_id','var_cte',2,'p_var_cte','lexAndSyn.py',341),
  ('var_cte -> CTE_I push_cte','var_cte',2,'p_var_cte','lexAndSyn.py',342),
  ('var_cte -> CTE_F push_cte','var_cte',2,'p_var_cte','lexAndSyn.py',343),
]
