
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COLON COMA CTE_F CTE_I CTE_STRING DIFFERENT DIVIDE DO DOUBLEEQUAL ELSE EQUAL FLOAT FROM FUNCTION ID IF INT LBRACE LOWERTHAN LPAREN MAIN MINUS MORETHAN OR PLUS PRINT PROGRAM RBRACE RPAREN SEMICOLON TIMES TO VAR VOID WHILEprogram : PROGRAM ID COLON varsGlobal main function\n               | PROGRAM ID COLON main function\n               | PROGRAM ID COLON varsGlobal main\n               | PROGRAM ID COLON main\n    varsGlobal : VAR varAuxGlobal1\n    varAuxGlobal1 : tipo varAuxGlobal2 SEMICOLON\n                     | tipo varAuxGlobal2 SEMICOLON varAuxGlobal1\n    varAuxGlobal2 : ID\n                     | ID COMA varAuxGlobal2\n    main : nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc\n            | nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc\n     nomMain : MAIN\n    vars : VAR varAux1\n    varAux1 : tipo varAux2 SEMICOLON\n               | tipo varAux2 SEMICOLON varAux1\n    varAux2 : ID\n            | ID COMA varAux2\n    tipo : INT\n            | FLOAT\n            | CHAR\n    tipoFunc : INT\n            | FLOAT\n            | CHAR\n            | VOID\n    bloque : LBRACE RBRACE\n              | LBRACE bloqueAux RBRACE\n    function : FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc\n              | FUNCTION tipoFunc nomFunc LPAREN  RPAREN LBRACE vars bloqueAux RBRACE endProc\n              | FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function \n              | FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function\n              | FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc\n              | FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc\n              | FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function\n              | FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function\n    endProc :\n    param : tipo ID \n             | tipo ID COMA param\n             | empty\n    empty : \n    push_function :nomFunc : ID push_function\n    bloqueAux : estatuto\n                 | estatuto bloqueAux\n    while : WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3\n    while1 :while2 :while3 :loopFromDo : FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE\n    estatuto : asignacion\n                | condicion\n                | escritura\n                | while\n                | loopFromDo\n                | comparacion\n                | llamadaAFuncion\n    llamadaAFuncion : ID generarEra LPAREN paramFuncion gosub RPAREN expresion\n                        | ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON\n    gosub :\n    generarEra :\n    paramFuncion : ID  push_id2\n                     | ID push_id2 COMA paramFuncion\n                     | expresion\n                     | expresion COMA paramFuncion\n                     | empty\n    push_id2 :asignacion : ID push_id EQUAL push_poper expresion create_asign SEMICOLON\n    create_asign :comparacion : ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON\n    condicion : IF LPAREN expresion RPAREN cond bloque condFinal\n                 | IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal\n    cond :condElse :condFinal :escritura : PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON\n    quad_print :escrituraAux : expresion\n                    | CTE_STRING\n                    | expresion COMA escrituraAux\n                    | CTE_STRING COMA escrituraAux\n                    | llamadaAFuncion\n    expresion : exp\n                 | exp comp exp quad_comp\n    comp : LOWERTHAN push_poper\n            | MORETHAN push_poper\n            | DIFFERENT push_poper\n            | DOUBLEEQUAL push_poper\n    quad_comp :exp : termino quad_term\n           | termino quad_term exp1\n    exp1 : PLUS push_poper exp\n            | MINUS push_poper exp\n    quad_term :quad_fact :termino : factor quad_fact\n               | factor quad_fact termino1\n    termino1 : TIMES push_poper termino\n                | DIVIDE push_poper termino\n    factor : LPAREN expresion RPAREN\n              | factorAux\n    factorAux : PLUS push_poper var_cte\n                 | MINUS push_poper var_cte\n                 | var_cte \n    push_id :push_cte :push_poper :var_cte : ID push_id\n               | CTE_I push_cte\n               | CTE_F push_cte\n               | CTE_STRING push_cte\n    '
    
_lr_action_items = {'CTE_STRING':([56,69,72,73,78,85,86,87,89,101,102,110,111,112,113,114,117,118,123,129,130,133,134,137,139,142,143,144,146,153,164,165,166,167,173,174,202,],[76,95,-105,-105,76,-105,-105,76,76,76,76,-105,-105,-105,76,-105,76,76,76,95,95,-105,-105,-105,-105,-85,-86,-83,-84,76,76,76,76,76,76,76,76,]),'DO':([211,],[213,]),'VOID':([18,],[24,]),'EQUAL':([39,59,88,],[-103,86,123,]),'CHAR':([8,18,29,38,51,115,128,],[15,26,15,15,15,15,15,]),'VAR':([4,28,91,127,],[8,38,38,38,]),'WHILE':([28,33,35,37,40,41,43,46,47,48,58,70,71,74,75,76,77,79,81,82,100,103,104,105,106,108,115,126,132,135,136,138,140,145,147,159,168,169,170,171,182,183,184,185,186,187,189,191,192,193,196,200,206,208,210,212,214,216,],[44,44,44,-50,-53,-55,-49,-52,-54,-51,-13,-102,-92,-93,-104,-104,-104,-103,-81,-99,-88,-94,-108,-109,-107,-106,-14,44,-89,-101,-100,-95,-98,-87,-15,44,44,-73,-82,-68,-74,-90,-91,-97,-96,-25,-69,-66,-57,-56,44,-26,-73,-47,-70,-44,44,-48,]),'PROGRAM':([0,],[2,]),'PRINT':([28,33,35,37,40,41,43,46,47,48,58,70,71,74,75,76,77,79,81,82,100,103,104,105,106,108,115,126,132,135,136,138,140,145,147,159,168,169,170,171,182,183,184,185,186,187,189,191,192,193,196,200,206,208,210,212,214,216,],[34,34,34,-50,-53,-55,-49,-52,-54,-51,-13,-102,-92,-93,-104,-104,-104,-103,-81,-99,-88,-94,-108,-109,-107,-106,-14,34,-89,-101,-100,-95,-98,-87,-15,34,34,-73,-82,-68,-74,-90,-91,-97,-96,-25,-69,-66,-57,-56,34,-26,-73,-47,-70,-44,34,-48,]),'MORETHAN':([70,71,74,75,76,77,79,81,82,95,97,100,103,104,105,106,108,121,132,135,136,138,140,183,184,185,186,],[-102,-92,-93,-104,-104,-104,-103,114,-99,-104,-103,-88,-94,-108,-109,-107,-106,-103,-89,-101,-100,-95,-98,-90,-91,-97,-96,]),'MINUS':([56,69,70,71,74,75,76,77,78,79,82,85,86,87,89,95,97,100,103,104,105,106,108,110,111,112,113,114,117,118,121,123,129,130,133,134,135,136,137,138,139,140,142,143,144,146,153,164,165,166,167,173,174,185,186,202,],[72,72,-102,-92,-93,-104,-104,-104,72,-103,-99,-105,-105,72,72,-104,-103,134,-94,-108,-109,-107,-106,-105,-105,-105,72,-105,72,72,-103,72,72,72,-105,-105,-101,-100,-105,-95,-105,-98,-85,-86,-83,-84,72,72,72,72,72,72,72,-97,-96,72,]),'DIVIDE':([70,74,75,76,77,79,82,95,97,103,104,105,106,108,121,135,136,140,],[-102,-93,-104,-104,-104,-103,-99,-104,-103,137,-108,-109,-107,-106,-103,-101,-100,-98,]),'RPAREN':([11,51,65,66,70,71,74,75,76,77,79,80,81,82,87,93,95,96,97,98,99,100,103,104,105,106,107,108,119,120,121,122,124,128,132,135,136,138,140,145,151,152,153,154,160,161,162,170,174,175,183,184,185,186,192,193,194,207,],[20,64,92,-38,-102,-92,-93,-104,-104,-104,-103,109,-81,-99,-39,-36,-77,-76,-103,131,-80,-88,-94,-108,-109,-107,140,-106,-58,-64,-65,-62,155,-39,-89,-101,-100,-95,-98,-87,173,-60,-39,176,-37,-79,-78,-82,-39,-63,-90,-91,-97,-96,-57,-56,-61,211,]),'SEMICOLON':([21,22,50,70,71,74,75,76,77,79,81,82,83,84,100,103,104,105,106,108,131,132,135,136,138,140,145,148,149,150,163,170,172,173,183,184,185,186,],[29,-8,-9,-102,-92,-93,-104,-104,-104,-103,-81,-99,115,-16,-88,-94,-108,-109,-107,-106,-75,-89,-101,-100,-95,-98,-87,-17,171,-67,182,-82,191,192,-90,-91,-97,-96,]),'LOWERTHAN':([70,71,74,75,76,77,79,81,82,95,97,100,103,104,105,106,108,121,132,135,136,138,140,183,184,185,186,],[-102,-92,-93,-104,-104,-104,-103,112,-99,-104,-103,-88,-94,-108,-109,-107,-106,-103,-89,-101,-100,-95,-98,-90,-91,-97,-96,]),'TO':([176,],[195,]),'COLON':([3,],[4,]),'CTE_I':([56,69,72,73,78,85,86,87,89,101,102,110,111,112,113,114,117,118,123,129,130,133,134,137,139,142,143,144,146,153,164,165,166,167,173,174,202,],[77,77,-105,-105,77,-105,-105,77,77,77,77,-105,-105,-105,77,-105,77,77,77,77,77,-105,-105,-105,-105,-85,-86,-83,-84,77,77,77,77,77,77,77,77,]),'CTE_F':([56,69,72,73,78,85,86,87,89,101,102,110,111,112,113,114,117,118,123,129,130,133,134,137,139,142,143,144,146,153,164,165,166,167,173,174,202,],[75,75,-105,-105,75,-105,-105,75,75,75,75,-105,-105,-105,75,-105,75,75,75,75,75,-105,-105,-105,-105,-85,-86,-83,-84,75,75,75,75,75,75,75,75,]),'PLUS':([56,69,70,71,74,75,76,77,78,79,82,85,86,87,89,95,97,100,103,104,105,106,108,110,111,112,113,114,117,118,121,123,129,130,133,134,135,136,137,138,139,140,142,143,144,146,153,164,165,166,167,173,174,185,186,202,],[73,73,-102,-92,-93,-104,-104,-104,73,-103,-99,-105,-105,73,73,-104,-103,133,-94,-108,-109,-107,-106,-105,-105,-105,73,-105,73,73,-103,73,73,73,-105,-105,-101,-100,-105,-95,-105,-98,-85,-86,-83,-84,73,73,73,73,73,73,73,-97,-96,73,]),'$end':([1,9,10,17,19,63,68,90,94,125,156,158,178,179,180,197,198,199,204,205,209,],[0,-4,-3,-2,-1,-35,-35,-10,-11,-35,-27,-35,-29,-35,-31,-28,-33,-35,-30,-32,-34,]),'FUNCTION':([9,10,63,68,90,94,125,156,158,179,180,197,199,205,],[18,18,-35,-35,-10,-11,-35,18,-35,-35,18,18,-35,18,]),'DIFFERENT':([70,71,74,75,76,77,79,81,82,95,97,100,103,104,105,106,108,121,132,135,136,138,140,183,184,185,186,],[-102,-92,-93,-104,-104,-104,-103,110,-99,-104,-103,-88,-94,-108,-109,-107,-106,-103,-89,-101,-100,-95,-98,-90,-91,-97,-96,]),'RBRACE':([35,37,40,41,43,45,46,47,48,53,55,70,71,74,75,76,77,79,81,82,91,100,103,104,105,106,108,127,132,135,136,138,140,145,157,168,169,170,171,181,182,183,184,185,186,187,188,189,191,192,193,200,203,206,208,210,212,215,216,],[-42,-50,-53,-55,-49,63,-52,-54,-51,68,-43,-102,-92,-93,-104,-104,-104,-103,-81,-99,125,-88,-94,-108,-109,-107,-106,158,-89,-101,-100,-95,-98,-87,179,187,-73,-82,-68,199,-74,-90,-91,-97,-96,-25,200,-69,-66,-57,-56,-26,208,-73,-47,-70,-44,216,-48,]),'DOUBLEEQUAL':([39,59,70,71,74,75,76,77,79,81,82,95,97,100,103,104,105,106,108,121,132,135,136,138,140,183,184,185,186,],[-103,85,-102,-92,-93,-104,-104,-104,-103,111,-99,-104,-103,-88,-94,-108,-109,-107,-106,-103,-89,-101,-100,-95,-98,-90,-91,-97,-96,]),'TIMES':([70,74,75,76,77,79,82,95,97,103,104,105,106,108,121,135,136,140,],[-102,-93,-104,-104,-104,-103,-99,-104,-103,139,-108,-109,-107,-106,-103,-101,-100,-98,]),'LPAREN':([6,7,31,32,34,36,39,42,44,52,54,56,60,62,69,78,85,86,87,89,97,110,111,112,113,114,117,118,123,129,130,133,134,137,139,142,143,144,146,153,164,165,166,167,173,174,195,202,],[-12,11,51,-40,-105,56,-59,61,-45,-41,69,78,87,89,78,78,-105,-105,78,78,-59,-105,-105,-105,78,-105,78,78,78,78,78,-105,-105,-105,-105,-85,-86,-83,-84,78,78,78,78,78,78,78,202,78,]),'COMA':([22,70,71,74,75,76,77,79,81,82,84,93,95,96,97,100,103,104,105,106,108,121,122,132,135,136,138,140,145,152,170,183,184,185,186,],[30,-102,-92,-93,-104,-104,-104,-103,-81,-99,116,128,129,130,-103,-88,-94,-108,-109,-107,-106,-65,153,-89,-101,-100,-95,-98,-87,174,-82,-90,-91,-97,-96,]),'ELSE':([169,187,200,],[190,-25,-26,]),'ID':([2,12,13,14,15,23,24,25,26,27,28,30,33,35,37,40,41,43,46,47,48,56,57,58,61,67,69,70,71,72,73,74,75,76,77,78,79,81,82,85,86,87,89,100,101,102,103,104,105,106,108,110,111,112,113,114,115,116,117,118,123,126,129,130,132,133,134,135,136,137,138,139,140,142,143,144,145,146,147,153,159,164,165,166,167,168,169,170,171,173,174,182,183,184,185,186,187,189,191,192,193,196,200,202,206,208,210,212,214,216,],[3,22,-18,-19,-20,-21,-24,-22,-23,32,39,22,39,39,-50,-53,-55,-49,-52,-54,-51,79,84,-13,88,93,97,-102,-92,-105,-105,-93,-104,-104,-104,79,-103,-81,-99,-105,-105,121,79,-88,79,79,-94,-108,-109,-107,-106,-105,-105,-105,79,-105,-14,84,79,79,79,39,97,97,-89,-105,-105,-101,-100,-105,-95,-105,-98,-85,-86,-83,-87,-84,-15,121,39,79,79,79,79,39,-73,-82,-68,79,121,-74,-90,-91,-97,-96,-25,-69,-66,-57,-56,39,-26,79,-73,-47,-70,-44,39,-48,]),'IF':([28,33,35,37,40,41,43,46,47,48,58,70,71,74,75,76,77,79,81,82,100,103,104,105,106,108,115,126,132,135,136,138,140,145,147,159,168,169,170,171,182,183,184,185,186,187,189,191,192,193,196,200,206,208,210,212,214,216,],[36,36,36,-50,-53,-55,-49,-52,-54,-51,-13,-102,-92,-93,-104,-104,-104,-103,-81,-99,-88,-94,-108,-109,-107,-106,-14,36,-89,-101,-100,-95,-98,-87,-15,36,36,-73,-82,-68,-74,-90,-91,-97,-96,-25,-69,-66,-57,-56,36,-26,-73,-47,-70,-44,36,-48,]),'LBRACE':([20,64,92,109,141,155,177,190,201,213,],[28,91,127,-71,168,-46,196,-72,168,214,]),'FROM':([28,33,35,37,40,41,43,46,47,48,58,70,71,74,75,76,77,79,81,82,100,103,104,105,106,108,115,126,132,135,136,138,140,145,147,159,168,169,170,171,182,183,184,185,186,187,189,191,192,193,196,200,206,208,210,212,214,216,],[42,42,42,-50,-53,-55,-49,-52,-54,-51,-13,-102,-92,-93,-104,-104,-104,-103,-81,-99,-88,-94,-108,-109,-107,-106,-14,42,-89,-101,-100,-95,-98,-87,-15,42,42,-73,-82,-68,-74,-90,-91,-97,-96,-25,-69,-66,-57,-56,42,-26,-73,-47,-70,-44,42,-48,]),'INT':([8,18,29,38,51,115,128,],[13,23,13,13,13,13,13,]),'FLOAT':([8,18,29,38,51,115,128,],[14,25,14,14,14,14,14,]),'MAIN':([4,5,16,29,49,],[6,6,-5,-6,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'quad_fact':([74,],[103,]),'vars':([28,91,127,],[33,126,159,]),'condFinal':([169,206,],[189,210,]),'paramFuncion':([87,153,174,],[119,175,194,]),'push_function':([32,],[52,]),'endProc':([63,68,125,158,179,199,],[90,94,156,180,197,205,]),'var_cte':([56,69,78,87,89,101,102,113,117,118,123,129,130,153,164,165,166,167,173,174,202,],[70,70,70,70,70,135,136,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'while3':([208,],[212,]),'while2':([155,],[177,]),'nomMain':([4,5,],[7,7,]),'cond':([109,],[141,]),'termino':([56,69,78,87,89,113,117,118,123,129,130,153,164,165,166,167,173,174,202,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,185,186,71,71,71,]),'create_asign':([150,],[172,]),'tipoFunc':([18,],[27,]),'bloque':([141,201,],[169,206,]),'push_id':([39,79,97,121,],[59,108,108,108,]),'quad_print':([131,],[163,]),'varsGlobal':([4,],[5,]),'tipo':([8,29,38,51,115,128,],[12,12,57,67,57,67,]),'exp1':([100,],[132,]),'estatuto':([28,33,35,126,159,168,196,214,],[35,35,35,35,35,35,35,35,]),'param':([51,128,],[65,160,]),'varAux2':([57,116,],[83,148,]),'varAuxGlobal2':([12,30,],[21,50,]),'varAuxGlobal1':([8,29,],[16,49,]),'condicion':([28,33,35,126,159,168,196,214,],[37,37,37,37,37,37,37,37,]),'varAux1':([38,115,],[58,147,]),'factor':([56,69,78,87,89,113,117,118,123,129,130,153,164,165,166,167,173,174,202,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'main':([4,5,],[9,10,]),'empty':([51,87,128,153,174,],[66,120,66,120,120,]),'function':([9,10,156,180,197,205,],[17,19,178,198,204,209,]),'escrituraAux':([69,129,130,],[98,161,162,]),'push_poper':([34,72,73,85,86,110,111,112,114,133,134,137,139,],[54,101,102,117,118,142,143,144,146,164,165,166,167,]),'comp':([81,],[113,]),'condElse':([190,],[201,]),'quad_term':([71,],[100,]),'push_cte':([75,76,77,95,],[104,105,106,105,]),'quad_comp':([145,],[170,]),'generarEra':([39,97,],[60,60,]),'loopFromDo':([28,33,35,126,159,168,196,214,],[40,40,40,40,40,40,40,40,]),'expresion':([56,69,78,87,89,117,118,123,129,130,153,173,174,202,],[80,96,107,122,124,149,150,154,96,96,122,193,122,207,]),'gosub':([119,],[151,]),'llamadaAFuncion':([28,33,35,69,126,129,130,159,168,196,214,],[41,41,41,99,41,99,99,41,41,41,41,]),'asignacion':([28,33,35,126,159,168,196,214,],[43,43,43,43,43,43,43,43,]),'while1':([44,],[62,]),'push_id2':([121,],[152,]),'bloqueAux':([28,33,35,126,159,168,196,214,],[45,53,55,157,181,188,203,215,]),'while':([28,33,35,126,159,168,196,214,],[46,46,46,46,46,46,46,46,]),'termino1':([103,],[138,]),'exp':([56,69,78,87,89,113,117,118,123,129,130,153,164,165,173,174,202,],[81,81,81,81,81,145,81,81,81,81,81,81,183,184,81,81,81,]),'nomFunc':([27,],[31,]),'factorAux':([56,69,78,87,89,113,117,118,123,129,130,153,164,165,166,167,173,174,202,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'comparacion':([28,33,35,126,159,168,196,214,],[47,47,47,47,47,47,47,47,]),'escritura':([28,33,35,126,159,168,196,214,],[48,48,48,48,48,48,48,48,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID COLON varsGlobal main function','program',6,'p_program','lexAndSyn.py',123),
  ('program -> PROGRAM ID COLON main function','program',5,'p_program','lexAndSyn.py',124),
  ('program -> PROGRAM ID COLON varsGlobal main','program',5,'p_program','lexAndSyn.py',125),
  ('program -> PROGRAM ID COLON main','program',4,'p_program','lexAndSyn.py',126),
  ('varsGlobal -> VAR varAuxGlobal1','varsGlobal',2,'p_varsGlobal','lexAndSyn.py',132),
  ('varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON','varAuxGlobal1',3,'p_varAuxGlobal1','lexAndSyn.py',136),
  ('varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1','varAuxGlobal1',4,'p_varAuxGlobal1','lexAndSyn.py',137),
  ('varAuxGlobal2 -> ID','varAuxGlobal2',1,'p_varAuxGlobal2','lexAndSyn.py',141),
  ('varAuxGlobal2 -> ID COMA varAuxGlobal2','varAuxGlobal2',3,'p_varAuxGlobal2','lexAndSyn.py',142),
  ('main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc','main',7,'p_main','lexAndSyn.py',150),
  ('main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc','main',8,'p_main','lexAndSyn.py',151),
  ('nomMain -> MAIN','nomMain',1,'p_nomMain','lexAndSyn.py',155),
  ('vars -> VAR varAux1','vars',2,'p_vars','lexAndSyn.py',164),
  ('varAux1 -> tipo varAux2 SEMICOLON','varAux1',3,'p_varAux1','lexAndSyn.py',168),
  ('varAux1 -> tipo varAux2 SEMICOLON varAux1','varAux1',4,'p_varAux1','lexAndSyn.py',169),
  ('varAux2 -> ID','varAux2',1,'p_varAux2','lexAndSyn.py',173),
  ('varAux2 -> ID COMA varAux2','varAux2',3,'p_varAux2','lexAndSyn.py',174),
  ('tipo -> INT','tipo',1,'p_tipo','lexAndSyn.py',191),
  ('tipo -> FLOAT','tipo',1,'p_tipo','lexAndSyn.py',192),
  ('tipo -> CHAR','tipo',1,'p_tipo','lexAndSyn.py',193),
  ('tipoFunc -> INT','tipoFunc',1,'p_tipoFunc','lexAndSyn.py',198),
  ('tipoFunc -> FLOAT','tipoFunc',1,'p_tipoFunc','lexAndSyn.py',199),
  ('tipoFunc -> CHAR','tipoFunc',1,'p_tipoFunc','lexAndSyn.py',200),
  ('tipoFunc -> VOID','tipoFunc',1,'p_tipoFunc','lexAndSyn.py',201),
  ('bloque -> LBRACE RBRACE','bloque',2,'p_bloque','lexAndSyn.py',206),
  ('bloque -> LBRACE bloqueAux RBRACE','bloque',3,'p_bloque','lexAndSyn.py',207),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc','function',8,'p_function','lexAndSyn.py',211),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc','function',10,'p_function','lexAndSyn.py',212),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function','function',9,'p_function','lexAndSyn.py',213),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function','function',11,'p_function','lexAndSyn.py',214),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc','function',9,'p_function','lexAndSyn.py',215),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc','function',11,'p_function','lexAndSyn.py',216),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function','function',10,'p_function','lexAndSyn.py',217),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function','function',12,'p_function','lexAndSyn.py',218),
  ('endProc -> <empty>','endProc',0,'p_endProc','lexAndSyn.py',222),
  ('param -> tipo ID','param',2,'p_param','lexAndSyn.py',227),
  ('param -> tipo ID COMA param','param',4,'p_param','lexAndSyn.py',228),
  ('param -> empty','param',1,'p_param','lexAndSyn.py',229),
  ('empty -> <empty>','empty',0,'p_empty','lexAndSyn.py',233),
  ('push_function -> <empty>','push_function',0,'p_push_function','lexAndSyn.py',237),
  ('nomFunc -> ID push_function','nomFunc',2,'p_nomFunc','lexAndSyn.py',245),
  ('bloqueAux -> estatuto','bloqueAux',1,'p_bloqueAux','lexAndSyn.py',254),
  ('bloqueAux -> estatuto bloqueAux','bloqueAux',2,'p_bloqueAux','lexAndSyn.py',255),
  ('while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3','while',10,'p_while','lexAndSyn.py',259),
  ('while1 -> <empty>','while1',0,'p_while1','lexAndSyn.py',263),
  ('while2 -> <empty>','while2',0,'p_while2','lexAndSyn.py',267),
  ('while3 -> <empty>','while3',0,'p_while3','lexAndSyn.py',271),
  ('loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE','loopFromDo',14,'p_loopFromDo','lexAndSyn.py',275),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','lexAndSyn.py',287),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','lexAndSyn.py',288),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','lexAndSyn.py',289),
  ('estatuto -> while','estatuto',1,'p_estatuto','lexAndSyn.py',290),
  ('estatuto -> loopFromDo','estatuto',1,'p_estatuto','lexAndSyn.py',291),
  ('estatuto -> comparacion','estatuto',1,'p_estatuto','lexAndSyn.py',292),
  ('estatuto -> llamadaAFuncion','estatuto',1,'p_estatuto','lexAndSyn.py',293),
  ('llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN expresion','llamadaAFuncion',7,'p_llamadaAFuncion','lexAndSyn.py',296),
  ('llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON','llamadaAFuncion',7,'p_llamadaAFuncion','lexAndSyn.py',297),
  ('gosub -> <empty>','gosub',0,'p_gosub','lexAndSyn.py',301),
  ('generarEra -> <empty>','generarEra',0,'p_generarEra','lexAndSyn.py',311),
  ('paramFuncion -> ID push_id2','paramFuncion',2,'p_paramFuncion','lexAndSyn.py',316),
  ('paramFuncion -> ID push_id2 COMA paramFuncion','paramFuncion',4,'p_paramFuncion','lexAndSyn.py',317),
  ('paramFuncion -> expresion','paramFuncion',1,'p_paramFuncion','lexAndSyn.py',318),
  ('paramFuncion -> expresion COMA paramFuncion','paramFuncion',3,'p_paramFuncion','lexAndSyn.py',319),
  ('paramFuncion -> empty','paramFuncion',1,'p_paramFuncion','lexAndSyn.py',320),
  ('push_id2 -> <empty>','push_id2',0,'p_push_id2','lexAndSyn.py',325),
  ('asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON','asignacion',7,'p_asignacion','lexAndSyn.py',329),
  ('create_asign -> <empty>','create_asign',0,'p_create_asign','lexAndSyn.py',333),
  ('comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON','comparacion',6,'p_comparacion','lexAndSyn.py',339),
  ('condicion -> IF LPAREN expresion RPAREN cond bloque condFinal','condicion',7,'p_condicion','lexAndSyn.py',343),
  ('condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal','condicion',10,'p_condicion','lexAndSyn.py',344),
  ('cond -> <empty>','cond',0,'p_quad_cond','lexAndSyn.py',348),
  ('condElse -> <empty>','condElse',0,'p_quad_condElse','lexAndSyn.py',352),
  ('condFinal -> <empty>','condFinal',0,'p_quad_condFinal','lexAndSyn.py',356),
  ('escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON','escritura',7,'p_escritura','lexAndSyn.py',360),
  ('quad_print -> <empty>','quad_print',0,'p_quad_print','lexAndSyn.py',364),
  ('escrituraAux -> expresion','escrituraAux',1,'p_escrituraAux','lexAndSyn.py',368),
  ('escrituraAux -> CTE_STRING','escrituraAux',1,'p_escrituraAux','lexAndSyn.py',369),
  ('escrituraAux -> expresion COMA escrituraAux','escrituraAux',3,'p_escrituraAux','lexAndSyn.py',370),
  ('escrituraAux -> CTE_STRING COMA escrituraAux','escrituraAux',3,'p_escrituraAux','lexAndSyn.py',371),
  ('escrituraAux -> llamadaAFuncion','escrituraAux',1,'p_escrituraAux','lexAndSyn.py',372),
  ('expresion -> exp','expresion',1,'p_expresion','lexAndSyn.py',376),
  ('expresion -> exp comp exp quad_comp','expresion',4,'p_expresion','lexAndSyn.py',377),
  ('comp -> LOWERTHAN push_poper','comp',2,'p_comp','lexAndSyn.py',381),
  ('comp -> MORETHAN push_poper','comp',2,'p_comp','lexAndSyn.py',382),
  ('comp -> DIFFERENT push_poper','comp',2,'p_comp','lexAndSyn.py',383),
  ('comp -> DOUBLEEQUAL push_poper','comp',2,'p_comp','lexAndSyn.py',384),
  ('quad_comp -> <empty>','quad_comp',0,'p_quad_comp','lexAndSyn.py',388),
  ('exp -> termino quad_term','exp',2,'p_exp','lexAndSyn.py',392),
  ('exp -> termino quad_term exp1','exp',3,'p_exp','lexAndSyn.py',393),
  ('exp1 -> PLUS push_poper exp','exp1',3,'p_exp1','lexAndSyn.py',397),
  ('exp1 -> MINUS push_poper exp','exp1',3,'p_exp1','lexAndSyn.py',398),
  ('quad_term -> <empty>','quad_term',0,'p_quad_term','lexAndSyn.py',402),
  ('quad_fact -> <empty>','quad_fact',0,'p_quad_fact','lexAndSyn.py',406),
  ('termino -> factor quad_fact','termino',2,'p_termino','lexAndSyn.py',410),
  ('termino -> factor quad_fact termino1','termino',3,'p_termino','lexAndSyn.py',411),
  ('termino1 -> TIMES push_poper termino','termino1',3,'p_termino1','lexAndSyn.py',415),
  ('termino1 -> DIVIDE push_poper termino','termino1',3,'p_termino1','lexAndSyn.py',416),
  ('factor -> LPAREN expresion RPAREN','factor',3,'p_factor','lexAndSyn.py',420),
  ('factor -> factorAux','factor',1,'p_factor','lexAndSyn.py',421),
  ('factorAux -> PLUS push_poper var_cte','factorAux',3,'p_factorAux','lexAndSyn.py',425),
  ('factorAux -> MINUS push_poper var_cte','factorAux',3,'p_factorAux','lexAndSyn.py',426),
  ('factorAux -> var_cte','factorAux',1,'p_factorAux','lexAndSyn.py',427),
  ('push_id -> <empty>','push_id',0,'p_push_id','lexAndSyn.py',431),
  ('push_cte -> <empty>','push_cte',0,'p_push_cte','lexAndSyn.py',435),
  ('push_poper -> <empty>','push_poper',0,'p_push_poper','lexAndSyn.py',445),
  ('var_cte -> ID push_id','var_cte',2,'p_var_cte','lexAndSyn.py',449),
  ('var_cte -> CTE_I push_cte','var_cte',2,'p_var_cte','lexAndSyn.py',450),
  ('var_cte -> CTE_F push_cte','var_cte',2,'p_var_cte','lexAndSyn.py',451),
  ('var_cte -> CTE_STRING push_cte','var_cte',2,'p_var_cte','lexAndSyn.py',452),
]
