
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COLON COMA CTE_F CTE_I CTE_STRING DIFFERENT DIVIDE DOUBLEEQUAL ELSE EQUAL FLOAT FOR FUNCTION ID IF INT LBRACE LOWERTHAN LPAREN MAIN MINUS MORETHAN OR PLUS PRINT PROGRAM RBRACE RPAREN SEMICOLON TIMES VAR VOID WHILEprogram : PROGRAM ID COLON vars main function\n               | PROGRAM ID COLON main function\n               | PROGRAM ID COLON vars main\n               | PROGRAM ID COLON main\n    main : nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE\n            | nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE\n     nomMain : MAIN\n    vars : VAR varAux1\n    varAux1 : tipo varAux2 SEMICOLON\n               | tipo varAux2 SEMICOLON varAux1\n    varAux2 : ID\n            | ID COMA varAux2\n    tipo : INT\n            | FLOAT\n            | CHAR\n    tipoFunc : INT\n            | FLOAT\n            | CHAR\n            | VOID\n    bloque : LBRACE RBRACE\n              | LBRACE bloqueAux RBRACE\n    function : FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE\n              | FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE\n              | FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function\n              | FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function\n              | FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE\n              | FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE\n              | FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function\n              | FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function\n    param : tipo ID\n             | tipo ID COMA param\n    nomFunc : ID\n    bloqueAux : estatuto\n                 | estatuto bloqueAux\n    while : WHILE LPAREN expresion RPAREN bloque\n    estatuto : asignacion\n                | condicion\n                | escritura\n                | while\n                | comparacion\n    asignacion : ID EQUAL expresion SEMICOLON\n    comparacion : ID DOUBLEEQUAL expresion SEMICOLON\n    condicion : IF LPAREN expresion RPAREN bloque SEMICOLON\n                 | IF LPAREN expresion RPAREN bloque ELSE bloque SEMICOLON\n    escritura : PRINT LPAREN escrituraAux RPAREN SEMICOLON\n    escrituraAux : expresion\n                    | CTE_STRING\n                    | expresion COMA escrituraAux\n                    | CTE_STRING COMA escrituraAux\n    expresion : exp\n                 | exp LOWERTHAN exp\n                 | exp MORETHAN exp\n                 | exp DIFFERENT exp\n    exp : termino\n           | termino PLUS exp\n           | termino MINUS exp\n    termino : factor\n               | factor TIMES termino\n               | factor DIVIDE termino\n    factor : LPAREN expresion RPAREN\n              | factorAux\n    factorAux : PLUS var_cte\n                 | MINUS var_cte\n                 | var_cte\n    var_cte : ID\n               | CTE_I\n               | CTE_F\n    '
    
_lr_action_items = {'CTE_STRING':([49,85,86,],[66,66,66,]),'VOID':([18,],[24,]),'EQUAL':([37,],[52,]),'CHAR':([8,18,29,47,101,],[12,26,12,12,12,]),'VAR':([4,28,78,100,],[8,8,8,8,]),'WHILE':([16,28,29,33,35,36,39,42,43,44,45,94,95,99,109,113,115,119,121,123,128,132,],[-8,40,-9,40,40,-37,-36,-39,-40,-38,-10,-42,-41,40,-45,40,-35,40,-20,-43,-21,-44,]),'PROGRAM':([0,],[2,]),'PRINT':([16,28,29,33,35,36,39,42,43,44,45,94,95,99,109,113,115,119,121,123,128,132,],[-8,34,-9,34,34,-37,-36,-39,-40,-38,-10,-42,-41,34,-45,34,-35,34,-20,-43,-21,-44,]),'MORETHAN':([60,61,64,65,68,70,72,73,83,84,102,103,106,107,108,],[-64,-54,-66,-67,-57,-65,91,-61,-63,-62,-55,-56,-59,-58,-60,]),'MINUS':([49,51,52,53,54,60,61,64,65,68,69,70,73,81,82,83,84,85,86,87,88,91,92,93,106,107,108,],[62,62,62,62,62,-64,82,-66,-67,-57,62,-65,-61,62,62,-63,-62,62,62,62,62,62,62,62,-59,-58,-60,]),'DIVIDE':([60,64,65,68,70,73,83,84,108,],[-64,-66,-67,87,-65,-61,-63,-62,-60,]),'RPAREN':([11,47,57,60,61,64,65,66,67,68,70,71,72,73,76,77,80,83,84,89,102,103,104,105,106,107,108,110,111,112,120,],[20,56,79,-64,-54,-66,-67,-47,-46,-57,-65,90,-50,-61,96,97,-30,-63,-62,108,-55,-56,-49,-48,-59,-58,-60,-52,-53,-51,-31,]),'SEMICOLON':([21,22,46,60,61,64,65,68,70,72,73,74,75,83,84,90,102,103,106,107,108,110,111,112,114,121,128,129,],[29,-11,-12,-64,-54,-66,-67,-57,-65,-50,-61,94,95,-63,-62,109,-55,-56,-59,-58,-60,-52,-53,-51,123,-20,-21,132,]),'LOWERTHAN':([60,61,64,65,68,70,72,73,83,84,102,103,106,107,108,],[-64,-54,-66,-67,-57,-65,93,-61,-63,-62,-55,-56,-59,-58,-60,]),'COLON':([3,],[4,]),'CTE_I':([49,51,52,53,54,62,63,69,81,82,85,86,87,88,91,92,93,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'CTE_F':([49,51,52,53,54,62,63,69,81,82,85,86,87,88,91,92,93,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'PLUS':([49,51,52,53,54,60,61,64,65,68,69,70,73,81,82,83,84,85,86,87,88,91,92,93,106,107,108,],[63,63,63,63,63,-64,81,-66,-67,-57,63,-65,-61,63,63,-63,-62,63,63,63,63,63,63,63,-59,-58,-60,]),'$end':([1,9,10,17,19,55,59,98,116,118,125,126,130,131,133,],[0,-4,-3,-2,-1,-5,-6,-22,-24,-26,-23,-28,-25,-27,-29,]),'FUNCTION':([9,10,55,59,98,118,125,131,],[18,18,-5,-6,18,18,18,18,]),'DIFFERENT':([60,61,64,65,68,70,72,73,83,84,102,103,106,107,108,],[-64,-54,-66,-67,-57,-65,92,-61,-63,-62,-55,-56,-59,-58,-60,]),'RBRACE':([35,36,39,41,42,43,44,48,50,78,94,95,100,109,113,115,117,121,122,123,127,128,132,],[-33,-37,-36,55,-39,-40,-38,59,-34,98,-42,-41,118,-45,121,-35,125,-20,128,-43,131,-21,-44,]),'DOUBLEEQUAL':([37,],[51,]),'TIMES':([60,64,65,68,70,73,83,84,108,],[-64,-66,-67,88,-65,-61,-63,-62,-60,]),'LPAREN':([6,7,31,32,34,38,40,49,51,52,53,54,69,81,82,85,86,87,88,91,92,93,],[-7,11,47,-32,49,53,54,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'COMA':([22,60,61,64,65,66,67,68,70,72,73,80,83,84,102,103,106,107,108,110,111,112,],[30,-64,-54,-66,-67,85,86,-57,-65,-50,-61,101,-63,-62,-55,-56,-59,-58,-60,-52,-53,-51,]),'ELSE':([114,121,128,],[124,-20,-21,]),'ID':([2,12,13,14,15,16,23,24,25,26,27,28,29,30,33,35,36,39,42,43,44,45,49,51,52,53,54,58,62,63,69,81,82,85,86,87,88,91,92,93,94,95,99,109,113,115,119,121,123,128,132,],[3,-15,22,-13,-14,-8,-16,-19,-17,-18,32,37,-9,22,37,37,-37,-36,-39,-40,-38,-10,70,70,70,70,70,80,70,70,70,70,70,70,70,70,70,70,70,70,-42,-41,37,-45,37,-35,37,-20,-43,-21,-44,]),'IF':([16,28,29,33,35,36,39,42,43,44,45,94,95,99,109,113,115,119,121,123,128,132,],[-8,38,-9,38,38,-37,-36,-39,-40,-38,-10,-42,-41,38,-45,38,-35,38,-20,-43,-21,-44,]),'LBRACE':([20,56,79,96,97,124,],[28,78,100,113,113,113,]),'INT':([8,18,29,47,101,],[14,23,14,14,14,]),'FLOAT':([8,18,29,47,101,],[15,25,15,15,15,]),'MAIN':([4,5,16,29,45,],[6,6,-8,-9,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'vars':([4,28,78,100,],[5,33,99,119,]),'var_cte':([49,51,52,53,54,62,63,69,81,82,85,86,87,88,91,92,93,],[60,60,60,60,60,83,84,60,60,60,60,60,60,60,60,60,60,]),'nomMain':([4,5,],[7,7,]),'termino':([49,51,52,53,54,69,81,82,85,86,87,88,91,92,93,],[61,61,61,61,61,61,61,61,61,61,106,107,61,61,61,]),'tipoFunc':([18,],[27,]),'bloque':([96,97,124,],[114,115,129,]),'tipo':([8,29,47,101,],[13,13,58,58,]),'estatuto':([28,33,35,99,113,119,],[35,35,35,35,35,35,]),'param':([47,101,],[57,120,]),'varAux2':([13,30,],[21,46,]),'program':([0,],[1,]),'varAux1':([8,29,],[16,45,]),'factor':([49,51,52,53,54,69,81,82,85,86,87,88,91,92,93,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'main':([4,5,],[9,10,]),'function':([9,10,98,118,125,131,],[17,19,116,126,130,133,]),'escrituraAux':([49,85,86,],[71,104,105,]),'condicion':([28,33,35,99,113,119,],[36,36,36,36,36,36,]),'expresion':([49,51,52,53,54,69,85,86,],[67,74,75,76,77,89,67,67,]),'asignacion':([28,33,35,99,113,119,],[39,39,39,39,39,39,]),'bloqueAux':([28,33,35,99,113,119,],[41,48,50,117,122,127,]),'while':([28,33,35,99,113,119,],[42,42,42,42,42,42,]),'exp':([49,51,52,53,54,69,81,82,85,86,91,92,93,],[72,72,72,72,72,72,102,103,72,72,110,111,112,]),'nomFunc':([27,],[31,]),'factorAux':([49,51,52,53,54,69,81,82,85,86,87,88,91,92,93,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'comparacion':([28,33,35,99,113,119,],[43,43,43,43,43,43,]),'escritura':([28,33,35,99,113,119,],[44,44,44,44,44,44,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID COLON vars main function','program',6,'p_program','lexAndSyn.py',116),
  ('program -> PROGRAM ID COLON main function','program',5,'p_program','lexAndSyn.py',117),
  ('program -> PROGRAM ID COLON vars main','program',5,'p_program','lexAndSyn.py',118),
  ('program -> PROGRAM ID COLON main','program',4,'p_program','lexAndSyn.py',119),
  ('main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE','main',6,'p_main','lexAndSyn.py',125),
  ('main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE','main',7,'p_main','lexAndSyn.py',126),
  ('nomMain -> MAIN','nomMain',1,'p_nomMain','lexAndSyn.py',130),
  ('vars -> VAR varAux1','vars',2,'p_vars','lexAndSyn.py',139),
  ('varAux1 -> tipo varAux2 SEMICOLON','varAux1',3,'p_varAux1','lexAndSyn.py',143),
  ('varAux1 -> tipo varAux2 SEMICOLON varAux1','varAux1',4,'p_varAux1','lexAndSyn.py',144),
  ('varAux2 -> ID','varAux2',1,'p_varAux2','lexAndSyn.py',148),
  ('varAux2 -> ID COMA varAux2','varAux2',3,'p_varAux2','lexAndSyn.py',149),
  ('tipo -> INT','tipo',1,'p_tipo','lexAndSyn.py',166),
  ('tipo -> FLOAT','tipo',1,'p_tipo','lexAndSyn.py',167),
  ('tipo -> CHAR','tipo',1,'p_tipo','lexAndSyn.py',168),
  ('tipoFunc -> INT','tipoFunc',1,'p_tipoFunc','lexAndSyn.py',173),
  ('tipoFunc -> FLOAT','tipoFunc',1,'p_tipoFunc','lexAndSyn.py',174),
  ('tipoFunc -> CHAR','tipoFunc',1,'p_tipoFunc','lexAndSyn.py',175),
  ('tipoFunc -> VOID','tipoFunc',1,'p_tipoFunc','lexAndSyn.py',176),
  ('bloque -> LBRACE RBRACE','bloque',2,'p_bloque','lexAndSyn.py',181),
  ('bloque -> LBRACE bloqueAux RBRACE','bloque',3,'p_bloque','lexAndSyn.py',182),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE','function',7,'p_function','lexAndSyn.py',186),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE','function',9,'p_function','lexAndSyn.py',187),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function','function',8,'p_function','lexAndSyn.py',188),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function','function',10,'p_function','lexAndSyn.py',189),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE','function',8,'p_function','lexAndSyn.py',190),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE','function',10,'p_function','lexAndSyn.py',191),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function','function',9,'p_function','lexAndSyn.py',192),
  ('function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function','function',11,'p_function','lexAndSyn.py',193),
  ('param -> tipo ID','param',2,'p_param','lexAndSyn.py',197),
  ('param -> tipo ID COMA param','param',4,'p_param','lexAndSyn.py',198),
  ('nomFunc -> ID','nomFunc',1,'p_nomFunc','lexAndSyn.py',202),
  ('bloqueAux -> estatuto','bloqueAux',1,'p_bloqueAux','lexAndSyn.py',211),
  ('bloqueAux -> estatuto bloqueAux','bloqueAux',2,'p_bloqueAux','lexAndSyn.py',212),
  ('while -> WHILE LPAREN expresion RPAREN bloque','while',5,'p_while','lexAndSyn.py',216),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','lexAndSyn.py',220),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','lexAndSyn.py',221),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','lexAndSyn.py',222),
  ('estatuto -> while','estatuto',1,'p_estatuto','lexAndSyn.py',223),
  ('estatuto -> comparacion','estatuto',1,'p_estatuto','lexAndSyn.py',224),
  ('asignacion -> ID EQUAL expresion SEMICOLON','asignacion',4,'p_asignacion','lexAndSyn.py',228),
  ('comparacion -> ID DOUBLEEQUAL expresion SEMICOLON','comparacion',4,'p_comparacion','lexAndSyn.py',233),
  ('condicion -> IF LPAREN expresion RPAREN bloque SEMICOLON','condicion',6,'p_condicion','lexAndSyn.py',237),
  ('condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque SEMICOLON','condicion',8,'p_condicion','lexAndSyn.py',238),
  ('escritura -> PRINT LPAREN escrituraAux RPAREN SEMICOLON','escritura',5,'p_escritura','lexAndSyn.py',242),
  ('escrituraAux -> expresion','escrituraAux',1,'p_escrituraAux','lexAndSyn.py',246),
  ('escrituraAux -> CTE_STRING','escrituraAux',1,'p_escrituraAux','lexAndSyn.py',247),
  ('escrituraAux -> expresion COMA escrituraAux','escrituraAux',3,'p_escrituraAux','lexAndSyn.py',248),
  ('escrituraAux -> CTE_STRING COMA escrituraAux','escrituraAux',3,'p_escrituraAux','lexAndSyn.py',249),
  ('expresion -> exp','expresion',1,'p_expresion','lexAndSyn.py',253),
  ('expresion -> exp LOWERTHAN exp','expresion',3,'p_expresion','lexAndSyn.py',254),
  ('expresion -> exp MORETHAN exp','expresion',3,'p_expresion','lexAndSyn.py',255),
  ('expresion -> exp DIFFERENT exp','expresion',3,'p_expresion','lexAndSyn.py',256),
  ('exp -> termino','exp',1,'p_exp','lexAndSyn.py',260),
  ('exp -> termino PLUS exp','exp',3,'p_exp','lexAndSyn.py',261),
  ('exp -> termino MINUS exp','exp',3,'p_exp','lexAndSyn.py',262),
  ('termino -> factor','termino',1,'p_termino','lexAndSyn.py',266),
  ('termino -> factor TIMES termino','termino',3,'p_termino','lexAndSyn.py',267),
  ('termino -> factor DIVIDE termino','termino',3,'p_termino','lexAndSyn.py',268),
  ('factor -> LPAREN expresion RPAREN','factor',3,'p_factor','lexAndSyn.py',272),
  ('factor -> factorAux','factor',1,'p_factor','lexAndSyn.py',273),
  ('factorAux -> PLUS var_cte','factorAux',2,'p_factorAux','lexAndSyn.py',277),
  ('factorAux -> MINUS var_cte','factorAux',2,'p_factorAux','lexAndSyn.py',278),
  ('factorAux -> var_cte','factorAux',1,'p_factorAux','lexAndSyn.py',279),
  ('var_cte -> ID','var_cte',1,'p_var_cte','lexAndSyn.py',283),
  ('var_cte -> CTE_I','var_cte',1,'p_var_cte','lexAndSyn.py',284),
  ('var_cte -> CTE_F','var_cte',1,'p_var_cte','lexAndSyn.py',285),
]
