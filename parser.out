Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID COLON varsGlobal main function
Rule 2     program -> PROGRAM ID COLON main function
Rule 3     program -> PROGRAM ID COLON varsGlobal main
Rule 4     program -> PROGRAM ID COLON main
Rule 5     varsGlobal -> VAR varAuxGlobal1
Rule 6     varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON
Rule 7     varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1
Rule 8     varAuxGlobal2 -> ID
Rule 9     varAuxGlobal2 -> ID COMA varAuxGlobal2
Rule 10    main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc
Rule 11    main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
Rule 12    nomMain -> MAIN
Rule 13    vars -> VAR varAux1
Rule 14    varAux1 -> tipo varAux2 SEMICOLON
Rule 15    varAux1 -> tipo varAux2 SEMICOLON varAux1
Rule 16    varAux2 -> ID
Rule 17    varAux2 -> ID COMA varAux2
Rule 18    tipo -> INT
Rule 19    tipo -> FLOAT
Rule 20    tipo -> CHAR
Rule 21    tipoFunc -> INT
Rule 22    tipoFunc -> FLOAT
Rule 23    tipoFunc -> CHAR
Rule 24    tipoFunc -> VOID
Rule 25    bloque -> LBRACE RBRACE
Rule 26    bloque -> LBRACE bloqueAux RBRACE
Rule 27    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
Rule 28    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
Rule 29    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
Rule 30    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
Rule 31    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
Rule 32    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
Rule 33    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
Rule 34    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
Rule 35    endProc -> <empty>
Rule 36    param -> tipo ID
Rule 37    param -> tipo ID COMA param
Rule 38    param -> empty
Rule 39    empty -> <empty>
Rule 40    push_function -> <empty>
Rule 41    nomFunc -> ID push_function
Rule 42    bloqueAux -> estatuto
Rule 43    bloqueAux -> estatuto bloqueAux
Rule 44    while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
Rule 45    while1 -> <empty>
Rule 46    while2 -> <empty>
Rule 47    while3 -> <empty>
Rule 48    loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
Rule 49    estatuto -> asignacion
Rule 50    estatuto -> condicion
Rule 51    estatuto -> escritura
Rule 52    estatuto -> while
Rule 53    estatuto -> loopFromDo
Rule 54    estatuto -> comparacion
Rule 55    estatuto -> llamadaAFuncion
Rule 56    llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
Rule 57    llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
Rule 58    actualizaFuncion -> <empty>
Rule 59    gosub -> <empty>
Rule 60    generarEra -> <empty>
Rule 61    paramFuncion -> ID push_id2
Rule 62    paramFuncion -> ID push_id2 COMA paramFuncion
Rule 63    paramFuncion -> expresion
Rule 64    paramFuncion -> expresion COMA paramFuncion
Rule 65    paramFuncion -> empty
Rule 66    push_id2 -> <empty>
Rule 67    asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON
Rule 68    create_asign -> <empty>
Rule 69    comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
Rule 70    condicion -> IF LPAREN expresion RPAREN cond bloque condFinal
Rule 71    condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
Rule 72    cond -> <empty>
Rule 73    condElse -> <empty>
Rule 74    condFinal -> <empty>
Rule 75    escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
Rule 76    quad_print -> <empty>
Rule 77    escrituraAux -> expresion
Rule 78    escrituraAux -> CTE_STRING
Rule 79    escrituraAux -> expresion COMA escrituraAux
Rule 80    escrituraAux -> CTE_STRING COMA escrituraAux
Rule 81    escrituraAux -> llamadaAFuncion
Rule 82    expresion -> exp
Rule 83    expresion -> exp comp exp quad_comp
Rule 84    comp -> LOWERTHAN push_poper
Rule 85    comp -> MORETHAN push_poper
Rule 86    comp -> DIFFERENT push_poper
Rule 87    comp -> DOUBLEEQUAL push_poper
Rule 88    quad_comp -> <empty>
Rule 89    exp -> termino quad_term
Rule 90    exp -> termino quad_term exp1
Rule 91    exp1 -> PLUS push_poper exp
Rule 92    exp1 -> MINUS push_poper exp
Rule 93    quad_term -> <empty>
Rule 94    quad_fact -> <empty>
Rule 95    termino -> factor quad_fact
Rule 96    termino -> factor quad_fact termino1
Rule 97    termino1 -> TIMES push_poper termino
Rule 98    termino1 -> DIVIDE push_poper termino
Rule 99    factor -> LPAREN expresion RPAREN
Rule 100   factor -> factorAux
Rule 101   factorAux -> PLUS push_poper var_cte
Rule 102   factorAux -> MINUS push_poper var_cte
Rule 103   factorAux -> var_cte
Rule 104   push_id -> <empty>
Rule 105   push_cte -> <empty>
Rule 106   push_poper -> <empty>
Rule 107   var_cte -> ID push_id
Rule 108   var_cte -> CTE_I push_cte
Rule 109   var_cte -> CTE_F push_cte
Rule 110   var_cte -> CTE_STRING push_cte

Terminals, with rules where they appear

AND                  : 
CHAR                 : 20 23
COLON                : 1 2 3 4
COMA                 : 9 17 37 62 64 79 80
CTE_F                : 109
CTE_I                : 108
CTE_STRING           : 78 80 110
DIFFERENT            : 86
DIVIDE               : 98
DO                   : 48
DOUBLEEQUAL          : 69 87
ELSE                 : 71
EQUAL                : 48 67
FLOAT                : 19 22
FROM                 : 48
FUNCTION             : 27 28 29 30 31 32 33 34
ID                   : 1 2 3 4 8 9 16 17 36 37 41 48 56 57 61 62 67 69 107
IF                   : 70 71
INT                  : 18 21
LBRACE               : 10 11 25 26 27 28 29 30 31 32 33 34 44 48
LOWERTHAN            : 84
LPAREN               : 10 11 27 28 29 30 31 32 33 34 44 48 48 56 57 70 71 75 99
MAIN                 : 12
MINUS                : 92 102
MORETHAN             : 85
OR                   : 
PLUS                 : 91 101
PRINT                : 75
PROGRAM              : 1 2 3 4
RBRACE               : 10 11 25 26 27 28 29 30 31 32 33 34 44 48
RPAREN               : 10 11 27 28 29 30 31 32 33 34 44 48 48 56 57 70 71 75 99
SEMICOLON            : 6 7 14 15 57 67 69 75
TIMES                : 97
TO                   : 48
VAR                  : 5 13
VOID                 : 24
WHILE                : 44
error                : 

Nonterminals, with rules where they appear

actualizaFuncion     : 56 57
asignacion           : 49
bloque               : 70 71 71
bloqueAux            : 10 11 26 28 30 32 34 43 44 48
comp                 : 83
comparacion          : 54
cond                 : 70 71
condElse             : 71
condFinal            : 70 71
condicion            : 50
create_asign         : 67
empty                : 38 65
endProc              : 10 11 27 28 29 30 31 32 33 34
escritura            : 51
escrituraAux         : 75 79 80
estatuto             : 42 43
exp                  : 82 83 83 91 92
exp1                 : 90
expresion            : 44 48 48 56 63 64 67 69 70 71 77 79 99
factor               : 95 96
factorAux            : 100
function             : 1 2 29 30 33 34
generarEra           : 56 57
gosub                : 56 57
llamadaAFuncion      : 55 81
loopFromDo           : 53
main                 : 1 2 3 4
nomFunc              : 27 28 29 30 31 32 33 34
nomMain              : 10 11
param                : 31 32 33 34 37
paramFuncion         : 56 57 62 64
program              : 0
push_cte             : 108 109 110
push_function        : 41
push_id              : 67 69 107
push_id2             : 61 62
push_poper           : 67 69 75 84 85 86 87 91 92 97 98 101 102
quad_comp            : 83
quad_fact            : 95 96
quad_print           : 75
quad_term            : 89 90
termino              : 89 90 97 98
termino1             : 96
tipo                 : 6 7 14 15 36 37
tipoFunc             : 27 28 29 30 31 32 33 34
varAux1              : 13 15
varAux2              : 14 15 17
varAuxGlobal1        : 5 7
varAuxGlobal2        : 6 7 9
var_cte              : 101 102 103
vars                 : 11 28 30 32 34
varsGlobal           : 1 3
while                : 52
while1               : 44
while2               : 44
while3               : 44

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID COLON varsGlobal main function
    (2) program -> . PROGRAM ID COLON main function
    (3) program -> . PROGRAM ID COLON varsGlobal main
    (4) program -> . PROGRAM ID COLON main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID COLON varsGlobal main function
    (2) program -> PROGRAM . ID COLON main function
    (3) program -> PROGRAM . ID COLON varsGlobal main
    (4) program -> PROGRAM . ID COLON main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . COLON varsGlobal main function
    (2) program -> PROGRAM ID . COLON main function
    (3) program -> PROGRAM ID . COLON varsGlobal main
    (4) program -> PROGRAM ID . COLON main

    COLON           shift and go to state 4


state 4

    (1) program -> PROGRAM ID COLON . varsGlobal main function
    (2) program -> PROGRAM ID COLON . main function
    (3) program -> PROGRAM ID COLON . varsGlobal main
    (4) program -> PROGRAM ID COLON . main
    (5) varsGlobal -> . VAR varAuxGlobal1
    (10) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc
    (11) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (12) nomMain -> . MAIN

    VAR             shift and go to state 8
    MAIN            shift and go to state 6

    varsGlobal                     shift and go to state 5
    nomMain                        shift and go to state 7
    main                           shift and go to state 9

state 5

    (1) program -> PROGRAM ID COLON varsGlobal . main function
    (3) program -> PROGRAM ID COLON varsGlobal . main
    (10) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc
    (11) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (12) nomMain -> . MAIN

    MAIN            shift and go to state 6

    nomMain                        shift and go to state 7
    main                           shift and go to state 10

state 6

    (12) nomMain -> MAIN .

    LPAREN          reduce using rule 12 (nomMain -> MAIN .)


state 7

    (10) main -> nomMain . LPAREN RPAREN LBRACE bloqueAux RBRACE endProc
    (11) main -> nomMain . LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc

    LPAREN          shift and go to state 11


state 8

    (5) varsGlobal -> VAR . varAuxGlobal1
    (6) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON
    (7) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON varAuxGlobal1
    (18) tipo -> . INT
    (19) tipo -> . FLOAT
    (20) tipo -> . CHAR

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

    varAuxGlobal1                  shift and go to state 16
    tipo                           shift and go to state 12

state 9

    (2) program -> PROGRAM ID COLON main . function
    (4) program -> PROGRAM ID COLON main .
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (30) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (31) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (32) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (33) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (34) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    $end            reduce using rule 4 (program -> PROGRAM ID COLON main .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 17

state 10

    (1) program -> PROGRAM ID COLON varsGlobal main . function
    (3) program -> PROGRAM ID COLON varsGlobal main .
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (30) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (31) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (32) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (33) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (34) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    $end            reduce using rule 3 (program -> PROGRAM ID COLON varsGlobal main .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 19

state 11

    (10) main -> nomMain LPAREN . RPAREN LBRACE bloqueAux RBRACE endProc
    (11) main -> nomMain LPAREN . RPAREN LBRACE vars bloqueAux RBRACE endProc

    RPAREN          shift and go to state 20


state 12

    (6) varAuxGlobal1 -> tipo . varAuxGlobal2 SEMICOLON
    (7) varAuxGlobal1 -> tipo . varAuxGlobal2 SEMICOLON varAuxGlobal1
    (8) varAuxGlobal2 -> . ID
    (9) varAuxGlobal2 -> . ID COMA varAuxGlobal2

    ID              shift and go to state 22

    varAuxGlobal2                  shift and go to state 21

state 13

    (18) tipo -> INT .

    ID              reduce using rule 18 (tipo -> INT .)


state 14

    (19) tipo -> FLOAT .

    ID              reduce using rule 19 (tipo -> FLOAT .)


state 15

    (20) tipo -> CHAR .

    ID              reduce using rule 20 (tipo -> CHAR .)


state 16

    (5) varsGlobal -> VAR varAuxGlobal1 .

    MAIN            reduce using rule 5 (varsGlobal -> VAR varAuxGlobal1 .)


state 17

    (2) program -> PROGRAM ID COLON main function .

    $end            reduce using rule 2 (program -> PROGRAM ID COLON main function .)


state 18

    (27) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (28) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (29) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (30) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (31) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (32) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (33) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (34) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (21) tipoFunc -> . INT
    (22) tipoFunc -> . FLOAT
    (23) tipoFunc -> . CHAR
    (24) tipoFunc -> . VOID

    INT             shift and go to state 23
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26
    VOID            shift and go to state 24

    tipoFunc                       shift and go to state 27

state 19

    (1) program -> PROGRAM ID COLON varsGlobal main function .

    $end            reduce using rule 1 (program -> PROGRAM ID COLON varsGlobal main function .)


state 20

    (10) main -> nomMain LPAREN RPAREN . LBRACE bloqueAux RBRACE endProc
    (11) main -> nomMain LPAREN RPAREN . LBRACE vars bloqueAux RBRACE endProc

    LBRACE          shift and go to state 28


state 21

    (6) varAuxGlobal1 -> tipo varAuxGlobal2 . SEMICOLON
    (7) varAuxGlobal1 -> tipo varAuxGlobal2 . SEMICOLON varAuxGlobal1

    SEMICOLON       shift and go to state 29


state 22

    (8) varAuxGlobal2 -> ID .
    (9) varAuxGlobal2 -> ID . COMA varAuxGlobal2

    SEMICOLON       reduce using rule 8 (varAuxGlobal2 -> ID .)
    COMA            shift and go to state 30


state 23

    (21) tipoFunc -> INT .

    ID              reduce using rule 21 (tipoFunc -> INT .)


state 24

    (24) tipoFunc -> VOID .

    ID              reduce using rule 24 (tipoFunc -> VOID .)


state 25

    (22) tipoFunc -> FLOAT .

    ID              reduce using rule 22 (tipoFunc -> FLOAT .)


state 26

    (23) tipoFunc -> CHAR .

    ID              reduce using rule 23 (tipoFunc -> CHAR .)


state 27

    (27) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (28) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (29) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (30) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (31) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (32) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (33) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (34) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (41) nomFunc -> . ID push_function

    ID              shift and go to state 32

    nomFunc                        shift and go to state 31

state 28

    (10) main -> nomMain LPAREN RPAREN LBRACE . bloqueAux RBRACE endProc
    (11) main -> nomMain LPAREN RPAREN LBRACE . vars bloqueAux RBRACE endProc
    (42) bloqueAux -> . estatuto
    (43) bloqueAux -> . estatuto bloqueAux
    (13) vars -> . VAR varAux1
    (49) estatuto -> . asignacion
    (50) estatuto -> . condicion
    (51) estatuto -> . escritura
    (52) estatuto -> . while
    (53) estatuto -> . loopFromDo
    (54) estatuto -> . comparacion
    (55) estatuto -> . llamadaAFuncion
    (67) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (70) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (71) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (75) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (44) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (48) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (69) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (56) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    VAR             shift and go to state 38
    ID              shift and go to state 39
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 44
    FROM            shift and go to state 42

    vars                           shift and go to state 33
    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 40
    llamadaAFuncion                shift and go to state 41
    asignacion                     shift and go to state 43
    bloqueAux                      shift and go to state 45
    while                          shift and go to state 46
    comparacion                    shift and go to state 47
    escritura                      shift and go to state 48

state 29

    (6) varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON .
    (7) varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON . varAuxGlobal1
    (6) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON
    (7) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON varAuxGlobal1
    (18) tipo -> . INT
    (19) tipo -> . FLOAT
    (20) tipo -> . CHAR

    MAIN            reduce using rule 6 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON .)
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

    varAuxGlobal1                  shift and go to state 49
    tipo                           shift and go to state 12

state 30

    (9) varAuxGlobal2 -> ID COMA . varAuxGlobal2
    (8) varAuxGlobal2 -> . ID
    (9) varAuxGlobal2 -> . ID COMA varAuxGlobal2

    ID              shift and go to state 22

    varAuxGlobal2                  shift and go to state 50

state 31

    (27) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE RBRACE endProc
    (28) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (29) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE RBRACE endProc function
    (30) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (31) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE RBRACE endProc
    (32) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (33) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE RBRACE endProc function
    (34) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    LPAREN          shift and go to state 51


state 32

    (41) nomFunc -> ID . push_function
    (40) push_function -> .

    LPAREN          reduce using rule 40 (push_function -> .)

    push_function                  shift and go to state 52

state 33

    (11) main -> nomMain LPAREN RPAREN LBRACE vars . bloqueAux RBRACE endProc
    (42) bloqueAux -> . estatuto
    (43) bloqueAux -> . estatuto bloqueAux
    (49) estatuto -> . asignacion
    (50) estatuto -> . condicion
    (51) estatuto -> . escritura
    (52) estatuto -> . while
    (53) estatuto -> . loopFromDo
    (54) estatuto -> . comparacion
    (55) estatuto -> . llamadaAFuncion
    (67) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (70) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (71) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (75) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (44) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (48) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (69) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (56) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    ID              shift and go to state 39
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 44
    FROM            shift and go to state 42

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 40
    llamadaAFuncion                shift and go to state 41
    asignacion                     shift and go to state 43
    bloqueAux                      shift and go to state 53
    while                          shift and go to state 46
    comparacion                    shift and go to state 47
    escritura                      shift and go to state 48

state 34

    (75) escritura -> PRINT . push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (106) push_poper -> .

    LPAREN          reduce using rule 106 (push_poper -> .)

    push_poper                     shift and go to state 54

state 35

    (42) bloqueAux -> estatuto .
    (43) bloqueAux -> estatuto . bloqueAux
    (42) bloqueAux -> . estatuto
    (43) bloqueAux -> . estatuto bloqueAux
    (49) estatuto -> . asignacion
    (50) estatuto -> . condicion
    (51) estatuto -> . escritura
    (52) estatuto -> . while
    (53) estatuto -> . loopFromDo
    (54) estatuto -> . comparacion
    (55) estatuto -> . llamadaAFuncion
    (67) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (70) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (71) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (75) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (44) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (48) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (69) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (56) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    RBRACE          reduce using rule 42 (bloqueAux -> estatuto .)
    ID              shift and go to state 39
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 44
    FROM            shift and go to state 42

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 40
    llamadaAFuncion                shift and go to state 41
    asignacion                     shift and go to state 43
    bloqueAux                      shift and go to state 55
    while                          shift and go to state 46
    comparacion                    shift and go to state 47
    escritura                      shift and go to state 48

state 36

    (70) condicion -> IF . LPAREN expresion RPAREN cond bloque condFinal
    (71) condicion -> IF . LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal

    LPAREN          shift and go to state 56


state 37

    (50) estatuto -> condicion .

    ID              reduce using rule 50 (estatuto -> condicion .)
    IF              reduce using rule 50 (estatuto -> condicion .)
    PRINT           reduce using rule 50 (estatuto -> condicion .)
    WHILE           reduce using rule 50 (estatuto -> condicion .)
    FROM            reduce using rule 50 (estatuto -> condicion .)
    RBRACE          reduce using rule 50 (estatuto -> condicion .)


state 38

    (13) vars -> VAR . varAux1
    (14) varAux1 -> . tipo varAux2 SEMICOLON
    (15) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (18) tipo -> . INT
    (19) tipo -> . FLOAT
    (20) tipo -> . CHAR

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

    varAux1                        shift and go to state 58
    tipo                           shift and go to state 57

state 39

    (67) asignacion -> ID . push_id EQUAL push_poper expresion create_asign SEMICOLON
    (69) comparacion -> ID . push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (56) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (57) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (104) push_id -> .
    (58) actualizaFuncion -> .

    EQUAL           reduce using rule 104 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 104 (push_id -> .)
    LPAREN          reduce using rule 58 (actualizaFuncion -> .)

    actualizaFuncion               shift and go to state 59
    push_id                        shift and go to state 60

state 40

    (53) estatuto -> loopFromDo .

    ID              reduce using rule 53 (estatuto -> loopFromDo .)
    IF              reduce using rule 53 (estatuto -> loopFromDo .)
    PRINT           reduce using rule 53 (estatuto -> loopFromDo .)
    WHILE           reduce using rule 53 (estatuto -> loopFromDo .)
    FROM            reduce using rule 53 (estatuto -> loopFromDo .)
    RBRACE          reduce using rule 53 (estatuto -> loopFromDo .)


state 41

    (55) estatuto -> llamadaAFuncion .

    ID              reduce using rule 55 (estatuto -> llamadaAFuncion .)
    IF              reduce using rule 55 (estatuto -> llamadaAFuncion .)
    PRINT           reduce using rule 55 (estatuto -> llamadaAFuncion .)
    WHILE           reduce using rule 55 (estatuto -> llamadaAFuncion .)
    FROM            reduce using rule 55 (estatuto -> llamadaAFuncion .)
    RBRACE          reduce using rule 55 (estatuto -> llamadaAFuncion .)


state 42

    (48) loopFromDo -> FROM . LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    LPAREN          shift and go to state 61


state 43

    (49) estatuto -> asignacion .

    ID              reduce using rule 49 (estatuto -> asignacion .)
    IF              reduce using rule 49 (estatuto -> asignacion .)
    PRINT           reduce using rule 49 (estatuto -> asignacion .)
    WHILE           reduce using rule 49 (estatuto -> asignacion .)
    FROM            reduce using rule 49 (estatuto -> asignacion .)
    RBRACE          reduce using rule 49 (estatuto -> asignacion .)


state 44

    (44) while -> WHILE . while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (45) while1 -> .

    LPAREN          reduce using rule 45 (while1 -> .)

    while1                         shift and go to state 62

state 45

    (10) main -> nomMain LPAREN RPAREN LBRACE bloqueAux . RBRACE endProc

    RBRACE          shift and go to state 63


state 46

    (52) estatuto -> while .

    ID              reduce using rule 52 (estatuto -> while .)
    IF              reduce using rule 52 (estatuto -> while .)
    PRINT           reduce using rule 52 (estatuto -> while .)
    WHILE           reduce using rule 52 (estatuto -> while .)
    FROM            reduce using rule 52 (estatuto -> while .)
    RBRACE          reduce using rule 52 (estatuto -> while .)


state 47

    (54) estatuto -> comparacion .

    ID              reduce using rule 54 (estatuto -> comparacion .)
    IF              reduce using rule 54 (estatuto -> comparacion .)
    PRINT           reduce using rule 54 (estatuto -> comparacion .)
    WHILE           reduce using rule 54 (estatuto -> comparacion .)
    FROM            reduce using rule 54 (estatuto -> comparacion .)
    RBRACE          reduce using rule 54 (estatuto -> comparacion .)


state 48

    (51) estatuto -> escritura .

    ID              reduce using rule 51 (estatuto -> escritura .)
    IF              reduce using rule 51 (estatuto -> escritura .)
    PRINT           reduce using rule 51 (estatuto -> escritura .)
    WHILE           reduce using rule 51 (estatuto -> escritura .)
    FROM            reduce using rule 51 (estatuto -> escritura .)
    RBRACE          reduce using rule 51 (estatuto -> escritura .)


state 49

    (7) varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1 .

    MAIN            reduce using rule 7 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1 .)


state 50

    (9) varAuxGlobal2 -> ID COMA varAuxGlobal2 .

    SEMICOLON       reduce using rule 9 (varAuxGlobal2 -> ID COMA varAuxGlobal2 .)


state 51

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE RBRACE endProc
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux RBRACE endProc
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE RBRACE endProc function
    (30) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (31) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE RBRACE endProc
    (32) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (33) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE RBRACE endProc function
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (36) param -> . tipo ID
    (37) param -> . tipo ID COMA param
    (38) param -> . empty
    (18) tipo -> . INT
    (19) tipo -> . FLOAT
    (20) tipo -> . CHAR
    (39) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 64
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

  ! RPAREN          [ reduce using rule 39 (empty -> .) ]

    tipo                           shift and go to state 67
    param                          shift and go to state 65
    empty                          shift and go to state 66

state 52

    (41) nomFunc -> ID push_function .

    LPAREN          reduce using rule 41 (nomFunc -> ID push_function .)


state 53

    (11) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux . RBRACE endProc

    RBRACE          shift and go to state 68


state 54

    (75) escritura -> PRINT push_poper . LPAREN escrituraAux RPAREN quad_print SEMICOLON

    LPAREN          shift and go to state 69


state 55

    (43) bloqueAux -> estatuto bloqueAux .

    RBRACE          reduce using rule 43 (bloqueAux -> estatuto bloqueAux .)


state 56

    (70) condicion -> IF LPAREN . expresion RPAREN cond bloque condFinal
    (71) condicion -> IF LPAREN . expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (82) expresion -> . exp
    (83) expresion -> . exp comp exp quad_comp
    (89) exp -> . termino quad_term
    (90) exp -> . termino quad_term exp1
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    ID              shift and go to state 79
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75
    CTE_STRING      shift and go to state 76

    expresion                      shift and go to state 80
    factor                         shift and go to state 74
    termino                        shift and go to state 71
    exp                            shift and go to state 81
    factorAux                      shift and go to state 82
    var_cte                        shift and go to state 70

state 57

    (14) varAux1 -> tipo . varAux2 SEMICOLON
    (15) varAux1 -> tipo . varAux2 SEMICOLON varAux1
    (16) varAux2 -> . ID
    (17) varAux2 -> . ID COMA varAux2

    ID              shift and go to state 84

    varAux2                        shift and go to state 83

state 58

    (13) vars -> VAR varAux1 .

    ID              reduce using rule 13 (vars -> VAR varAux1 .)
    IF              reduce using rule 13 (vars -> VAR varAux1 .)
    PRINT           reduce using rule 13 (vars -> VAR varAux1 .)
    WHILE           reduce using rule 13 (vars -> VAR varAux1 .)
    FROM            reduce using rule 13 (vars -> VAR varAux1 .)


state 59

    (56) llamadaAFuncion -> ID actualizaFuncion . generarEra LPAREN paramFuncion gosub RPAREN expresion
    (57) llamadaAFuncion -> ID actualizaFuncion . generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (60) generarEra -> .

    LPAREN          reduce using rule 60 (generarEra -> .)

    generarEra                     shift and go to state 85

state 60

    (67) asignacion -> ID push_id . EQUAL push_poper expresion create_asign SEMICOLON
    (69) comparacion -> ID push_id . DOUBLEEQUAL push_poper expresion SEMICOLON

    EQUAL           shift and go to state 87
    DOUBLEEQUAL     shift and go to state 86


state 61

    (48) loopFromDo -> FROM LPAREN . ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    ID              shift and go to state 88


state 62

    (44) while -> WHILE while1 . LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3

    LPAREN          shift and go to state 89


state 63

    (10) main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE . endProc
    (35) endProc -> .

    FUNCTION        reduce using rule 35 (endProc -> .)
    $end            reduce using rule 35 (endProc -> .)

    endProc                        shift and go to state 90

state 64

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE RBRACE endProc
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux RBRACE endProc
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE RBRACE endProc function
    (30) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux RBRACE endProc function

    LBRACE          shift and go to state 91


state 65

    (31) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE RBRACE endProc
    (32) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux RBRACE endProc
    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE RBRACE endProc function
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux RBRACE endProc function

    RPAREN          shift and go to state 92


state 66

    (38) param -> empty .

    RPAREN          reduce using rule 38 (param -> empty .)


state 67

    (36) param -> tipo . ID
    (37) param -> tipo . ID COMA param

    ID              shift and go to state 93


state 68

    (11) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE . endProc
    (35) endProc -> .

    FUNCTION        reduce using rule 35 (endProc -> .)
    $end            reduce using rule 35 (endProc -> .)

    endProc                        shift and go to state 94

state 69

    (75) escritura -> PRINT push_poper LPAREN . escrituraAux RPAREN quad_print SEMICOLON
    (77) escrituraAux -> . expresion
    (78) escrituraAux -> . CTE_STRING
    (79) escrituraAux -> . expresion COMA escrituraAux
    (80) escrituraAux -> . CTE_STRING COMA escrituraAux
    (81) escrituraAux -> . llamadaAFuncion
    (82) expresion -> . exp
    (83) expresion -> . exp comp exp quad_comp
    (56) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (89) exp -> . termino quad_term
    (90) exp -> . termino quad_term exp1
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    CTE_STRING      shift and go to state 95
    ID              shift and go to state 97
    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75

    termino                        shift and go to state 71
    factor                         shift and go to state 74
    expresion                      shift and go to state 96
    escrituraAux                   shift and go to state 98
    llamadaAFuncion                shift and go to state 99
    exp                            shift and go to state 81
    factorAux                      shift and go to state 82
    var_cte                        shift and go to state 70

state 70

    (103) factorAux -> var_cte .

    TIMES           reduce using rule 103 (factorAux -> var_cte .)
    DIVIDE          reduce using rule 103 (factorAux -> var_cte .)
    PLUS            reduce using rule 103 (factorAux -> var_cte .)
    MINUS           reduce using rule 103 (factorAux -> var_cte .)
    LOWERTHAN       reduce using rule 103 (factorAux -> var_cte .)
    MORETHAN        reduce using rule 103 (factorAux -> var_cte .)
    DIFFERENT       reduce using rule 103 (factorAux -> var_cte .)
    DOUBLEEQUAL     reduce using rule 103 (factorAux -> var_cte .)
    COMA            reduce using rule 103 (factorAux -> var_cte .)
    RPAREN          reduce using rule 103 (factorAux -> var_cte .)
    SEMICOLON       reduce using rule 103 (factorAux -> var_cte .)
    ID              reduce using rule 103 (factorAux -> var_cte .)
    IF              reduce using rule 103 (factorAux -> var_cte .)
    PRINT           reduce using rule 103 (factorAux -> var_cte .)
    WHILE           reduce using rule 103 (factorAux -> var_cte .)
    FROM            reduce using rule 103 (factorAux -> var_cte .)
    RBRACE          reduce using rule 103 (factorAux -> var_cte .)


state 71

    (89) exp -> termino . quad_term
    (90) exp -> termino . quad_term exp1
    (93) quad_term -> .

    PLUS            reduce using rule 93 (quad_term -> .)
    MINUS           reduce using rule 93 (quad_term -> .)
    LOWERTHAN       reduce using rule 93 (quad_term -> .)
    MORETHAN        reduce using rule 93 (quad_term -> .)
    DIFFERENT       reduce using rule 93 (quad_term -> .)
    DOUBLEEQUAL     reduce using rule 93 (quad_term -> .)
    RPAREN          reduce using rule 93 (quad_term -> .)
    COMA            reduce using rule 93 (quad_term -> .)
    SEMICOLON       reduce using rule 93 (quad_term -> .)
    ID              reduce using rule 93 (quad_term -> .)
    IF              reduce using rule 93 (quad_term -> .)
    PRINT           reduce using rule 93 (quad_term -> .)
    WHILE           reduce using rule 93 (quad_term -> .)
    FROM            reduce using rule 93 (quad_term -> .)
    RBRACE          reduce using rule 93 (quad_term -> .)

    quad_term                      shift and go to state 100

state 72

    (102) factorAux -> MINUS . push_poper var_cte
    (106) push_poper -> .

    ID              reduce using rule 106 (push_poper -> .)
    CTE_I           reduce using rule 106 (push_poper -> .)
    CTE_F           reduce using rule 106 (push_poper -> .)
    CTE_STRING      reduce using rule 106 (push_poper -> .)

    push_poper                     shift and go to state 101

state 73

    (101) factorAux -> PLUS . push_poper var_cte
    (106) push_poper -> .

    ID              reduce using rule 106 (push_poper -> .)
    CTE_I           reduce using rule 106 (push_poper -> .)
    CTE_F           reduce using rule 106 (push_poper -> .)
    CTE_STRING      reduce using rule 106 (push_poper -> .)

    push_poper                     shift and go to state 102

state 74

    (95) termino -> factor . quad_fact
    (96) termino -> factor . quad_fact termino1
    (94) quad_fact -> .

    TIMES           reduce using rule 94 (quad_fact -> .)
    DIVIDE          reduce using rule 94 (quad_fact -> .)
    PLUS            reduce using rule 94 (quad_fact -> .)
    MINUS           reduce using rule 94 (quad_fact -> .)
    LOWERTHAN       reduce using rule 94 (quad_fact -> .)
    MORETHAN        reduce using rule 94 (quad_fact -> .)
    DIFFERENT       reduce using rule 94 (quad_fact -> .)
    DOUBLEEQUAL     reduce using rule 94 (quad_fact -> .)
    RPAREN          reduce using rule 94 (quad_fact -> .)
    COMA            reduce using rule 94 (quad_fact -> .)
    SEMICOLON       reduce using rule 94 (quad_fact -> .)
    ID              reduce using rule 94 (quad_fact -> .)
    IF              reduce using rule 94 (quad_fact -> .)
    PRINT           reduce using rule 94 (quad_fact -> .)
    WHILE           reduce using rule 94 (quad_fact -> .)
    FROM            reduce using rule 94 (quad_fact -> .)
    RBRACE          reduce using rule 94 (quad_fact -> .)

    quad_fact                      shift and go to state 103

state 75

    (109) var_cte -> CTE_F . push_cte
    (105) push_cte -> .

    TIMES           reduce using rule 105 (push_cte -> .)
    DIVIDE          reduce using rule 105 (push_cte -> .)
    PLUS            reduce using rule 105 (push_cte -> .)
    MINUS           reduce using rule 105 (push_cte -> .)
    LOWERTHAN       reduce using rule 105 (push_cte -> .)
    MORETHAN        reduce using rule 105 (push_cte -> .)
    DIFFERENT       reduce using rule 105 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 105 (push_cte -> .)
    RPAREN          reduce using rule 105 (push_cte -> .)
    COMA            reduce using rule 105 (push_cte -> .)
    SEMICOLON       reduce using rule 105 (push_cte -> .)
    ID              reduce using rule 105 (push_cte -> .)
    IF              reduce using rule 105 (push_cte -> .)
    PRINT           reduce using rule 105 (push_cte -> .)
    WHILE           reduce using rule 105 (push_cte -> .)
    FROM            reduce using rule 105 (push_cte -> .)
    RBRACE          reduce using rule 105 (push_cte -> .)

    push_cte                       shift and go to state 104

state 76

    (110) var_cte -> CTE_STRING . push_cte
    (105) push_cte -> .

    TIMES           reduce using rule 105 (push_cte -> .)
    DIVIDE          reduce using rule 105 (push_cte -> .)
    PLUS            reduce using rule 105 (push_cte -> .)
    MINUS           reduce using rule 105 (push_cte -> .)
    LOWERTHAN       reduce using rule 105 (push_cte -> .)
    MORETHAN        reduce using rule 105 (push_cte -> .)
    DIFFERENT       reduce using rule 105 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 105 (push_cte -> .)
    RPAREN          reduce using rule 105 (push_cte -> .)
    COMA            reduce using rule 105 (push_cte -> .)
    SEMICOLON       reduce using rule 105 (push_cte -> .)
    ID              reduce using rule 105 (push_cte -> .)
    IF              reduce using rule 105 (push_cte -> .)
    PRINT           reduce using rule 105 (push_cte -> .)
    WHILE           reduce using rule 105 (push_cte -> .)
    FROM            reduce using rule 105 (push_cte -> .)
    RBRACE          reduce using rule 105 (push_cte -> .)

    push_cte                       shift and go to state 105

state 77

    (108) var_cte -> CTE_I . push_cte
    (105) push_cte -> .

    TIMES           reduce using rule 105 (push_cte -> .)
    DIVIDE          reduce using rule 105 (push_cte -> .)
    PLUS            reduce using rule 105 (push_cte -> .)
    MINUS           reduce using rule 105 (push_cte -> .)
    LOWERTHAN       reduce using rule 105 (push_cte -> .)
    MORETHAN        reduce using rule 105 (push_cte -> .)
    DIFFERENT       reduce using rule 105 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 105 (push_cte -> .)
    RPAREN          reduce using rule 105 (push_cte -> .)
    COMA            reduce using rule 105 (push_cte -> .)
    SEMICOLON       reduce using rule 105 (push_cte -> .)
    ID              reduce using rule 105 (push_cte -> .)
    IF              reduce using rule 105 (push_cte -> .)
    PRINT           reduce using rule 105 (push_cte -> .)
    WHILE           reduce using rule 105 (push_cte -> .)
    FROM            reduce using rule 105 (push_cte -> .)
    RBRACE          reduce using rule 105 (push_cte -> .)

    push_cte                       shift and go to state 106

state 78

    (99) factor -> LPAREN . expresion RPAREN
    (82) expresion -> . exp
    (83) expresion -> . exp comp exp quad_comp
    (89) exp -> . termino quad_term
    (90) exp -> . termino quad_term exp1
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    ID              shift and go to state 79
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75
    CTE_STRING      shift and go to state 76

    expresion                      shift and go to state 107
    factor                         shift and go to state 74
    termino                        shift and go to state 71
    exp                            shift and go to state 81
    factorAux                      shift and go to state 82
    var_cte                        shift and go to state 70

state 79

    (107) var_cte -> ID . push_id
    (104) push_id -> .

    TIMES           reduce using rule 104 (push_id -> .)
    DIVIDE          reduce using rule 104 (push_id -> .)
    PLUS            reduce using rule 104 (push_id -> .)
    MINUS           reduce using rule 104 (push_id -> .)
    LOWERTHAN       reduce using rule 104 (push_id -> .)
    MORETHAN        reduce using rule 104 (push_id -> .)
    DIFFERENT       reduce using rule 104 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 104 (push_id -> .)
    RPAREN          reduce using rule 104 (push_id -> .)
    COMA            reduce using rule 104 (push_id -> .)
    SEMICOLON       reduce using rule 104 (push_id -> .)
    ID              reduce using rule 104 (push_id -> .)
    IF              reduce using rule 104 (push_id -> .)
    PRINT           reduce using rule 104 (push_id -> .)
    WHILE           reduce using rule 104 (push_id -> .)
    FROM            reduce using rule 104 (push_id -> .)
    RBRACE          reduce using rule 104 (push_id -> .)

    push_id                        shift and go to state 108

state 80

    (70) condicion -> IF LPAREN expresion . RPAREN cond bloque condFinal
    (71) condicion -> IF LPAREN expresion . RPAREN cond bloque ELSE condElse bloque condFinal

    RPAREN          shift and go to state 109


state 81

    (82) expresion -> exp .
    (83) expresion -> exp . comp exp quad_comp
    (84) comp -> . LOWERTHAN push_poper
    (85) comp -> . MORETHAN push_poper
    (86) comp -> . DIFFERENT push_poper
    (87) comp -> . DOUBLEEQUAL push_poper

    COMA            reduce using rule 82 (expresion -> exp .)
    RPAREN          reduce using rule 82 (expresion -> exp .)
    SEMICOLON       reduce using rule 82 (expresion -> exp .)
    ID              reduce using rule 82 (expresion -> exp .)
    IF              reduce using rule 82 (expresion -> exp .)
    PRINT           reduce using rule 82 (expresion -> exp .)
    WHILE           reduce using rule 82 (expresion -> exp .)
    FROM            reduce using rule 82 (expresion -> exp .)
    RBRACE          reduce using rule 82 (expresion -> exp .)
    LOWERTHAN       shift and go to state 112
    MORETHAN        shift and go to state 114
    DIFFERENT       shift and go to state 110
    DOUBLEEQUAL     shift and go to state 111

    comp                           shift and go to state 113

state 82

    (100) factor -> factorAux .

    TIMES           reduce using rule 100 (factor -> factorAux .)
    DIVIDE          reduce using rule 100 (factor -> factorAux .)
    PLUS            reduce using rule 100 (factor -> factorAux .)
    MINUS           reduce using rule 100 (factor -> factorAux .)
    LOWERTHAN       reduce using rule 100 (factor -> factorAux .)
    MORETHAN        reduce using rule 100 (factor -> factorAux .)
    DIFFERENT       reduce using rule 100 (factor -> factorAux .)
    DOUBLEEQUAL     reduce using rule 100 (factor -> factorAux .)
    SEMICOLON       reduce using rule 100 (factor -> factorAux .)
    COMA            reduce using rule 100 (factor -> factorAux .)
    RPAREN          reduce using rule 100 (factor -> factorAux .)
    ID              reduce using rule 100 (factor -> factorAux .)
    IF              reduce using rule 100 (factor -> factorAux .)
    PRINT           reduce using rule 100 (factor -> factorAux .)
    WHILE           reduce using rule 100 (factor -> factorAux .)
    FROM            reduce using rule 100 (factor -> factorAux .)
    RBRACE          reduce using rule 100 (factor -> factorAux .)


state 83

    (14) varAux1 -> tipo varAux2 . SEMICOLON
    (15) varAux1 -> tipo varAux2 . SEMICOLON varAux1

    SEMICOLON       shift and go to state 115


state 84

    (16) varAux2 -> ID .
    (17) varAux2 -> ID . COMA varAux2

    SEMICOLON       reduce using rule 16 (varAux2 -> ID .)
    COMA            shift and go to state 116


state 85

    (56) llamadaAFuncion -> ID actualizaFuncion generarEra . LPAREN paramFuncion gosub RPAREN expresion
    (57) llamadaAFuncion -> ID actualizaFuncion generarEra . LPAREN paramFuncion gosub RPAREN SEMICOLON

    LPAREN          shift and go to state 117


state 86

    (69) comparacion -> ID push_id DOUBLEEQUAL . push_poper expresion SEMICOLON
    (106) push_poper -> .

    LPAREN          reduce using rule 106 (push_poper -> .)
    PLUS            reduce using rule 106 (push_poper -> .)
    MINUS           reduce using rule 106 (push_poper -> .)
    ID              reduce using rule 106 (push_poper -> .)
    CTE_I           reduce using rule 106 (push_poper -> .)
    CTE_F           reduce using rule 106 (push_poper -> .)
    CTE_STRING      reduce using rule 106 (push_poper -> .)

    push_poper                     shift and go to state 118

state 87

    (67) asignacion -> ID push_id EQUAL . push_poper expresion create_asign SEMICOLON
    (106) push_poper -> .

    LPAREN          reduce using rule 106 (push_poper -> .)
    PLUS            reduce using rule 106 (push_poper -> .)
    MINUS           reduce using rule 106 (push_poper -> .)
    ID              reduce using rule 106 (push_poper -> .)
    CTE_I           reduce using rule 106 (push_poper -> .)
    CTE_F           reduce using rule 106 (push_poper -> .)
    CTE_STRING      reduce using rule 106 (push_poper -> .)

    push_poper                     shift and go to state 119

state 88

    (48) loopFromDo -> FROM LPAREN ID . EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    EQUAL           shift and go to state 120


state 89

    (44) while -> WHILE while1 LPAREN . expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (82) expresion -> . exp
    (83) expresion -> . exp comp exp quad_comp
    (89) exp -> . termino quad_term
    (90) exp -> . termino quad_term exp1
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    ID              shift and go to state 79
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75
    CTE_STRING      shift and go to state 76

    expresion                      shift and go to state 121
    factor                         shift and go to state 74
    var_cte                        shift and go to state 70
    termino                        shift and go to state 71
    exp                            shift and go to state 81
    factorAux                      shift and go to state 82

state 90

    (10) main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc .

    FUNCTION        reduce using rule 10 (main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc .)
    $end            reduce using rule 10 (main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc .)


state 91

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . RBRACE endProc
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux RBRACE endProc
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . RBRACE endProc function
    (30) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux RBRACE endProc function
    (13) vars -> . VAR varAux1

    RBRACE          shift and go to state 122
    VAR             shift and go to state 38

    vars                           shift and go to state 123

state 92

    (31) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE RBRACE endProc
    (32) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux RBRACE endProc
    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE RBRACE endProc function
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux RBRACE endProc function

    LBRACE          shift and go to state 124


state 93

    (36) param -> tipo ID .
    (37) param -> tipo ID . COMA param

    RPAREN          reduce using rule 36 (param -> tipo ID .)
    COMA            shift and go to state 125


state 94

    (11) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .

    FUNCTION        reduce using rule 11 (main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .)
    $end            reduce using rule 11 (main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .)


state 95

    (78) escrituraAux -> CTE_STRING .
    (80) escrituraAux -> CTE_STRING . COMA escrituraAux
    (110) var_cte -> CTE_STRING . push_cte
    (105) push_cte -> .

  ! shift/reduce conflict for COMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 78 (escrituraAux -> CTE_STRING .)
    RPAREN          reduce using rule 78 (escrituraAux -> CTE_STRING .)
    COMA            shift and go to state 126
    TIMES           reduce using rule 105 (push_cte -> .)
    DIVIDE          reduce using rule 105 (push_cte -> .)
    PLUS            reduce using rule 105 (push_cte -> .)
    MINUS           reduce using rule 105 (push_cte -> .)
    LOWERTHAN       reduce using rule 105 (push_cte -> .)
    MORETHAN        reduce using rule 105 (push_cte -> .)
    DIFFERENT       reduce using rule 105 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 105 (push_cte -> .)

  ! COMA            [ reduce using rule 105 (push_cte -> .) ]
  ! RPAREN          [ reduce using rule 105 (push_cte -> .) ]

    push_cte                       shift and go to state 105

state 96

    (77) escrituraAux -> expresion .
    (79) escrituraAux -> expresion . COMA escrituraAux

    RPAREN          reduce using rule 77 (escrituraAux -> expresion .)
    COMA            shift and go to state 127


state 97

    (56) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (57) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (107) var_cte -> ID . push_id
    (58) actualizaFuncion -> .
    (104) push_id -> .

    LPAREN          reduce using rule 58 (actualizaFuncion -> .)
    TIMES           reduce using rule 104 (push_id -> .)
    DIVIDE          reduce using rule 104 (push_id -> .)
    PLUS            reduce using rule 104 (push_id -> .)
    MINUS           reduce using rule 104 (push_id -> .)
    LOWERTHAN       reduce using rule 104 (push_id -> .)
    MORETHAN        reduce using rule 104 (push_id -> .)
    DIFFERENT       reduce using rule 104 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 104 (push_id -> .)
    COMA            reduce using rule 104 (push_id -> .)
    RPAREN          reduce using rule 104 (push_id -> .)

    actualizaFuncion               shift and go to state 59
    push_id                        shift and go to state 108

state 98

    (75) escritura -> PRINT push_poper LPAREN escrituraAux . RPAREN quad_print SEMICOLON

    RPAREN          shift and go to state 128


state 99

    (81) escrituraAux -> llamadaAFuncion .

    RPAREN          reduce using rule 81 (escrituraAux -> llamadaAFuncion .)


state 100

    (89) exp -> termino quad_term .
    (90) exp -> termino quad_term . exp1
    (91) exp1 -> . PLUS push_poper exp
    (92) exp1 -> . MINUS push_poper exp

    RPAREN          reduce using rule 89 (exp -> termino quad_term .)
    COMA            reduce using rule 89 (exp -> termino quad_term .)
    SEMICOLON       reduce using rule 89 (exp -> termino quad_term .)
    ID              reduce using rule 89 (exp -> termino quad_term .)
    IF              reduce using rule 89 (exp -> termino quad_term .)
    PRINT           reduce using rule 89 (exp -> termino quad_term .)
    WHILE           reduce using rule 89 (exp -> termino quad_term .)
    FROM            reduce using rule 89 (exp -> termino quad_term .)
    RBRACE          reduce using rule 89 (exp -> termino quad_term .)
    LOWERTHAN       reduce using rule 89 (exp -> termino quad_term .)
    MORETHAN        reduce using rule 89 (exp -> termino quad_term .)
    DIFFERENT       reduce using rule 89 (exp -> termino quad_term .)
    DOUBLEEQUAL     reduce using rule 89 (exp -> termino quad_term .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131

    exp1                           shift and go to state 129

state 101

    (102) factorAux -> MINUS push_poper . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 79
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75
    CTE_STRING      shift and go to state 76

    var_cte                        shift and go to state 132

state 102

    (101) factorAux -> PLUS push_poper . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 79
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75
    CTE_STRING      shift and go to state 76

    var_cte                        shift and go to state 133

state 103

    (95) termino -> factor quad_fact .
    (96) termino -> factor quad_fact . termino1
    (97) termino1 -> . TIMES push_poper termino
    (98) termino1 -> . DIVIDE push_poper termino

    PLUS            reduce using rule 95 (termino -> factor quad_fact .)
    MINUS           reduce using rule 95 (termino -> factor quad_fact .)
    LOWERTHAN       reduce using rule 95 (termino -> factor quad_fact .)
    MORETHAN        reduce using rule 95 (termino -> factor quad_fact .)
    DIFFERENT       reduce using rule 95 (termino -> factor quad_fact .)
    DOUBLEEQUAL     reduce using rule 95 (termino -> factor quad_fact .)
    RPAREN          reduce using rule 95 (termino -> factor quad_fact .)
    COMA            reduce using rule 95 (termino -> factor quad_fact .)
    SEMICOLON       reduce using rule 95 (termino -> factor quad_fact .)
    ID              reduce using rule 95 (termino -> factor quad_fact .)
    IF              reduce using rule 95 (termino -> factor quad_fact .)
    PRINT           reduce using rule 95 (termino -> factor quad_fact .)
    WHILE           reduce using rule 95 (termino -> factor quad_fact .)
    FROM            reduce using rule 95 (termino -> factor quad_fact .)
    RBRACE          reduce using rule 95 (termino -> factor quad_fact .)
    TIMES           shift and go to state 136
    DIVIDE          shift and go to state 134

    termino1                       shift and go to state 135

state 104

    (109) var_cte -> CTE_F push_cte .

    TIMES           reduce using rule 109 (var_cte -> CTE_F push_cte .)
    DIVIDE          reduce using rule 109 (var_cte -> CTE_F push_cte .)
    PLUS            reduce using rule 109 (var_cte -> CTE_F push_cte .)
    MINUS           reduce using rule 109 (var_cte -> CTE_F push_cte .)
    LOWERTHAN       reduce using rule 109 (var_cte -> CTE_F push_cte .)
    MORETHAN        reduce using rule 109 (var_cte -> CTE_F push_cte .)
    DIFFERENT       reduce using rule 109 (var_cte -> CTE_F push_cte .)
    DOUBLEEQUAL     reduce using rule 109 (var_cte -> CTE_F push_cte .)
    RPAREN          reduce using rule 109 (var_cte -> CTE_F push_cte .)
    COMA            reduce using rule 109 (var_cte -> CTE_F push_cte .)
    SEMICOLON       reduce using rule 109 (var_cte -> CTE_F push_cte .)
    ID              reduce using rule 109 (var_cte -> CTE_F push_cte .)
    IF              reduce using rule 109 (var_cte -> CTE_F push_cte .)
    PRINT           reduce using rule 109 (var_cte -> CTE_F push_cte .)
    WHILE           reduce using rule 109 (var_cte -> CTE_F push_cte .)
    FROM            reduce using rule 109 (var_cte -> CTE_F push_cte .)
    RBRACE          reduce using rule 109 (var_cte -> CTE_F push_cte .)


state 105

    (110) var_cte -> CTE_STRING push_cte .

    TIMES           reduce using rule 110 (var_cte -> CTE_STRING push_cte .)
    DIVIDE          reduce using rule 110 (var_cte -> CTE_STRING push_cte .)
    PLUS            reduce using rule 110 (var_cte -> CTE_STRING push_cte .)
    MINUS           reduce using rule 110 (var_cte -> CTE_STRING push_cte .)
    LOWERTHAN       reduce using rule 110 (var_cte -> CTE_STRING push_cte .)
    MORETHAN        reduce using rule 110 (var_cte -> CTE_STRING push_cte .)
    DIFFERENT       reduce using rule 110 (var_cte -> CTE_STRING push_cte .)
    DOUBLEEQUAL     reduce using rule 110 (var_cte -> CTE_STRING push_cte .)
    RPAREN          reduce using rule 110 (var_cte -> CTE_STRING push_cte .)
    COMA            reduce using rule 110 (var_cte -> CTE_STRING push_cte .)
    SEMICOLON       reduce using rule 110 (var_cte -> CTE_STRING push_cte .)
    ID              reduce using rule 110 (var_cte -> CTE_STRING push_cte .)
    IF              reduce using rule 110 (var_cte -> CTE_STRING push_cte .)
    PRINT           reduce using rule 110 (var_cte -> CTE_STRING push_cte .)
    WHILE           reduce using rule 110 (var_cte -> CTE_STRING push_cte .)
    FROM            reduce using rule 110 (var_cte -> CTE_STRING push_cte .)
    RBRACE          reduce using rule 110 (var_cte -> CTE_STRING push_cte .)


state 106

    (108) var_cte -> CTE_I push_cte .

    TIMES           reduce using rule 108 (var_cte -> CTE_I push_cte .)
    DIVIDE          reduce using rule 108 (var_cte -> CTE_I push_cte .)
    PLUS            reduce using rule 108 (var_cte -> CTE_I push_cte .)
    MINUS           reduce using rule 108 (var_cte -> CTE_I push_cte .)
    LOWERTHAN       reduce using rule 108 (var_cte -> CTE_I push_cte .)
    MORETHAN        reduce using rule 108 (var_cte -> CTE_I push_cte .)
    DIFFERENT       reduce using rule 108 (var_cte -> CTE_I push_cte .)
    DOUBLEEQUAL     reduce using rule 108 (var_cte -> CTE_I push_cte .)
    RPAREN          reduce using rule 108 (var_cte -> CTE_I push_cte .)
    COMA            reduce using rule 108 (var_cte -> CTE_I push_cte .)
    SEMICOLON       reduce using rule 108 (var_cte -> CTE_I push_cte .)
    ID              reduce using rule 108 (var_cte -> CTE_I push_cte .)
    IF              reduce using rule 108 (var_cte -> CTE_I push_cte .)
    PRINT           reduce using rule 108 (var_cte -> CTE_I push_cte .)
    WHILE           reduce using rule 108 (var_cte -> CTE_I push_cte .)
    FROM            reduce using rule 108 (var_cte -> CTE_I push_cte .)
    RBRACE          reduce using rule 108 (var_cte -> CTE_I push_cte .)


state 107

    (99) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 137


state 108

    (107) var_cte -> ID push_id .

    TIMES           reduce using rule 107 (var_cte -> ID push_id .)
    DIVIDE          reduce using rule 107 (var_cte -> ID push_id .)
    PLUS            reduce using rule 107 (var_cte -> ID push_id .)
    MINUS           reduce using rule 107 (var_cte -> ID push_id .)
    LOWERTHAN       reduce using rule 107 (var_cte -> ID push_id .)
    MORETHAN        reduce using rule 107 (var_cte -> ID push_id .)
    DIFFERENT       reduce using rule 107 (var_cte -> ID push_id .)
    DOUBLEEQUAL     reduce using rule 107 (var_cte -> ID push_id .)
    RPAREN          reduce using rule 107 (var_cte -> ID push_id .)
    COMA            reduce using rule 107 (var_cte -> ID push_id .)
    SEMICOLON       reduce using rule 107 (var_cte -> ID push_id .)
    ID              reduce using rule 107 (var_cte -> ID push_id .)
    IF              reduce using rule 107 (var_cte -> ID push_id .)
    PRINT           reduce using rule 107 (var_cte -> ID push_id .)
    WHILE           reduce using rule 107 (var_cte -> ID push_id .)
    FROM            reduce using rule 107 (var_cte -> ID push_id .)
    RBRACE          reduce using rule 107 (var_cte -> ID push_id .)


state 109

    (70) condicion -> IF LPAREN expresion RPAREN . cond bloque condFinal
    (71) condicion -> IF LPAREN expresion RPAREN . cond bloque ELSE condElse bloque condFinal
    (72) cond -> .

    LBRACE          reduce using rule 72 (cond -> .)

    cond                           shift and go to state 138

state 110

    (86) comp -> DIFFERENT . push_poper
    (106) push_poper -> .

    LPAREN          reduce using rule 106 (push_poper -> .)
    PLUS            reduce using rule 106 (push_poper -> .)
    MINUS           reduce using rule 106 (push_poper -> .)
    ID              reduce using rule 106 (push_poper -> .)
    CTE_I           reduce using rule 106 (push_poper -> .)
    CTE_F           reduce using rule 106 (push_poper -> .)
    CTE_STRING      reduce using rule 106 (push_poper -> .)

    push_poper                     shift and go to state 139

state 111

    (87) comp -> DOUBLEEQUAL . push_poper
    (106) push_poper -> .

    LPAREN          reduce using rule 106 (push_poper -> .)
    PLUS            reduce using rule 106 (push_poper -> .)
    MINUS           reduce using rule 106 (push_poper -> .)
    ID              reduce using rule 106 (push_poper -> .)
    CTE_I           reduce using rule 106 (push_poper -> .)
    CTE_F           reduce using rule 106 (push_poper -> .)
    CTE_STRING      reduce using rule 106 (push_poper -> .)

    push_poper                     shift and go to state 140

state 112

    (84) comp -> LOWERTHAN . push_poper
    (106) push_poper -> .

    LPAREN          reduce using rule 106 (push_poper -> .)
    PLUS            reduce using rule 106 (push_poper -> .)
    MINUS           reduce using rule 106 (push_poper -> .)
    ID              reduce using rule 106 (push_poper -> .)
    CTE_I           reduce using rule 106 (push_poper -> .)
    CTE_F           reduce using rule 106 (push_poper -> .)
    CTE_STRING      reduce using rule 106 (push_poper -> .)

    push_poper                     shift and go to state 141

state 113

    (83) expresion -> exp comp . exp quad_comp
    (89) exp -> . termino quad_term
    (90) exp -> . termino quad_term exp1
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    ID              shift and go to state 79
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75
    CTE_STRING      shift and go to state 76

    factor                         shift and go to state 74
    termino                        shift and go to state 71
    exp                            shift and go to state 142
    factorAux                      shift and go to state 82
    var_cte                        shift and go to state 70

state 114

    (85) comp -> MORETHAN . push_poper
    (106) push_poper -> .

    LPAREN          reduce using rule 106 (push_poper -> .)
    PLUS            reduce using rule 106 (push_poper -> .)
    MINUS           reduce using rule 106 (push_poper -> .)
    ID              reduce using rule 106 (push_poper -> .)
    CTE_I           reduce using rule 106 (push_poper -> .)
    CTE_F           reduce using rule 106 (push_poper -> .)
    CTE_STRING      reduce using rule 106 (push_poper -> .)

    push_poper                     shift and go to state 143

state 115

    (14) varAux1 -> tipo varAux2 SEMICOLON .
    (15) varAux1 -> tipo varAux2 SEMICOLON . varAux1
    (14) varAux1 -> . tipo varAux2 SEMICOLON
    (15) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (18) tipo -> . INT
    (19) tipo -> . FLOAT
    (20) tipo -> . CHAR

    ID              reduce using rule 14 (varAux1 -> tipo varAux2 SEMICOLON .)
    IF              reduce using rule 14 (varAux1 -> tipo varAux2 SEMICOLON .)
    PRINT           reduce using rule 14 (varAux1 -> tipo varAux2 SEMICOLON .)
    WHILE           reduce using rule 14 (varAux1 -> tipo varAux2 SEMICOLON .)
    FROM            reduce using rule 14 (varAux1 -> tipo varAux2 SEMICOLON .)
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

    varAux1                        shift and go to state 144
    tipo                           shift and go to state 57

state 116

    (17) varAux2 -> ID COMA . varAux2
    (16) varAux2 -> . ID
    (17) varAux2 -> . ID COMA varAux2

    ID              shift and go to state 84

    varAux2                        shift and go to state 145

state 117

    (56) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN . paramFuncion gosub RPAREN expresion
    (57) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN . paramFuncion gosub RPAREN SEMICOLON
    (61) paramFuncion -> . ID push_id2
    (62) paramFuncion -> . ID push_id2 COMA paramFuncion
    (63) paramFuncion -> . expresion
    (64) paramFuncion -> . expresion COMA paramFuncion
    (65) paramFuncion -> . empty
    (82) expresion -> . exp
    (83) expresion -> . exp comp exp quad_comp
    (39) empty -> .
    (89) exp -> . termino quad_term
    (90) exp -> . termino quad_term exp1
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 148
    RPAREN          reduce using rule 39 (empty -> .)
    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75
    CTE_STRING      shift and go to state 76

    expresion                      shift and go to state 149
    paramFuncion                   shift and go to state 146
    empty                          shift and go to state 147
    exp                            shift and go to state 81
    factorAux                      shift and go to state 82
    factor                         shift and go to state 74
    var_cte                        shift and go to state 70
    termino                        shift and go to state 71

state 118

    (69) comparacion -> ID push_id DOUBLEEQUAL push_poper . expresion SEMICOLON
    (82) expresion -> . exp
    (83) expresion -> . exp comp exp quad_comp
    (89) exp -> . termino quad_term
    (90) exp -> . termino quad_term exp1
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    ID              shift and go to state 79
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75
    CTE_STRING      shift and go to state 76

    expresion                      shift and go to state 150
    factor                         shift and go to state 74
    var_cte                        shift and go to state 70
    termino                        shift and go to state 71
    exp                            shift and go to state 81
    factorAux                      shift and go to state 82

state 119

    (67) asignacion -> ID push_id EQUAL push_poper . expresion create_asign SEMICOLON
    (82) expresion -> . exp
    (83) expresion -> . exp comp exp quad_comp
    (89) exp -> . termino quad_term
    (90) exp -> . termino quad_term exp1
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    ID              shift and go to state 79
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75
    CTE_STRING      shift and go to state 76

    expresion                      shift and go to state 151
    var_cte                        shift and go to state 70
    termino                        shift and go to state 71
    exp                            shift and go to state 81
    factorAux                      shift and go to state 82
    factor                         shift and go to state 74

state 120

    (48) loopFromDo -> FROM LPAREN ID EQUAL . expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (82) expresion -> . exp
    (83) expresion -> . exp comp exp quad_comp
    (89) exp -> . termino quad_term
    (90) exp -> . termino quad_term exp1
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    ID              shift and go to state 79
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75
    CTE_STRING      shift and go to state 76

    expresion                      shift and go to state 152
    factor                         shift and go to state 74
    var_cte                        shift and go to state 70
    termino                        shift and go to state 71
    exp                            shift and go to state 81
    factorAux                      shift and go to state 82

state 121

    (44) while -> WHILE while1 LPAREN expresion . RPAREN while2 LBRACE bloqueAux RBRACE while3

    RPAREN          shift and go to state 153


state 122

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE . endProc
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE . endProc function
    (35) endProc -> .

    FUNCTION        reduce using rule 35 (endProc -> .)
    $end            reduce using rule 35 (endProc -> .)

    endProc                        shift and go to state 154

state 123

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux RBRACE endProc
    (30) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux RBRACE endProc function
    (42) bloqueAux -> . estatuto
    (43) bloqueAux -> . estatuto bloqueAux
    (49) estatuto -> . asignacion
    (50) estatuto -> . condicion
    (51) estatuto -> . escritura
    (52) estatuto -> . while
    (53) estatuto -> . loopFromDo
    (54) estatuto -> . comparacion
    (55) estatuto -> . llamadaAFuncion
    (67) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (70) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (71) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (75) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (44) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (48) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (69) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (56) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    ID              shift and go to state 39
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 44
    FROM            shift and go to state 42

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 40
    llamadaAFuncion                shift and go to state 41
    asignacion                     shift and go to state 43
    bloqueAux                      shift and go to state 155
    while                          shift and go to state 46
    comparacion                    shift and go to state 47
    escritura                      shift and go to state 48

state 124

    (31) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . RBRACE endProc
    (32) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux RBRACE endProc
    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . RBRACE endProc function
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux RBRACE endProc function
    (13) vars -> . VAR varAux1

    RBRACE          shift and go to state 156
    VAR             shift and go to state 38

    vars                           shift and go to state 157

state 125

    (37) param -> tipo ID COMA . param
    (36) param -> . tipo ID
    (37) param -> . tipo ID COMA param
    (38) param -> . empty
    (18) tipo -> . INT
    (19) tipo -> . FLOAT
    (20) tipo -> . CHAR
    (39) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    RPAREN          reduce using rule 39 (empty -> .)

    empty                          shift and go to state 66
    param                          shift and go to state 158
    tipo                           shift and go to state 67

state 126

    (80) escrituraAux -> CTE_STRING COMA . escrituraAux
    (77) escrituraAux -> . expresion
    (78) escrituraAux -> . CTE_STRING
    (79) escrituraAux -> . expresion COMA escrituraAux
    (80) escrituraAux -> . CTE_STRING COMA escrituraAux
    (81) escrituraAux -> . llamadaAFuncion
    (82) expresion -> . exp
    (83) expresion -> . exp comp exp quad_comp
    (56) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (89) exp -> . termino quad_term
    (90) exp -> . termino quad_term exp1
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    CTE_STRING      shift and go to state 95
    ID              shift and go to state 97
    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75

    escrituraAux                   shift and go to state 159
    expresion                      shift and go to state 96
    llamadaAFuncion                shift and go to state 99
    termino                        shift and go to state 71
    exp                            shift and go to state 81
    factorAux                      shift and go to state 82
    factor                         shift and go to state 74
    var_cte                        shift and go to state 70

state 127

    (79) escrituraAux -> expresion COMA . escrituraAux
    (77) escrituraAux -> . expresion
    (78) escrituraAux -> . CTE_STRING
    (79) escrituraAux -> . expresion COMA escrituraAux
    (80) escrituraAux -> . CTE_STRING COMA escrituraAux
    (81) escrituraAux -> . llamadaAFuncion
    (82) expresion -> . exp
    (83) expresion -> . exp comp exp quad_comp
    (56) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (89) exp -> . termino quad_term
    (90) exp -> . termino quad_term exp1
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    CTE_STRING      shift and go to state 95
    ID              shift and go to state 97
    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75

    expresion                      shift and go to state 96
    escrituraAux                   shift and go to state 160
    llamadaAFuncion                shift and go to state 99
    termino                        shift and go to state 71
    exp                            shift and go to state 81
    factorAux                      shift and go to state 82
    factor                         shift and go to state 74
    var_cte                        shift and go to state 70

state 128

    (75) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN . quad_print SEMICOLON
    (76) quad_print -> .

    SEMICOLON       reduce using rule 76 (quad_print -> .)

    quad_print                     shift and go to state 161

state 129

    (90) exp -> termino quad_term exp1 .

    RPAREN          reduce using rule 90 (exp -> termino quad_term exp1 .)
    COMA            reduce using rule 90 (exp -> termino quad_term exp1 .)
    SEMICOLON       reduce using rule 90 (exp -> termino quad_term exp1 .)
    ID              reduce using rule 90 (exp -> termino quad_term exp1 .)
    IF              reduce using rule 90 (exp -> termino quad_term exp1 .)
    PRINT           reduce using rule 90 (exp -> termino quad_term exp1 .)
    WHILE           reduce using rule 90 (exp -> termino quad_term exp1 .)
    FROM            reduce using rule 90 (exp -> termino quad_term exp1 .)
    RBRACE          reduce using rule 90 (exp -> termino quad_term exp1 .)
    LOWERTHAN       reduce using rule 90 (exp -> termino quad_term exp1 .)
    MORETHAN        reduce using rule 90 (exp -> termino quad_term exp1 .)
    DIFFERENT       reduce using rule 90 (exp -> termino quad_term exp1 .)
    DOUBLEEQUAL     reduce using rule 90 (exp -> termino quad_term exp1 .)


state 130

    (91) exp1 -> PLUS . push_poper exp
    (106) push_poper -> .

    LPAREN          reduce using rule 106 (push_poper -> .)
    PLUS            reduce using rule 106 (push_poper -> .)
    MINUS           reduce using rule 106 (push_poper -> .)
    ID              reduce using rule 106 (push_poper -> .)
    CTE_I           reduce using rule 106 (push_poper -> .)
    CTE_F           reduce using rule 106 (push_poper -> .)
    CTE_STRING      reduce using rule 106 (push_poper -> .)

    push_poper                     shift and go to state 162

state 131

    (92) exp1 -> MINUS . push_poper exp
    (106) push_poper -> .

    LPAREN          reduce using rule 106 (push_poper -> .)
    PLUS            reduce using rule 106 (push_poper -> .)
    MINUS           reduce using rule 106 (push_poper -> .)
    ID              reduce using rule 106 (push_poper -> .)
    CTE_I           reduce using rule 106 (push_poper -> .)
    CTE_F           reduce using rule 106 (push_poper -> .)
    CTE_STRING      reduce using rule 106 (push_poper -> .)

    push_poper                     shift and go to state 163

state 132

    (102) factorAux -> MINUS push_poper var_cte .

    TIMES           reduce using rule 102 (factorAux -> MINUS push_poper var_cte .)
    DIVIDE          reduce using rule 102 (factorAux -> MINUS push_poper var_cte .)
    PLUS            reduce using rule 102 (factorAux -> MINUS push_poper var_cte .)
    MINUS           reduce using rule 102 (factorAux -> MINUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 102 (factorAux -> MINUS push_poper var_cte .)
    MORETHAN        reduce using rule 102 (factorAux -> MINUS push_poper var_cte .)
    DIFFERENT       reduce using rule 102 (factorAux -> MINUS push_poper var_cte .)
    DOUBLEEQUAL     reduce using rule 102 (factorAux -> MINUS push_poper var_cte .)
    COMA            reduce using rule 102 (factorAux -> MINUS push_poper var_cte .)
    RPAREN          reduce using rule 102 (factorAux -> MINUS push_poper var_cte .)
    SEMICOLON       reduce using rule 102 (factorAux -> MINUS push_poper var_cte .)
    ID              reduce using rule 102 (factorAux -> MINUS push_poper var_cte .)
    IF              reduce using rule 102 (factorAux -> MINUS push_poper var_cte .)
    PRINT           reduce using rule 102 (factorAux -> MINUS push_poper var_cte .)
    WHILE           reduce using rule 102 (factorAux -> MINUS push_poper var_cte .)
    FROM            reduce using rule 102 (factorAux -> MINUS push_poper var_cte .)
    RBRACE          reduce using rule 102 (factorAux -> MINUS push_poper var_cte .)


state 133

    (101) factorAux -> PLUS push_poper var_cte .

    TIMES           reduce using rule 101 (factorAux -> PLUS push_poper var_cte .)
    DIVIDE          reduce using rule 101 (factorAux -> PLUS push_poper var_cte .)
    PLUS            reduce using rule 101 (factorAux -> PLUS push_poper var_cte .)
    MINUS           reduce using rule 101 (factorAux -> PLUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 101 (factorAux -> PLUS push_poper var_cte .)
    MORETHAN        reduce using rule 101 (factorAux -> PLUS push_poper var_cte .)
    DIFFERENT       reduce using rule 101 (factorAux -> PLUS push_poper var_cte .)
    DOUBLEEQUAL     reduce using rule 101 (factorAux -> PLUS push_poper var_cte .)
    COMA            reduce using rule 101 (factorAux -> PLUS push_poper var_cte .)
    RPAREN          reduce using rule 101 (factorAux -> PLUS push_poper var_cte .)
    SEMICOLON       reduce using rule 101 (factorAux -> PLUS push_poper var_cte .)
    ID              reduce using rule 101 (factorAux -> PLUS push_poper var_cte .)
    IF              reduce using rule 101 (factorAux -> PLUS push_poper var_cte .)
    PRINT           reduce using rule 101 (factorAux -> PLUS push_poper var_cte .)
    WHILE           reduce using rule 101 (factorAux -> PLUS push_poper var_cte .)
    FROM            reduce using rule 101 (factorAux -> PLUS push_poper var_cte .)
    RBRACE          reduce using rule 101 (factorAux -> PLUS push_poper var_cte .)


state 134

    (98) termino1 -> DIVIDE . push_poper termino
    (106) push_poper -> .

    LPAREN          reduce using rule 106 (push_poper -> .)
    PLUS            reduce using rule 106 (push_poper -> .)
    MINUS           reduce using rule 106 (push_poper -> .)
    ID              reduce using rule 106 (push_poper -> .)
    CTE_I           reduce using rule 106 (push_poper -> .)
    CTE_F           reduce using rule 106 (push_poper -> .)
    CTE_STRING      reduce using rule 106 (push_poper -> .)

    push_poper                     shift and go to state 164

state 135

    (96) termino -> factor quad_fact termino1 .

    PLUS            reduce using rule 96 (termino -> factor quad_fact termino1 .)
    MINUS           reduce using rule 96 (termino -> factor quad_fact termino1 .)
    LOWERTHAN       reduce using rule 96 (termino -> factor quad_fact termino1 .)
    MORETHAN        reduce using rule 96 (termino -> factor quad_fact termino1 .)
    DIFFERENT       reduce using rule 96 (termino -> factor quad_fact termino1 .)
    DOUBLEEQUAL     reduce using rule 96 (termino -> factor quad_fact termino1 .)
    RPAREN          reduce using rule 96 (termino -> factor quad_fact termino1 .)
    COMA            reduce using rule 96 (termino -> factor quad_fact termino1 .)
    SEMICOLON       reduce using rule 96 (termino -> factor quad_fact termino1 .)
    ID              reduce using rule 96 (termino -> factor quad_fact termino1 .)
    IF              reduce using rule 96 (termino -> factor quad_fact termino1 .)
    PRINT           reduce using rule 96 (termino -> factor quad_fact termino1 .)
    WHILE           reduce using rule 96 (termino -> factor quad_fact termino1 .)
    FROM            reduce using rule 96 (termino -> factor quad_fact termino1 .)
    RBRACE          reduce using rule 96 (termino -> factor quad_fact termino1 .)


state 136

    (97) termino1 -> TIMES . push_poper termino
    (106) push_poper -> .

    LPAREN          reduce using rule 106 (push_poper -> .)
    PLUS            reduce using rule 106 (push_poper -> .)
    MINUS           reduce using rule 106 (push_poper -> .)
    ID              reduce using rule 106 (push_poper -> .)
    CTE_I           reduce using rule 106 (push_poper -> .)
    CTE_F           reduce using rule 106 (push_poper -> .)
    CTE_STRING      reduce using rule 106 (push_poper -> .)

    push_poper                     shift and go to state 165

state 137

    (99) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    LOWERTHAN       reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    MORETHAN        reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    DIFFERENT       reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    DOUBLEEQUAL     reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    COMA            reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    ID              reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    IF              reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    PRINT           reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    WHILE           reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    FROM            reduce using rule 99 (factor -> LPAREN expresion RPAREN .)
    RBRACE          reduce using rule 99 (factor -> LPAREN expresion RPAREN .)


state 138

    (70) condicion -> IF LPAREN expresion RPAREN cond . bloque condFinal
    (71) condicion -> IF LPAREN expresion RPAREN cond . bloque ELSE condElse bloque condFinal
    (25) bloque -> . LBRACE RBRACE
    (26) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 166

    bloque                         shift and go to state 167

state 139

    (86) comp -> DIFFERENT push_poper .

    LPAREN          reduce using rule 86 (comp -> DIFFERENT push_poper .)
    PLUS            reduce using rule 86 (comp -> DIFFERENT push_poper .)
    MINUS           reduce using rule 86 (comp -> DIFFERENT push_poper .)
    ID              reduce using rule 86 (comp -> DIFFERENT push_poper .)
    CTE_I           reduce using rule 86 (comp -> DIFFERENT push_poper .)
    CTE_F           reduce using rule 86 (comp -> DIFFERENT push_poper .)
    CTE_STRING      reduce using rule 86 (comp -> DIFFERENT push_poper .)


state 140

    (87) comp -> DOUBLEEQUAL push_poper .

    LPAREN          reduce using rule 87 (comp -> DOUBLEEQUAL push_poper .)
    PLUS            reduce using rule 87 (comp -> DOUBLEEQUAL push_poper .)
    MINUS           reduce using rule 87 (comp -> DOUBLEEQUAL push_poper .)
    ID              reduce using rule 87 (comp -> DOUBLEEQUAL push_poper .)
    CTE_I           reduce using rule 87 (comp -> DOUBLEEQUAL push_poper .)
    CTE_F           reduce using rule 87 (comp -> DOUBLEEQUAL push_poper .)
    CTE_STRING      reduce using rule 87 (comp -> DOUBLEEQUAL push_poper .)


state 141

    (84) comp -> LOWERTHAN push_poper .

    LPAREN          reduce using rule 84 (comp -> LOWERTHAN push_poper .)
    PLUS            reduce using rule 84 (comp -> LOWERTHAN push_poper .)
    MINUS           reduce using rule 84 (comp -> LOWERTHAN push_poper .)
    ID              reduce using rule 84 (comp -> LOWERTHAN push_poper .)
    CTE_I           reduce using rule 84 (comp -> LOWERTHAN push_poper .)
    CTE_F           reduce using rule 84 (comp -> LOWERTHAN push_poper .)
    CTE_STRING      reduce using rule 84 (comp -> LOWERTHAN push_poper .)


state 142

    (83) expresion -> exp comp exp . quad_comp
    (88) quad_comp -> .

    RPAREN          reduce using rule 88 (quad_comp -> .)
    COMA            reduce using rule 88 (quad_comp -> .)
    SEMICOLON       reduce using rule 88 (quad_comp -> .)
    ID              reduce using rule 88 (quad_comp -> .)
    IF              reduce using rule 88 (quad_comp -> .)
    PRINT           reduce using rule 88 (quad_comp -> .)
    WHILE           reduce using rule 88 (quad_comp -> .)
    FROM            reduce using rule 88 (quad_comp -> .)
    RBRACE          reduce using rule 88 (quad_comp -> .)

    quad_comp                      shift and go to state 168

state 143

    (85) comp -> MORETHAN push_poper .

    LPAREN          reduce using rule 85 (comp -> MORETHAN push_poper .)
    PLUS            reduce using rule 85 (comp -> MORETHAN push_poper .)
    MINUS           reduce using rule 85 (comp -> MORETHAN push_poper .)
    ID              reduce using rule 85 (comp -> MORETHAN push_poper .)
    CTE_I           reduce using rule 85 (comp -> MORETHAN push_poper .)
    CTE_F           reduce using rule 85 (comp -> MORETHAN push_poper .)
    CTE_STRING      reduce using rule 85 (comp -> MORETHAN push_poper .)


state 144

    (15) varAux1 -> tipo varAux2 SEMICOLON varAux1 .

    ID              reduce using rule 15 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    IF              reduce using rule 15 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    PRINT           reduce using rule 15 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    WHILE           reduce using rule 15 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    FROM            reduce using rule 15 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)


state 145

    (17) varAux2 -> ID COMA varAux2 .

    SEMICOLON       reduce using rule 17 (varAux2 -> ID COMA varAux2 .)


state 146

    (56) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion . gosub RPAREN expresion
    (57) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion . gosub RPAREN SEMICOLON
    (59) gosub -> .

    RPAREN          reduce using rule 59 (gosub -> .)

    gosub                          shift and go to state 169

state 147

    (65) paramFuncion -> empty .

    RPAREN          reduce using rule 65 (paramFuncion -> empty .)


state 148

    (61) paramFuncion -> ID . push_id2
    (62) paramFuncion -> ID . push_id2 COMA paramFuncion
    (107) var_cte -> ID . push_id
    (66) push_id2 -> .
    (104) push_id -> .

  ! reduce/reduce conflict for COMA resolved using rule 66 (push_id2 -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 66 (push_id2 -> .)
    COMA            reduce using rule 66 (push_id2 -> .)
    RPAREN          reduce using rule 66 (push_id2 -> .)
    TIMES           reduce using rule 104 (push_id -> .)
    DIVIDE          reduce using rule 104 (push_id -> .)
    PLUS            reduce using rule 104 (push_id -> .)
    MINUS           reduce using rule 104 (push_id -> .)
    LOWERTHAN       reduce using rule 104 (push_id -> .)
    MORETHAN        reduce using rule 104 (push_id -> .)
    DIFFERENT       reduce using rule 104 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 104 (push_id -> .)

  ! COMA            [ reduce using rule 104 (push_id -> .) ]
  ! RPAREN          [ reduce using rule 104 (push_id -> .) ]

    push_id                        shift and go to state 108
    push_id2                       shift and go to state 170

state 149

    (63) paramFuncion -> expresion .
    (64) paramFuncion -> expresion . COMA paramFuncion

    RPAREN          reduce using rule 63 (paramFuncion -> expresion .)
    COMA            shift and go to state 171


state 150

    (69) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion . SEMICOLON

    SEMICOLON       shift and go to state 172


state 151

    (67) asignacion -> ID push_id EQUAL push_poper expresion . create_asign SEMICOLON
    (68) create_asign -> .

    SEMICOLON       reduce using rule 68 (create_asign -> .)

    create_asign                   shift and go to state 173

state 152

    (48) loopFromDo -> FROM LPAREN ID EQUAL expresion . RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    RPAREN          shift and go to state 174


state 153

    (44) while -> WHILE while1 LPAREN expresion RPAREN . while2 LBRACE bloqueAux RBRACE while3
    (46) while2 -> .

    LBRACE          reduce using rule 46 (while2 -> .)

    while2                         shift and go to state 175

state 154

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc .
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc . function
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (30) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (31) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (32) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (33) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (34) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    $end            reduce using rule 27 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 176

state 155

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . RBRACE endProc
    (30) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . RBRACE endProc function

    RBRACE          shift and go to state 177


state 156

    (31) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE . endProc
    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE . endProc function
    (35) endProc -> .

    FUNCTION        reduce using rule 35 (endProc -> .)
    $end            reduce using rule 35 (endProc -> .)

    endProc                        shift and go to state 178

state 157

    (32) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux RBRACE endProc
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux RBRACE endProc function
    (42) bloqueAux -> . estatuto
    (43) bloqueAux -> . estatuto bloqueAux
    (49) estatuto -> . asignacion
    (50) estatuto -> . condicion
    (51) estatuto -> . escritura
    (52) estatuto -> . while
    (53) estatuto -> . loopFromDo
    (54) estatuto -> . comparacion
    (55) estatuto -> . llamadaAFuncion
    (67) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (70) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (71) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (75) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (44) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (48) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (69) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (56) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    ID              shift and go to state 39
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 44
    FROM            shift and go to state 42

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 40
    llamadaAFuncion                shift and go to state 41
    asignacion                     shift and go to state 43
    bloqueAux                      shift and go to state 179
    while                          shift and go to state 46
    comparacion                    shift and go to state 47
    escritura                      shift and go to state 48

state 158

    (37) param -> tipo ID COMA param .

    RPAREN          reduce using rule 37 (param -> tipo ID COMA param .)


state 159

    (80) escrituraAux -> CTE_STRING COMA escrituraAux .

    RPAREN          reduce using rule 80 (escrituraAux -> CTE_STRING COMA escrituraAux .)


state 160

    (79) escrituraAux -> expresion COMA escrituraAux .

    RPAREN          reduce using rule 79 (escrituraAux -> expresion COMA escrituraAux .)


state 161

    (75) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print . SEMICOLON

    SEMICOLON       shift and go to state 180


state 162

    (91) exp1 -> PLUS push_poper . exp
    (89) exp -> . termino quad_term
    (90) exp -> . termino quad_term exp1
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    ID              shift and go to state 79
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75
    CTE_STRING      shift and go to state 76

    termino                        shift and go to state 71
    exp                            shift and go to state 181
    factor                         shift and go to state 74
    factorAux                      shift and go to state 82
    var_cte                        shift and go to state 70

state 163

    (92) exp1 -> MINUS push_poper . exp
    (89) exp -> . termino quad_term
    (90) exp -> . termino quad_term exp1
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    ID              shift and go to state 79
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75
    CTE_STRING      shift and go to state 76

    termino                        shift and go to state 71
    exp                            shift and go to state 182
    factor                         shift and go to state 74
    factorAux                      shift and go to state 82
    var_cte                        shift and go to state 70

state 164

    (98) termino1 -> DIVIDE push_poper . termino
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    ID              shift and go to state 79
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75
    CTE_STRING      shift and go to state 76

    termino                        shift and go to state 183
    factor                         shift and go to state 74
    factorAux                      shift and go to state 82
    var_cte                        shift and go to state 70

state 165

    (97) termino1 -> TIMES push_poper . termino
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    ID              shift and go to state 79
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75
    CTE_STRING      shift and go to state 76

    termino                        shift and go to state 184
    factor                         shift and go to state 74
    factorAux                      shift and go to state 82
    var_cte                        shift and go to state 70

state 166

    (25) bloque -> LBRACE . RBRACE
    (26) bloque -> LBRACE . bloqueAux RBRACE
    (42) bloqueAux -> . estatuto
    (43) bloqueAux -> . estatuto bloqueAux
    (49) estatuto -> . asignacion
    (50) estatuto -> . condicion
    (51) estatuto -> . escritura
    (52) estatuto -> . while
    (53) estatuto -> . loopFromDo
    (54) estatuto -> . comparacion
    (55) estatuto -> . llamadaAFuncion
    (67) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (70) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (71) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (75) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (44) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (48) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (69) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (56) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    RBRACE          shift and go to state 185
    ID              shift and go to state 39
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 44
    FROM            shift and go to state 42

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 40
    llamadaAFuncion                shift and go to state 41
    asignacion                     shift and go to state 43
    bloqueAux                      shift and go to state 186
    while                          shift and go to state 46
    comparacion                    shift and go to state 47
    escritura                      shift and go to state 48

state 167

    (70) condicion -> IF LPAREN expresion RPAREN cond bloque . condFinal
    (71) condicion -> IF LPAREN expresion RPAREN cond bloque . ELSE condElse bloque condFinal
    (74) condFinal -> .

    ELSE            shift and go to state 188
    ID              reduce using rule 74 (condFinal -> .)
    IF              reduce using rule 74 (condFinal -> .)
    PRINT           reduce using rule 74 (condFinal -> .)
    WHILE           reduce using rule 74 (condFinal -> .)
    FROM            reduce using rule 74 (condFinal -> .)
    RBRACE          reduce using rule 74 (condFinal -> .)

    condFinal                      shift and go to state 187

state 168

    (83) expresion -> exp comp exp quad_comp .

    COMA            reduce using rule 83 (expresion -> exp comp exp quad_comp .)
    RPAREN          reduce using rule 83 (expresion -> exp comp exp quad_comp .)
    SEMICOLON       reduce using rule 83 (expresion -> exp comp exp quad_comp .)
    ID              reduce using rule 83 (expresion -> exp comp exp quad_comp .)
    IF              reduce using rule 83 (expresion -> exp comp exp quad_comp .)
    PRINT           reduce using rule 83 (expresion -> exp comp exp quad_comp .)
    WHILE           reduce using rule 83 (expresion -> exp comp exp quad_comp .)
    FROM            reduce using rule 83 (expresion -> exp comp exp quad_comp .)
    RBRACE          reduce using rule 83 (expresion -> exp comp exp quad_comp .)


state 169

    (56) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub . RPAREN expresion
    (57) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub . RPAREN SEMICOLON

    RPAREN          shift and go to state 189


state 170

    (61) paramFuncion -> ID push_id2 .
    (62) paramFuncion -> ID push_id2 . COMA paramFuncion

    RPAREN          reduce using rule 61 (paramFuncion -> ID push_id2 .)
    COMA            shift and go to state 190


state 171

    (64) paramFuncion -> expresion COMA . paramFuncion
    (61) paramFuncion -> . ID push_id2
    (62) paramFuncion -> . ID push_id2 COMA paramFuncion
    (63) paramFuncion -> . expresion
    (64) paramFuncion -> . expresion COMA paramFuncion
    (65) paramFuncion -> . empty
    (82) expresion -> . exp
    (83) expresion -> . exp comp exp quad_comp
    (39) empty -> .
    (89) exp -> . termino quad_term
    (90) exp -> . termino quad_term exp1
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 148
    RPAREN          reduce using rule 39 (empty -> .)
    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75
    CTE_STRING      shift and go to state 76

    expresion                      shift and go to state 149
    paramFuncion                   shift and go to state 191
    termino                        shift and go to state 71
    exp                            shift and go to state 81
    factorAux                      shift and go to state 82
    factor                         shift and go to state 74
    var_cte                        shift and go to state 70
    empty                          shift and go to state 147

state 172

    (69) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .

    ID              reduce using rule 69 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    IF              reduce using rule 69 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    PRINT           reduce using rule 69 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    WHILE           reduce using rule 69 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    FROM            reduce using rule 69 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    RBRACE          reduce using rule 69 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)


state 173

    (67) asignacion -> ID push_id EQUAL push_poper expresion create_asign . SEMICOLON

    SEMICOLON       shift and go to state 192


state 174

    (48) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN . TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    TO              shift and go to state 193


state 175

    (44) while -> WHILE while1 LPAREN expresion RPAREN while2 . LBRACE bloqueAux RBRACE while3

    LBRACE          shift and go to state 194


state 176

    (29) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function .

    $end            reduce using rule 29 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function .)


state 177

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE . endProc
    (30) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE . endProc function
    (35) endProc -> .

    FUNCTION        reduce using rule 35 (endProc -> .)
    $end            reduce using rule 35 (endProc -> .)

    endProc                        shift and go to state 195

state 178

    (31) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc .
    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc . function
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (30) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (31) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (32) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (33) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (34) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    $end            reduce using rule 31 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 196

state 179

    (32) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . RBRACE endProc
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . RBRACE endProc function

    RBRACE          shift and go to state 197


state 180

    (75) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .

    ID              reduce using rule 75 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    IF              reduce using rule 75 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    PRINT           reduce using rule 75 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    WHILE           reduce using rule 75 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    FROM            reduce using rule 75 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    RBRACE          reduce using rule 75 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)


state 181

    (91) exp1 -> PLUS push_poper exp .

    LOWERTHAN       reduce using rule 91 (exp1 -> PLUS push_poper exp .)
    MORETHAN        reduce using rule 91 (exp1 -> PLUS push_poper exp .)
    DIFFERENT       reduce using rule 91 (exp1 -> PLUS push_poper exp .)
    DOUBLEEQUAL     reduce using rule 91 (exp1 -> PLUS push_poper exp .)
    RPAREN          reduce using rule 91 (exp1 -> PLUS push_poper exp .)
    COMA            reduce using rule 91 (exp1 -> PLUS push_poper exp .)
    SEMICOLON       reduce using rule 91 (exp1 -> PLUS push_poper exp .)
    ID              reduce using rule 91 (exp1 -> PLUS push_poper exp .)
    IF              reduce using rule 91 (exp1 -> PLUS push_poper exp .)
    PRINT           reduce using rule 91 (exp1 -> PLUS push_poper exp .)
    WHILE           reduce using rule 91 (exp1 -> PLUS push_poper exp .)
    FROM            reduce using rule 91 (exp1 -> PLUS push_poper exp .)
    RBRACE          reduce using rule 91 (exp1 -> PLUS push_poper exp .)


state 182

    (92) exp1 -> MINUS push_poper exp .

    LOWERTHAN       reduce using rule 92 (exp1 -> MINUS push_poper exp .)
    MORETHAN        reduce using rule 92 (exp1 -> MINUS push_poper exp .)
    DIFFERENT       reduce using rule 92 (exp1 -> MINUS push_poper exp .)
    DOUBLEEQUAL     reduce using rule 92 (exp1 -> MINUS push_poper exp .)
    RPAREN          reduce using rule 92 (exp1 -> MINUS push_poper exp .)
    COMA            reduce using rule 92 (exp1 -> MINUS push_poper exp .)
    SEMICOLON       reduce using rule 92 (exp1 -> MINUS push_poper exp .)
    ID              reduce using rule 92 (exp1 -> MINUS push_poper exp .)
    IF              reduce using rule 92 (exp1 -> MINUS push_poper exp .)
    PRINT           reduce using rule 92 (exp1 -> MINUS push_poper exp .)
    WHILE           reduce using rule 92 (exp1 -> MINUS push_poper exp .)
    FROM            reduce using rule 92 (exp1 -> MINUS push_poper exp .)
    RBRACE          reduce using rule 92 (exp1 -> MINUS push_poper exp .)


state 183

    (98) termino1 -> DIVIDE push_poper termino .

    PLUS            reduce using rule 98 (termino1 -> DIVIDE push_poper termino .)
    MINUS           reduce using rule 98 (termino1 -> DIVIDE push_poper termino .)
    LOWERTHAN       reduce using rule 98 (termino1 -> DIVIDE push_poper termino .)
    MORETHAN        reduce using rule 98 (termino1 -> DIVIDE push_poper termino .)
    DIFFERENT       reduce using rule 98 (termino1 -> DIVIDE push_poper termino .)
    DOUBLEEQUAL     reduce using rule 98 (termino1 -> DIVIDE push_poper termino .)
    RPAREN          reduce using rule 98 (termino1 -> DIVIDE push_poper termino .)
    COMA            reduce using rule 98 (termino1 -> DIVIDE push_poper termino .)
    SEMICOLON       reduce using rule 98 (termino1 -> DIVIDE push_poper termino .)
    ID              reduce using rule 98 (termino1 -> DIVIDE push_poper termino .)
    IF              reduce using rule 98 (termino1 -> DIVIDE push_poper termino .)
    PRINT           reduce using rule 98 (termino1 -> DIVIDE push_poper termino .)
    WHILE           reduce using rule 98 (termino1 -> DIVIDE push_poper termino .)
    FROM            reduce using rule 98 (termino1 -> DIVIDE push_poper termino .)
    RBRACE          reduce using rule 98 (termino1 -> DIVIDE push_poper termino .)


state 184

    (97) termino1 -> TIMES push_poper termino .

    PLUS            reduce using rule 97 (termino1 -> TIMES push_poper termino .)
    MINUS           reduce using rule 97 (termino1 -> TIMES push_poper termino .)
    LOWERTHAN       reduce using rule 97 (termino1 -> TIMES push_poper termino .)
    MORETHAN        reduce using rule 97 (termino1 -> TIMES push_poper termino .)
    DIFFERENT       reduce using rule 97 (termino1 -> TIMES push_poper termino .)
    DOUBLEEQUAL     reduce using rule 97 (termino1 -> TIMES push_poper termino .)
    RPAREN          reduce using rule 97 (termino1 -> TIMES push_poper termino .)
    COMA            reduce using rule 97 (termino1 -> TIMES push_poper termino .)
    SEMICOLON       reduce using rule 97 (termino1 -> TIMES push_poper termino .)
    ID              reduce using rule 97 (termino1 -> TIMES push_poper termino .)
    IF              reduce using rule 97 (termino1 -> TIMES push_poper termino .)
    PRINT           reduce using rule 97 (termino1 -> TIMES push_poper termino .)
    WHILE           reduce using rule 97 (termino1 -> TIMES push_poper termino .)
    FROM            reduce using rule 97 (termino1 -> TIMES push_poper termino .)
    RBRACE          reduce using rule 97 (termino1 -> TIMES push_poper termino .)


state 185

    (25) bloque -> LBRACE RBRACE .

    ELSE            reduce using rule 25 (bloque -> LBRACE RBRACE .)
    ID              reduce using rule 25 (bloque -> LBRACE RBRACE .)
    IF              reduce using rule 25 (bloque -> LBRACE RBRACE .)
    PRINT           reduce using rule 25 (bloque -> LBRACE RBRACE .)
    WHILE           reduce using rule 25 (bloque -> LBRACE RBRACE .)
    FROM            reduce using rule 25 (bloque -> LBRACE RBRACE .)
    RBRACE          reduce using rule 25 (bloque -> LBRACE RBRACE .)


state 186

    (26) bloque -> LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 198


state 187

    (70) condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .

    ID              reduce using rule 70 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    IF              reduce using rule 70 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    PRINT           reduce using rule 70 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    WHILE           reduce using rule 70 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    FROM            reduce using rule 70 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    RBRACE          reduce using rule 70 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)


state 188

    (71) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE . condElse bloque condFinal
    (73) condElse -> .

    LBRACE          reduce using rule 73 (condElse -> .)

    condElse                       shift and go to state 199

state 189

    (56) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN . expresion
    (57) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN . SEMICOLON
    (82) expresion -> . exp
    (83) expresion -> . exp comp exp quad_comp
    (89) exp -> . termino quad_term
    (90) exp -> . termino quad_term exp1
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    SEMICOLON       shift and go to state 200
    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    ID              shift and go to state 79
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75
    CTE_STRING      shift and go to state 76

    expresion                      shift and go to state 201
    termino                        shift and go to state 71
    exp                            shift and go to state 81
    factorAux                      shift and go to state 82
    factor                         shift and go to state 74
    var_cte                        shift and go to state 70

state 190

    (62) paramFuncion -> ID push_id2 COMA . paramFuncion
    (61) paramFuncion -> . ID push_id2
    (62) paramFuncion -> . ID push_id2 COMA paramFuncion
    (63) paramFuncion -> . expresion
    (64) paramFuncion -> . expresion COMA paramFuncion
    (65) paramFuncion -> . empty
    (82) expresion -> . exp
    (83) expresion -> . exp comp exp quad_comp
    (39) empty -> .
    (89) exp -> . termino quad_term
    (90) exp -> . termino quad_term exp1
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 148
    RPAREN          reduce using rule 39 (empty -> .)
    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75
    CTE_STRING      shift and go to state 76

    expresion                      shift and go to state 149
    paramFuncion                   shift and go to state 202
    termino                        shift and go to state 71
    exp                            shift and go to state 81
    factorAux                      shift and go to state 82
    factor                         shift and go to state 74
    var_cte                        shift and go to state 70
    empty                          shift and go to state 147

state 191

    (64) paramFuncion -> expresion COMA paramFuncion .

    RPAREN          reduce using rule 64 (paramFuncion -> expresion COMA paramFuncion .)


state 192

    (67) asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .

    ID              reduce using rule 67 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    IF              reduce using rule 67 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    PRINT           reduce using rule 67 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    WHILE           reduce using rule 67 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    FROM            reduce using rule 67 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    RBRACE          reduce using rule 67 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)


state 193

    (48) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO . LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    LPAREN          shift and go to state 203


state 194

    (44) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE . bloqueAux RBRACE while3
    (42) bloqueAux -> . estatuto
    (43) bloqueAux -> . estatuto bloqueAux
    (49) estatuto -> . asignacion
    (50) estatuto -> . condicion
    (51) estatuto -> . escritura
    (52) estatuto -> . while
    (53) estatuto -> . loopFromDo
    (54) estatuto -> . comparacion
    (55) estatuto -> . llamadaAFuncion
    (67) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (70) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (71) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (75) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (44) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (48) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (69) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (56) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    ID              shift and go to state 39
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 44
    FROM            shift and go to state 42

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 40
    llamadaAFuncion                shift and go to state 41
    asignacion                     shift and go to state 43
    bloqueAux                      shift and go to state 204
    while                          shift and go to state 46
    comparacion                    shift and go to state 47
    escritura                      shift and go to state 48

state 195

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .
    (30) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc . function
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (30) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (31) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (32) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (33) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (34) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    $end            reduce using rule 28 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 205

state 196

    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function .

    $end            reduce using rule 33 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function .)


state 197

    (32) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE . endProc
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE . endProc function
    (35) endProc -> .

    FUNCTION        reduce using rule 35 (endProc -> .)
    $end            reduce using rule 35 (endProc -> .)

    endProc                        shift and go to state 206

state 198

    (26) bloque -> LBRACE bloqueAux RBRACE .

    ELSE            reduce using rule 26 (bloque -> LBRACE bloqueAux RBRACE .)
    ID              reduce using rule 26 (bloque -> LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 26 (bloque -> LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 26 (bloque -> LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 26 (bloque -> LBRACE bloqueAux RBRACE .)
    FROM            reduce using rule 26 (bloque -> LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 26 (bloque -> LBRACE bloqueAux RBRACE .)


state 199

    (71) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse . bloque condFinal
    (25) bloque -> . LBRACE RBRACE
    (26) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 166

    bloque                         shift and go to state 207

state 200

    (57) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .

    ID              reduce using rule 57 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    IF              reduce using rule 57 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    PRINT           reduce using rule 57 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    WHILE           reduce using rule 57 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    FROM            reduce using rule 57 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    RBRACE          reduce using rule 57 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    RPAREN          reduce using rule 57 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)


state 201

    (56) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .

    ID              reduce using rule 56 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    IF              reduce using rule 56 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    PRINT           reduce using rule 56 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    WHILE           reduce using rule 56 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    FROM            reduce using rule 56 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    RBRACE          reduce using rule 56 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    RPAREN          reduce using rule 56 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)


state 202

    (62) paramFuncion -> ID push_id2 COMA paramFuncion .

    RPAREN          reduce using rule 62 (paramFuncion -> ID push_id2 COMA paramFuncion .)


state 203

    (48) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN . expresion RPAREN DO LBRACE bloqueAux RBRACE
    (82) expresion -> . exp
    (83) expresion -> . exp comp exp quad_comp
    (89) exp -> . termino quad_term
    (90) exp -> . termino quad_term exp1
    (95) termino -> . factor quad_fact
    (96) termino -> . factor quad_fact termino1
    (99) factor -> . LPAREN expresion RPAREN
    (100) factor -> . factorAux
    (101) factorAux -> . PLUS push_poper var_cte
    (102) factorAux -> . MINUS push_poper var_cte
    (103) factorAux -> . var_cte
    (107) var_cte -> . ID push_id
    (108) var_cte -> . CTE_I push_cte
    (109) var_cte -> . CTE_F push_cte
    (110) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 78
    PLUS            shift and go to state 73
    MINUS           shift and go to state 72
    ID              shift and go to state 79
    CTE_I           shift and go to state 77
    CTE_F           shift and go to state 75
    CTE_STRING      shift and go to state 76

    expresion                      shift and go to state 208
    factor                         shift and go to state 74
    var_cte                        shift and go to state 70
    termino                        shift and go to state 71
    exp                            shift and go to state 81
    factorAux                      shift and go to state 82

state 204

    (44) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux . RBRACE while3

    RBRACE          shift and go to state 209


state 205

    (30) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function .

    $end            reduce using rule 30 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function .)


state 206

    (32) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc .
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc . function
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (30) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (31) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (32) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (33) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (34) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    $end            reduce using rule 32 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 210

state 207

    (71) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque . condFinal
    (74) condFinal -> .

    ID              reduce using rule 74 (condFinal -> .)
    IF              reduce using rule 74 (condFinal -> .)
    PRINT           reduce using rule 74 (condFinal -> .)
    WHILE           reduce using rule 74 (condFinal -> .)
    FROM            reduce using rule 74 (condFinal -> .)
    RBRACE          reduce using rule 74 (condFinal -> .)

    condFinal                      shift and go to state 211

state 208

    (48) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion . RPAREN DO LBRACE bloqueAux RBRACE

    RPAREN          shift and go to state 212


state 209

    (44) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE . while3
    (47) while3 -> .

    ID              reduce using rule 47 (while3 -> .)
    IF              reduce using rule 47 (while3 -> .)
    PRINT           reduce using rule 47 (while3 -> .)
    WHILE           reduce using rule 47 (while3 -> .)
    FROM            reduce using rule 47 (while3 -> .)
    RBRACE          reduce using rule 47 (while3 -> .)

    while3                         shift and go to state 213

state 210

    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function .

    $end            reduce using rule 34 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function .)


state 211

    (71) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .

    ID              reduce using rule 71 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    IF              reduce using rule 71 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    PRINT           reduce using rule 71 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    WHILE           reduce using rule 71 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    FROM            reduce using rule 71 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    RBRACE          reduce using rule 71 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)


state 212

    (48) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN . DO LBRACE bloqueAux RBRACE

    DO              shift and go to state 214


state 213

    (44) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .

    ID              reduce using rule 44 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    IF              reduce using rule 44 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    PRINT           reduce using rule 44 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    WHILE           reduce using rule 44 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    FROM            reduce using rule 44 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    RBRACE          reduce using rule 44 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)


state 214

    (48) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 215


state 215

    (48) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE . bloqueAux RBRACE
    (42) bloqueAux -> . estatuto
    (43) bloqueAux -> . estatuto bloqueAux
    (49) estatuto -> . asignacion
    (50) estatuto -> . condicion
    (51) estatuto -> . escritura
    (52) estatuto -> . while
    (53) estatuto -> . loopFromDo
    (54) estatuto -> . comparacion
    (55) estatuto -> . llamadaAFuncion
    (67) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (70) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (71) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (75) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (44) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (48) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (69) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (56) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    ID              shift and go to state 39
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 44
    FROM            shift and go to state 42

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 40
    llamadaAFuncion                shift and go to state 41
    asignacion                     shift and go to state 43
    bloqueAux                      shift and go to state 216
    while                          shift and go to state 46
    comparacion                    shift and go to state 47
    escritura                      shift and go to state 48

state 216

    (48) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 217


state 217

    (48) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .

    ID              reduce using rule 48 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 48 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 48 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 48 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    FROM            reduce using rule 48 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 48 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 51 resolved as shift
WARNING: shift/reduce conflict for COMA in state 95 resolved as shift
WARNING: reduce/reduce conflict in state 95 resolved using rule (escrituraAux -> CTE_STRING)
WARNING: rejected rule (push_cte -> <empty>) in state 95
WARNING: reduce/reduce conflict in state 148 resolved using rule (push_id2 -> <empty>)
WARNING: rejected rule (push_id -> <empty>) in state 148
