Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID COLON varsGlobal main function endPrograma
Rule 2     program -> PROGRAM ID COLON main function endPrograma
Rule 3     program -> PROGRAM ID COLON varsGlobal main endPrograma
Rule 4     program -> PROGRAM ID COLON main endPrograma
Rule 5     endPrograma -> <empty>
Rule 6     varsGlobal -> VAR varAuxGlobal1
Rule 7     varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON
Rule 8     varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1
Rule 9     varAuxGlobal2 -> ID
Rule 10    varAuxGlobal2 -> ID COMA varAuxGlobal2
Rule 11    main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc
Rule 12    main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
Rule 13    nomMain -> MAIN
Rule 14    vars -> VAR varAux1
Rule 15    varAux1 -> tipo varAux2 SEMICOLON
Rule 16    varAux1 -> tipo varAux2 SEMICOLON varAux1
Rule 17    varAux2 -> ID
Rule 18    varAux2 -> ID COMA varAux2
Rule 19    tipo -> INT
Rule 20    tipo -> FLOAT
Rule 21    tipo -> CHAR
Rule 22    tipoFunc -> INT
Rule 23    tipoFunc -> FLOAT
Rule 24    tipoFunc -> CHAR
Rule 25    tipoFunc -> VOID
Rule 26    bloque -> LBRACE RBRACE
Rule 27    bloque -> LBRACE bloqueAux RBRACE
Rule 28    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
Rule 29    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
Rule 30    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
Rule 31    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
Rule 32    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
Rule 33    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
Rule 34    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
Rule 35    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
Rule 36    endProc -> <empty>
Rule 37    param -> tipo ID
Rule 38    param -> tipo ID COMA param
Rule 39    param -> empty
Rule 40    empty -> <empty>
Rule 41    push_function -> <empty>
Rule 42    nomFunc -> ID push_function
Rule 43    bloqueAux -> estatuto
Rule 44    bloqueAux -> estatuto bloqueAux
Rule 45    while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
Rule 46    while1 -> <empty>
Rule 47    while2 -> <empty>
Rule 48    while3 -> <empty>
Rule 49    loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
Rule 50    estatuto -> asignacion
Rule 51    estatuto -> condicion
Rule 52    estatuto -> escritura
Rule 53    estatuto -> while
Rule 54    estatuto -> loopFromDo
Rule 55    estatuto -> comparacion
Rule 56    estatuto -> llamadaAFuncion
Rule 57    llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
Rule 58    llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
Rule 59    actualizaFuncion -> <empty>
Rule 60    gosub -> <empty>
Rule 61    generarEra -> <empty>
Rule 62    paramFuncion -> ID push_id2
Rule 63    paramFuncion -> ID push_id2 COMA paramFuncion
Rule 64    paramFuncion -> expresion
Rule 65    paramFuncion -> expresion COMA paramFuncion
Rule 66    paramFuncion -> empty
Rule 67    push_id2 -> <empty>
Rule 68    asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON
Rule 69    create_asign -> <empty>
Rule 70    comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
Rule 71    condicion -> IF LPAREN expresion RPAREN cond bloque condFinal
Rule 72    condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
Rule 73    cond -> <empty>
Rule 74    condElse -> <empty>
Rule 75    condFinal -> <empty>
Rule 76    escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
Rule 77    quad_print -> <empty>
Rule 78    escrituraAux -> expresion
Rule 79    escrituraAux -> CTE_STRING push_cte
Rule 80    escrituraAux -> expresion COMA escrituraAux
Rule 81    escrituraAux -> CTE_STRING push_cte COMA escrituraAux
Rule 82    escrituraAux -> llamadaAFuncion
Rule 83    expresion -> exp
Rule 84    expresion -> exp comp exp quad_comp
Rule 85    comp -> LOWERTHAN push_poper
Rule 86    comp -> MORETHAN push_poper
Rule 87    comp -> DIFFERENT push_poper
Rule 88    comp -> DOUBLEEQUAL push_poper
Rule 89    comp -> LOWEREQUAL push_poper
Rule 90    comp -> MOREEQUAL push_poper
Rule 91    quad_comp -> <empty>
Rule 92    exp -> termino quad_term
Rule 93    exp -> termino quad_term exp1
Rule 94    exp1 -> PLUS push_poper exp
Rule 95    exp1 -> MINUS push_poper exp
Rule 96    quad_term -> <empty>
Rule 97    quad_fact -> <empty>
Rule 98    termino -> factor quad_fact
Rule 99    termino -> factor quad_fact termino1
Rule 100   termino1 -> TIMES push_poper termino
Rule 101   termino1 -> DIVIDE push_poper termino
Rule 102   factor -> LPAREN expresion RPAREN
Rule 103   factor -> factorAux
Rule 104   factorAux -> PLUS push_poper var_cte
Rule 105   factorAux -> MINUS push_poper var_cte
Rule 106   factorAux -> var_cte
Rule 107   push_id -> <empty>
Rule 108   push_cte -> <empty>
Rule 109   push_poper -> <empty>
Rule 110   var_cte -> ID push_id
Rule 111   var_cte -> CTE_I push_cte
Rule 112   var_cte -> CTE_F push_cte
Rule 113   var_cte -> CTE_STRING push_cte

Terminals, with rules where they appear

AND                  : 
CHAR                 : 21 24
COLON                : 1 2 3 4
COMA                 : 10 18 38 63 65 80 81
CTE_F                : 112
CTE_I                : 111
CTE_STRING           : 79 81 113
DIFFERENT            : 87
DIVIDE               : 101
DO                   : 49
DOUBLEEQUAL          : 70 88
ELSE                 : 72
EQUAL                : 49 68
FLOAT                : 20 23
FROM                 : 49
FUNCTION             : 28 29 30 31 32 33 34 35
ID                   : 1 2 3 4 9 10 17 18 37 38 42 49 57 58 62 63 68 70 110
IF                   : 71 72
INT                  : 19 22
LBRACE               : 11 12 26 27 28 29 30 31 32 33 34 35 45 49
LOWEREQUAL           : 89
LOWERTHAN            : 85
LPAREN               : 11 12 28 29 30 31 32 33 34 35 45 49 49 57 58 71 72 76 102
MAIN                 : 13
MINUS                : 95 105
MOREEQUAL            : 90
MORETHAN             : 86
OR                   : 
PLUS                 : 94 104
PRINT                : 76
PROGRAM              : 1 2 3 4
RBRACE               : 11 12 26 27 28 29 30 31 32 33 34 35 45 49
RPAREN               : 11 12 28 29 30 31 32 33 34 35 45 49 49 57 58 71 72 76 102
SEMICOLON            : 7 8 15 16 58 68 70 76
TIMES                : 100
TO                   : 49
VAR                  : 6 14
VOID                 : 25
WHILE                : 45
error                : 

Nonterminals, with rules where they appear

actualizaFuncion     : 57 58
asignacion           : 50
bloque               : 71 72 72
bloqueAux            : 11 12 27 29 31 33 35 44 45 49
comp                 : 84
comparacion          : 55
cond                 : 71 72
condElse             : 72
condFinal            : 71 72
condicion            : 51
create_asign         : 68
empty                : 39 66
endProc              : 11 12 28 29 30 31 32 33 34 35
endPrograma          : 1 2 3 4
escritura            : 52
escrituraAux         : 76 80 81
estatuto             : 43 44
exp                  : 83 84 84 94 95
exp1                 : 93
expresion            : 45 49 49 57 64 65 68 70 71 72 78 80 102
factor               : 98 99
factorAux            : 103
function             : 1 2 30 31 34 35
generarEra           : 57 58
gosub                : 57 58
llamadaAFuncion      : 56 82
loopFromDo           : 54
main                 : 1 2 3 4
nomFunc              : 28 29 30 31 32 33 34 35
nomMain              : 11 12
param                : 32 33 34 35 38
paramFuncion         : 57 58 63 65
program              : 0
push_cte             : 79 81 111 112 113
push_function        : 42
push_id              : 68 70 110
push_id2             : 62 63
push_poper           : 68 70 76 85 86 87 88 89 90 94 95 100 101 104 105
quad_comp            : 84
quad_fact            : 98 99
quad_print           : 76
quad_term            : 92 93
termino              : 92 93 100 101
termino1             : 99
tipo                 : 7 8 15 16 37 38
tipoFunc             : 28 29 30 31 32 33 34 35
varAux1              : 14 16
varAux2              : 15 16 18
varAuxGlobal1        : 6 8
varAuxGlobal2        : 7 8 10
var_cte              : 104 105 106
vars                 : 12 29 31 33 35
varsGlobal           : 1 3
while                : 53
while1               : 45
while2               : 45
while3               : 45

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID COLON varsGlobal main function endPrograma
    (2) program -> . PROGRAM ID COLON main function endPrograma
    (3) program -> . PROGRAM ID COLON varsGlobal main endPrograma
    (4) program -> . PROGRAM ID COLON main endPrograma

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID COLON varsGlobal main function endPrograma
    (2) program -> PROGRAM . ID COLON main function endPrograma
    (3) program -> PROGRAM . ID COLON varsGlobal main endPrograma
    (4) program -> PROGRAM . ID COLON main endPrograma

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . COLON varsGlobal main function endPrograma
    (2) program -> PROGRAM ID . COLON main function endPrograma
    (3) program -> PROGRAM ID . COLON varsGlobal main endPrograma
    (4) program -> PROGRAM ID . COLON main endPrograma

    COLON           shift and go to state 4


state 4

    (1) program -> PROGRAM ID COLON . varsGlobal main function endPrograma
    (2) program -> PROGRAM ID COLON . main function endPrograma
    (3) program -> PROGRAM ID COLON . varsGlobal main endPrograma
    (4) program -> PROGRAM ID COLON . main endPrograma
    (6) varsGlobal -> . VAR varAuxGlobal1
    (11) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc
    (12) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (13) nomMain -> . MAIN

    VAR             shift and go to state 8
    MAIN            shift and go to state 6

    varsGlobal                     shift and go to state 5
    nomMain                        shift and go to state 7
    main                           shift and go to state 9

state 5

    (1) program -> PROGRAM ID COLON varsGlobal . main function endPrograma
    (3) program -> PROGRAM ID COLON varsGlobal . main endPrograma
    (11) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc
    (12) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (13) nomMain -> . MAIN

    MAIN            shift and go to state 6

    nomMain                        shift and go to state 7
    main                           shift and go to state 10

state 6

    (13) nomMain -> MAIN .

    LPAREN          reduce using rule 13 (nomMain -> MAIN .)


state 7

    (11) main -> nomMain . LPAREN RPAREN LBRACE bloqueAux RBRACE endProc
    (12) main -> nomMain . LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc

    LPAREN          shift and go to state 11


state 8

    (6) varsGlobal -> VAR . varAuxGlobal1
    (7) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON
    (8) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON varAuxGlobal1
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

    varAuxGlobal1                  shift and go to state 16
    tipo                           shift and go to state 12

state 9

    (2) program -> PROGRAM ID COLON main . function endPrograma
    (4) program -> PROGRAM ID COLON main . endPrograma
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (31) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (33) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (35) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (5) endPrograma -> .

    FUNCTION        shift and go to state 19
    $end            reduce using rule 5 (endPrograma -> .)

    function                       shift and go to state 17
    endPrograma                    shift and go to state 18

state 10

    (1) program -> PROGRAM ID COLON varsGlobal main . function endPrograma
    (3) program -> PROGRAM ID COLON varsGlobal main . endPrograma
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (31) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (33) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (35) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (5) endPrograma -> .

    FUNCTION        shift and go to state 19
    $end            reduce using rule 5 (endPrograma -> .)

    function                       shift and go to state 20
    endPrograma                    shift and go to state 21

state 11

    (11) main -> nomMain LPAREN . RPAREN LBRACE bloqueAux RBRACE endProc
    (12) main -> nomMain LPAREN . RPAREN LBRACE vars bloqueAux RBRACE endProc

    RPAREN          shift and go to state 22


state 12

    (7) varAuxGlobal1 -> tipo . varAuxGlobal2 SEMICOLON
    (8) varAuxGlobal1 -> tipo . varAuxGlobal2 SEMICOLON varAuxGlobal1
    (9) varAuxGlobal2 -> . ID
    (10) varAuxGlobal2 -> . ID COMA varAuxGlobal2

    ID              shift and go to state 24

    varAuxGlobal2                  shift and go to state 23

state 13

    (19) tipo -> INT .

    ID              reduce using rule 19 (tipo -> INT .)


state 14

    (20) tipo -> FLOAT .

    ID              reduce using rule 20 (tipo -> FLOAT .)


state 15

    (21) tipo -> CHAR .

    ID              reduce using rule 21 (tipo -> CHAR .)


state 16

    (6) varsGlobal -> VAR varAuxGlobal1 .

    MAIN            reduce using rule 6 (varsGlobal -> VAR varAuxGlobal1 .)


state 17

    (2) program -> PROGRAM ID COLON main function . endPrograma
    (5) endPrograma -> .

    $end            reduce using rule 5 (endPrograma -> .)

    endPrograma                    shift and go to state 25

state 18

    (4) program -> PROGRAM ID COLON main endPrograma .

    $end            reduce using rule 4 (program -> PROGRAM ID COLON main endPrograma .)


state 19

    (28) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (29) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (31) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (33) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (35) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (22) tipoFunc -> . INT
    (23) tipoFunc -> . FLOAT
    (24) tipoFunc -> . CHAR
    (25) tipoFunc -> . VOID

    INT             shift and go to state 26
    FLOAT           shift and go to state 28
    CHAR            shift and go to state 29
    VOID            shift and go to state 27

    tipoFunc                       shift and go to state 30

state 20

    (1) program -> PROGRAM ID COLON varsGlobal main function . endPrograma
    (5) endPrograma -> .

    $end            reduce using rule 5 (endPrograma -> .)

    endPrograma                    shift and go to state 31

state 21

    (3) program -> PROGRAM ID COLON varsGlobal main endPrograma .

    $end            reduce using rule 3 (program -> PROGRAM ID COLON varsGlobal main endPrograma .)


state 22

    (11) main -> nomMain LPAREN RPAREN . LBRACE bloqueAux RBRACE endProc
    (12) main -> nomMain LPAREN RPAREN . LBRACE vars bloqueAux RBRACE endProc

    LBRACE          shift and go to state 32


state 23

    (7) varAuxGlobal1 -> tipo varAuxGlobal2 . SEMICOLON
    (8) varAuxGlobal1 -> tipo varAuxGlobal2 . SEMICOLON varAuxGlobal1

    SEMICOLON       shift and go to state 33


state 24

    (9) varAuxGlobal2 -> ID .
    (10) varAuxGlobal2 -> ID . COMA varAuxGlobal2

    SEMICOLON       reduce using rule 9 (varAuxGlobal2 -> ID .)
    COMA            shift and go to state 34


state 25

    (2) program -> PROGRAM ID COLON main function endPrograma .

    $end            reduce using rule 2 (program -> PROGRAM ID COLON main function endPrograma .)


state 26

    (22) tipoFunc -> INT .

    ID              reduce using rule 22 (tipoFunc -> INT .)


state 27

    (25) tipoFunc -> VOID .

    ID              reduce using rule 25 (tipoFunc -> VOID .)


state 28

    (23) tipoFunc -> FLOAT .

    ID              reduce using rule 23 (tipoFunc -> FLOAT .)


state 29

    (24) tipoFunc -> CHAR .

    ID              reduce using rule 24 (tipoFunc -> CHAR .)


state 30

    (28) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (29) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (31) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (33) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (35) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (42) nomFunc -> . ID push_function

    ID              shift and go to state 36

    nomFunc                        shift and go to state 35

state 31

    (1) program -> PROGRAM ID COLON varsGlobal main function endPrograma .

    $end            reduce using rule 1 (program -> PROGRAM ID COLON varsGlobal main function endPrograma .)


state 32

    (11) main -> nomMain LPAREN RPAREN LBRACE . bloqueAux RBRACE endProc
    (12) main -> nomMain LPAREN RPAREN LBRACE . vars bloqueAux RBRACE endProc
    (43) bloqueAux -> . estatuto
    (44) bloqueAux -> . estatuto bloqueAux
    (14) vars -> . VAR varAux1
    (50) estatuto -> . asignacion
    (51) estatuto -> . condicion
    (52) estatuto -> . escritura
    (53) estatuto -> . while
    (54) estatuto -> . loopFromDo
    (55) estatuto -> . comparacion
    (56) estatuto -> . llamadaAFuncion
    (68) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (71) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (72) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (76) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (45) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (49) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (70) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    VAR             shift and go to state 42
    ID              shift and go to state 43
    IF              shift and go to state 40
    PRINT           shift and go to state 38
    WHILE           shift and go to state 48
    FROM            shift and go to state 46

    vars                           shift and go to state 37
    estatuto                       shift and go to state 39
    condicion                      shift and go to state 41
    loopFromDo                     shift and go to state 44
    llamadaAFuncion                shift and go to state 45
    asignacion                     shift and go to state 47
    bloqueAux                      shift and go to state 49
    while                          shift and go to state 50
    comparacion                    shift and go to state 51
    escritura                      shift and go to state 52

state 33

    (7) varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON .
    (8) varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON . varAuxGlobal1
    (7) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON
    (8) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON varAuxGlobal1
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR

    MAIN            reduce using rule 7 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON .)
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

    varAuxGlobal1                  shift and go to state 53
    tipo                           shift and go to state 12

state 34

    (10) varAuxGlobal2 -> ID COMA . varAuxGlobal2
    (9) varAuxGlobal2 -> . ID
    (10) varAuxGlobal2 -> . ID COMA varAuxGlobal2

    ID              shift and go to state 24

    varAuxGlobal2                  shift and go to state 54

state 35

    (28) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE RBRACE endProc
    (29) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE RBRACE endProc function
    (31) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE RBRACE endProc
    (33) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE RBRACE endProc function
    (35) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    LPAREN          shift and go to state 55


state 36

    (42) nomFunc -> ID . push_function
    (41) push_function -> .

    LPAREN          reduce using rule 41 (push_function -> .)

    push_function                  shift and go to state 56

state 37

    (12) main -> nomMain LPAREN RPAREN LBRACE vars . bloqueAux RBRACE endProc
    (43) bloqueAux -> . estatuto
    (44) bloqueAux -> . estatuto bloqueAux
    (50) estatuto -> . asignacion
    (51) estatuto -> . condicion
    (52) estatuto -> . escritura
    (53) estatuto -> . while
    (54) estatuto -> . loopFromDo
    (55) estatuto -> . comparacion
    (56) estatuto -> . llamadaAFuncion
    (68) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (71) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (72) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (76) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (45) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (49) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (70) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    ID              shift and go to state 43
    IF              shift and go to state 40
    PRINT           shift and go to state 38
    WHILE           shift and go to state 48
    FROM            shift and go to state 46

    estatuto                       shift and go to state 39
    condicion                      shift and go to state 41
    loopFromDo                     shift and go to state 44
    llamadaAFuncion                shift and go to state 45
    asignacion                     shift and go to state 47
    bloqueAux                      shift and go to state 57
    while                          shift and go to state 50
    comparacion                    shift and go to state 51
    escritura                      shift and go to state 52

state 38

    (76) escritura -> PRINT . push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (109) push_poper -> .

    LPAREN          reduce using rule 109 (push_poper -> .)

    push_poper                     shift and go to state 58

state 39

    (43) bloqueAux -> estatuto .
    (44) bloqueAux -> estatuto . bloqueAux
    (43) bloqueAux -> . estatuto
    (44) bloqueAux -> . estatuto bloqueAux
    (50) estatuto -> . asignacion
    (51) estatuto -> . condicion
    (52) estatuto -> . escritura
    (53) estatuto -> . while
    (54) estatuto -> . loopFromDo
    (55) estatuto -> . comparacion
    (56) estatuto -> . llamadaAFuncion
    (68) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (71) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (72) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (76) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (45) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (49) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (70) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    RBRACE          reduce using rule 43 (bloqueAux -> estatuto .)
    ID              shift and go to state 43
    IF              shift and go to state 40
    PRINT           shift and go to state 38
    WHILE           shift and go to state 48
    FROM            shift and go to state 46

    estatuto                       shift and go to state 39
    condicion                      shift and go to state 41
    loopFromDo                     shift and go to state 44
    llamadaAFuncion                shift and go to state 45
    asignacion                     shift and go to state 47
    bloqueAux                      shift and go to state 59
    while                          shift and go to state 50
    comparacion                    shift and go to state 51
    escritura                      shift and go to state 52

state 40

    (71) condicion -> IF . LPAREN expresion RPAREN cond bloque condFinal
    (72) condicion -> IF . LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal

    LPAREN          shift and go to state 60


state 41

    (51) estatuto -> condicion .

    ID              reduce using rule 51 (estatuto -> condicion .)
    IF              reduce using rule 51 (estatuto -> condicion .)
    PRINT           reduce using rule 51 (estatuto -> condicion .)
    WHILE           reduce using rule 51 (estatuto -> condicion .)
    FROM            reduce using rule 51 (estatuto -> condicion .)
    RBRACE          reduce using rule 51 (estatuto -> condicion .)


state 42

    (14) vars -> VAR . varAux1
    (15) varAux1 -> . tipo varAux2 SEMICOLON
    (16) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

    varAux1                        shift and go to state 62
    tipo                           shift and go to state 61

state 43

    (68) asignacion -> ID . push_id EQUAL push_poper expresion create_asign SEMICOLON
    (70) comparacion -> ID . push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (57) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (58) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (107) push_id -> .
    (59) actualizaFuncion -> .

    EQUAL           reduce using rule 107 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 107 (push_id -> .)
    LPAREN          reduce using rule 59 (actualizaFuncion -> .)

    actualizaFuncion               shift and go to state 63
    push_id                        shift and go to state 64

state 44

    (54) estatuto -> loopFromDo .

    ID              reduce using rule 54 (estatuto -> loopFromDo .)
    IF              reduce using rule 54 (estatuto -> loopFromDo .)
    PRINT           reduce using rule 54 (estatuto -> loopFromDo .)
    WHILE           reduce using rule 54 (estatuto -> loopFromDo .)
    FROM            reduce using rule 54 (estatuto -> loopFromDo .)
    RBRACE          reduce using rule 54 (estatuto -> loopFromDo .)


state 45

    (56) estatuto -> llamadaAFuncion .

    ID              reduce using rule 56 (estatuto -> llamadaAFuncion .)
    IF              reduce using rule 56 (estatuto -> llamadaAFuncion .)
    PRINT           reduce using rule 56 (estatuto -> llamadaAFuncion .)
    WHILE           reduce using rule 56 (estatuto -> llamadaAFuncion .)
    FROM            reduce using rule 56 (estatuto -> llamadaAFuncion .)
    RBRACE          reduce using rule 56 (estatuto -> llamadaAFuncion .)


state 46

    (49) loopFromDo -> FROM . LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    LPAREN          shift and go to state 65


state 47

    (50) estatuto -> asignacion .

    ID              reduce using rule 50 (estatuto -> asignacion .)
    IF              reduce using rule 50 (estatuto -> asignacion .)
    PRINT           reduce using rule 50 (estatuto -> asignacion .)
    WHILE           reduce using rule 50 (estatuto -> asignacion .)
    FROM            reduce using rule 50 (estatuto -> asignacion .)
    RBRACE          reduce using rule 50 (estatuto -> asignacion .)


state 48

    (45) while -> WHILE . while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (46) while1 -> .

    LPAREN          reduce using rule 46 (while1 -> .)

    while1                         shift and go to state 66

state 49

    (11) main -> nomMain LPAREN RPAREN LBRACE bloqueAux . RBRACE endProc

    RBRACE          shift and go to state 67


state 50

    (53) estatuto -> while .

    ID              reduce using rule 53 (estatuto -> while .)
    IF              reduce using rule 53 (estatuto -> while .)
    PRINT           reduce using rule 53 (estatuto -> while .)
    WHILE           reduce using rule 53 (estatuto -> while .)
    FROM            reduce using rule 53 (estatuto -> while .)
    RBRACE          reduce using rule 53 (estatuto -> while .)


state 51

    (55) estatuto -> comparacion .

    ID              reduce using rule 55 (estatuto -> comparacion .)
    IF              reduce using rule 55 (estatuto -> comparacion .)
    PRINT           reduce using rule 55 (estatuto -> comparacion .)
    WHILE           reduce using rule 55 (estatuto -> comparacion .)
    FROM            reduce using rule 55 (estatuto -> comparacion .)
    RBRACE          reduce using rule 55 (estatuto -> comparacion .)


state 52

    (52) estatuto -> escritura .

    ID              reduce using rule 52 (estatuto -> escritura .)
    IF              reduce using rule 52 (estatuto -> escritura .)
    PRINT           reduce using rule 52 (estatuto -> escritura .)
    WHILE           reduce using rule 52 (estatuto -> escritura .)
    FROM            reduce using rule 52 (estatuto -> escritura .)
    RBRACE          reduce using rule 52 (estatuto -> escritura .)


state 53

    (8) varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1 .

    MAIN            reduce using rule 8 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1 .)


state 54

    (10) varAuxGlobal2 -> ID COMA varAuxGlobal2 .

    SEMICOLON       reduce using rule 10 (varAuxGlobal2 -> ID COMA varAuxGlobal2 .)


state 55

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE RBRACE endProc
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE RBRACE endProc function
    (31) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE RBRACE endProc
    (33) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE RBRACE endProc function
    (35) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (37) param -> . tipo ID
    (38) param -> . tipo ID COMA param
    (39) param -> . empty
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR
    (40) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 68
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

  ! RPAREN          [ reduce using rule 40 (empty -> .) ]

    tipo                           shift and go to state 71
    param                          shift and go to state 69
    empty                          shift and go to state 70

state 56

    (42) nomFunc -> ID push_function .

    LPAREN          reduce using rule 42 (nomFunc -> ID push_function .)


state 57

    (12) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux . RBRACE endProc

    RBRACE          shift and go to state 72


state 58

    (76) escritura -> PRINT push_poper . LPAREN escrituraAux RPAREN quad_print SEMICOLON

    LPAREN          shift and go to state 73


state 59

    (44) bloqueAux -> estatuto bloqueAux .

    RBRACE          reduce using rule 44 (bloqueAux -> estatuto bloqueAux .)


state 60

    (71) condicion -> IF LPAREN . expresion RPAREN cond bloque condFinal
    (72) condicion -> IF LPAREN . expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (83) expresion -> . exp
    (84) expresion -> . exp comp exp quad_comp
    (92) exp -> . termino quad_term
    (93) exp -> . termino quad_term exp1
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    ID              shift and go to state 83
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79
    CTE_STRING      shift and go to state 80

    expresion                      shift and go to state 84
    factor                         shift and go to state 78
    termino                        shift and go to state 75
    exp                            shift and go to state 85
    factorAux                      shift and go to state 86
    var_cte                        shift and go to state 74

state 61

    (15) varAux1 -> tipo . varAux2 SEMICOLON
    (16) varAux1 -> tipo . varAux2 SEMICOLON varAux1
    (17) varAux2 -> . ID
    (18) varAux2 -> . ID COMA varAux2

    ID              shift and go to state 88

    varAux2                        shift and go to state 87

state 62

    (14) vars -> VAR varAux1 .

    ID              reduce using rule 14 (vars -> VAR varAux1 .)
    IF              reduce using rule 14 (vars -> VAR varAux1 .)
    PRINT           reduce using rule 14 (vars -> VAR varAux1 .)
    WHILE           reduce using rule 14 (vars -> VAR varAux1 .)
    FROM            reduce using rule 14 (vars -> VAR varAux1 .)


state 63

    (57) llamadaAFuncion -> ID actualizaFuncion . generarEra LPAREN paramFuncion gosub RPAREN expresion
    (58) llamadaAFuncion -> ID actualizaFuncion . generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (61) generarEra -> .

    LPAREN          reduce using rule 61 (generarEra -> .)

    generarEra                     shift and go to state 89

state 64

    (68) asignacion -> ID push_id . EQUAL push_poper expresion create_asign SEMICOLON
    (70) comparacion -> ID push_id . DOUBLEEQUAL push_poper expresion SEMICOLON

    EQUAL           shift and go to state 91
    DOUBLEEQUAL     shift and go to state 90


state 65

    (49) loopFromDo -> FROM LPAREN . ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    ID              shift and go to state 92


state 66

    (45) while -> WHILE while1 . LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3

    LPAREN          shift and go to state 93


state 67

    (11) main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE . endProc
    (36) endProc -> .

    FUNCTION        reduce using rule 36 (endProc -> .)
    $end            reduce using rule 36 (endProc -> .)

    endProc                        shift and go to state 94

state 68

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE RBRACE endProc
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux RBRACE endProc
    (30) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE RBRACE endProc function
    (31) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux RBRACE endProc function

    LBRACE          shift and go to state 95


state 69

    (32) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE RBRACE endProc
    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE RBRACE endProc function
    (35) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux RBRACE endProc function

    RPAREN          shift and go to state 96


state 70

    (39) param -> empty .

    RPAREN          reduce using rule 39 (param -> empty .)


state 71

    (37) param -> tipo . ID
    (38) param -> tipo . ID COMA param

    ID              shift and go to state 97


state 72

    (12) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE . endProc
    (36) endProc -> .

    FUNCTION        reduce using rule 36 (endProc -> .)
    $end            reduce using rule 36 (endProc -> .)

    endProc                        shift and go to state 98

state 73

    (76) escritura -> PRINT push_poper LPAREN . escrituraAux RPAREN quad_print SEMICOLON
    (78) escrituraAux -> . expresion
    (79) escrituraAux -> . CTE_STRING push_cte
    (80) escrituraAux -> . expresion COMA escrituraAux
    (81) escrituraAux -> . CTE_STRING push_cte COMA escrituraAux
    (82) escrituraAux -> . llamadaAFuncion
    (83) expresion -> . exp
    (84) expresion -> . exp comp exp quad_comp
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (92) exp -> . termino quad_term
    (93) exp -> . termino quad_term exp1
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    CTE_STRING      shift and go to state 99
    ID              shift and go to state 101
    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79

    termino                        shift and go to state 75
    factor                         shift and go to state 78
    expresion                      shift and go to state 100
    var_cte                        shift and go to state 74
    escrituraAux                   shift and go to state 102
    llamadaAFuncion                shift and go to state 103
    exp                            shift and go to state 85
    factorAux                      shift and go to state 86

state 74

    (106) factorAux -> var_cte .

    TIMES           reduce using rule 106 (factorAux -> var_cte .)
    DIVIDE          reduce using rule 106 (factorAux -> var_cte .)
    PLUS            reduce using rule 106 (factorAux -> var_cte .)
    MINUS           reduce using rule 106 (factorAux -> var_cte .)
    LOWERTHAN       reduce using rule 106 (factorAux -> var_cte .)
    MORETHAN        reduce using rule 106 (factorAux -> var_cte .)
    DIFFERENT       reduce using rule 106 (factorAux -> var_cte .)
    DOUBLEEQUAL     reduce using rule 106 (factorAux -> var_cte .)
    LOWEREQUAL      reduce using rule 106 (factorAux -> var_cte .)
    MOREEQUAL       reduce using rule 106 (factorAux -> var_cte .)
    COMA            reduce using rule 106 (factorAux -> var_cte .)
    RPAREN          reduce using rule 106 (factorAux -> var_cte .)
    SEMICOLON       reduce using rule 106 (factorAux -> var_cte .)
    ID              reduce using rule 106 (factorAux -> var_cte .)
    IF              reduce using rule 106 (factorAux -> var_cte .)
    PRINT           reduce using rule 106 (factorAux -> var_cte .)
    WHILE           reduce using rule 106 (factorAux -> var_cte .)
    FROM            reduce using rule 106 (factorAux -> var_cte .)
    RBRACE          reduce using rule 106 (factorAux -> var_cte .)


state 75

    (92) exp -> termino . quad_term
    (93) exp -> termino . quad_term exp1
    (96) quad_term -> .

    PLUS            reduce using rule 96 (quad_term -> .)
    MINUS           reduce using rule 96 (quad_term -> .)
    LOWERTHAN       reduce using rule 96 (quad_term -> .)
    MORETHAN        reduce using rule 96 (quad_term -> .)
    DIFFERENT       reduce using rule 96 (quad_term -> .)
    DOUBLEEQUAL     reduce using rule 96 (quad_term -> .)
    LOWEREQUAL      reduce using rule 96 (quad_term -> .)
    MOREEQUAL       reduce using rule 96 (quad_term -> .)
    RPAREN          reduce using rule 96 (quad_term -> .)
    COMA            reduce using rule 96 (quad_term -> .)
    SEMICOLON       reduce using rule 96 (quad_term -> .)
    ID              reduce using rule 96 (quad_term -> .)
    IF              reduce using rule 96 (quad_term -> .)
    PRINT           reduce using rule 96 (quad_term -> .)
    WHILE           reduce using rule 96 (quad_term -> .)
    FROM            reduce using rule 96 (quad_term -> .)
    RBRACE          reduce using rule 96 (quad_term -> .)

    quad_term                      shift and go to state 104

state 76

    (105) factorAux -> MINUS . push_poper var_cte
    (109) push_poper -> .

    ID              reduce using rule 109 (push_poper -> .)
    CTE_I           reduce using rule 109 (push_poper -> .)
    CTE_F           reduce using rule 109 (push_poper -> .)
    CTE_STRING      reduce using rule 109 (push_poper -> .)

    push_poper                     shift and go to state 105

state 77

    (104) factorAux -> PLUS . push_poper var_cte
    (109) push_poper -> .

    ID              reduce using rule 109 (push_poper -> .)
    CTE_I           reduce using rule 109 (push_poper -> .)
    CTE_F           reduce using rule 109 (push_poper -> .)
    CTE_STRING      reduce using rule 109 (push_poper -> .)

    push_poper                     shift and go to state 106

state 78

    (98) termino -> factor . quad_fact
    (99) termino -> factor . quad_fact termino1
    (97) quad_fact -> .

    TIMES           reduce using rule 97 (quad_fact -> .)
    DIVIDE          reduce using rule 97 (quad_fact -> .)
    PLUS            reduce using rule 97 (quad_fact -> .)
    MINUS           reduce using rule 97 (quad_fact -> .)
    LOWERTHAN       reduce using rule 97 (quad_fact -> .)
    MORETHAN        reduce using rule 97 (quad_fact -> .)
    DIFFERENT       reduce using rule 97 (quad_fact -> .)
    DOUBLEEQUAL     reduce using rule 97 (quad_fact -> .)
    LOWEREQUAL      reduce using rule 97 (quad_fact -> .)
    MOREEQUAL       reduce using rule 97 (quad_fact -> .)
    RPAREN          reduce using rule 97 (quad_fact -> .)
    COMA            reduce using rule 97 (quad_fact -> .)
    SEMICOLON       reduce using rule 97 (quad_fact -> .)
    ID              reduce using rule 97 (quad_fact -> .)
    IF              reduce using rule 97 (quad_fact -> .)
    PRINT           reduce using rule 97 (quad_fact -> .)
    WHILE           reduce using rule 97 (quad_fact -> .)
    FROM            reduce using rule 97 (quad_fact -> .)
    RBRACE          reduce using rule 97 (quad_fact -> .)

    quad_fact                      shift and go to state 107

state 79

    (112) var_cte -> CTE_F . push_cte
    (108) push_cte -> .

    TIMES           reduce using rule 108 (push_cte -> .)
    DIVIDE          reduce using rule 108 (push_cte -> .)
    PLUS            reduce using rule 108 (push_cte -> .)
    MINUS           reduce using rule 108 (push_cte -> .)
    LOWERTHAN       reduce using rule 108 (push_cte -> .)
    MORETHAN        reduce using rule 108 (push_cte -> .)
    DIFFERENT       reduce using rule 108 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 108 (push_cte -> .)
    LOWEREQUAL      reduce using rule 108 (push_cte -> .)
    MOREEQUAL       reduce using rule 108 (push_cte -> .)
    RPAREN          reduce using rule 108 (push_cte -> .)
    COMA            reduce using rule 108 (push_cte -> .)
    SEMICOLON       reduce using rule 108 (push_cte -> .)
    ID              reduce using rule 108 (push_cte -> .)
    IF              reduce using rule 108 (push_cte -> .)
    PRINT           reduce using rule 108 (push_cte -> .)
    WHILE           reduce using rule 108 (push_cte -> .)
    FROM            reduce using rule 108 (push_cte -> .)
    RBRACE          reduce using rule 108 (push_cte -> .)

    push_cte                       shift and go to state 108

state 80

    (113) var_cte -> CTE_STRING . push_cte
    (108) push_cte -> .

    TIMES           reduce using rule 108 (push_cte -> .)
    DIVIDE          reduce using rule 108 (push_cte -> .)
    PLUS            reduce using rule 108 (push_cte -> .)
    MINUS           reduce using rule 108 (push_cte -> .)
    LOWERTHAN       reduce using rule 108 (push_cte -> .)
    MORETHAN        reduce using rule 108 (push_cte -> .)
    DIFFERENT       reduce using rule 108 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 108 (push_cte -> .)
    LOWEREQUAL      reduce using rule 108 (push_cte -> .)
    MOREEQUAL       reduce using rule 108 (push_cte -> .)
    RPAREN          reduce using rule 108 (push_cte -> .)
    COMA            reduce using rule 108 (push_cte -> .)
    SEMICOLON       reduce using rule 108 (push_cte -> .)
    ID              reduce using rule 108 (push_cte -> .)
    IF              reduce using rule 108 (push_cte -> .)
    PRINT           reduce using rule 108 (push_cte -> .)
    WHILE           reduce using rule 108 (push_cte -> .)
    FROM            reduce using rule 108 (push_cte -> .)
    RBRACE          reduce using rule 108 (push_cte -> .)

    push_cte                       shift and go to state 109

state 81

    (111) var_cte -> CTE_I . push_cte
    (108) push_cte -> .

    TIMES           reduce using rule 108 (push_cte -> .)
    DIVIDE          reduce using rule 108 (push_cte -> .)
    PLUS            reduce using rule 108 (push_cte -> .)
    MINUS           reduce using rule 108 (push_cte -> .)
    LOWERTHAN       reduce using rule 108 (push_cte -> .)
    MORETHAN        reduce using rule 108 (push_cte -> .)
    DIFFERENT       reduce using rule 108 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 108 (push_cte -> .)
    LOWEREQUAL      reduce using rule 108 (push_cte -> .)
    MOREEQUAL       reduce using rule 108 (push_cte -> .)
    RPAREN          reduce using rule 108 (push_cte -> .)
    COMA            reduce using rule 108 (push_cte -> .)
    SEMICOLON       reduce using rule 108 (push_cte -> .)
    ID              reduce using rule 108 (push_cte -> .)
    IF              reduce using rule 108 (push_cte -> .)
    PRINT           reduce using rule 108 (push_cte -> .)
    WHILE           reduce using rule 108 (push_cte -> .)
    FROM            reduce using rule 108 (push_cte -> .)
    RBRACE          reduce using rule 108 (push_cte -> .)

    push_cte                       shift and go to state 110

state 82

    (102) factor -> LPAREN . expresion RPAREN
    (83) expresion -> . exp
    (84) expresion -> . exp comp exp quad_comp
    (92) exp -> . termino quad_term
    (93) exp -> . termino quad_term exp1
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    ID              shift and go to state 83
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79
    CTE_STRING      shift and go to state 80

    expresion                      shift and go to state 111
    factor                         shift and go to state 78
    termino                        shift and go to state 75
    exp                            shift and go to state 85
    factorAux                      shift and go to state 86
    var_cte                        shift and go to state 74

state 83

    (110) var_cte -> ID . push_id
    (107) push_id -> .

    TIMES           reduce using rule 107 (push_id -> .)
    DIVIDE          reduce using rule 107 (push_id -> .)
    PLUS            reduce using rule 107 (push_id -> .)
    MINUS           reduce using rule 107 (push_id -> .)
    LOWERTHAN       reduce using rule 107 (push_id -> .)
    MORETHAN        reduce using rule 107 (push_id -> .)
    DIFFERENT       reduce using rule 107 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 107 (push_id -> .)
    LOWEREQUAL      reduce using rule 107 (push_id -> .)
    MOREEQUAL       reduce using rule 107 (push_id -> .)
    RPAREN          reduce using rule 107 (push_id -> .)
    COMA            reduce using rule 107 (push_id -> .)
    SEMICOLON       reduce using rule 107 (push_id -> .)
    ID              reduce using rule 107 (push_id -> .)
    IF              reduce using rule 107 (push_id -> .)
    PRINT           reduce using rule 107 (push_id -> .)
    WHILE           reduce using rule 107 (push_id -> .)
    FROM            reduce using rule 107 (push_id -> .)
    RBRACE          reduce using rule 107 (push_id -> .)

    push_id                        shift and go to state 112

state 84

    (71) condicion -> IF LPAREN expresion . RPAREN cond bloque condFinal
    (72) condicion -> IF LPAREN expresion . RPAREN cond bloque ELSE condElse bloque condFinal

    RPAREN          shift and go to state 113


state 85

    (83) expresion -> exp .
    (84) expresion -> exp . comp exp quad_comp
    (85) comp -> . LOWERTHAN push_poper
    (86) comp -> . MORETHAN push_poper
    (87) comp -> . DIFFERENT push_poper
    (88) comp -> . DOUBLEEQUAL push_poper
    (89) comp -> . LOWEREQUAL push_poper
    (90) comp -> . MOREEQUAL push_poper

    SEMICOLON       reduce using rule 83 (expresion -> exp .)
    RPAREN          reduce using rule 83 (expresion -> exp .)
    COMA            reduce using rule 83 (expresion -> exp .)
    ID              reduce using rule 83 (expresion -> exp .)
    IF              reduce using rule 83 (expresion -> exp .)
    PRINT           reduce using rule 83 (expresion -> exp .)
    WHILE           reduce using rule 83 (expresion -> exp .)
    FROM            reduce using rule 83 (expresion -> exp .)
    RBRACE          reduce using rule 83 (expresion -> exp .)
    LOWERTHAN       shift and go to state 117
    MORETHAN        shift and go to state 120
    DIFFERENT       shift and go to state 115
    DOUBLEEQUAL     shift and go to state 116
    LOWEREQUAL      shift and go to state 119
    MOREEQUAL       shift and go to state 114

    comp                           shift and go to state 118

state 86

    (103) factor -> factorAux .

    TIMES           reduce using rule 103 (factor -> factorAux .)
    DIVIDE          reduce using rule 103 (factor -> factorAux .)
    PLUS            reduce using rule 103 (factor -> factorAux .)
    MINUS           reduce using rule 103 (factor -> factorAux .)
    LOWERTHAN       reduce using rule 103 (factor -> factorAux .)
    MORETHAN        reduce using rule 103 (factor -> factorAux .)
    DIFFERENT       reduce using rule 103 (factor -> factorAux .)
    DOUBLEEQUAL     reduce using rule 103 (factor -> factorAux .)
    LOWEREQUAL      reduce using rule 103 (factor -> factorAux .)
    MOREEQUAL       reduce using rule 103 (factor -> factorAux .)
    SEMICOLON       reduce using rule 103 (factor -> factorAux .)
    RPAREN          reduce using rule 103 (factor -> factorAux .)
    COMA            reduce using rule 103 (factor -> factorAux .)
    ID              reduce using rule 103 (factor -> factorAux .)
    IF              reduce using rule 103 (factor -> factorAux .)
    PRINT           reduce using rule 103 (factor -> factorAux .)
    WHILE           reduce using rule 103 (factor -> factorAux .)
    FROM            reduce using rule 103 (factor -> factorAux .)
    RBRACE          reduce using rule 103 (factor -> factorAux .)


state 87

    (15) varAux1 -> tipo varAux2 . SEMICOLON
    (16) varAux1 -> tipo varAux2 . SEMICOLON varAux1

    SEMICOLON       shift and go to state 121


state 88

    (17) varAux2 -> ID .
    (18) varAux2 -> ID . COMA varAux2

    SEMICOLON       reduce using rule 17 (varAux2 -> ID .)
    COMA            shift and go to state 122


state 89

    (57) llamadaAFuncion -> ID actualizaFuncion generarEra . LPAREN paramFuncion gosub RPAREN expresion
    (58) llamadaAFuncion -> ID actualizaFuncion generarEra . LPAREN paramFuncion gosub RPAREN SEMICOLON

    LPAREN          shift and go to state 123


state 90

    (70) comparacion -> ID push_id DOUBLEEQUAL . push_poper expresion SEMICOLON
    (109) push_poper -> .

    LPAREN          reduce using rule 109 (push_poper -> .)
    PLUS            reduce using rule 109 (push_poper -> .)
    MINUS           reduce using rule 109 (push_poper -> .)
    ID              reduce using rule 109 (push_poper -> .)
    CTE_I           reduce using rule 109 (push_poper -> .)
    CTE_F           reduce using rule 109 (push_poper -> .)
    CTE_STRING      reduce using rule 109 (push_poper -> .)

    push_poper                     shift and go to state 124

state 91

    (68) asignacion -> ID push_id EQUAL . push_poper expresion create_asign SEMICOLON
    (109) push_poper -> .

    LPAREN          reduce using rule 109 (push_poper -> .)
    PLUS            reduce using rule 109 (push_poper -> .)
    MINUS           reduce using rule 109 (push_poper -> .)
    ID              reduce using rule 109 (push_poper -> .)
    CTE_I           reduce using rule 109 (push_poper -> .)
    CTE_F           reduce using rule 109 (push_poper -> .)
    CTE_STRING      reduce using rule 109 (push_poper -> .)

    push_poper                     shift and go to state 125

state 92

    (49) loopFromDo -> FROM LPAREN ID . EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    EQUAL           shift and go to state 126


state 93

    (45) while -> WHILE while1 LPAREN . expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (83) expresion -> . exp
    (84) expresion -> . exp comp exp quad_comp
    (92) exp -> . termino quad_term
    (93) exp -> . termino quad_term exp1
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    ID              shift and go to state 83
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79
    CTE_STRING      shift and go to state 80

    expresion                      shift and go to state 127
    factor                         shift and go to state 78
    var_cte                        shift and go to state 74
    termino                        shift and go to state 75
    exp                            shift and go to state 85
    factorAux                      shift and go to state 86

state 94

    (11) main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc .

    FUNCTION        reduce using rule 11 (main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc .)
    $end            reduce using rule 11 (main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc .)


state 95

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . RBRACE endProc
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux RBRACE endProc
    (30) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . RBRACE endProc function
    (31) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux RBRACE endProc function
    (14) vars -> . VAR varAux1

    RBRACE          shift and go to state 128
    VAR             shift and go to state 42

    vars                           shift and go to state 129

state 96

    (32) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE RBRACE endProc
    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux RBRACE endProc
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE RBRACE endProc function
    (35) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux RBRACE endProc function

    LBRACE          shift and go to state 130


state 97

    (37) param -> tipo ID .
    (38) param -> tipo ID . COMA param

    RPAREN          reduce using rule 37 (param -> tipo ID .)
    COMA            shift and go to state 131


state 98

    (12) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .

    FUNCTION        reduce using rule 12 (main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .)
    $end            reduce using rule 12 (main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .)


state 99

    (79) escrituraAux -> CTE_STRING . push_cte
    (81) escrituraAux -> CTE_STRING . push_cte COMA escrituraAux
    (113) var_cte -> CTE_STRING . push_cte
    (108) push_cte -> .

    COMA            reduce using rule 108 (push_cte -> .)
    RPAREN          reduce using rule 108 (push_cte -> .)
    TIMES           reduce using rule 108 (push_cte -> .)
    DIVIDE          reduce using rule 108 (push_cte -> .)
    PLUS            reduce using rule 108 (push_cte -> .)
    MINUS           reduce using rule 108 (push_cte -> .)
    LOWERTHAN       reduce using rule 108 (push_cte -> .)
    MORETHAN        reduce using rule 108 (push_cte -> .)
    DIFFERENT       reduce using rule 108 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 108 (push_cte -> .)
    LOWEREQUAL      reduce using rule 108 (push_cte -> .)
    MOREEQUAL       reduce using rule 108 (push_cte -> .)

    push_cte                       shift and go to state 132

state 100

    (78) escrituraAux -> expresion .
    (80) escrituraAux -> expresion . COMA escrituraAux

    RPAREN          reduce using rule 78 (escrituraAux -> expresion .)
    COMA            shift and go to state 133


state 101

    (57) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (58) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (110) var_cte -> ID . push_id
    (59) actualizaFuncion -> .
    (107) push_id -> .

    LPAREN          reduce using rule 59 (actualizaFuncion -> .)
    TIMES           reduce using rule 107 (push_id -> .)
    DIVIDE          reduce using rule 107 (push_id -> .)
    PLUS            reduce using rule 107 (push_id -> .)
    MINUS           reduce using rule 107 (push_id -> .)
    LOWERTHAN       reduce using rule 107 (push_id -> .)
    MORETHAN        reduce using rule 107 (push_id -> .)
    DIFFERENT       reduce using rule 107 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 107 (push_id -> .)
    LOWEREQUAL      reduce using rule 107 (push_id -> .)
    MOREEQUAL       reduce using rule 107 (push_id -> .)
    COMA            reduce using rule 107 (push_id -> .)
    RPAREN          reduce using rule 107 (push_id -> .)

    actualizaFuncion               shift and go to state 63
    push_id                        shift and go to state 112

state 102

    (76) escritura -> PRINT push_poper LPAREN escrituraAux . RPAREN quad_print SEMICOLON

    RPAREN          shift and go to state 134


state 103

    (82) escrituraAux -> llamadaAFuncion .

    RPAREN          reduce using rule 82 (escrituraAux -> llamadaAFuncion .)


state 104

    (92) exp -> termino quad_term .
    (93) exp -> termino quad_term . exp1
    (94) exp1 -> . PLUS push_poper exp
    (95) exp1 -> . MINUS push_poper exp

    LOWERTHAN       reduce using rule 92 (exp -> termino quad_term .)
    MORETHAN        reduce using rule 92 (exp -> termino quad_term .)
    DIFFERENT       reduce using rule 92 (exp -> termino quad_term .)
    DOUBLEEQUAL     reduce using rule 92 (exp -> termino quad_term .)
    LOWEREQUAL      reduce using rule 92 (exp -> termino quad_term .)
    MOREEQUAL       reduce using rule 92 (exp -> termino quad_term .)
    SEMICOLON       reduce using rule 92 (exp -> termino quad_term .)
    RPAREN          reduce using rule 92 (exp -> termino quad_term .)
    COMA            reduce using rule 92 (exp -> termino quad_term .)
    ID              reduce using rule 92 (exp -> termino quad_term .)
    IF              reduce using rule 92 (exp -> termino quad_term .)
    PRINT           reduce using rule 92 (exp -> termino quad_term .)
    WHILE           reduce using rule 92 (exp -> termino quad_term .)
    FROM            reduce using rule 92 (exp -> termino quad_term .)
    RBRACE          reduce using rule 92 (exp -> termino quad_term .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137

    exp1                           shift and go to state 135

state 105

    (105) factorAux -> MINUS push_poper . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 83
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79
    CTE_STRING      shift and go to state 80

    var_cte                        shift and go to state 138

state 106

    (104) factorAux -> PLUS push_poper . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 83
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79
    CTE_STRING      shift and go to state 80

    var_cte                        shift and go to state 139

state 107

    (98) termino -> factor quad_fact .
    (99) termino -> factor quad_fact . termino1
    (100) termino1 -> . TIMES push_poper termino
    (101) termino1 -> . DIVIDE push_poper termino

    PLUS            reduce using rule 98 (termino -> factor quad_fact .)
    MINUS           reduce using rule 98 (termino -> factor quad_fact .)
    LOWERTHAN       reduce using rule 98 (termino -> factor quad_fact .)
    MORETHAN        reduce using rule 98 (termino -> factor quad_fact .)
    DIFFERENT       reduce using rule 98 (termino -> factor quad_fact .)
    DOUBLEEQUAL     reduce using rule 98 (termino -> factor quad_fact .)
    LOWEREQUAL      reduce using rule 98 (termino -> factor quad_fact .)
    MOREEQUAL       reduce using rule 98 (termino -> factor quad_fact .)
    RPAREN          reduce using rule 98 (termino -> factor quad_fact .)
    COMA            reduce using rule 98 (termino -> factor quad_fact .)
    SEMICOLON       reduce using rule 98 (termino -> factor quad_fact .)
    ID              reduce using rule 98 (termino -> factor quad_fact .)
    IF              reduce using rule 98 (termino -> factor quad_fact .)
    PRINT           reduce using rule 98 (termino -> factor quad_fact .)
    WHILE           reduce using rule 98 (termino -> factor quad_fact .)
    FROM            reduce using rule 98 (termino -> factor quad_fact .)
    RBRACE          reduce using rule 98 (termino -> factor quad_fact .)
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 140

    termino1                       shift and go to state 141

state 108

    (112) var_cte -> CTE_F push_cte .

    TIMES           reduce using rule 112 (var_cte -> CTE_F push_cte .)
    DIVIDE          reduce using rule 112 (var_cte -> CTE_F push_cte .)
    PLUS            reduce using rule 112 (var_cte -> CTE_F push_cte .)
    MINUS           reduce using rule 112 (var_cte -> CTE_F push_cte .)
    LOWERTHAN       reduce using rule 112 (var_cte -> CTE_F push_cte .)
    MORETHAN        reduce using rule 112 (var_cte -> CTE_F push_cte .)
    DIFFERENT       reduce using rule 112 (var_cte -> CTE_F push_cte .)
    DOUBLEEQUAL     reduce using rule 112 (var_cte -> CTE_F push_cte .)
    LOWEREQUAL      reduce using rule 112 (var_cte -> CTE_F push_cte .)
    MOREEQUAL       reduce using rule 112 (var_cte -> CTE_F push_cte .)
    SEMICOLON       reduce using rule 112 (var_cte -> CTE_F push_cte .)
    COMA            reduce using rule 112 (var_cte -> CTE_F push_cte .)
    RPAREN          reduce using rule 112 (var_cte -> CTE_F push_cte .)
    ID              reduce using rule 112 (var_cte -> CTE_F push_cte .)
    IF              reduce using rule 112 (var_cte -> CTE_F push_cte .)
    PRINT           reduce using rule 112 (var_cte -> CTE_F push_cte .)
    WHILE           reduce using rule 112 (var_cte -> CTE_F push_cte .)
    FROM            reduce using rule 112 (var_cte -> CTE_F push_cte .)
    RBRACE          reduce using rule 112 (var_cte -> CTE_F push_cte .)


state 109

    (113) var_cte -> CTE_STRING push_cte .

    TIMES           reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    DIVIDE          reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    PLUS            reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    MINUS           reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    LOWERTHAN       reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    MORETHAN        reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    DIFFERENT       reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    DOUBLEEQUAL     reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    LOWEREQUAL      reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    MOREEQUAL       reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    SEMICOLON       reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    COMA            reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    RPAREN          reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    ID              reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    IF              reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    PRINT           reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    WHILE           reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    FROM            reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    RBRACE          reduce using rule 113 (var_cte -> CTE_STRING push_cte .)


state 110

    (111) var_cte -> CTE_I push_cte .

    TIMES           reduce using rule 111 (var_cte -> CTE_I push_cte .)
    DIVIDE          reduce using rule 111 (var_cte -> CTE_I push_cte .)
    PLUS            reduce using rule 111 (var_cte -> CTE_I push_cte .)
    MINUS           reduce using rule 111 (var_cte -> CTE_I push_cte .)
    LOWERTHAN       reduce using rule 111 (var_cte -> CTE_I push_cte .)
    MORETHAN        reduce using rule 111 (var_cte -> CTE_I push_cte .)
    DIFFERENT       reduce using rule 111 (var_cte -> CTE_I push_cte .)
    DOUBLEEQUAL     reduce using rule 111 (var_cte -> CTE_I push_cte .)
    LOWEREQUAL      reduce using rule 111 (var_cte -> CTE_I push_cte .)
    MOREEQUAL       reduce using rule 111 (var_cte -> CTE_I push_cte .)
    SEMICOLON       reduce using rule 111 (var_cte -> CTE_I push_cte .)
    COMA            reduce using rule 111 (var_cte -> CTE_I push_cte .)
    RPAREN          reduce using rule 111 (var_cte -> CTE_I push_cte .)
    ID              reduce using rule 111 (var_cte -> CTE_I push_cte .)
    IF              reduce using rule 111 (var_cte -> CTE_I push_cte .)
    PRINT           reduce using rule 111 (var_cte -> CTE_I push_cte .)
    WHILE           reduce using rule 111 (var_cte -> CTE_I push_cte .)
    FROM            reduce using rule 111 (var_cte -> CTE_I push_cte .)
    RBRACE          reduce using rule 111 (var_cte -> CTE_I push_cte .)


state 111

    (102) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 143


state 112

    (110) var_cte -> ID push_id .

    TIMES           reduce using rule 110 (var_cte -> ID push_id .)
    DIVIDE          reduce using rule 110 (var_cte -> ID push_id .)
    PLUS            reduce using rule 110 (var_cte -> ID push_id .)
    MINUS           reduce using rule 110 (var_cte -> ID push_id .)
    LOWERTHAN       reduce using rule 110 (var_cte -> ID push_id .)
    MORETHAN        reduce using rule 110 (var_cte -> ID push_id .)
    DIFFERENT       reduce using rule 110 (var_cte -> ID push_id .)
    DOUBLEEQUAL     reduce using rule 110 (var_cte -> ID push_id .)
    LOWEREQUAL      reduce using rule 110 (var_cte -> ID push_id .)
    MOREEQUAL       reduce using rule 110 (var_cte -> ID push_id .)
    SEMICOLON       reduce using rule 110 (var_cte -> ID push_id .)
    COMA            reduce using rule 110 (var_cte -> ID push_id .)
    RPAREN          reduce using rule 110 (var_cte -> ID push_id .)
    ID              reduce using rule 110 (var_cte -> ID push_id .)
    IF              reduce using rule 110 (var_cte -> ID push_id .)
    PRINT           reduce using rule 110 (var_cte -> ID push_id .)
    WHILE           reduce using rule 110 (var_cte -> ID push_id .)
    FROM            reduce using rule 110 (var_cte -> ID push_id .)
    RBRACE          reduce using rule 110 (var_cte -> ID push_id .)


state 113

    (71) condicion -> IF LPAREN expresion RPAREN . cond bloque condFinal
    (72) condicion -> IF LPAREN expresion RPAREN . cond bloque ELSE condElse bloque condFinal
    (73) cond -> .

    LBRACE          reduce using rule 73 (cond -> .)

    cond                           shift and go to state 144

state 114

    (90) comp -> MOREEQUAL . push_poper
    (109) push_poper -> .

    LPAREN          reduce using rule 109 (push_poper -> .)
    PLUS            reduce using rule 109 (push_poper -> .)
    MINUS           reduce using rule 109 (push_poper -> .)
    ID              reduce using rule 109 (push_poper -> .)
    CTE_I           reduce using rule 109 (push_poper -> .)
    CTE_F           reduce using rule 109 (push_poper -> .)
    CTE_STRING      reduce using rule 109 (push_poper -> .)

    push_poper                     shift and go to state 145

state 115

    (87) comp -> DIFFERENT . push_poper
    (109) push_poper -> .

    LPAREN          reduce using rule 109 (push_poper -> .)
    PLUS            reduce using rule 109 (push_poper -> .)
    MINUS           reduce using rule 109 (push_poper -> .)
    ID              reduce using rule 109 (push_poper -> .)
    CTE_I           reduce using rule 109 (push_poper -> .)
    CTE_F           reduce using rule 109 (push_poper -> .)
    CTE_STRING      reduce using rule 109 (push_poper -> .)

    push_poper                     shift and go to state 146

state 116

    (88) comp -> DOUBLEEQUAL . push_poper
    (109) push_poper -> .

    LPAREN          reduce using rule 109 (push_poper -> .)
    PLUS            reduce using rule 109 (push_poper -> .)
    MINUS           reduce using rule 109 (push_poper -> .)
    ID              reduce using rule 109 (push_poper -> .)
    CTE_I           reduce using rule 109 (push_poper -> .)
    CTE_F           reduce using rule 109 (push_poper -> .)
    CTE_STRING      reduce using rule 109 (push_poper -> .)

    push_poper                     shift and go to state 147

state 117

    (85) comp -> LOWERTHAN . push_poper
    (109) push_poper -> .

    LPAREN          reduce using rule 109 (push_poper -> .)
    PLUS            reduce using rule 109 (push_poper -> .)
    MINUS           reduce using rule 109 (push_poper -> .)
    ID              reduce using rule 109 (push_poper -> .)
    CTE_I           reduce using rule 109 (push_poper -> .)
    CTE_F           reduce using rule 109 (push_poper -> .)
    CTE_STRING      reduce using rule 109 (push_poper -> .)

    push_poper                     shift and go to state 148

state 118

    (84) expresion -> exp comp . exp quad_comp
    (92) exp -> . termino quad_term
    (93) exp -> . termino quad_term exp1
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    ID              shift and go to state 83
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79
    CTE_STRING      shift and go to state 80

    factor                         shift and go to state 78
    termino                        shift and go to state 75
    exp                            shift and go to state 149
    factorAux                      shift and go to state 86
    var_cte                        shift and go to state 74

state 119

    (89) comp -> LOWEREQUAL . push_poper
    (109) push_poper -> .

    LPAREN          reduce using rule 109 (push_poper -> .)
    PLUS            reduce using rule 109 (push_poper -> .)
    MINUS           reduce using rule 109 (push_poper -> .)
    ID              reduce using rule 109 (push_poper -> .)
    CTE_I           reduce using rule 109 (push_poper -> .)
    CTE_F           reduce using rule 109 (push_poper -> .)
    CTE_STRING      reduce using rule 109 (push_poper -> .)

    push_poper                     shift and go to state 150

state 120

    (86) comp -> MORETHAN . push_poper
    (109) push_poper -> .

    LPAREN          reduce using rule 109 (push_poper -> .)
    PLUS            reduce using rule 109 (push_poper -> .)
    MINUS           reduce using rule 109 (push_poper -> .)
    ID              reduce using rule 109 (push_poper -> .)
    CTE_I           reduce using rule 109 (push_poper -> .)
    CTE_F           reduce using rule 109 (push_poper -> .)
    CTE_STRING      reduce using rule 109 (push_poper -> .)

    push_poper                     shift and go to state 151

state 121

    (15) varAux1 -> tipo varAux2 SEMICOLON .
    (16) varAux1 -> tipo varAux2 SEMICOLON . varAux1
    (15) varAux1 -> . tipo varAux2 SEMICOLON
    (16) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR

    ID              reduce using rule 15 (varAux1 -> tipo varAux2 SEMICOLON .)
    IF              reduce using rule 15 (varAux1 -> tipo varAux2 SEMICOLON .)
    PRINT           reduce using rule 15 (varAux1 -> tipo varAux2 SEMICOLON .)
    WHILE           reduce using rule 15 (varAux1 -> tipo varAux2 SEMICOLON .)
    FROM            reduce using rule 15 (varAux1 -> tipo varAux2 SEMICOLON .)
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

    varAux1                        shift and go to state 152
    tipo                           shift and go to state 61

state 122

    (18) varAux2 -> ID COMA . varAux2
    (17) varAux2 -> . ID
    (18) varAux2 -> . ID COMA varAux2

    ID              shift and go to state 88

    varAux2                        shift and go to state 153

state 123

    (57) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN . paramFuncion gosub RPAREN expresion
    (58) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN . paramFuncion gosub RPAREN SEMICOLON
    (62) paramFuncion -> . ID push_id2
    (63) paramFuncion -> . ID push_id2 COMA paramFuncion
    (64) paramFuncion -> . expresion
    (65) paramFuncion -> . expresion COMA paramFuncion
    (66) paramFuncion -> . empty
    (83) expresion -> . exp
    (84) expresion -> . exp comp exp quad_comp
    (40) empty -> .
    (92) exp -> . termino quad_term
    (93) exp -> . termino quad_term exp1
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 156
    RPAREN          reduce using rule 40 (empty -> .)
    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79
    CTE_STRING      shift and go to state 80

    expresion                      shift and go to state 157
    paramFuncion                   shift and go to state 154
    empty                          shift and go to state 155
    exp                            shift and go to state 85
    factorAux                      shift and go to state 86
    factor                         shift and go to state 78
    var_cte                        shift and go to state 74
    termino                        shift and go to state 75

state 124

    (70) comparacion -> ID push_id DOUBLEEQUAL push_poper . expresion SEMICOLON
    (83) expresion -> . exp
    (84) expresion -> . exp comp exp quad_comp
    (92) exp -> . termino quad_term
    (93) exp -> . termino quad_term exp1
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    ID              shift and go to state 83
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79
    CTE_STRING      shift and go to state 80

    expresion                      shift and go to state 158
    factor                         shift and go to state 78
    var_cte                        shift and go to state 74
    termino                        shift and go to state 75
    exp                            shift and go to state 85
    factorAux                      shift and go to state 86

state 125

    (68) asignacion -> ID push_id EQUAL push_poper . expresion create_asign SEMICOLON
    (83) expresion -> . exp
    (84) expresion -> . exp comp exp quad_comp
    (92) exp -> . termino quad_term
    (93) exp -> . termino quad_term exp1
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    ID              shift and go to state 83
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79
    CTE_STRING      shift and go to state 80

    expresion                      shift and go to state 159
    var_cte                        shift and go to state 74
    termino                        shift and go to state 75
    exp                            shift and go to state 85
    factorAux                      shift and go to state 86
    factor                         shift and go to state 78

state 126

    (49) loopFromDo -> FROM LPAREN ID EQUAL . expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (83) expresion -> . exp
    (84) expresion -> . exp comp exp quad_comp
    (92) exp -> . termino quad_term
    (93) exp -> . termino quad_term exp1
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    ID              shift and go to state 83
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79
    CTE_STRING      shift and go to state 80

    expresion                      shift and go to state 160
    factor                         shift and go to state 78
    var_cte                        shift and go to state 74
    termino                        shift and go to state 75
    exp                            shift and go to state 85
    factorAux                      shift and go to state 86

state 127

    (45) while -> WHILE while1 LPAREN expresion . RPAREN while2 LBRACE bloqueAux RBRACE while3

    RPAREN          shift and go to state 161


state 128

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE . endProc
    (30) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE . endProc function
    (36) endProc -> .

    FUNCTION        reduce using rule 36 (endProc -> .)
    $end            reduce using rule 36 (endProc -> .)

    endProc                        shift and go to state 162

state 129

    (29) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux RBRACE endProc
    (31) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux RBRACE endProc function
    (43) bloqueAux -> . estatuto
    (44) bloqueAux -> . estatuto bloqueAux
    (50) estatuto -> . asignacion
    (51) estatuto -> . condicion
    (52) estatuto -> . escritura
    (53) estatuto -> . while
    (54) estatuto -> . loopFromDo
    (55) estatuto -> . comparacion
    (56) estatuto -> . llamadaAFuncion
    (68) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (71) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (72) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (76) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (45) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (49) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (70) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    ID              shift and go to state 43
    IF              shift and go to state 40
    PRINT           shift and go to state 38
    WHILE           shift and go to state 48
    FROM            shift and go to state 46

    estatuto                       shift and go to state 39
    condicion                      shift and go to state 41
    loopFromDo                     shift and go to state 44
    llamadaAFuncion                shift and go to state 45
    asignacion                     shift and go to state 47
    bloqueAux                      shift and go to state 163
    while                          shift and go to state 50
    comparacion                    shift and go to state 51
    escritura                      shift and go to state 52

state 130

    (32) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . RBRACE endProc
    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux RBRACE endProc
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . RBRACE endProc function
    (35) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux RBRACE endProc function
    (14) vars -> . VAR varAux1

    RBRACE          shift and go to state 164
    VAR             shift and go to state 42

    vars                           shift and go to state 165

state 131

    (38) param -> tipo ID COMA . param
    (37) param -> . tipo ID
    (38) param -> . tipo ID COMA param
    (39) param -> . empty
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR
    (40) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    RPAREN          reduce using rule 40 (empty -> .)

    empty                          shift and go to state 70
    param                          shift and go to state 166
    tipo                           shift and go to state 71

state 132

    (79) escrituraAux -> CTE_STRING push_cte .
    (81) escrituraAux -> CTE_STRING push_cte . COMA escrituraAux
    (113) var_cte -> CTE_STRING push_cte .

  ! shift/reduce conflict for COMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 79 (escrituraAux -> CTE_STRING push_cte .)
    RPAREN          reduce using rule 79 (escrituraAux -> CTE_STRING push_cte .)
    COMA            shift and go to state 167
    TIMES           reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    DIVIDE          reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    PLUS            reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    MINUS           reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    LOWERTHAN       reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    MORETHAN        reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    DIFFERENT       reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    DOUBLEEQUAL     reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    LOWEREQUAL      reduce using rule 113 (var_cte -> CTE_STRING push_cte .)
    MOREEQUAL       reduce using rule 113 (var_cte -> CTE_STRING push_cte .)

  ! COMA            [ reduce using rule 113 (var_cte -> CTE_STRING push_cte .) ]
  ! RPAREN          [ reduce using rule 113 (var_cte -> CTE_STRING push_cte .) ]


state 133

    (80) escrituraAux -> expresion COMA . escrituraAux
    (78) escrituraAux -> . expresion
    (79) escrituraAux -> . CTE_STRING push_cte
    (80) escrituraAux -> . expresion COMA escrituraAux
    (81) escrituraAux -> . CTE_STRING push_cte COMA escrituraAux
    (82) escrituraAux -> . llamadaAFuncion
    (83) expresion -> . exp
    (84) expresion -> . exp comp exp quad_comp
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (92) exp -> . termino quad_term
    (93) exp -> . termino quad_term exp1
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    CTE_STRING      shift and go to state 99
    ID              shift and go to state 101
    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79

    expresion                      shift and go to state 100
    escrituraAux                   shift and go to state 168
    llamadaAFuncion                shift and go to state 103
    var_cte                        shift and go to state 74
    termino                        shift and go to state 75
    exp                            shift and go to state 85
    factorAux                      shift and go to state 86
    factor                         shift and go to state 78

state 134

    (76) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN . quad_print SEMICOLON
    (77) quad_print -> .

    SEMICOLON       reduce using rule 77 (quad_print -> .)

    quad_print                     shift and go to state 169

state 135

    (93) exp -> termino quad_term exp1 .

    LOWERTHAN       reduce using rule 93 (exp -> termino quad_term exp1 .)
    MORETHAN        reduce using rule 93 (exp -> termino quad_term exp1 .)
    DIFFERENT       reduce using rule 93 (exp -> termino quad_term exp1 .)
    DOUBLEEQUAL     reduce using rule 93 (exp -> termino quad_term exp1 .)
    LOWEREQUAL      reduce using rule 93 (exp -> termino quad_term exp1 .)
    MOREEQUAL       reduce using rule 93 (exp -> termino quad_term exp1 .)
    SEMICOLON       reduce using rule 93 (exp -> termino quad_term exp1 .)
    RPAREN          reduce using rule 93 (exp -> termino quad_term exp1 .)
    COMA            reduce using rule 93 (exp -> termino quad_term exp1 .)
    ID              reduce using rule 93 (exp -> termino quad_term exp1 .)
    IF              reduce using rule 93 (exp -> termino quad_term exp1 .)
    PRINT           reduce using rule 93 (exp -> termino quad_term exp1 .)
    WHILE           reduce using rule 93 (exp -> termino quad_term exp1 .)
    FROM            reduce using rule 93 (exp -> termino quad_term exp1 .)
    RBRACE          reduce using rule 93 (exp -> termino quad_term exp1 .)


state 136

    (94) exp1 -> PLUS . push_poper exp
    (109) push_poper -> .

    LPAREN          reduce using rule 109 (push_poper -> .)
    PLUS            reduce using rule 109 (push_poper -> .)
    MINUS           reduce using rule 109 (push_poper -> .)
    ID              reduce using rule 109 (push_poper -> .)
    CTE_I           reduce using rule 109 (push_poper -> .)
    CTE_F           reduce using rule 109 (push_poper -> .)
    CTE_STRING      reduce using rule 109 (push_poper -> .)

    push_poper                     shift and go to state 170

state 137

    (95) exp1 -> MINUS . push_poper exp
    (109) push_poper -> .

    LPAREN          reduce using rule 109 (push_poper -> .)
    PLUS            reduce using rule 109 (push_poper -> .)
    MINUS           reduce using rule 109 (push_poper -> .)
    ID              reduce using rule 109 (push_poper -> .)
    CTE_I           reduce using rule 109 (push_poper -> .)
    CTE_F           reduce using rule 109 (push_poper -> .)
    CTE_STRING      reduce using rule 109 (push_poper -> .)

    push_poper                     shift and go to state 171

state 138

    (105) factorAux -> MINUS push_poper var_cte .

    TIMES           reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)
    DIVIDE          reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)
    PLUS            reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)
    MINUS           reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)
    MORETHAN        reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)
    DIFFERENT       reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)
    DOUBLEEQUAL     reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)
    LOWEREQUAL      reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)
    MOREEQUAL       reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)
    COMA            reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)
    RPAREN          reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)
    SEMICOLON       reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)
    ID              reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)
    IF              reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)
    PRINT           reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)
    WHILE           reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)
    FROM            reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)
    RBRACE          reduce using rule 105 (factorAux -> MINUS push_poper var_cte .)


state 139

    (104) factorAux -> PLUS push_poper var_cte .

    TIMES           reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)
    DIVIDE          reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)
    PLUS            reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)
    MINUS           reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)
    MORETHAN        reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)
    DIFFERENT       reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)
    DOUBLEEQUAL     reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)
    LOWEREQUAL      reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)
    MOREEQUAL       reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)
    COMA            reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)
    RPAREN          reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)
    SEMICOLON       reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)
    ID              reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)
    IF              reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)
    PRINT           reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)
    WHILE           reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)
    FROM            reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)
    RBRACE          reduce using rule 104 (factorAux -> PLUS push_poper var_cte .)


state 140

    (101) termino1 -> DIVIDE . push_poper termino
    (109) push_poper -> .

    LPAREN          reduce using rule 109 (push_poper -> .)
    PLUS            reduce using rule 109 (push_poper -> .)
    MINUS           reduce using rule 109 (push_poper -> .)
    ID              reduce using rule 109 (push_poper -> .)
    CTE_I           reduce using rule 109 (push_poper -> .)
    CTE_F           reduce using rule 109 (push_poper -> .)
    CTE_STRING      reduce using rule 109 (push_poper -> .)

    push_poper                     shift and go to state 172

state 141

    (99) termino -> factor quad_fact termino1 .

    PLUS            reduce using rule 99 (termino -> factor quad_fact termino1 .)
    MINUS           reduce using rule 99 (termino -> factor quad_fact termino1 .)
    LOWERTHAN       reduce using rule 99 (termino -> factor quad_fact termino1 .)
    MORETHAN        reduce using rule 99 (termino -> factor quad_fact termino1 .)
    DIFFERENT       reduce using rule 99 (termino -> factor quad_fact termino1 .)
    DOUBLEEQUAL     reduce using rule 99 (termino -> factor quad_fact termino1 .)
    LOWEREQUAL      reduce using rule 99 (termino -> factor quad_fact termino1 .)
    MOREEQUAL       reduce using rule 99 (termino -> factor quad_fact termino1 .)
    RPAREN          reduce using rule 99 (termino -> factor quad_fact termino1 .)
    COMA            reduce using rule 99 (termino -> factor quad_fact termino1 .)
    SEMICOLON       reduce using rule 99 (termino -> factor quad_fact termino1 .)
    ID              reduce using rule 99 (termino -> factor quad_fact termino1 .)
    IF              reduce using rule 99 (termino -> factor quad_fact termino1 .)
    PRINT           reduce using rule 99 (termino -> factor quad_fact termino1 .)
    WHILE           reduce using rule 99 (termino -> factor quad_fact termino1 .)
    FROM            reduce using rule 99 (termino -> factor quad_fact termino1 .)
    RBRACE          reduce using rule 99 (termino -> factor quad_fact termino1 .)


state 142

    (100) termino1 -> TIMES . push_poper termino
    (109) push_poper -> .

    LPAREN          reduce using rule 109 (push_poper -> .)
    PLUS            reduce using rule 109 (push_poper -> .)
    MINUS           reduce using rule 109 (push_poper -> .)
    ID              reduce using rule 109 (push_poper -> .)
    CTE_I           reduce using rule 109 (push_poper -> .)
    CTE_F           reduce using rule 109 (push_poper -> .)
    CTE_STRING      reduce using rule 109 (push_poper -> .)

    push_poper                     shift and go to state 173

state 143

    (102) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 102 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 102 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 102 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 102 (factor -> LPAREN expresion RPAREN .)
    LOWERTHAN       reduce using rule 102 (factor -> LPAREN expresion RPAREN .)
    MORETHAN        reduce using rule 102 (factor -> LPAREN expresion RPAREN .)
    DIFFERENT       reduce using rule 102 (factor -> LPAREN expresion RPAREN .)
    DOUBLEEQUAL     reduce using rule 102 (factor -> LPAREN expresion RPAREN .)
    LOWEREQUAL      reduce using rule 102 (factor -> LPAREN expresion RPAREN .)
    MOREEQUAL       reduce using rule 102 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 102 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 102 (factor -> LPAREN expresion RPAREN .)
    COMA            reduce using rule 102 (factor -> LPAREN expresion RPAREN .)
    ID              reduce using rule 102 (factor -> LPAREN expresion RPAREN .)
    IF              reduce using rule 102 (factor -> LPAREN expresion RPAREN .)
    PRINT           reduce using rule 102 (factor -> LPAREN expresion RPAREN .)
    WHILE           reduce using rule 102 (factor -> LPAREN expresion RPAREN .)
    FROM            reduce using rule 102 (factor -> LPAREN expresion RPAREN .)
    RBRACE          reduce using rule 102 (factor -> LPAREN expresion RPAREN .)


state 144

    (71) condicion -> IF LPAREN expresion RPAREN cond . bloque condFinal
    (72) condicion -> IF LPAREN expresion RPAREN cond . bloque ELSE condElse bloque condFinal
    (26) bloque -> . LBRACE RBRACE
    (27) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 174

    bloque                         shift and go to state 175

state 145

    (90) comp -> MOREEQUAL push_poper .

    LPAREN          reduce using rule 90 (comp -> MOREEQUAL push_poper .)
    PLUS            reduce using rule 90 (comp -> MOREEQUAL push_poper .)
    MINUS           reduce using rule 90 (comp -> MOREEQUAL push_poper .)
    ID              reduce using rule 90 (comp -> MOREEQUAL push_poper .)
    CTE_I           reduce using rule 90 (comp -> MOREEQUAL push_poper .)
    CTE_F           reduce using rule 90 (comp -> MOREEQUAL push_poper .)
    CTE_STRING      reduce using rule 90 (comp -> MOREEQUAL push_poper .)


state 146

    (87) comp -> DIFFERENT push_poper .

    LPAREN          reduce using rule 87 (comp -> DIFFERENT push_poper .)
    PLUS            reduce using rule 87 (comp -> DIFFERENT push_poper .)
    MINUS           reduce using rule 87 (comp -> DIFFERENT push_poper .)
    ID              reduce using rule 87 (comp -> DIFFERENT push_poper .)
    CTE_I           reduce using rule 87 (comp -> DIFFERENT push_poper .)
    CTE_F           reduce using rule 87 (comp -> DIFFERENT push_poper .)
    CTE_STRING      reduce using rule 87 (comp -> DIFFERENT push_poper .)


state 147

    (88) comp -> DOUBLEEQUAL push_poper .

    LPAREN          reduce using rule 88 (comp -> DOUBLEEQUAL push_poper .)
    PLUS            reduce using rule 88 (comp -> DOUBLEEQUAL push_poper .)
    MINUS           reduce using rule 88 (comp -> DOUBLEEQUAL push_poper .)
    ID              reduce using rule 88 (comp -> DOUBLEEQUAL push_poper .)
    CTE_I           reduce using rule 88 (comp -> DOUBLEEQUAL push_poper .)
    CTE_F           reduce using rule 88 (comp -> DOUBLEEQUAL push_poper .)
    CTE_STRING      reduce using rule 88 (comp -> DOUBLEEQUAL push_poper .)


state 148

    (85) comp -> LOWERTHAN push_poper .

    LPAREN          reduce using rule 85 (comp -> LOWERTHAN push_poper .)
    PLUS            reduce using rule 85 (comp -> LOWERTHAN push_poper .)
    MINUS           reduce using rule 85 (comp -> LOWERTHAN push_poper .)
    ID              reduce using rule 85 (comp -> LOWERTHAN push_poper .)
    CTE_I           reduce using rule 85 (comp -> LOWERTHAN push_poper .)
    CTE_F           reduce using rule 85 (comp -> LOWERTHAN push_poper .)
    CTE_STRING      reduce using rule 85 (comp -> LOWERTHAN push_poper .)


state 149

    (84) expresion -> exp comp exp . quad_comp
    (91) quad_comp -> .

    RPAREN          reduce using rule 91 (quad_comp -> .)
    COMA            reduce using rule 91 (quad_comp -> .)
    SEMICOLON       reduce using rule 91 (quad_comp -> .)
    ID              reduce using rule 91 (quad_comp -> .)
    IF              reduce using rule 91 (quad_comp -> .)
    PRINT           reduce using rule 91 (quad_comp -> .)
    WHILE           reduce using rule 91 (quad_comp -> .)
    FROM            reduce using rule 91 (quad_comp -> .)
    RBRACE          reduce using rule 91 (quad_comp -> .)

    quad_comp                      shift and go to state 176

state 150

    (89) comp -> LOWEREQUAL push_poper .

    LPAREN          reduce using rule 89 (comp -> LOWEREQUAL push_poper .)
    PLUS            reduce using rule 89 (comp -> LOWEREQUAL push_poper .)
    MINUS           reduce using rule 89 (comp -> LOWEREQUAL push_poper .)
    ID              reduce using rule 89 (comp -> LOWEREQUAL push_poper .)
    CTE_I           reduce using rule 89 (comp -> LOWEREQUAL push_poper .)
    CTE_F           reduce using rule 89 (comp -> LOWEREQUAL push_poper .)
    CTE_STRING      reduce using rule 89 (comp -> LOWEREQUAL push_poper .)


state 151

    (86) comp -> MORETHAN push_poper .

    LPAREN          reduce using rule 86 (comp -> MORETHAN push_poper .)
    PLUS            reduce using rule 86 (comp -> MORETHAN push_poper .)
    MINUS           reduce using rule 86 (comp -> MORETHAN push_poper .)
    ID              reduce using rule 86 (comp -> MORETHAN push_poper .)
    CTE_I           reduce using rule 86 (comp -> MORETHAN push_poper .)
    CTE_F           reduce using rule 86 (comp -> MORETHAN push_poper .)
    CTE_STRING      reduce using rule 86 (comp -> MORETHAN push_poper .)


state 152

    (16) varAux1 -> tipo varAux2 SEMICOLON varAux1 .

    ID              reduce using rule 16 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    IF              reduce using rule 16 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    PRINT           reduce using rule 16 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    WHILE           reduce using rule 16 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    FROM            reduce using rule 16 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)


state 153

    (18) varAux2 -> ID COMA varAux2 .

    SEMICOLON       reduce using rule 18 (varAux2 -> ID COMA varAux2 .)


state 154

    (57) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion . gosub RPAREN expresion
    (58) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion . gosub RPAREN SEMICOLON
    (60) gosub -> .

    RPAREN          reduce using rule 60 (gosub -> .)

    gosub                          shift and go to state 177

state 155

    (66) paramFuncion -> empty .

    RPAREN          reduce using rule 66 (paramFuncion -> empty .)


state 156

    (62) paramFuncion -> ID . push_id2
    (63) paramFuncion -> ID . push_id2 COMA paramFuncion
    (110) var_cte -> ID . push_id
    (67) push_id2 -> .
    (107) push_id -> .

  ! reduce/reduce conflict for COMA resolved using rule 67 (push_id2 -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 67 (push_id2 -> .)
    COMA            reduce using rule 67 (push_id2 -> .)
    RPAREN          reduce using rule 67 (push_id2 -> .)
    TIMES           reduce using rule 107 (push_id -> .)
    DIVIDE          reduce using rule 107 (push_id -> .)
    PLUS            reduce using rule 107 (push_id -> .)
    MINUS           reduce using rule 107 (push_id -> .)
    LOWERTHAN       reduce using rule 107 (push_id -> .)
    MORETHAN        reduce using rule 107 (push_id -> .)
    DIFFERENT       reduce using rule 107 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 107 (push_id -> .)
    LOWEREQUAL      reduce using rule 107 (push_id -> .)
    MOREEQUAL       reduce using rule 107 (push_id -> .)

  ! COMA            [ reduce using rule 107 (push_id -> .) ]
  ! RPAREN          [ reduce using rule 107 (push_id -> .) ]

    push_id                        shift and go to state 112
    push_id2                       shift and go to state 178

state 157

    (64) paramFuncion -> expresion .
    (65) paramFuncion -> expresion . COMA paramFuncion

    RPAREN          reduce using rule 64 (paramFuncion -> expresion .)
    COMA            shift and go to state 179


state 158

    (70) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion . SEMICOLON

    SEMICOLON       shift and go to state 180


state 159

    (68) asignacion -> ID push_id EQUAL push_poper expresion . create_asign SEMICOLON
    (69) create_asign -> .

    SEMICOLON       reduce using rule 69 (create_asign -> .)

    create_asign                   shift and go to state 181

state 160

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion . RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    RPAREN          shift and go to state 182


state 161

    (45) while -> WHILE while1 LPAREN expresion RPAREN . while2 LBRACE bloqueAux RBRACE while3
    (47) while2 -> .

    LBRACE          reduce using rule 47 (while2 -> .)

    while2                         shift and go to state 183

state 162

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc .
    (30) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc . function
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (31) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (33) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (35) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    $end            reduce using rule 28 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc .)
    FUNCTION        shift and go to state 19

    function                       shift and go to state 184

state 163

    (29) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . RBRACE endProc
    (31) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . RBRACE endProc function

    RBRACE          shift and go to state 185


state 164

    (32) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE . endProc
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE . endProc function
    (36) endProc -> .

    FUNCTION        reduce using rule 36 (endProc -> .)
    $end            reduce using rule 36 (endProc -> .)

    endProc                        shift and go to state 186

state 165

    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux RBRACE endProc
    (35) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux RBRACE endProc function
    (43) bloqueAux -> . estatuto
    (44) bloqueAux -> . estatuto bloqueAux
    (50) estatuto -> . asignacion
    (51) estatuto -> . condicion
    (52) estatuto -> . escritura
    (53) estatuto -> . while
    (54) estatuto -> . loopFromDo
    (55) estatuto -> . comparacion
    (56) estatuto -> . llamadaAFuncion
    (68) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (71) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (72) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (76) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (45) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (49) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (70) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    ID              shift and go to state 43
    IF              shift and go to state 40
    PRINT           shift and go to state 38
    WHILE           shift and go to state 48
    FROM            shift and go to state 46

    estatuto                       shift and go to state 39
    condicion                      shift and go to state 41
    loopFromDo                     shift and go to state 44
    llamadaAFuncion                shift and go to state 45
    asignacion                     shift and go to state 47
    bloqueAux                      shift and go to state 187
    while                          shift and go to state 50
    comparacion                    shift and go to state 51
    escritura                      shift and go to state 52

state 166

    (38) param -> tipo ID COMA param .

    RPAREN          reduce using rule 38 (param -> tipo ID COMA param .)


state 167

    (81) escrituraAux -> CTE_STRING push_cte COMA . escrituraAux
    (78) escrituraAux -> . expresion
    (79) escrituraAux -> . CTE_STRING push_cte
    (80) escrituraAux -> . expresion COMA escrituraAux
    (81) escrituraAux -> . CTE_STRING push_cte COMA escrituraAux
    (82) escrituraAux -> . llamadaAFuncion
    (83) expresion -> . exp
    (84) expresion -> . exp comp exp quad_comp
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (92) exp -> . termino quad_term
    (93) exp -> . termino quad_term exp1
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    CTE_STRING      shift and go to state 99
    ID              shift and go to state 101
    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79

    escrituraAux                   shift and go to state 188
    expresion                      shift and go to state 100
    llamadaAFuncion                shift and go to state 103
    var_cte                        shift and go to state 74
    termino                        shift and go to state 75
    exp                            shift and go to state 85
    factorAux                      shift and go to state 86
    factor                         shift and go to state 78

state 168

    (80) escrituraAux -> expresion COMA escrituraAux .

    RPAREN          reduce using rule 80 (escrituraAux -> expresion COMA escrituraAux .)


state 169

    (76) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print . SEMICOLON

    SEMICOLON       shift and go to state 189


state 170

    (94) exp1 -> PLUS push_poper . exp
    (92) exp -> . termino quad_term
    (93) exp -> . termino quad_term exp1
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    ID              shift and go to state 83
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79
    CTE_STRING      shift and go to state 80

    termino                        shift and go to state 75
    exp                            shift and go to state 190
    factor                         shift and go to state 78
    factorAux                      shift and go to state 86
    var_cte                        shift and go to state 74

state 171

    (95) exp1 -> MINUS push_poper . exp
    (92) exp -> . termino quad_term
    (93) exp -> . termino quad_term exp1
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    ID              shift and go to state 83
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79
    CTE_STRING      shift and go to state 80

    termino                        shift and go to state 75
    exp                            shift and go to state 191
    factor                         shift and go to state 78
    factorAux                      shift and go to state 86
    var_cte                        shift and go to state 74

state 172

    (101) termino1 -> DIVIDE push_poper . termino
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    ID              shift and go to state 83
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79
    CTE_STRING      shift and go to state 80

    termino                        shift and go to state 192
    factor                         shift and go to state 78
    factorAux                      shift and go to state 86
    var_cte                        shift and go to state 74

state 173

    (100) termino1 -> TIMES push_poper . termino
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    ID              shift and go to state 83
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79
    CTE_STRING      shift and go to state 80

    termino                        shift and go to state 193
    factor                         shift and go to state 78
    factorAux                      shift and go to state 86
    var_cte                        shift and go to state 74

state 174

    (26) bloque -> LBRACE . RBRACE
    (27) bloque -> LBRACE . bloqueAux RBRACE
    (43) bloqueAux -> . estatuto
    (44) bloqueAux -> . estatuto bloqueAux
    (50) estatuto -> . asignacion
    (51) estatuto -> . condicion
    (52) estatuto -> . escritura
    (53) estatuto -> . while
    (54) estatuto -> . loopFromDo
    (55) estatuto -> . comparacion
    (56) estatuto -> . llamadaAFuncion
    (68) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (71) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (72) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (76) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (45) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (49) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (70) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    RBRACE          shift and go to state 194
    ID              shift and go to state 43
    IF              shift and go to state 40
    PRINT           shift and go to state 38
    WHILE           shift and go to state 48
    FROM            shift and go to state 46

    estatuto                       shift and go to state 39
    condicion                      shift and go to state 41
    loopFromDo                     shift and go to state 44
    llamadaAFuncion                shift and go to state 45
    asignacion                     shift and go to state 47
    bloqueAux                      shift and go to state 195
    while                          shift and go to state 50
    comparacion                    shift and go to state 51
    escritura                      shift and go to state 52

state 175

    (71) condicion -> IF LPAREN expresion RPAREN cond bloque . condFinal
    (72) condicion -> IF LPAREN expresion RPAREN cond bloque . ELSE condElse bloque condFinal
    (75) condFinal -> .

    ELSE            shift and go to state 197
    ID              reduce using rule 75 (condFinal -> .)
    IF              reduce using rule 75 (condFinal -> .)
    PRINT           reduce using rule 75 (condFinal -> .)
    WHILE           reduce using rule 75 (condFinal -> .)
    FROM            reduce using rule 75 (condFinal -> .)
    RBRACE          reduce using rule 75 (condFinal -> .)

    condFinal                      shift and go to state 196

state 176

    (84) expresion -> exp comp exp quad_comp .

    SEMICOLON       reduce using rule 84 (expresion -> exp comp exp quad_comp .)
    RPAREN          reduce using rule 84 (expresion -> exp comp exp quad_comp .)
    COMA            reduce using rule 84 (expresion -> exp comp exp quad_comp .)
    ID              reduce using rule 84 (expresion -> exp comp exp quad_comp .)
    IF              reduce using rule 84 (expresion -> exp comp exp quad_comp .)
    PRINT           reduce using rule 84 (expresion -> exp comp exp quad_comp .)
    WHILE           reduce using rule 84 (expresion -> exp comp exp quad_comp .)
    FROM            reduce using rule 84 (expresion -> exp comp exp quad_comp .)
    RBRACE          reduce using rule 84 (expresion -> exp comp exp quad_comp .)


state 177

    (57) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub . RPAREN expresion
    (58) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub . RPAREN SEMICOLON

    RPAREN          shift and go to state 198


state 178

    (62) paramFuncion -> ID push_id2 .
    (63) paramFuncion -> ID push_id2 . COMA paramFuncion

    RPAREN          reduce using rule 62 (paramFuncion -> ID push_id2 .)
    COMA            shift and go to state 199


state 179

    (65) paramFuncion -> expresion COMA . paramFuncion
    (62) paramFuncion -> . ID push_id2
    (63) paramFuncion -> . ID push_id2 COMA paramFuncion
    (64) paramFuncion -> . expresion
    (65) paramFuncion -> . expresion COMA paramFuncion
    (66) paramFuncion -> . empty
    (83) expresion -> . exp
    (84) expresion -> . exp comp exp quad_comp
    (40) empty -> .
    (92) exp -> . termino quad_term
    (93) exp -> . termino quad_term exp1
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 156
    RPAREN          reduce using rule 40 (empty -> .)
    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79
    CTE_STRING      shift and go to state 80

    expresion                      shift and go to state 157
    paramFuncion                   shift and go to state 200
    termino                        shift and go to state 75
    exp                            shift and go to state 85
    factorAux                      shift and go to state 86
    factor                         shift and go to state 78
    var_cte                        shift and go to state 74
    empty                          shift and go to state 155

state 180

    (70) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .

    ID              reduce using rule 70 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    IF              reduce using rule 70 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    PRINT           reduce using rule 70 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    WHILE           reduce using rule 70 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    FROM            reduce using rule 70 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    RBRACE          reduce using rule 70 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)


state 181

    (68) asignacion -> ID push_id EQUAL push_poper expresion create_asign . SEMICOLON

    SEMICOLON       shift and go to state 201


state 182

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN . TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    TO              shift and go to state 202


state 183

    (45) while -> WHILE while1 LPAREN expresion RPAREN while2 . LBRACE bloqueAux RBRACE while3

    LBRACE          shift and go to state 203


state 184

    (30) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function .

    $end            reduce using rule 30 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function .)


state 185

    (29) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE . endProc
    (31) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE . endProc function
    (36) endProc -> .

    FUNCTION        reduce using rule 36 (endProc -> .)
    $end            reduce using rule 36 (endProc -> .)

    endProc                        shift and go to state 204

state 186

    (32) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc .
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc . function
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (31) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (33) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (35) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    $end            reduce using rule 32 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc .)
    FUNCTION        shift and go to state 19

    function                       shift and go to state 205

state 187

    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . RBRACE endProc
    (35) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . RBRACE endProc function

    RBRACE          shift and go to state 206


state 188

    (81) escrituraAux -> CTE_STRING push_cte COMA escrituraAux .

    RPAREN          reduce using rule 81 (escrituraAux -> CTE_STRING push_cte COMA escrituraAux .)


state 189

    (76) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .

    ID              reduce using rule 76 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    IF              reduce using rule 76 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    PRINT           reduce using rule 76 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    WHILE           reduce using rule 76 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    FROM            reduce using rule 76 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    RBRACE          reduce using rule 76 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)


state 190

    (94) exp1 -> PLUS push_poper exp .

    LOWERTHAN       reduce using rule 94 (exp1 -> PLUS push_poper exp .)
    MORETHAN        reduce using rule 94 (exp1 -> PLUS push_poper exp .)
    DIFFERENT       reduce using rule 94 (exp1 -> PLUS push_poper exp .)
    DOUBLEEQUAL     reduce using rule 94 (exp1 -> PLUS push_poper exp .)
    LOWEREQUAL      reduce using rule 94 (exp1 -> PLUS push_poper exp .)
    MOREEQUAL       reduce using rule 94 (exp1 -> PLUS push_poper exp .)
    RPAREN          reduce using rule 94 (exp1 -> PLUS push_poper exp .)
    COMA            reduce using rule 94 (exp1 -> PLUS push_poper exp .)
    SEMICOLON       reduce using rule 94 (exp1 -> PLUS push_poper exp .)
    ID              reduce using rule 94 (exp1 -> PLUS push_poper exp .)
    IF              reduce using rule 94 (exp1 -> PLUS push_poper exp .)
    PRINT           reduce using rule 94 (exp1 -> PLUS push_poper exp .)
    WHILE           reduce using rule 94 (exp1 -> PLUS push_poper exp .)
    FROM            reduce using rule 94 (exp1 -> PLUS push_poper exp .)
    RBRACE          reduce using rule 94 (exp1 -> PLUS push_poper exp .)


state 191

    (95) exp1 -> MINUS push_poper exp .

    LOWERTHAN       reduce using rule 95 (exp1 -> MINUS push_poper exp .)
    MORETHAN        reduce using rule 95 (exp1 -> MINUS push_poper exp .)
    DIFFERENT       reduce using rule 95 (exp1 -> MINUS push_poper exp .)
    DOUBLEEQUAL     reduce using rule 95 (exp1 -> MINUS push_poper exp .)
    LOWEREQUAL      reduce using rule 95 (exp1 -> MINUS push_poper exp .)
    MOREEQUAL       reduce using rule 95 (exp1 -> MINUS push_poper exp .)
    RPAREN          reduce using rule 95 (exp1 -> MINUS push_poper exp .)
    COMA            reduce using rule 95 (exp1 -> MINUS push_poper exp .)
    SEMICOLON       reduce using rule 95 (exp1 -> MINUS push_poper exp .)
    ID              reduce using rule 95 (exp1 -> MINUS push_poper exp .)
    IF              reduce using rule 95 (exp1 -> MINUS push_poper exp .)
    PRINT           reduce using rule 95 (exp1 -> MINUS push_poper exp .)
    WHILE           reduce using rule 95 (exp1 -> MINUS push_poper exp .)
    FROM            reduce using rule 95 (exp1 -> MINUS push_poper exp .)
    RBRACE          reduce using rule 95 (exp1 -> MINUS push_poper exp .)


state 192

    (101) termino1 -> DIVIDE push_poper termino .

    PLUS            reduce using rule 101 (termino1 -> DIVIDE push_poper termino .)
    MINUS           reduce using rule 101 (termino1 -> DIVIDE push_poper termino .)
    LOWERTHAN       reduce using rule 101 (termino1 -> DIVIDE push_poper termino .)
    MORETHAN        reduce using rule 101 (termino1 -> DIVIDE push_poper termino .)
    DIFFERENT       reduce using rule 101 (termino1 -> DIVIDE push_poper termino .)
    DOUBLEEQUAL     reduce using rule 101 (termino1 -> DIVIDE push_poper termino .)
    LOWEREQUAL      reduce using rule 101 (termino1 -> DIVIDE push_poper termino .)
    MOREEQUAL       reduce using rule 101 (termino1 -> DIVIDE push_poper termino .)
    RPAREN          reduce using rule 101 (termino1 -> DIVIDE push_poper termino .)
    COMA            reduce using rule 101 (termino1 -> DIVIDE push_poper termino .)
    SEMICOLON       reduce using rule 101 (termino1 -> DIVIDE push_poper termino .)
    ID              reduce using rule 101 (termino1 -> DIVIDE push_poper termino .)
    IF              reduce using rule 101 (termino1 -> DIVIDE push_poper termino .)
    PRINT           reduce using rule 101 (termino1 -> DIVIDE push_poper termino .)
    WHILE           reduce using rule 101 (termino1 -> DIVIDE push_poper termino .)
    FROM            reduce using rule 101 (termino1 -> DIVIDE push_poper termino .)
    RBRACE          reduce using rule 101 (termino1 -> DIVIDE push_poper termino .)


state 193

    (100) termino1 -> TIMES push_poper termino .

    PLUS            reduce using rule 100 (termino1 -> TIMES push_poper termino .)
    MINUS           reduce using rule 100 (termino1 -> TIMES push_poper termino .)
    LOWERTHAN       reduce using rule 100 (termino1 -> TIMES push_poper termino .)
    MORETHAN        reduce using rule 100 (termino1 -> TIMES push_poper termino .)
    DIFFERENT       reduce using rule 100 (termino1 -> TIMES push_poper termino .)
    DOUBLEEQUAL     reduce using rule 100 (termino1 -> TIMES push_poper termino .)
    LOWEREQUAL      reduce using rule 100 (termino1 -> TIMES push_poper termino .)
    MOREEQUAL       reduce using rule 100 (termino1 -> TIMES push_poper termino .)
    RPAREN          reduce using rule 100 (termino1 -> TIMES push_poper termino .)
    COMA            reduce using rule 100 (termino1 -> TIMES push_poper termino .)
    SEMICOLON       reduce using rule 100 (termino1 -> TIMES push_poper termino .)
    ID              reduce using rule 100 (termino1 -> TIMES push_poper termino .)
    IF              reduce using rule 100 (termino1 -> TIMES push_poper termino .)
    PRINT           reduce using rule 100 (termino1 -> TIMES push_poper termino .)
    WHILE           reduce using rule 100 (termino1 -> TIMES push_poper termino .)
    FROM            reduce using rule 100 (termino1 -> TIMES push_poper termino .)
    RBRACE          reduce using rule 100 (termino1 -> TIMES push_poper termino .)


state 194

    (26) bloque -> LBRACE RBRACE .

    ELSE            reduce using rule 26 (bloque -> LBRACE RBRACE .)
    ID              reduce using rule 26 (bloque -> LBRACE RBRACE .)
    IF              reduce using rule 26 (bloque -> LBRACE RBRACE .)
    PRINT           reduce using rule 26 (bloque -> LBRACE RBRACE .)
    WHILE           reduce using rule 26 (bloque -> LBRACE RBRACE .)
    FROM            reduce using rule 26 (bloque -> LBRACE RBRACE .)
    RBRACE          reduce using rule 26 (bloque -> LBRACE RBRACE .)


state 195

    (27) bloque -> LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 207


state 196

    (71) condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .

    ID              reduce using rule 71 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    IF              reduce using rule 71 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    PRINT           reduce using rule 71 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    WHILE           reduce using rule 71 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    FROM            reduce using rule 71 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    RBRACE          reduce using rule 71 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)


state 197

    (72) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE . condElse bloque condFinal
    (74) condElse -> .

    LBRACE          reduce using rule 74 (condElse -> .)

    condElse                       shift and go to state 208

state 198

    (57) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN . expresion
    (58) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN . SEMICOLON
    (83) expresion -> . exp
    (84) expresion -> . exp comp exp quad_comp
    (92) exp -> . termino quad_term
    (93) exp -> . termino quad_term exp1
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    SEMICOLON       shift and go to state 209
    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    ID              shift and go to state 83
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79
    CTE_STRING      shift and go to state 80

    expresion                      shift and go to state 210
    termino                        shift and go to state 75
    exp                            shift and go to state 85
    factorAux                      shift and go to state 86
    factor                         shift and go to state 78
    var_cte                        shift and go to state 74

state 199

    (63) paramFuncion -> ID push_id2 COMA . paramFuncion
    (62) paramFuncion -> . ID push_id2
    (63) paramFuncion -> . ID push_id2 COMA paramFuncion
    (64) paramFuncion -> . expresion
    (65) paramFuncion -> . expresion COMA paramFuncion
    (66) paramFuncion -> . empty
    (83) expresion -> . exp
    (84) expresion -> . exp comp exp quad_comp
    (40) empty -> .
    (92) exp -> . termino quad_term
    (93) exp -> . termino quad_term exp1
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 156
    RPAREN          reduce using rule 40 (empty -> .)
    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79
    CTE_STRING      shift and go to state 80

    expresion                      shift and go to state 157
    paramFuncion                   shift and go to state 211
    termino                        shift and go to state 75
    exp                            shift and go to state 85
    factorAux                      shift and go to state 86
    factor                         shift and go to state 78
    var_cte                        shift and go to state 74
    empty                          shift and go to state 155

state 200

    (65) paramFuncion -> expresion COMA paramFuncion .

    RPAREN          reduce using rule 65 (paramFuncion -> expresion COMA paramFuncion .)


state 201

    (68) asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .

    ID              reduce using rule 68 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    IF              reduce using rule 68 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    PRINT           reduce using rule 68 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    WHILE           reduce using rule 68 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    FROM            reduce using rule 68 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    RBRACE          reduce using rule 68 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)


state 202

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO . LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    LPAREN          shift and go to state 212


state 203

    (45) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE . bloqueAux RBRACE while3
    (43) bloqueAux -> . estatuto
    (44) bloqueAux -> . estatuto bloqueAux
    (50) estatuto -> . asignacion
    (51) estatuto -> . condicion
    (52) estatuto -> . escritura
    (53) estatuto -> . while
    (54) estatuto -> . loopFromDo
    (55) estatuto -> . comparacion
    (56) estatuto -> . llamadaAFuncion
    (68) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (71) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (72) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (76) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (45) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (49) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (70) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    ID              shift and go to state 43
    IF              shift and go to state 40
    PRINT           shift and go to state 38
    WHILE           shift and go to state 48
    FROM            shift and go to state 46

    estatuto                       shift and go to state 39
    condicion                      shift and go to state 41
    loopFromDo                     shift and go to state 44
    llamadaAFuncion                shift and go to state 45
    asignacion                     shift and go to state 47
    bloqueAux                      shift and go to state 213
    while                          shift and go to state 50
    comparacion                    shift and go to state 51
    escritura                      shift and go to state 52

state 204

    (29) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .
    (31) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc . function
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (31) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (33) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (35) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    $end            reduce using rule 29 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .)
    FUNCTION        shift and go to state 19

    function                       shift and go to state 214

state 205

    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function .

    $end            reduce using rule 34 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function .)


state 206

    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE . endProc
    (35) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE . endProc function
    (36) endProc -> .

    FUNCTION        reduce using rule 36 (endProc -> .)
    $end            reduce using rule 36 (endProc -> .)

    endProc                        shift and go to state 215

state 207

    (27) bloque -> LBRACE bloqueAux RBRACE .

    ELSE            reduce using rule 27 (bloque -> LBRACE bloqueAux RBRACE .)
    ID              reduce using rule 27 (bloque -> LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 27 (bloque -> LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 27 (bloque -> LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 27 (bloque -> LBRACE bloqueAux RBRACE .)
    FROM            reduce using rule 27 (bloque -> LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 27 (bloque -> LBRACE bloqueAux RBRACE .)


state 208

    (72) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse . bloque condFinal
    (26) bloque -> . LBRACE RBRACE
    (27) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 174

    bloque                         shift and go to state 216

state 209

    (58) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .

    ID              reduce using rule 58 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    IF              reduce using rule 58 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    PRINT           reduce using rule 58 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    WHILE           reduce using rule 58 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    FROM            reduce using rule 58 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    RBRACE          reduce using rule 58 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    RPAREN          reduce using rule 58 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)


state 210

    (57) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .

    ID              reduce using rule 57 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    IF              reduce using rule 57 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    PRINT           reduce using rule 57 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    WHILE           reduce using rule 57 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    FROM            reduce using rule 57 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    RBRACE          reduce using rule 57 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    RPAREN          reduce using rule 57 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)


state 211

    (63) paramFuncion -> ID push_id2 COMA paramFuncion .

    RPAREN          reduce using rule 63 (paramFuncion -> ID push_id2 COMA paramFuncion .)


state 212

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN . expresion RPAREN DO LBRACE bloqueAux RBRACE
    (83) expresion -> . exp
    (84) expresion -> . exp comp exp quad_comp
    (92) exp -> . termino quad_term
    (93) exp -> . termino quad_term exp1
    (98) termino -> . factor quad_fact
    (99) termino -> . factor quad_fact termino1
    (102) factor -> . LPAREN expresion RPAREN
    (103) factor -> . factorAux
    (104) factorAux -> . PLUS push_poper var_cte
    (105) factorAux -> . MINUS push_poper var_cte
    (106) factorAux -> . var_cte
    (110) var_cte -> . ID push_id
    (111) var_cte -> . CTE_I push_cte
    (112) var_cte -> . CTE_F push_cte
    (113) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 82
    PLUS            shift and go to state 77
    MINUS           shift and go to state 76
    ID              shift and go to state 83
    CTE_I           shift and go to state 81
    CTE_F           shift and go to state 79
    CTE_STRING      shift and go to state 80

    expresion                      shift and go to state 217
    factor                         shift and go to state 78
    var_cte                        shift and go to state 74
    termino                        shift and go to state 75
    exp                            shift and go to state 85
    factorAux                      shift and go to state 86

state 213

    (45) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux . RBRACE while3

    RBRACE          shift and go to state 218


state 214

    (31) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function .

    $end            reduce using rule 31 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function .)


state 215

    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc .
    (35) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc . function
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (31) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (33) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (35) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    $end            reduce using rule 33 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc .)
    FUNCTION        shift and go to state 19

    function                       shift and go to state 219

state 216

    (72) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque . condFinal
    (75) condFinal -> .

    ID              reduce using rule 75 (condFinal -> .)
    IF              reduce using rule 75 (condFinal -> .)
    PRINT           reduce using rule 75 (condFinal -> .)
    WHILE           reduce using rule 75 (condFinal -> .)
    FROM            reduce using rule 75 (condFinal -> .)
    RBRACE          reduce using rule 75 (condFinal -> .)

    condFinal                      shift and go to state 220

state 217

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion . RPAREN DO LBRACE bloqueAux RBRACE

    RPAREN          shift and go to state 221


state 218

    (45) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE . while3
    (48) while3 -> .

    ID              reduce using rule 48 (while3 -> .)
    IF              reduce using rule 48 (while3 -> .)
    PRINT           reduce using rule 48 (while3 -> .)
    WHILE           reduce using rule 48 (while3 -> .)
    FROM            reduce using rule 48 (while3 -> .)
    RBRACE          reduce using rule 48 (while3 -> .)

    while3                         shift and go to state 222

state 219

    (35) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function .

    $end            reduce using rule 35 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function .)


state 220

    (72) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .

    ID              reduce using rule 72 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    IF              reduce using rule 72 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    PRINT           reduce using rule 72 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    WHILE           reduce using rule 72 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    FROM            reduce using rule 72 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    RBRACE          reduce using rule 72 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)


state 221

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN . DO LBRACE bloqueAux RBRACE

    DO              shift and go to state 223


state 222

    (45) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .

    ID              reduce using rule 45 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    IF              reduce using rule 45 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    PRINT           reduce using rule 45 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    WHILE           reduce using rule 45 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    FROM            reduce using rule 45 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    RBRACE          reduce using rule 45 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)


state 223

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 224


state 224

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE . bloqueAux RBRACE
    (43) bloqueAux -> . estatuto
    (44) bloqueAux -> . estatuto bloqueAux
    (50) estatuto -> . asignacion
    (51) estatuto -> . condicion
    (52) estatuto -> . escritura
    (53) estatuto -> . while
    (54) estatuto -> . loopFromDo
    (55) estatuto -> . comparacion
    (56) estatuto -> . llamadaAFuncion
    (68) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (71) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (72) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (76) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (45) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (49) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (70) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (57) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    ID              shift and go to state 43
    IF              shift and go to state 40
    PRINT           shift and go to state 38
    WHILE           shift and go to state 48
    FROM            shift and go to state 46

    estatuto                       shift and go to state 39
    condicion                      shift and go to state 41
    loopFromDo                     shift and go to state 44
    llamadaAFuncion                shift and go to state 45
    asignacion                     shift and go to state 47
    bloqueAux                      shift and go to state 225
    while                          shift and go to state 50
    comparacion                    shift and go to state 51
    escritura                      shift and go to state 52

state 225

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 226


state 226

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .

    ID              reduce using rule 49 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 49 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 49 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 49 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    FROM            reduce using rule 49 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 49 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 55 resolved as shift
WARNING: shift/reduce conflict for COMA in state 132 resolved as shift
WARNING: reduce/reduce conflict in state 132 resolved using rule (escrituraAux -> CTE_STRING push_cte)
WARNING: rejected rule (var_cte -> CTE_STRING push_cte) in state 132
WARNING: reduce/reduce conflict in state 156 resolved using rule (push_id2 -> <empty>)
WARNING: rejected rule (push_id -> <empty>) in state 156
