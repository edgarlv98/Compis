Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DETERMINANT
    INVERSA
    AND
    TRANSPUESTA
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID COLON varsGlobal function main endPrograma
Rule 2     program -> PROGRAM ID COLON function main endPrograma
Rule 3     program -> PROGRAM ID COLON varsGlobal main endPrograma
Rule 4     program -> PROGRAM ID COLON main endPrograma
Rule 5     endPrograma -> <empty>
Rule 6     varsGlobal -> VAR varAuxGlobal1
Rule 7     varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON
Rule 8     varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1
Rule 9     varAuxGlobal2 -> ID
Rule 10    varAuxGlobal2 -> ID COMA varAuxGlobal2
Rule 11    varAuxGlobal2 -> ID LCORCH CTE_I RCORCH
Rule 12    varAuxGlobal2 -> ID LCORCH CTE_I RCORCH COMA varAuxGlobal2
Rule 13    varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH
Rule 14    varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2
Rule 15    main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
Rule 16    main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
Rule 17    nomMain -> MAIN
Rule 18    vars -> VAR varAux1
Rule 19    varAux1 -> tipo varAux2 SEMICOLON
Rule 20    varAux1 -> tipo varAux2 SEMICOLON varAux1
Rule 21    varAux2 -> ID push_var
Rule 22    varAux2 -> ID push_var COMA varAux2
Rule 23    varAux2 -> ID LCORCH CTE_I RCORCH push_arreglo
Rule 24    varAux2 -> ID LCORCH CTE_I RCORCH push_arreglo COMA varAux2
Rule 25    varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
Rule 26    varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2
Rule 27    push_var -> <empty>
Rule 28    push_arreglo -> <empty>
Rule 29    push_matriz -> <empty>
Rule 30    tipo -> INT
Rule 31    tipo -> FLOAT
Rule 32    tipo -> CHAR
Rule 33    tipoFunc -> INT
Rule 34    tipoFunc -> FLOAT
Rule 35    tipoFunc -> CHAR
Rule 36    tipoFunc -> VOID
Rule 37    bloque -> LBRACE RBRACE
Rule 38    bloque -> LBRACE bloqueAux RBRACE
Rule 39    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
Rule 40    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
Rule 41    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
Rule 42    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
Rule 43    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
Rule 44    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
Rule 45    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
Rule 46    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
Rule 47    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
Rule 48    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
Rule 49    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
Rule 50    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
Rule 51    functionReturn -> RETURN exp creaCuadReturn SEMICOLON
Rule 52    functionReturn -> empty
Rule 53    creaCuadReturn -> <empty>
Rule 54    endProc -> <empty>
Rule 55    param -> tipo ID paramAvarTable
Rule 56    param -> tipo ID paramAvarTable COMA param
Rule 57    param -> empty
Rule 58    paramAvarTable -> <empty>
Rule 59    empty -> <empty>
Rule 60    push_function -> <empty>
Rule 61    nomFunc -> ID push_function
Rule 62    bloqueAux -> estatuto
Rule 63    bloqueAux -> estatuto bloqueAux
Rule 64    while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
Rule 65    while1 -> <empty>
Rule 66    while2 -> <empty>
Rule 67    while3 -> <empty>
Rule 68    loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
Rule 69    estatuto -> asignacion
Rule 70    estatuto -> condicion
Rule 71    estatuto -> escritura
Rule 72    estatuto -> while
Rule 73    estatuto -> loopFromDo
Rule 74    estatuto -> comparacion
Rule 75    estatuto -> llamadaAFuncion
Rule 76    estatuto -> lectura
Rule 77    llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
Rule 78    llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
Rule 79    llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
Rule 80    actualizaFuncion -> <empty>
Rule 81    gosub -> <empty>
Rule 82    generarEra -> <empty>
Rule 83    paramFuncion -> ID push_id2 paramFuncionAux
Rule 84    paramFuncion -> ID push_id2 paramFuncionAux COMA paramFuncion
Rule 85    paramFuncion -> exp paramFuncionAux
Rule 86    paramFuncion -> exp paramFuncionAux COMA paramFuncion
Rule 87    paramFuncion -> empty
Rule 88    paramFuncionAux -> <empty>
Rule 89    push_id2 -> <empty>
Rule 90    arreglo -> ID push_id LCORCH exp RCORCH ver_dim1
Rule 91    asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON
Rule 92    asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON
Rule 93    asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
Rule 94    push_id_dimensionada -> <empty>
Rule 95    create_asign_dim -> <empty>
Rule 96    ver_dim1 -> <empty>
Rule 97    create_asign -> <empty>
Rule 98    comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
Rule 99    condicion -> IF LPAREN expresion RPAREN cond bloque condFinal
Rule 100   condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
Rule 101   cond -> <empty>
Rule 102   condElse -> <empty>
Rule 103   condFinal -> <empty>
Rule 104   escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
Rule 105   escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
Rule 106   lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
Rule 107   quad_print -> <empty>
Rule 108   escrituraAux -> expresion
Rule 109   escrituraAux -> CTE_STRING push_cte
Rule 110   escrituraAux -> expresion COMA escrituraAux
Rule 111   escrituraAux -> CTE_STRING push_cte COMA escrituraAux
Rule 112   escrituraAux -> llamadaAFuncion
Rule 113   expresion -> exp
Rule 114   expresion -> exp comp exp quad_comp
Rule 115   comp -> LOWERTHAN push_poper
Rule 116   comp -> MORETHAN push_poper
Rule 117   comp -> DIFFERENT push_poper
Rule 118   comp -> DOUBLEEQUAL push_poper
Rule 119   comp -> LOWEREQUAL push_poper
Rule 120   comp -> MOREEQUAL push_poper
Rule 121   quad_comp -> <empty>
Rule 122   exp -> termino quad_term
Rule 123   exp -> termino quad_term exp1
Rule 124   exp1 -> PLUS push_poper exp
Rule 125   exp1 -> MINUS push_poper exp
Rule 126   quad_term -> <empty>
Rule 127   quad_fact -> <empty>
Rule 128   termino -> factor quad_fact
Rule 129   termino -> factor quad_fact termino1
Rule 130   termino1 -> TIMES push_poper termino
Rule 131   termino1 -> DIVIDE push_poper termino
Rule 132   factor -> LPAREN expresion RPAREN
Rule 133   factor -> factorAux
Rule 134   factorAux -> PLUS push_poper var_cte
Rule 135   factorAux -> MINUS push_poper var_cte
Rule 136   factorAux -> var_cte
Rule 137   push_id -> <empty>
Rule 138   push_cte -> <empty>
Rule 139   push_poper -> <empty>
Rule 140   var_cte -> ID push_id
Rule 141   var_cte -> CTE_I push_cte
Rule 142   var_cte -> CTE_F push_cte
Rule 143   var_cte -> CTE_STRING push_cte
Rule 144   var_cte -> arreglo

Terminals, with rules where they appear

AND                  : 
CHAR                 : 32 35
COLON                : 1 2 3 4
COMA                 : 10 12 14 22 24 26 56 84 86 110 111
CTE_F                : 142
CTE_I                : 11 12 13 13 14 14 23 24 25 25 26 26 141
CTE_STRING           : 109 111 143
DETERMINANT          : 
DIFFERENT            : 117
DIVIDE               : 131
DO                   : 68
DOUBLEEQUAL          : 98 118
ELSE                 : 100
EQUAL                : 68 91 92 93
FLOAT                : 31 34
FROM                 : 68
FUNCTION             : 39 40 41 42 43 44 45 46 47 48 49 50
ID                   : 1 2 3 4 9 10 11 12 13 14 21 22 23 24 25 26 55 56 61 68 77 78 79 83 84 90 91 93 98 106 140
IF                   : 99 100
INPUT                : 106
INT                  : 30 33
INVERSA              : 
LBRACE               : 15 16 37 38 39 40 41 42 43 44 45 46 47 48 49 50 64 68
LCORCH               : 11 12 13 13 14 14 23 24 25 25 26 26 90
LOWEREQUAL           : 119
LOWERTHAN            : 115
LPAREN               : 15 16 39 40 41 42 43 44 45 46 47 48 49 50 64 68 68 77 78 79 99 100 104 105 106 132
MAIN                 : 17
MINUS                : 125 135
MOREEQUAL            : 120
MORETHAN             : 116
OR                   : 
PLUS                 : 124 134
PRINT                : 104 105
PROGRAM              : 1 2 3 4
RBRACE               : 15 16 37 38 39 40 41 42 43 44 45 46 47 48 49 50 64 68
RCORCH               : 11 12 13 13 14 14 23 24 25 25 26 26 90
RETURN               : 51
RPAREN               : 15 16 39 40 41 42 43 44 45 46 47 48 49 50 64 68 68 77 78 79 99 100 104 105 106 132
SEMICOLON            : 7 8 19 20 51 79 91 92 93 98 104 105 106
TIMES                : 130
TO                   : 68
TRANSPUESTA          : 
VAR                  : 6 18
VOID                 : 36
WHILE                : 64
error                : 

Nonterminals, with rules where they appear

actualizaFuncion     : 77 78 79
arreglo              : 92 144
asignacion           : 69
bloque               : 99 100 100
bloqueAux            : 15 16 38 40 42 43 44 46 47 48 50 63 64 68
comp                 : 114
comparacion          : 74
cond                 : 99 100
condElse             : 100
condFinal            : 99 100
condicion            : 70
creaCuadReturn       : 51
create_asign         : 91 92 93
create_asign_dim     : 
empty                : 52 57 87
endProc              : 39 40 41 42 43 44 45 46 47 48 49 50
endPrograma          : 1 2 3 4
escritura            : 71
escrituraAux         : 104 110 111
estatuto             : 62 63
exp                  : 51 85 86 90 113 114 114 124 125
exp1                 : 123
expresion            : 64 68 68 77 91 92 98 99 100 108 110 132
factor               : 128 129
factorAux            : 133
function             : 1 2 41 42 44 47 49 50
functionReturn       : 39 40 41 42 43 44 45 46 47 48 49 50
generarEra           : 77 78 79
gosub                : 77 78 79
lectura              : 76
llamadaAFuncion      : 75 93 105 112
loopFromDo           : 73
main                 : 1 2 3 4
nomFunc              : 39 40 41 42 43 44 45 46 47 48 49 50
nomMain              : 15 16
param                : 45 46 47 48 49 50 56
paramAvarTable       : 55 56
paramFuncion         : 77 78 79 84 86
paramFuncionAux      : 83 84 85 86
program              : 0
push_arreglo         : 23 24
push_cte             : 109 111 141 142 143
push_function        : 61
push_id              : 90 91 93 98 106 140
push_id2             : 83 84
push_id_dimensionada : 
push_matriz          : 25 26
push_poper           : 91 92 93 98 104 105 106 115 116 117 118 119 120 124 125 130 131 134 135
push_var             : 21 22
quad_comp            : 114
quad_fact            : 128 129
quad_print           : 104 105 106
quad_term            : 122 123
termino              : 122 123 130 131
termino1             : 129
tipo                 : 7 8 19 20 55 56
tipoFunc             : 39 40 41 42 43 44 45 46 47 48 49 50
varAux1              : 18 20
varAux2              : 19 20 22 24 26
varAuxGlobal1        : 6 8
varAuxGlobal2        : 7 8 10 12 14
var_cte              : 134 135 136
vars                 : 16 40 42 48 50
varsGlobal           : 1 3
ver_dim1             : 90
while                : 72
while1               : 64
while2               : 64
while3               : 64

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID COLON varsGlobal function main endPrograma
    (2) program -> . PROGRAM ID COLON function main endPrograma
    (3) program -> . PROGRAM ID COLON varsGlobal main endPrograma
    (4) program -> . PROGRAM ID COLON main endPrograma

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID COLON varsGlobal function main endPrograma
    (2) program -> PROGRAM . ID COLON function main endPrograma
    (3) program -> PROGRAM . ID COLON varsGlobal main endPrograma
    (4) program -> PROGRAM . ID COLON main endPrograma

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . COLON varsGlobal function main endPrograma
    (2) program -> PROGRAM ID . COLON function main endPrograma
    (3) program -> PROGRAM ID . COLON varsGlobal main endPrograma
    (4) program -> PROGRAM ID . COLON main endPrograma

    COLON           shift and go to state 4


state 4

    (1) program -> PROGRAM ID COLON . varsGlobal function main endPrograma
    (2) program -> PROGRAM ID COLON . function main endPrograma
    (3) program -> PROGRAM ID COLON . varsGlobal main endPrograma
    (4) program -> PROGRAM ID COLON . main endPrograma
    (6) varsGlobal -> . VAR varAuxGlobal1
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (15) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (16) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (17) nomMain -> . MAIN

    VAR             shift and go to state 10
    FUNCTION        shift and go to state 5
    MAIN            shift and go to state 11

    function                       shift and go to state 9
    varsGlobal                     shift and go to state 7
    nomMain                        shift and go to state 6
    main                           shift and go to state 8

state 5

    (39) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (33) tipoFunc -> . INT
    (34) tipoFunc -> . FLOAT
    (35) tipoFunc -> . CHAR
    (36) tipoFunc -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    VOID            shift and go to state 13

    tipoFunc                       shift and go to state 16

state 6

    (15) main -> nomMain . LPAREN RPAREN LBRACE bloqueAux RBRACE
    (16) main -> nomMain . LPAREN RPAREN LBRACE vars bloqueAux RBRACE

    LPAREN          shift and go to state 17


state 7

    (1) program -> PROGRAM ID COLON varsGlobal . function main endPrograma
    (3) program -> PROGRAM ID COLON varsGlobal . main endPrograma
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (15) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (16) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (17) nomMain -> . MAIN

    FUNCTION        shift and go to state 5
    MAIN            shift and go to state 11

    function                       shift and go to state 18
    nomMain                        shift and go to state 6
    main                           shift and go to state 19

state 8

    (4) program -> PROGRAM ID COLON main . endPrograma
    (5) endPrograma -> .

    $end            reduce using rule 5 (endPrograma -> .)

    endPrograma                    shift and go to state 20

state 9

    (2) program -> PROGRAM ID COLON function . main endPrograma
    (15) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (16) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (17) nomMain -> . MAIN

    MAIN            shift and go to state 11

    nomMain                        shift and go to state 6
    main                           shift and go to state 21

state 10

    (6) varsGlobal -> VAR . varAuxGlobal1
    (7) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON
    (8) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON varAuxGlobal1
    (30) tipo -> . INT
    (31) tipo -> . FLOAT
    (32) tipo -> . CHAR

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    varAuxGlobal1                  shift and go to state 26
    tipo                           shift and go to state 22

state 11

    (17) nomMain -> MAIN .

    LPAREN          reduce using rule 17 (nomMain -> MAIN .)


state 12

    (33) tipoFunc -> INT .

    ID              reduce using rule 33 (tipoFunc -> INT .)


state 13

    (36) tipoFunc -> VOID .

    ID              reduce using rule 36 (tipoFunc -> VOID .)


state 14

    (34) tipoFunc -> FLOAT .

    ID              reduce using rule 34 (tipoFunc -> FLOAT .)


state 15

    (35) tipoFunc -> CHAR .

    ID              reduce using rule 35 (tipoFunc -> CHAR .)


state 16

    (39) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (61) nomFunc -> . ID push_function

    ID              shift and go to state 28

    nomFunc                        shift and go to state 27

state 17

    (15) main -> nomMain LPAREN . RPAREN LBRACE bloqueAux RBRACE
    (16) main -> nomMain LPAREN . RPAREN LBRACE vars bloqueAux RBRACE

    RPAREN          shift and go to state 29


state 18

    (1) program -> PROGRAM ID COLON varsGlobal function . main endPrograma
    (15) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (16) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (17) nomMain -> . MAIN

    MAIN            shift and go to state 11

    nomMain                        shift and go to state 6
    main                           shift and go to state 30

state 19

    (3) program -> PROGRAM ID COLON varsGlobal main . endPrograma
    (5) endPrograma -> .

    $end            reduce using rule 5 (endPrograma -> .)

    endPrograma                    shift and go to state 31

state 20

    (4) program -> PROGRAM ID COLON main endPrograma .

    $end            reduce using rule 4 (program -> PROGRAM ID COLON main endPrograma .)


state 21

    (2) program -> PROGRAM ID COLON function main . endPrograma
    (5) endPrograma -> .

    $end            reduce using rule 5 (endPrograma -> .)

    endPrograma                    shift and go to state 32

state 22

    (7) varAuxGlobal1 -> tipo . varAuxGlobal2 SEMICOLON
    (8) varAuxGlobal1 -> tipo . varAuxGlobal2 SEMICOLON varAuxGlobal1
    (9) varAuxGlobal2 -> . ID
    (10) varAuxGlobal2 -> . ID COMA varAuxGlobal2
    (11) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH
    (12) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    ID              shift and go to state 34

    varAuxGlobal2                  shift and go to state 33

state 23

    (30) tipo -> INT .

    ID              reduce using rule 30 (tipo -> INT .)


state 24

    (31) tipo -> FLOAT .

    ID              reduce using rule 31 (tipo -> FLOAT .)


state 25

    (32) tipo -> CHAR .

    ID              reduce using rule 32 (tipo -> CHAR .)


state 26

    (6) varsGlobal -> VAR varAuxGlobal1 .

    FUNCTION        reduce using rule 6 (varsGlobal -> VAR varAuxGlobal1 .)
    MAIN            reduce using rule 6 (varsGlobal -> VAR varAuxGlobal1 .)


state 27

    (39) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function

    LPAREN          shift and go to state 35


state 28

    (61) nomFunc -> ID . push_function
    (60) push_function -> .

    LPAREN          reduce using rule 60 (push_function -> .)

    push_function                  shift and go to state 36

state 29

    (15) main -> nomMain LPAREN RPAREN . LBRACE bloqueAux RBRACE
    (16) main -> nomMain LPAREN RPAREN . LBRACE vars bloqueAux RBRACE

    LBRACE          shift and go to state 37


state 30

    (1) program -> PROGRAM ID COLON varsGlobal function main . endPrograma
    (5) endPrograma -> .

    $end            reduce using rule 5 (endPrograma -> .)

    endPrograma                    shift and go to state 38

state 31

    (3) program -> PROGRAM ID COLON varsGlobal main endPrograma .

    $end            reduce using rule 3 (program -> PROGRAM ID COLON varsGlobal main endPrograma .)


state 32

    (2) program -> PROGRAM ID COLON function main endPrograma .

    $end            reduce using rule 2 (program -> PROGRAM ID COLON function main endPrograma .)


state 33

    (7) varAuxGlobal1 -> tipo varAuxGlobal2 . SEMICOLON
    (8) varAuxGlobal1 -> tipo varAuxGlobal2 . SEMICOLON varAuxGlobal1

    SEMICOLON       shift and go to state 39


state 34

    (9) varAuxGlobal2 -> ID .
    (10) varAuxGlobal2 -> ID . COMA varAuxGlobal2
    (11) varAuxGlobal2 -> ID . LCORCH CTE_I RCORCH
    (12) varAuxGlobal2 -> ID . LCORCH CTE_I RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> ID . LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> ID . LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    SEMICOLON       reduce using rule 9 (varAuxGlobal2 -> ID .)
    COMA            shift and go to state 41
    LCORCH          shift and go to state 40


state 35

    (39) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (55) param -> . tipo ID paramAvarTable
    (56) param -> . tipo ID paramAvarTable COMA param
    (57) param -> . empty
    (30) tipo -> . INT
    (31) tipo -> . FLOAT
    (32) tipo -> . CHAR
    (59) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 42
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

  ! RPAREN          [ reduce using rule 59 (empty -> .) ]

    tipo                           shift and go to state 45
    param                          shift and go to state 43
    empty                          shift and go to state 44

state 36

    (61) nomFunc -> ID push_function .

    LPAREN          reduce using rule 61 (nomFunc -> ID push_function .)


state 37

    (15) main -> nomMain LPAREN RPAREN LBRACE . bloqueAux RBRACE
    (16) main -> nomMain LPAREN RPAREN LBRACE . vars bloqueAux RBRACE
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (18) vars -> . VAR varAux1
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (91) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (93) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (100) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (104) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (105) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (98) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (106) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    VAR             shift and go to state 53
    ID              shift and go to state 55
    IF              shift and go to state 50
    PRINT           shift and go to state 48
    WHILE           shift and go to state 60
    FROM            shift and go to state 58
    INPUT           shift and go to state 54

    vars                           shift and go to state 46
    arreglo                        shift and go to state 47
    estatuto                       shift and go to state 49
    lectura                        shift and go to state 51
    condicion                      shift and go to state 52
    loopFromDo                     shift and go to state 56
    llamadaAFuncion                shift and go to state 57
    asignacion                     shift and go to state 59
    bloqueAux                      shift and go to state 61
    while                          shift and go to state 62
    comparacion                    shift and go to state 63
    escritura                      shift and go to state 64

state 38

    (1) program -> PROGRAM ID COLON varsGlobal function main endPrograma .

    $end            reduce using rule 1 (program -> PROGRAM ID COLON varsGlobal function main endPrograma .)


state 39

    (7) varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON .
    (8) varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON . varAuxGlobal1
    (7) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON
    (8) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON varAuxGlobal1
    (30) tipo -> . INT
    (31) tipo -> . FLOAT
    (32) tipo -> . CHAR

    FUNCTION        reduce using rule 7 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON .)
    MAIN            reduce using rule 7 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON .)
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    varAuxGlobal1                  shift and go to state 65
    tipo                           shift and go to state 22

state 40

    (11) varAuxGlobal2 -> ID LCORCH . CTE_I RCORCH
    (12) varAuxGlobal2 -> ID LCORCH . CTE_I RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> ID LCORCH . CTE_I RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> ID LCORCH . CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    CTE_I           shift and go to state 66


state 41

    (10) varAuxGlobal2 -> ID COMA . varAuxGlobal2
    (9) varAuxGlobal2 -> . ID
    (10) varAuxGlobal2 -> . ID COMA varAuxGlobal2
    (11) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH
    (12) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    ID              shift and go to state 34

    varAuxGlobal2                  shift and go to state 67

state 42

    (39) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE functionReturn RBRACE endProc
    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE functionReturn RBRACE endProc function
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE bloqueAux functionReturn RBRACE endProc function

    LBRACE          shift and go to state 68


state 43

    (45) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function

    RPAREN          shift and go to state 69


state 44

    (57) param -> empty .

    RPAREN          reduce using rule 57 (param -> empty .)


state 45

    (55) param -> tipo . ID paramAvarTable
    (56) param -> tipo . ID paramAvarTable COMA param

    ID              shift and go to state 70


state 46

    (16) main -> nomMain LPAREN RPAREN LBRACE vars . bloqueAux RBRACE
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (91) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (93) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (100) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (104) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (105) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (98) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (106) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 55
    IF              shift and go to state 50
    PRINT           shift and go to state 48
    WHILE           shift and go to state 60
    FROM            shift and go to state 58
    INPUT           shift and go to state 54

    arreglo                        shift and go to state 47
    estatuto                       shift and go to state 49
    condicion                      shift and go to state 52
    lectura                        shift and go to state 51
    loopFromDo                     shift and go to state 56
    llamadaAFuncion                shift and go to state 57
    asignacion                     shift and go to state 59
    bloqueAux                      shift and go to state 71
    while                          shift and go to state 62
    comparacion                    shift and go to state 63
    escritura                      shift and go to state 64

state 47

    (92) asignacion -> arreglo . EQUAL push_poper expresion create_asign SEMICOLON

    EQUAL           shift and go to state 72


state 48

    (104) escritura -> PRINT . push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (105) escritura -> PRINT . push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (139) push_poper -> .

    LPAREN          reduce using rule 139 (push_poper -> .)

    push_poper                     shift and go to state 73

state 49

    (62) bloqueAux -> estatuto .
    (63) bloqueAux -> estatuto . bloqueAux
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (91) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (93) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (100) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (104) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (105) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (98) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (106) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    RETURN          reduce using rule 62 (bloqueAux -> estatuto .)
    RBRACE          reduce using rule 62 (bloqueAux -> estatuto .)
    ID              shift and go to state 55
    IF              shift and go to state 50
    PRINT           shift and go to state 48
    WHILE           shift and go to state 60
    FROM            shift and go to state 58
    INPUT           shift and go to state 54

    arreglo                        shift and go to state 47
    estatuto                       shift and go to state 49
    condicion                      shift and go to state 52
    lectura                        shift and go to state 51
    loopFromDo                     shift and go to state 56
    llamadaAFuncion                shift and go to state 57
    asignacion                     shift and go to state 59
    bloqueAux                      shift and go to state 74
    while                          shift and go to state 62
    comparacion                    shift and go to state 63
    escritura                      shift and go to state 64

state 50

    (99) condicion -> IF . LPAREN expresion RPAREN cond bloque condFinal
    (100) condicion -> IF . LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal

    LPAREN          shift and go to state 75


state 51

    (76) estatuto -> lectura .

    ID              reduce using rule 76 (estatuto -> lectura .)
    IF              reduce using rule 76 (estatuto -> lectura .)
    PRINT           reduce using rule 76 (estatuto -> lectura .)
    WHILE           reduce using rule 76 (estatuto -> lectura .)
    FROM            reduce using rule 76 (estatuto -> lectura .)
    INPUT           reduce using rule 76 (estatuto -> lectura .)
    RETURN          reduce using rule 76 (estatuto -> lectura .)
    RBRACE          reduce using rule 76 (estatuto -> lectura .)


state 52

    (70) estatuto -> condicion .

    ID              reduce using rule 70 (estatuto -> condicion .)
    IF              reduce using rule 70 (estatuto -> condicion .)
    PRINT           reduce using rule 70 (estatuto -> condicion .)
    WHILE           reduce using rule 70 (estatuto -> condicion .)
    FROM            reduce using rule 70 (estatuto -> condicion .)
    INPUT           reduce using rule 70 (estatuto -> condicion .)
    RETURN          reduce using rule 70 (estatuto -> condicion .)
    RBRACE          reduce using rule 70 (estatuto -> condicion .)


state 53

    (18) vars -> VAR . varAux1
    (19) varAux1 -> . tipo varAux2 SEMICOLON
    (20) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (30) tipo -> . INT
    (31) tipo -> . FLOAT
    (32) tipo -> . CHAR

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    varAux1                        shift and go to state 77
    tipo                           shift and go to state 76

state 54

    (106) lectura -> INPUT . push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (139) push_poper -> .

    LPAREN          reduce using rule 139 (push_poper -> .)

    push_poper                     shift and go to state 78

state 55

    (91) asignacion -> ID . push_id EQUAL push_poper expresion create_asign SEMICOLON
    (93) asignacion -> ID . push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (98) comparacion -> ID . push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (90) arreglo -> ID . push_id LCORCH exp RCORCH ver_dim1
    (137) push_id -> .
    (80) actualizaFuncion -> .

    EQUAL           reduce using rule 137 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 137 (push_id -> .)
    LCORCH          reduce using rule 137 (push_id -> .)
    LPAREN          reduce using rule 80 (actualizaFuncion -> .)

    actualizaFuncion               shift and go to state 79
    push_id                        shift and go to state 80

state 56

    (73) estatuto -> loopFromDo .

    ID              reduce using rule 73 (estatuto -> loopFromDo .)
    IF              reduce using rule 73 (estatuto -> loopFromDo .)
    PRINT           reduce using rule 73 (estatuto -> loopFromDo .)
    WHILE           reduce using rule 73 (estatuto -> loopFromDo .)
    FROM            reduce using rule 73 (estatuto -> loopFromDo .)
    INPUT           reduce using rule 73 (estatuto -> loopFromDo .)
    RETURN          reduce using rule 73 (estatuto -> loopFromDo .)
    RBRACE          reduce using rule 73 (estatuto -> loopFromDo .)


state 57

    (75) estatuto -> llamadaAFuncion .

    ID              reduce using rule 75 (estatuto -> llamadaAFuncion .)
    IF              reduce using rule 75 (estatuto -> llamadaAFuncion .)
    PRINT           reduce using rule 75 (estatuto -> llamadaAFuncion .)
    WHILE           reduce using rule 75 (estatuto -> llamadaAFuncion .)
    FROM            reduce using rule 75 (estatuto -> llamadaAFuncion .)
    INPUT           reduce using rule 75 (estatuto -> llamadaAFuncion .)
    RETURN          reduce using rule 75 (estatuto -> llamadaAFuncion .)
    RBRACE          reduce using rule 75 (estatuto -> llamadaAFuncion .)


state 58

    (68) loopFromDo -> FROM . LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    LPAREN          shift and go to state 81


state 59

    (69) estatuto -> asignacion .

    ID              reduce using rule 69 (estatuto -> asignacion .)
    IF              reduce using rule 69 (estatuto -> asignacion .)
    PRINT           reduce using rule 69 (estatuto -> asignacion .)
    WHILE           reduce using rule 69 (estatuto -> asignacion .)
    FROM            reduce using rule 69 (estatuto -> asignacion .)
    INPUT           reduce using rule 69 (estatuto -> asignacion .)
    RETURN          reduce using rule 69 (estatuto -> asignacion .)
    RBRACE          reduce using rule 69 (estatuto -> asignacion .)


state 60

    (64) while -> WHILE . while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (65) while1 -> .

    LPAREN          reduce using rule 65 (while1 -> .)

    while1                         shift and go to state 82

state 61

    (15) main -> nomMain LPAREN RPAREN LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 83


state 62

    (72) estatuto -> while .

    ID              reduce using rule 72 (estatuto -> while .)
    IF              reduce using rule 72 (estatuto -> while .)
    PRINT           reduce using rule 72 (estatuto -> while .)
    WHILE           reduce using rule 72 (estatuto -> while .)
    FROM            reduce using rule 72 (estatuto -> while .)
    INPUT           reduce using rule 72 (estatuto -> while .)
    RETURN          reduce using rule 72 (estatuto -> while .)
    RBRACE          reduce using rule 72 (estatuto -> while .)


state 63

    (74) estatuto -> comparacion .

    ID              reduce using rule 74 (estatuto -> comparacion .)
    IF              reduce using rule 74 (estatuto -> comparacion .)
    PRINT           reduce using rule 74 (estatuto -> comparacion .)
    WHILE           reduce using rule 74 (estatuto -> comparacion .)
    FROM            reduce using rule 74 (estatuto -> comparacion .)
    INPUT           reduce using rule 74 (estatuto -> comparacion .)
    RETURN          reduce using rule 74 (estatuto -> comparacion .)
    RBRACE          reduce using rule 74 (estatuto -> comparacion .)


state 64

    (71) estatuto -> escritura .

    ID              reduce using rule 71 (estatuto -> escritura .)
    IF              reduce using rule 71 (estatuto -> escritura .)
    PRINT           reduce using rule 71 (estatuto -> escritura .)
    WHILE           reduce using rule 71 (estatuto -> escritura .)
    FROM            reduce using rule 71 (estatuto -> escritura .)
    INPUT           reduce using rule 71 (estatuto -> escritura .)
    RETURN          reduce using rule 71 (estatuto -> escritura .)
    RBRACE          reduce using rule 71 (estatuto -> escritura .)


state 65

    (8) varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1 .

    FUNCTION        reduce using rule 8 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1 .)
    MAIN            reduce using rule 8 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1 .)


state 66

    (11) varAuxGlobal2 -> ID LCORCH CTE_I . RCORCH
    (12) varAuxGlobal2 -> ID LCORCH CTE_I . RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> ID LCORCH CTE_I . RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> ID LCORCH CTE_I . RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    RCORCH          shift and go to state 84


state 67

    (10) varAuxGlobal2 -> ID COMA varAuxGlobal2 .

    SEMICOLON       reduce using rule 10 (varAuxGlobal2 -> ID COMA varAuxGlobal2 .)


state 68

    (39) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . functionReturn RBRACE endProc
    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux functionReturn RBRACE endProc
    (41) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . functionReturn RBRACE endProc function
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . bloqueAux functionReturn RBRACE endProc
    (44) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . bloqueAux functionReturn RBRACE endProc function
    (51) functionReturn -> . RETURN exp creaCuadReturn SEMICOLON
    (52) functionReturn -> . empty
    (18) vars -> . VAR varAux1
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (59) empty -> .
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (91) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (93) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (100) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (104) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (105) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (98) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (106) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    RETURN          shift and go to state 85
    VAR             shift and go to state 53
    RBRACE          reduce using rule 59 (empty -> .)
    ID              shift and go to state 55
    IF              shift and go to state 50
    PRINT           shift and go to state 48
    WHILE           shift and go to state 60
    FROM            shift and go to state 58
    INPUT           shift and go to state 54

    arreglo                        shift and go to state 47
    vars                           shift and go to state 86
    estatuto                       shift and go to state 49
    condicion                      shift and go to state 52
    functionReturn                 shift and go to state 87
    lectura                        shift and go to state 51
    empty                          shift and go to state 88
    loopFromDo                     shift and go to state 56
    llamadaAFuncion                shift and go to state 57
    asignacion                     shift and go to state 59
    bloqueAux                      shift and go to state 89
    while                          shift and go to state 62
    comparacion                    shift and go to state 63
    escritura                      shift and go to state 64

state 69

    (45) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE functionReturn RBRACE endProc
    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE functionReturn RBRACE endProc function
    (50) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux functionReturn RBRACE endProc function

    LBRACE          shift and go to state 90


state 70

    (55) param -> tipo ID . paramAvarTable
    (56) param -> tipo ID . paramAvarTable COMA param
    (58) paramAvarTable -> .

    COMA            reduce using rule 58 (paramAvarTable -> .)
    RPAREN          reduce using rule 58 (paramAvarTable -> .)

    paramAvarTable                 shift and go to state 91

state 71

    (16) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux . RBRACE

    RBRACE          shift and go to state 92


state 72

    (92) asignacion -> arreglo EQUAL . push_poper expresion create_asign SEMICOLON
    (139) push_poper -> .

    LPAREN          reduce using rule 139 (push_poper -> .)
    PLUS            reduce using rule 139 (push_poper -> .)
    MINUS           reduce using rule 139 (push_poper -> .)
    ID              reduce using rule 139 (push_poper -> .)
    CTE_I           reduce using rule 139 (push_poper -> .)
    CTE_F           reduce using rule 139 (push_poper -> .)
    CTE_STRING      reduce using rule 139 (push_poper -> .)

    push_poper                     shift and go to state 93

state 73

    (104) escritura -> PRINT push_poper . LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (105) escritura -> PRINT push_poper . LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON

    LPAREN          shift and go to state 94


state 74

    (63) bloqueAux -> estatuto bloqueAux .

    RETURN          reduce using rule 63 (bloqueAux -> estatuto bloqueAux .)
    RBRACE          reduce using rule 63 (bloqueAux -> estatuto bloqueAux .)


state 75

    (99) condicion -> IF LPAREN . expresion RPAREN cond bloque condFinal
    (100) condicion -> IF LPAREN . expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (113) expresion -> . exp
    (114) expresion -> . exp comp exp quad_comp
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    ID              shift and go to state 105
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    expresion                      shift and go to state 106
    factor                         shift and go to state 100
    arreglo                        shift and go to state 96
    termino                        shift and go to state 97
    exp                            shift and go to state 107
    factorAux                      shift and go to state 108
    var_cte                        shift and go to state 95

state 76

    (19) varAux1 -> tipo . varAux2 SEMICOLON
    (20) varAux1 -> tipo . varAux2 SEMICOLON varAux1
    (21) varAux2 -> . ID push_var
    (22) varAux2 -> . ID push_var COMA varAux2
    (23) varAux2 -> . ID LCORCH CTE_I RCORCH push_arreglo
    (24) varAux2 -> . ID LCORCH CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    ID              shift and go to state 110

    varAux2                        shift and go to state 109

state 77

    (18) vars -> VAR varAux1 .

    ID              reduce using rule 18 (vars -> VAR varAux1 .)
    IF              reduce using rule 18 (vars -> VAR varAux1 .)
    PRINT           reduce using rule 18 (vars -> VAR varAux1 .)
    WHILE           reduce using rule 18 (vars -> VAR varAux1 .)
    FROM            reduce using rule 18 (vars -> VAR varAux1 .)
    INPUT           reduce using rule 18 (vars -> VAR varAux1 .)


state 78

    (106) lectura -> INPUT push_poper . LPAREN ID push_id RPAREN quad_print SEMICOLON

    LPAREN          shift and go to state 111


state 79

    (77) llamadaAFuncion -> ID actualizaFuncion . generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> ID actualizaFuncion . generarEra LPAREN paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> ID actualizaFuncion . generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (82) generarEra -> .

    LPAREN          reduce using rule 82 (generarEra -> .)

    generarEra                     shift and go to state 112

state 80

    (91) asignacion -> ID push_id . EQUAL push_poper expresion create_asign SEMICOLON
    (93) asignacion -> ID push_id . EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (98) comparacion -> ID push_id . DOUBLEEQUAL push_poper expresion SEMICOLON
    (90) arreglo -> ID push_id . LCORCH exp RCORCH ver_dim1

    EQUAL           shift and go to state 115
    DOUBLEEQUAL     shift and go to state 113
    LCORCH          shift and go to state 114


state 81

    (68) loopFromDo -> FROM LPAREN . ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    ID              shift and go to state 116


state 82

    (64) while -> WHILE while1 . LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3

    LPAREN          shift and go to state 117


state 83

    (15) main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE .

    $end            reduce using rule 15 (main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE .)


state 84

    (11) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH .
    (12) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH . COMA varAuxGlobal2
    (13) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH . LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH . LCORCH CTE_I RCORCH COMA varAuxGlobal2

    SEMICOLON       reduce using rule 11 (varAuxGlobal2 -> ID LCORCH CTE_I RCORCH .)
    COMA            shift and go to state 119
    LCORCH          shift and go to state 118


state 85

    (51) functionReturn -> RETURN . exp creaCuadReturn SEMICOLON
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    ID              shift and go to state 105
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    arreglo                        shift and go to state 96
    termino                        shift and go to state 97
    exp                            shift and go to state 120
    factor                         shift and go to state 100
    factorAux                      shift and go to state 108
    var_cte                        shift and go to state 95

state 86

    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux functionReturn RBRACE endProc
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux functionReturn RBRACE endProc function
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (91) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (93) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (100) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (104) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (105) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (98) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (106) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 55
    IF              shift and go to state 50
    PRINT           shift and go to state 48
    WHILE           shift and go to state 60
    FROM            shift and go to state 58
    INPUT           shift and go to state 54

    arreglo                        shift and go to state 47
    estatuto                       shift and go to state 49
    condicion                      shift and go to state 52
    lectura                        shift and go to state 51
    loopFromDo                     shift and go to state 56
    llamadaAFuncion                shift and go to state 57
    asignacion                     shift and go to state 59
    bloqueAux                      shift and go to state 121
    while                          shift and go to state 62
    comparacion                    shift and go to state 63
    escritura                      shift and go to state 64

state 87

    (39) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn . RBRACE endProc
    (41) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn . RBRACE endProc function

    RBRACE          shift and go to state 122


state 88

    (52) functionReturn -> empty .

    RBRACE          reduce using rule 52 (functionReturn -> empty .)


state 89

    (43) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux . functionReturn RBRACE endProc
    (44) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux . functionReturn RBRACE endProc function
    (51) functionReturn -> . RETURN exp creaCuadReturn SEMICOLON
    (52) functionReturn -> . empty
    (59) empty -> .

    RETURN          shift and go to state 85
    RBRACE          reduce using rule 59 (empty -> .)

    functionReturn                 shift and go to state 123
    empty                          shift and go to state 88

state 90

    (45) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . functionReturn RBRACE endProc
    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . bloqueAux functionReturn RBRACE endProc
    (47) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . bloqueAux functionReturn RBRACE endProc function
    (48) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux functionReturn RBRACE endProc
    (49) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . functionReturn RBRACE endProc function
    (50) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux functionReturn RBRACE endProc function
    (51) functionReturn -> . RETURN exp creaCuadReturn SEMICOLON
    (52) functionReturn -> . empty
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (18) vars -> . VAR varAux1
    (59) empty -> .
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (91) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (93) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (100) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (104) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (105) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (98) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (106) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    RETURN          shift and go to state 85
    VAR             shift and go to state 53
    RBRACE          reduce using rule 59 (empty -> .)
    ID              shift and go to state 55
    IF              shift and go to state 50
    PRINT           shift and go to state 48
    WHILE           shift and go to state 60
    FROM            shift and go to state 58
    INPUT           shift and go to state 54

    arreglo                        shift and go to state 47
    vars                           shift and go to state 124
    estatuto                       shift and go to state 49
    condicion                      shift and go to state 52
    functionReturn                 shift and go to state 125
    lectura                        shift and go to state 51
    empty                          shift and go to state 88
    loopFromDo                     shift and go to state 56
    llamadaAFuncion                shift and go to state 57
    asignacion                     shift and go to state 59
    bloqueAux                      shift and go to state 126
    while                          shift and go to state 62
    comparacion                    shift and go to state 63
    escritura                      shift and go to state 64

state 91

    (55) param -> tipo ID paramAvarTable .
    (56) param -> tipo ID paramAvarTable . COMA param

    RPAREN          reduce using rule 55 (param -> tipo ID paramAvarTable .)
    COMA            shift and go to state 127


state 92

    (16) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE .

    $end            reduce using rule 16 (main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE .)


state 93

    (92) asignacion -> arreglo EQUAL push_poper . expresion create_asign SEMICOLON
    (113) expresion -> . exp
    (114) expresion -> . exp comp exp quad_comp
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    ID              shift and go to state 105
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    expresion                      shift and go to state 128
    arreglo                        shift and go to state 96
    termino                        shift and go to state 97
    exp                            shift and go to state 107
    factorAux                      shift and go to state 108
    factor                         shift and go to state 100
    var_cte                        shift and go to state 95

state 94

    (104) escritura -> PRINT push_poper LPAREN . escrituraAux RPAREN quad_print SEMICOLON
    (105) escritura -> PRINT push_poper LPAREN . llamadaAFuncion RPAREN quad_print SEMICOLON
    (108) escrituraAux -> . expresion
    (109) escrituraAux -> . CTE_STRING push_cte
    (110) escrituraAux -> . expresion COMA escrituraAux
    (111) escrituraAux -> . CTE_STRING push_cte COMA escrituraAux
    (112) escrituraAux -> . llamadaAFuncion
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (113) expresion -> . exp
    (114) expresion -> . exp comp exp quad_comp
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    CTE_STRING      shift and go to state 129
    ID              shift and go to state 131
    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101

    arreglo                        shift and go to state 96
    termino                        shift and go to state 97
    factor                         shift and go to state 100
    expresion                      shift and go to state 130
    var_cte                        shift and go to state 95
    escrituraAux                   shift and go to state 132
    llamadaAFuncion                shift and go to state 133
    exp                            shift and go to state 107
    factorAux                      shift and go to state 108

state 95

    (136) factorAux -> var_cte .

    TIMES           reduce using rule 136 (factorAux -> var_cte .)
    DIVIDE          reduce using rule 136 (factorAux -> var_cte .)
    PLUS            reduce using rule 136 (factorAux -> var_cte .)
    MINUS           reduce using rule 136 (factorAux -> var_cte .)
    LOWERTHAN       reduce using rule 136 (factorAux -> var_cte .)
    MORETHAN        reduce using rule 136 (factorAux -> var_cte .)
    DIFFERENT       reduce using rule 136 (factorAux -> var_cte .)
    DOUBLEEQUAL     reduce using rule 136 (factorAux -> var_cte .)
    LOWEREQUAL      reduce using rule 136 (factorAux -> var_cte .)
    MOREEQUAL       reduce using rule 136 (factorAux -> var_cte .)
    SEMICOLON       reduce using rule 136 (factorAux -> var_cte .)
    RPAREN          reduce using rule 136 (factorAux -> var_cte .)
    COMA            reduce using rule 136 (factorAux -> var_cte .)
    RCORCH          reduce using rule 136 (factorAux -> var_cte .)
    ID              reduce using rule 136 (factorAux -> var_cte .)
    IF              reduce using rule 136 (factorAux -> var_cte .)
    PRINT           reduce using rule 136 (factorAux -> var_cte .)
    WHILE           reduce using rule 136 (factorAux -> var_cte .)
    FROM            reduce using rule 136 (factorAux -> var_cte .)
    INPUT           reduce using rule 136 (factorAux -> var_cte .)
    RBRACE          reduce using rule 136 (factorAux -> var_cte .)
    RETURN          reduce using rule 136 (factorAux -> var_cte .)


state 96

    (144) var_cte -> arreglo .

    TIMES           reduce using rule 144 (var_cte -> arreglo .)
    DIVIDE          reduce using rule 144 (var_cte -> arreglo .)
    PLUS            reduce using rule 144 (var_cte -> arreglo .)
    MINUS           reduce using rule 144 (var_cte -> arreglo .)
    LOWERTHAN       reduce using rule 144 (var_cte -> arreglo .)
    MORETHAN        reduce using rule 144 (var_cte -> arreglo .)
    DIFFERENT       reduce using rule 144 (var_cte -> arreglo .)
    DOUBLEEQUAL     reduce using rule 144 (var_cte -> arreglo .)
    LOWEREQUAL      reduce using rule 144 (var_cte -> arreglo .)
    MOREEQUAL       reduce using rule 144 (var_cte -> arreglo .)
    RPAREN          reduce using rule 144 (var_cte -> arreglo .)
    SEMICOLON       reduce using rule 144 (var_cte -> arreglo .)
    COMA            reduce using rule 144 (var_cte -> arreglo .)
    RCORCH          reduce using rule 144 (var_cte -> arreglo .)
    ID              reduce using rule 144 (var_cte -> arreglo .)
    IF              reduce using rule 144 (var_cte -> arreglo .)
    PRINT           reduce using rule 144 (var_cte -> arreglo .)
    WHILE           reduce using rule 144 (var_cte -> arreglo .)
    FROM            reduce using rule 144 (var_cte -> arreglo .)
    INPUT           reduce using rule 144 (var_cte -> arreglo .)
    RBRACE          reduce using rule 144 (var_cte -> arreglo .)
    RETURN          reduce using rule 144 (var_cte -> arreglo .)


state 97

    (122) exp -> termino . quad_term
    (123) exp -> termino . quad_term exp1
    (126) quad_term -> .

    PLUS            reduce using rule 126 (quad_term -> .)
    MINUS           reduce using rule 126 (quad_term -> .)
    LOWERTHAN       reduce using rule 126 (quad_term -> .)
    MORETHAN        reduce using rule 126 (quad_term -> .)
    DIFFERENT       reduce using rule 126 (quad_term -> .)
    DOUBLEEQUAL     reduce using rule 126 (quad_term -> .)
    LOWEREQUAL      reduce using rule 126 (quad_term -> .)
    MOREEQUAL       reduce using rule 126 (quad_term -> .)
    RPAREN          reduce using rule 126 (quad_term -> .)
    SEMICOLON       reduce using rule 126 (quad_term -> .)
    COMA            reduce using rule 126 (quad_term -> .)
    RCORCH          reduce using rule 126 (quad_term -> .)
    ID              reduce using rule 126 (quad_term -> .)
    IF              reduce using rule 126 (quad_term -> .)
    PRINT           reduce using rule 126 (quad_term -> .)
    WHILE           reduce using rule 126 (quad_term -> .)
    FROM            reduce using rule 126 (quad_term -> .)
    INPUT           reduce using rule 126 (quad_term -> .)
    RBRACE          reduce using rule 126 (quad_term -> .)
    RETURN          reduce using rule 126 (quad_term -> .)

    quad_term                      shift and go to state 134

state 98

    (135) factorAux -> MINUS . push_poper var_cte
    (139) push_poper -> .

    ID              reduce using rule 139 (push_poper -> .)
    CTE_I           reduce using rule 139 (push_poper -> .)
    CTE_F           reduce using rule 139 (push_poper -> .)
    CTE_STRING      reduce using rule 139 (push_poper -> .)

    push_poper                     shift and go to state 135

state 99

    (134) factorAux -> PLUS . push_poper var_cte
    (139) push_poper -> .

    ID              reduce using rule 139 (push_poper -> .)
    CTE_I           reduce using rule 139 (push_poper -> .)
    CTE_F           reduce using rule 139 (push_poper -> .)
    CTE_STRING      reduce using rule 139 (push_poper -> .)

    push_poper                     shift and go to state 136

state 100

    (128) termino -> factor . quad_fact
    (129) termino -> factor . quad_fact termino1
    (127) quad_fact -> .

    TIMES           reduce using rule 127 (quad_fact -> .)
    DIVIDE          reduce using rule 127 (quad_fact -> .)
    PLUS            reduce using rule 127 (quad_fact -> .)
    MINUS           reduce using rule 127 (quad_fact -> .)
    LOWERTHAN       reduce using rule 127 (quad_fact -> .)
    MORETHAN        reduce using rule 127 (quad_fact -> .)
    DIFFERENT       reduce using rule 127 (quad_fact -> .)
    DOUBLEEQUAL     reduce using rule 127 (quad_fact -> .)
    LOWEREQUAL      reduce using rule 127 (quad_fact -> .)
    MOREEQUAL       reduce using rule 127 (quad_fact -> .)
    RPAREN          reduce using rule 127 (quad_fact -> .)
    SEMICOLON       reduce using rule 127 (quad_fact -> .)
    COMA            reduce using rule 127 (quad_fact -> .)
    RCORCH          reduce using rule 127 (quad_fact -> .)
    ID              reduce using rule 127 (quad_fact -> .)
    IF              reduce using rule 127 (quad_fact -> .)
    PRINT           reduce using rule 127 (quad_fact -> .)
    WHILE           reduce using rule 127 (quad_fact -> .)
    FROM            reduce using rule 127 (quad_fact -> .)
    INPUT           reduce using rule 127 (quad_fact -> .)
    RBRACE          reduce using rule 127 (quad_fact -> .)
    RETURN          reduce using rule 127 (quad_fact -> .)

    quad_fact                      shift and go to state 137

state 101

    (142) var_cte -> CTE_F . push_cte
    (138) push_cte -> .

    TIMES           reduce using rule 138 (push_cte -> .)
    DIVIDE          reduce using rule 138 (push_cte -> .)
    PLUS            reduce using rule 138 (push_cte -> .)
    MINUS           reduce using rule 138 (push_cte -> .)
    LOWERTHAN       reduce using rule 138 (push_cte -> .)
    MORETHAN        reduce using rule 138 (push_cte -> .)
    DIFFERENT       reduce using rule 138 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 138 (push_cte -> .)
    LOWEREQUAL      reduce using rule 138 (push_cte -> .)
    MOREEQUAL       reduce using rule 138 (push_cte -> .)
    RPAREN          reduce using rule 138 (push_cte -> .)
    SEMICOLON       reduce using rule 138 (push_cte -> .)
    COMA            reduce using rule 138 (push_cte -> .)
    RCORCH          reduce using rule 138 (push_cte -> .)
    ID              reduce using rule 138 (push_cte -> .)
    IF              reduce using rule 138 (push_cte -> .)
    PRINT           reduce using rule 138 (push_cte -> .)
    WHILE           reduce using rule 138 (push_cte -> .)
    FROM            reduce using rule 138 (push_cte -> .)
    INPUT           reduce using rule 138 (push_cte -> .)
    RBRACE          reduce using rule 138 (push_cte -> .)
    RETURN          reduce using rule 138 (push_cte -> .)

    push_cte                       shift and go to state 138

state 102

    (143) var_cte -> CTE_STRING . push_cte
    (138) push_cte -> .

    TIMES           reduce using rule 138 (push_cte -> .)
    DIVIDE          reduce using rule 138 (push_cte -> .)
    PLUS            reduce using rule 138 (push_cte -> .)
    MINUS           reduce using rule 138 (push_cte -> .)
    LOWERTHAN       reduce using rule 138 (push_cte -> .)
    MORETHAN        reduce using rule 138 (push_cte -> .)
    DIFFERENT       reduce using rule 138 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 138 (push_cte -> .)
    LOWEREQUAL      reduce using rule 138 (push_cte -> .)
    MOREEQUAL       reduce using rule 138 (push_cte -> .)
    RPAREN          reduce using rule 138 (push_cte -> .)
    SEMICOLON       reduce using rule 138 (push_cte -> .)
    RCORCH          reduce using rule 138 (push_cte -> .)
    COMA            reduce using rule 138 (push_cte -> .)
    ID              reduce using rule 138 (push_cte -> .)
    IF              reduce using rule 138 (push_cte -> .)
    PRINT           reduce using rule 138 (push_cte -> .)
    WHILE           reduce using rule 138 (push_cte -> .)
    FROM            reduce using rule 138 (push_cte -> .)
    INPUT           reduce using rule 138 (push_cte -> .)
    RBRACE          reduce using rule 138 (push_cte -> .)
    RETURN          reduce using rule 138 (push_cte -> .)

    push_cte                       shift and go to state 139

state 103

    (141) var_cte -> CTE_I . push_cte
    (138) push_cte -> .

    TIMES           reduce using rule 138 (push_cte -> .)
    DIVIDE          reduce using rule 138 (push_cte -> .)
    PLUS            reduce using rule 138 (push_cte -> .)
    MINUS           reduce using rule 138 (push_cte -> .)
    LOWERTHAN       reduce using rule 138 (push_cte -> .)
    MORETHAN        reduce using rule 138 (push_cte -> .)
    DIFFERENT       reduce using rule 138 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 138 (push_cte -> .)
    LOWEREQUAL      reduce using rule 138 (push_cte -> .)
    MOREEQUAL       reduce using rule 138 (push_cte -> .)
    RPAREN          reduce using rule 138 (push_cte -> .)
    SEMICOLON       reduce using rule 138 (push_cte -> .)
    COMA            reduce using rule 138 (push_cte -> .)
    RCORCH          reduce using rule 138 (push_cte -> .)
    ID              reduce using rule 138 (push_cte -> .)
    IF              reduce using rule 138 (push_cte -> .)
    PRINT           reduce using rule 138 (push_cte -> .)
    WHILE           reduce using rule 138 (push_cte -> .)
    FROM            reduce using rule 138 (push_cte -> .)
    INPUT           reduce using rule 138 (push_cte -> .)
    RBRACE          reduce using rule 138 (push_cte -> .)
    RETURN          reduce using rule 138 (push_cte -> .)

    push_cte                       shift and go to state 140

state 104

    (132) factor -> LPAREN . expresion RPAREN
    (113) expresion -> . exp
    (114) expresion -> . exp comp exp quad_comp
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    ID              shift and go to state 105
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    expresion                      shift and go to state 141
    factor                         shift and go to state 100
    arreglo                        shift and go to state 96
    termino                        shift and go to state 97
    exp                            shift and go to state 107
    factorAux                      shift and go to state 108
    var_cte                        shift and go to state 95

state 105

    (140) var_cte -> ID . push_id
    (90) arreglo -> ID . push_id LCORCH exp RCORCH ver_dim1
    (137) push_id -> .

    LCORCH          reduce using rule 137 (push_id -> .)
    TIMES           reduce using rule 137 (push_id -> .)
    DIVIDE          reduce using rule 137 (push_id -> .)
    PLUS            reduce using rule 137 (push_id -> .)
    MINUS           reduce using rule 137 (push_id -> .)
    LOWERTHAN       reduce using rule 137 (push_id -> .)
    MORETHAN        reduce using rule 137 (push_id -> .)
    DIFFERENT       reduce using rule 137 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 137 (push_id -> .)
    LOWEREQUAL      reduce using rule 137 (push_id -> .)
    MOREEQUAL       reduce using rule 137 (push_id -> .)
    RPAREN          reduce using rule 137 (push_id -> .)
    SEMICOLON       reduce using rule 137 (push_id -> .)
    RCORCH          reduce using rule 137 (push_id -> .)
    COMA            reduce using rule 137 (push_id -> .)
    ID              reduce using rule 137 (push_id -> .)
    IF              reduce using rule 137 (push_id -> .)
    PRINT           reduce using rule 137 (push_id -> .)
    WHILE           reduce using rule 137 (push_id -> .)
    FROM            reduce using rule 137 (push_id -> .)
    INPUT           reduce using rule 137 (push_id -> .)
    RBRACE          reduce using rule 137 (push_id -> .)
    RETURN          reduce using rule 137 (push_id -> .)

    push_id                        shift and go to state 142

state 106

    (99) condicion -> IF LPAREN expresion . RPAREN cond bloque condFinal
    (100) condicion -> IF LPAREN expresion . RPAREN cond bloque ELSE condElse bloque condFinal

    RPAREN          shift and go to state 143


state 107

    (113) expresion -> exp .
    (114) expresion -> exp . comp exp quad_comp
    (115) comp -> . LOWERTHAN push_poper
    (116) comp -> . MORETHAN push_poper
    (117) comp -> . DIFFERENT push_poper
    (118) comp -> . DOUBLEEQUAL push_poper
    (119) comp -> . LOWEREQUAL push_poper
    (120) comp -> . MOREEQUAL push_poper

    RPAREN          reduce using rule 113 (expresion -> exp .)
    COMA            reduce using rule 113 (expresion -> exp .)
    SEMICOLON       reduce using rule 113 (expresion -> exp .)
    ID              reduce using rule 113 (expresion -> exp .)
    IF              reduce using rule 113 (expresion -> exp .)
    PRINT           reduce using rule 113 (expresion -> exp .)
    WHILE           reduce using rule 113 (expresion -> exp .)
    FROM            reduce using rule 113 (expresion -> exp .)
    INPUT           reduce using rule 113 (expresion -> exp .)
    RBRACE          reduce using rule 113 (expresion -> exp .)
    RETURN          reduce using rule 113 (expresion -> exp .)
    LOWERTHAN       shift and go to state 147
    MORETHAN        shift and go to state 150
    DIFFERENT       shift and go to state 145
    DOUBLEEQUAL     shift and go to state 146
    LOWEREQUAL      shift and go to state 149
    MOREEQUAL       shift and go to state 144

    comp                           shift and go to state 148

state 108

    (133) factor -> factorAux .

    TIMES           reduce using rule 133 (factor -> factorAux .)
    DIVIDE          reduce using rule 133 (factor -> factorAux .)
    PLUS            reduce using rule 133 (factor -> factorAux .)
    MINUS           reduce using rule 133 (factor -> factorAux .)
    LOWERTHAN       reduce using rule 133 (factor -> factorAux .)
    MORETHAN        reduce using rule 133 (factor -> factorAux .)
    DIFFERENT       reduce using rule 133 (factor -> factorAux .)
    DOUBLEEQUAL     reduce using rule 133 (factor -> factorAux .)
    LOWEREQUAL      reduce using rule 133 (factor -> factorAux .)
    MOREEQUAL       reduce using rule 133 (factor -> factorAux .)
    COMA            reduce using rule 133 (factor -> factorAux .)
    RPAREN          reduce using rule 133 (factor -> factorAux .)
    SEMICOLON       reduce using rule 133 (factor -> factorAux .)
    RCORCH          reduce using rule 133 (factor -> factorAux .)
    ID              reduce using rule 133 (factor -> factorAux .)
    IF              reduce using rule 133 (factor -> factorAux .)
    PRINT           reduce using rule 133 (factor -> factorAux .)
    WHILE           reduce using rule 133 (factor -> factorAux .)
    FROM            reduce using rule 133 (factor -> factorAux .)
    INPUT           reduce using rule 133 (factor -> factorAux .)
    RBRACE          reduce using rule 133 (factor -> factorAux .)
    RETURN          reduce using rule 133 (factor -> factorAux .)


state 109

    (19) varAux1 -> tipo varAux2 . SEMICOLON
    (20) varAux1 -> tipo varAux2 . SEMICOLON varAux1

    SEMICOLON       shift and go to state 151


state 110

    (21) varAux2 -> ID . push_var
    (22) varAux2 -> ID . push_var COMA varAux2
    (23) varAux2 -> ID . LCORCH CTE_I RCORCH push_arreglo
    (24) varAux2 -> ID . LCORCH CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> ID . LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> ID . LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2
    (27) push_var -> .

    LCORCH          shift and go to state 152
    COMA            reduce using rule 27 (push_var -> .)
    SEMICOLON       reduce using rule 27 (push_var -> .)

    push_var                       shift and go to state 153

state 111

    (106) lectura -> INPUT push_poper LPAREN . ID push_id RPAREN quad_print SEMICOLON

    ID              shift and go to state 154


state 112

    (77) llamadaAFuncion -> ID actualizaFuncion generarEra . LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> ID actualizaFuncion generarEra . LPAREN paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> ID actualizaFuncion generarEra . LPAREN paramFuncion gosub RPAREN SEMICOLON

    LPAREN          shift and go to state 155


state 113

    (98) comparacion -> ID push_id DOUBLEEQUAL . push_poper expresion SEMICOLON
    (139) push_poper -> .

    LPAREN          reduce using rule 139 (push_poper -> .)
    PLUS            reduce using rule 139 (push_poper -> .)
    MINUS           reduce using rule 139 (push_poper -> .)
    ID              reduce using rule 139 (push_poper -> .)
    CTE_I           reduce using rule 139 (push_poper -> .)
    CTE_F           reduce using rule 139 (push_poper -> .)
    CTE_STRING      reduce using rule 139 (push_poper -> .)

    push_poper                     shift and go to state 156

state 114

    (90) arreglo -> ID push_id LCORCH . exp RCORCH ver_dim1
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    ID              shift and go to state 105
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    arreglo                        shift and go to state 96
    factor                         shift and go to state 100
    termino                        shift and go to state 97
    exp                            shift and go to state 157
    factorAux                      shift and go to state 108
    var_cte                        shift and go to state 95

state 115

    (91) asignacion -> ID push_id EQUAL . push_poper expresion create_asign SEMICOLON
    (93) asignacion -> ID push_id EQUAL . push_poper llamadaAFuncion create_asign SEMICOLON
    (139) push_poper -> .

    ID              reduce using rule 139 (push_poper -> .)
    LPAREN          reduce using rule 139 (push_poper -> .)
    PLUS            reduce using rule 139 (push_poper -> .)
    MINUS           reduce using rule 139 (push_poper -> .)
    CTE_I           reduce using rule 139 (push_poper -> .)
    CTE_F           reduce using rule 139 (push_poper -> .)
    CTE_STRING      reduce using rule 139 (push_poper -> .)

    push_poper                     shift and go to state 158

state 116

    (68) loopFromDo -> FROM LPAREN ID . EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    EQUAL           shift and go to state 159


state 117

    (64) while -> WHILE while1 LPAREN . expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (113) expresion -> . exp
    (114) expresion -> . exp comp exp quad_comp
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    ID              shift and go to state 105
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    expresion                      shift and go to state 160
    arreglo                        shift and go to state 96
    factor                         shift and go to state 100
    var_cte                        shift and go to state 95
    termino                        shift and go to state 97
    exp                            shift and go to state 107
    factorAux                      shift and go to state 108

state 118

    (13) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH . CTE_I RCORCH
    (14) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH . CTE_I RCORCH COMA varAuxGlobal2

    CTE_I           shift and go to state 161


state 119

    (12) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH COMA . varAuxGlobal2
    (9) varAuxGlobal2 -> . ID
    (10) varAuxGlobal2 -> . ID COMA varAuxGlobal2
    (11) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH
    (12) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    ID              shift and go to state 34

    varAuxGlobal2                  shift and go to state 162

state 120

    (51) functionReturn -> RETURN exp . creaCuadReturn SEMICOLON
    (53) creaCuadReturn -> .

    SEMICOLON       reduce using rule 53 (creaCuadReturn -> .)

    creaCuadReturn                 shift and go to state 163

state 121

    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . functionReturn RBRACE endProc
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . functionReturn RBRACE endProc function
    (51) functionReturn -> . RETURN exp creaCuadReturn SEMICOLON
    (52) functionReturn -> . empty
    (59) empty -> .

    RETURN          shift and go to state 85
    RBRACE          reduce using rule 59 (empty -> .)

    functionReturn                 shift and go to state 164
    empty                          shift and go to state 88

state 122

    (39) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE . endProc
    (41) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE . endProc function
    (54) endProc -> .

    FUNCTION        reduce using rule 54 (endProc -> .)
    MAIN            reduce using rule 54 (endProc -> .)

    endProc                        shift and go to state 165

state 123

    (43) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn . RBRACE endProc
    (44) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn . RBRACE endProc function

    RBRACE          shift and go to state 166


state 124

    (48) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux functionReturn RBRACE endProc
    (50) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux functionReturn RBRACE endProc function
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (91) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (93) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (100) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (104) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (105) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (98) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (106) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 55
    IF              shift and go to state 50
    PRINT           shift and go to state 48
    WHILE           shift and go to state 60
    FROM            shift and go to state 58
    INPUT           shift and go to state 54

    arreglo                        shift and go to state 47
    estatuto                       shift and go to state 49
    condicion                      shift and go to state 52
    lectura                        shift and go to state 51
    loopFromDo                     shift and go to state 56
    llamadaAFuncion                shift and go to state 57
    asignacion                     shift and go to state 59
    bloqueAux                      shift and go to state 167
    while                          shift and go to state 62
    comparacion                    shift and go to state 63
    escritura                      shift and go to state 64

state 125

    (45) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn . RBRACE endProc
    (49) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn . RBRACE endProc function

    RBRACE          shift and go to state 168


state 126

    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux . functionReturn RBRACE endProc
    (47) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux . functionReturn RBRACE endProc function
    (51) functionReturn -> . RETURN exp creaCuadReturn SEMICOLON
    (52) functionReturn -> . empty
    (59) empty -> .

    RETURN          shift and go to state 85
    RBRACE          reduce using rule 59 (empty -> .)

    functionReturn                 shift and go to state 169
    empty                          shift and go to state 88

state 127

    (56) param -> tipo ID paramAvarTable COMA . param
    (55) param -> . tipo ID paramAvarTable
    (56) param -> . tipo ID paramAvarTable COMA param
    (57) param -> . empty
    (30) tipo -> . INT
    (31) tipo -> . FLOAT
    (32) tipo -> . CHAR
    (59) empty -> .

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25
    RPAREN          reduce using rule 59 (empty -> .)

    empty                          shift and go to state 44
    param                          shift and go to state 170
    tipo                           shift and go to state 45

state 128

    (92) asignacion -> arreglo EQUAL push_poper expresion . create_asign SEMICOLON
    (97) create_asign -> .

    SEMICOLON       reduce using rule 97 (create_asign -> .)

    create_asign                   shift and go to state 171

state 129

    (109) escrituraAux -> CTE_STRING . push_cte
    (111) escrituraAux -> CTE_STRING . push_cte COMA escrituraAux
    (143) var_cte -> CTE_STRING . push_cte
    (138) push_cte -> .

    COMA            reduce using rule 138 (push_cte -> .)
    RPAREN          reduce using rule 138 (push_cte -> .)
    TIMES           reduce using rule 138 (push_cte -> .)
    DIVIDE          reduce using rule 138 (push_cte -> .)
    PLUS            reduce using rule 138 (push_cte -> .)
    MINUS           reduce using rule 138 (push_cte -> .)
    LOWERTHAN       reduce using rule 138 (push_cte -> .)
    MORETHAN        reduce using rule 138 (push_cte -> .)
    DIFFERENT       reduce using rule 138 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 138 (push_cte -> .)
    LOWEREQUAL      reduce using rule 138 (push_cte -> .)
    MOREEQUAL       reduce using rule 138 (push_cte -> .)

    push_cte                       shift and go to state 172

state 130

    (108) escrituraAux -> expresion .
    (110) escrituraAux -> expresion . COMA escrituraAux

    RPAREN          reduce using rule 108 (escrituraAux -> expresion .)
    COMA            shift and go to state 173


state 131

    (77) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (140) var_cte -> ID . push_id
    (90) arreglo -> ID . push_id LCORCH exp RCORCH ver_dim1
    (80) actualizaFuncion -> .
    (137) push_id -> .

    LPAREN          reduce using rule 80 (actualizaFuncion -> .)
    LCORCH          reduce using rule 137 (push_id -> .)
    TIMES           reduce using rule 137 (push_id -> .)
    DIVIDE          reduce using rule 137 (push_id -> .)
    PLUS            reduce using rule 137 (push_id -> .)
    MINUS           reduce using rule 137 (push_id -> .)
    LOWERTHAN       reduce using rule 137 (push_id -> .)
    MORETHAN        reduce using rule 137 (push_id -> .)
    DIFFERENT       reduce using rule 137 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 137 (push_id -> .)
    LOWEREQUAL      reduce using rule 137 (push_id -> .)
    MOREEQUAL       reduce using rule 137 (push_id -> .)
    COMA            reduce using rule 137 (push_id -> .)
    RPAREN          reduce using rule 137 (push_id -> .)
    SEMICOLON       reduce using rule 137 (push_id -> .)

    actualizaFuncion               shift and go to state 79
    push_id                        shift and go to state 142

state 132

    (104) escritura -> PRINT push_poper LPAREN escrituraAux . RPAREN quad_print SEMICOLON

    RPAREN          shift and go to state 174


state 133

    (105) escritura -> PRINT push_poper LPAREN llamadaAFuncion . RPAREN quad_print SEMICOLON
    (112) escrituraAux -> llamadaAFuncion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 175

  ! RPAREN          [ reduce using rule 112 (escrituraAux -> llamadaAFuncion .) ]


state 134

    (122) exp -> termino quad_term .
    (123) exp -> termino quad_term . exp1
    (124) exp1 -> . PLUS push_poper exp
    (125) exp1 -> . MINUS push_poper exp

    LOWERTHAN       reduce using rule 122 (exp -> termino quad_term .)
    MORETHAN        reduce using rule 122 (exp -> termino quad_term .)
    DIFFERENT       reduce using rule 122 (exp -> termino quad_term .)
    DOUBLEEQUAL     reduce using rule 122 (exp -> termino quad_term .)
    LOWEREQUAL      reduce using rule 122 (exp -> termino quad_term .)
    MOREEQUAL       reduce using rule 122 (exp -> termino quad_term .)
    RPAREN          reduce using rule 122 (exp -> termino quad_term .)
    SEMICOLON       reduce using rule 122 (exp -> termino quad_term .)
    COMA            reduce using rule 122 (exp -> termino quad_term .)
    RCORCH          reduce using rule 122 (exp -> termino quad_term .)
    ID              reduce using rule 122 (exp -> termino quad_term .)
    IF              reduce using rule 122 (exp -> termino quad_term .)
    PRINT           reduce using rule 122 (exp -> termino quad_term .)
    WHILE           reduce using rule 122 (exp -> termino quad_term .)
    FROM            reduce using rule 122 (exp -> termino quad_term .)
    INPUT           reduce using rule 122 (exp -> termino quad_term .)
    RBRACE          reduce using rule 122 (exp -> termino quad_term .)
    RETURN          reduce using rule 122 (exp -> termino quad_term .)
    PLUS            shift and go to state 177
    MINUS           shift and go to state 178

    exp1                           shift and go to state 176

state 135

    (135) factorAux -> MINUS push_poper . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 105
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    var_cte                        shift and go to state 179
    arreglo                        shift and go to state 96

state 136

    (134) factorAux -> PLUS push_poper . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 105
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    var_cte                        shift and go to state 180
    arreglo                        shift and go to state 96

state 137

    (128) termino -> factor quad_fact .
    (129) termino -> factor quad_fact . termino1
    (130) termino1 -> . TIMES push_poper termino
    (131) termino1 -> . DIVIDE push_poper termino

    PLUS            reduce using rule 128 (termino -> factor quad_fact .)
    MINUS           reduce using rule 128 (termino -> factor quad_fact .)
    LOWERTHAN       reduce using rule 128 (termino -> factor quad_fact .)
    MORETHAN        reduce using rule 128 (termino -> factor quad_fact .)
    DIFFERENT       reduce using rule 128 (termino -> factor quad_fact .)
    DOUBLEEQUAL     reduce using rule 128 (termino -> factor quad_fact .)
    LOWEREQUAL      reduce using rule 128 (termino -> factor quad_fact .)
    MOREEQUAL       reduce using rule 128 (termino -> factor quad_fact .)
    RPAREN          reduce using rule 128 (termino -> factor quad_fact .)
    SEMICOLON       reduce using rule 128 (termino -> factor quad_fact .)
    COMA            reduce using rule 128 (termino -> factor quad_fact .)
    RCORCH          reduce using rule 128 (termino -> factor quad_fact .)
    ID              reduce using rule 128 (termino -> factor quad_fact .)
    IF              reduce using rule 128 (termino -> factor quad_fact .)
    PRINT           reduce using rule 128 (termino -> factor quad_fact .)
    WHILE           reduce using rule 128 (termino -> factor quad_fact .)
    FROM            reduce using rule 128 (termino -> factor quad_fact .)
    INPUT           reduce using rule 128 (termino -> factor quad_fact .)
    RBRACE          reduce using rule 128 (termino -> factor quad_fact .)
    RETURN          reduce using rule 128 (termino -> factor quad_fact .)
    TIMES           shift and go to state 183
    DIVIDE          shift and go to state 181

    termino1                       shift and go to state 182

state 138

    (142) var_cte -> CTE_F push_cte .

    TIMES           reduce using rule 142 (var_cte -> CTE_F push_cte .)
    DIVIDE          reduce using rule 142 (var_cte -> CTE_F push_cte .)
    PLUS            reduce using rule 142 (var_cte -> CTE_F push_cte .)
    MINUS           reduce using rule 142 (var_cte -> CTE_F push_cte .)
    LOWERTHAN       reduce using rule 142 (var_cte -> CTE_F push_cte .)
    MORETHAN        reduce using rule 142 (var_cte -> CTE_F push_cte .)
    DIFFERENT       reduce using rule 142 (var_cte -> CTE_F push_cte .)
    DOUBLEEQUAL     reduce using rule 142 (var_cte -> CTE_F push_cte .)
    LOWEREQUAL      reduce using rule 142 (var_cte -> CTE_F push_cte .)
    MOREEQUAL       reduce using rule 142 (var_cte -> CTE_F push_cte .)
    RPAREN          reduce using rule 142 (var_cte -> CTE_F push_cte .)
    SEMICOLON       reduce using rule 142 (var_cte -> CTE_F push_cte .)
    COMA            reduce using rule 142 (var_cte -> CTE_F push_cte .)
    RCORCH          reduce using rule 142 (var_cte -> CTE_F push_cte .)
    ID              reduce using rule 142 (var_cte -> CTE_F push_cte .)
    IF              reduce using rule 142 (var_cte -> CTE_F push_cte .)
    PRINT           reduce using rule 142 (var_cte -> CTE_F push_cte .)
    WHILE           reduce using rule 142 (var_cte -> CTE_F push_cte .)
    FROM            reduce using rule 142 (var_cte -> CTE_F push_cte .)
    INPUT           reduce using rule 142 (var_cte -> CTE_F push_cte .)
    RBRACE          reduce using rule 142 (var_cte -> CTE_F push_cte .)
    RETURN          reduce using rule 142 (var_cte -> CTE_F push_cte .)


state 139

    (143) var_cte -> CTE_STRING push_cte .

    TIMES           reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    DIVIDE          reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    PLUS            reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    MINUS           reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    LOWERTHAN       reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    MORETHAN        reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    DIFFERENT       reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    DOUBLEEQUAL     reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    LOWEREQUAL      reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    MOREEQUAL       reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    RPAREN          reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    SEMICOLON       reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    COMA            reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    RCORCH          reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    ID              reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    IF              reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    PRINT           reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    WHILE           reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    FROM            reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    INPUT           reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    RBRACE          reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    RETURN          reduce using rule 143 (var_cte -> CTE_STRING push_cte .)


state 140

    (141) var_cte -> CTE_I push_cte .

    TIMES           reduce using rule 141 (var_cte -> CTE_I push_cte .)
    DIVIDE          reduce using rule 141 (var_cte -> CTE_I push_cte .)
    PLUS            reduce using rule 141 (var_cte -> CTE_I push_cte .)
    MINUS           reduce using rule 141 (var_cte -> CTE_I push_cte .)
    LOWERTHAN       reduce using rule 141 (var_cte -> CTE_I push_cte .)
    MORETHAN        reduce using rule 141 (var_cte -> CTE_I push_cte .)
    DIFFERENT       reduce using rule 141 (var_cte -> CTE_I push_cte .)
    DOUBLEEQUAL     reduce using rule 141 (var_cte -> CTE_I push_cte .)
    LOWEREQUAL      reduce using rule 141 (var_cte -> CTE_I push_cte .)
    MOREEQUAL       reduce using rule 141 (var_cte -> CTE_I push_cte .)
    RPAREN          reduce using rule 141 (var_cte -> CTE_I push_cte .)
    SEMICOLON       reduce using rule 141 (var_cte -> CTE_I push_cte .)
    COMA            reduce using rule 141 (var_cte -> CTE_I push_cte .)
    RCORCH          reduce using rule 141 (var_cte -> CTE_I push_cte .)
    ID              reduce using rule 141 (var_cte -> CTE_I push_cte .)
    IF              reduce using rule 141 (var_cte -> CTE_I push_cte .)
    PRINT           reduce using rule 141 (var_cte -> CTE_I push_cte .)
    WHILE           reduce using rule 141 (var_cte -> CTE_I push_cte .)
    FROM            reduce using rule 141 (var_cte -> CTE_I push_cte .)
    INPUT           reduce using rule 141 (var_cte -> CTE_I push_cte .)
    RBRACE          reduce using rule 141 (var_cte -> CTE_I push_cte .)
    RETURN          reduce using rule 141 (var_cte -> CTE_I push_cte .)


state 141

    (132) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 184


state 142

    (140) var_cte -> ID push_id .
    (90) arreglo -> ID push_id . LCORCH exp RCORCH ver_dim1

    TIMES           reduce using rule 140 (var_cte -> ID push_id .)
    DIVIDE          reduce using rule 140 (var_cte -> ID push_id .)
    PLUS            reduce using rule 140 (var_cte -> ID push_id .)
    MINUS           reduce using rule 140 (var_cte -> ID push_id .)
    LOWERTHAN       reduce using rule 140 (var_cte -> ID push_id .)
    MORETHAN        reduce using rule 140 (var_cte -> ID push_id .)
    DIFFERENT       reduce using rule 140 (var_cte -> ID push_id .)
    DOUBLEEQUAL     reduce using rule 140 (var_cte -> ID push_id .)
    LOWEREQUAL      reduce using rule 140 (var_cte -> ID push_id .)
    MOREEQUAL       reduce using rule 140 (var_cte -> ID push_id .)
    RPAREN          reduce using rule 140 (var_cte -> ID push_id .)
    SEMICOLON       reduce using rule 140 (var_cte -> ID push_id .)
    COMA            reduce using rule 140 (var_cte -> ID push_id .)
    RCORCH          reduce using rule 140 (var_cte -> ID push_id .)
    ID              reduce using rule 140 (var_cte -> ID push_id .)
    IF              reduce using rule 140 (var_cte -> ID push_id .)
    PRINT           reduce using rule 140 (var_cte -> ID push_id .)
    WHILE           reduce using rule 140 (var_cte -> ID push_id .)
    FROM            reduce using rule 140 (var_cte -> ID push_id .)
    INPUT           reduce using rule 140 (var_cte -> ID push_id .)
    RBRACE          reduce using rule 140 (var_cte -> ID push_id .)
    RETURN          reduce using rule 140 (var_cte -> ID push_id .)
    LCORCH          shift and go to state 114


state 143

    (99) condicion -> IF LPAREN expresion RPAREN . cond bloque condFinal
    (100) condicion -> IF LPAREN expresion RPAREN . cond bloque ELSE condElse bloque condFinal
    (101) cond -> .

    LBRACE          reduce using rule 101 (cond -> .)

    cond                           shift and go to state 185

state 144

    (120) comp -> MOREEQUAL . push_poper
    (139) push_poper -> .

    LPAREN          reduce using rule 139 (push_poper -> .)
    PLUS            reduce using rule 139 (push_poper -> .)
    MINUS           reduce using rule 139 (push_poper -> .)
    ID              reduce using rule 139 (push_poper -> .)
    CTE_I           reduce using rule 139 (push_poper -> .)
    CTE_F           reduce using rule 139 (push_poper -> .)
    CTE_STRING      reduce using rule 139 (push_poper -> .)

    push_poper                     shift and go to state 186

state 145

    (117) comp -> DIFFERENT . push_poper
    (139) push_poper -> .

    LPAREN          reduce using rule 139 (push_poper -> .)
    PLUS            reduce using rule 139 (push_poper -> .)
    MINUS           reduce using rule 139 (push_poper -> .)
    ID              reduce using rule 139 (push_poper -> .)
    CTE_I           reduce using rule 139 (push_poper -> .)
    CTE_F           reduce using rule 139 (push_poper -> .)
    CTE_STRING      reduce using rule 139 (push_poper -> .)

    push_poper                     shift and go to state 187

state 146

    (118) comp -> DOUBLEEQUAL . push_poper
    (139) push_poper -> .

    LPAREN          reduce using rule 139 (push_poper -> .)
    PLUS            reduce using rule 139 (push_poper -> .)
    MINUS           reduce using rule 139 (push_poper -> .)
    ID              reduce using rule 139 (push_poper -> .)
    CTE_I           reduce using rule 139 (push_poper -> .)
    CTE_F           reduce using rule 139 (push_poper -> .)
    CTE_STRING      reduce using rule 139 (push_poper -> .)

    push_poper                     shift and go to state 188

state 147

    (115) comp -> LOWERTHAN . push_poper
    (139) push_poper -> .

    LPAREN          reduce using rule 139 (push_poper -> .)
    PLUS            reduce using rule 139 (push_poper -> .)
    MINUS           reduce using rule 139 (push_poper -> .)
    ID              reduce using rule 139 (push_poper -> .)
    CTE_I           reduce using rule 139 (push_poper -> .)
    CTE_F           reduce using rule 139 (push_poper -> .)
    CTE_STRING      reduce using rule 139 (push_poper -> .)

    push_poper                     shift and go to state 189

state 148

    (114) expresion -> exp comp . exp quad_comp
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    ID              shift and go to state 105
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    factor                         shift and go to state 100
    arreglo                        shift and go to state 96
    termino                        shift and go to state 97
    exp                            shift and go to state 190
    factorAux                      shift and go to state 108
    var_cte                        shift and go to state 95

state 149

    (119) comp -> LOWEREQUAL . push_poper
    (139) push_poper -> .

    LPAREN          reduce using rule 139 (push_poper -> .)
    PLUS            reduce using rule 139 (push_poper -> .)
    MINUS           reduce using rule 139 (push_poper -> .)
    ID              reduce using rule 139 (push_poper -> .)
    CTE_I           reduce using rule 139 (push_poper -> .)
    CTE_F           reduce using rule 139 (push_poper -> .)
    CTE_STRING      reduce using rule 139 (push_poper -> .)

    push_poper                     shift and go to state 191

state 150

    (116) comp -> MORETHAN . push_poper
    (139) push_poper -> .

    LPAREN          reduce using rule 139 (push_poper -> .)
    PLUS            reduce using rule 139 (push_poper -> .)
    MINUS           reduce using rule 139 (push_poper -> .)
    ID              reduce using rule 139 (push_poper -> .)
    CTE_I           reduce using rule 139 (push_poper -> .)
    CTE_F           reduce using rule 139 (push_poper -> .)
    CTE_STRING      reduce using rule 139 (push_poper -> .)

    push_poper                     shift and go to state 192

state 151

    (19) varAux1 -> tipo varAux2 SEMICOLON .
    (20) varAux1 -> tipo varAux2 SEMICOLON . varAux1
    (19) varAux1 -> . tipo varAux2 SEMICOLON
    (20) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (30) tipo -> . INT
    (31) tipo -> . FLOAT
    (32) tipo -> . CHAR

    ID              reduce using rule 19 (varAux1 -> tipo varAux2 SEMICOLON .)
    IF              reduce using rule 19 (varAux1 -> tipo varAux2 SEMICOLON .)
    PRINT           reduce using rule 19 (varAux1 -> tipo varAux2 SEMICOLON .)
    WHILE           reduce using rule 19 (varAux1 -> tipo varAux2 SEMICOLON .)
    FROM            reduce using rule 19 (varAux1 -> tipo varAux2 SEMICOLON .)
    INPUT           reduce using rule 19 (varAux1 -> tipo varAux2 SEMICOLON .)
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    varAux1                        shift and go to state 193
    tipo                           shift and go to state 76

state 152

    (23) varAux2 -> ID LCORCH . CTE_I RCORCH push_arreglo
    (24) varAux2 -> ID LCORCH . CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> ID LCORCH . CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> ID LCORCH . CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    CTE_I           shift and go to state 194


state 153

    (21) varAux2 -> ID push_var .
    (22) varAux2 -> ID push_var . COMA varAux2

    SEMICOLON       reduce using rule 21 (varAux2 -> ID push_var .)
    COMA            shift and go to state 195


state 154

    (106) lectura -> INPUT push_poper LPAREN ID . push_id RPAREN quad_print SEMICOLON
    (137) push_id -> .

    RPAREN          reduce using rule 137 (push_id -> .)

    push_id                        shift and go to state 196

state 155

    (77) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN . paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN . paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN . paramFuncion gosub RPAREN SEMICOLON
    (83) paramFuncion -> . ID push_id2 paramFuncionAux
    (84) paramFuncion -> . ID push_id2 paramFuncionAux COMA paramFuncion
    (85) paramFuncion -> . exp paramFuncionAux
    (86) paramFuncion -> . exp paramFuncionAux COMA paramFuncion
    (87) paramFuncion -> . empty
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (59) empty -> .
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 199
    RPAREN          reduce using rule 59 (empty -> .)
    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    paramFuncion                   shift and go to state 197
    arreglo                        shift and go to state 96
    termino                        shift and go to state 97
    factor                         shift and go to state 100
    empty                          shift and go to state 198
    exp                            shift and go to state 200
    factorAux                      shift and go to state 108
    var_cte                        shift and go to state 95

state 156

    (98) comparacion -> ID push_id DOUBLEEQUAL push_poper . expresion SEMICOLON
    (113) expresion -> . exp
    (114) expresion -> . exp comp exp quad_comp
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    ID              shift and go to state 105
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    expresion                      shift and go to state 201
    factor                         shift and go to state 100
    var_cte                        shift and go to state 95
    arreglo                        shift and go to state 96
    termino                        shift and go to state 97
    exp                            shift and go to state 107
    factorAux                      shift and go to state 108

state 157

    (90) arreglo -> ID push_id LCORCH exp . RCORCH ver_dim1

    RCORCH          shift and go to state 202


state 158

    (91) asignacion -> ID push_id EQUAL push_poper . expresion create_asign SEMICOLON
    (93) asignacion -> ID push_id EQUAL push_poper . llamadaAFuncion create_asign SEMICOLON
    (113) expresion -> . exp
    (114) expresion -> . exp comp exp quad_comp
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 131
    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    arreglo                        shift and go to state 96
    termino                        shift and go to state 97
    factor                         shift and go to state 100
    expresion                      shift and go to state 203
    llamadaAFuncion                shift and go to state 204
    exp                            shift and go to state 107
    factorAux                      shift and go to state 108
    var_cte                        shift and go to state 95

state 159

    (68) loopFromDo -> FROM LPAREN ID EQUAL . expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (113) expresion -> . exp
    (114) expresion -> . exp comp exp quad_comp
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    ID              shift and go to state 105
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    expresion                      shift and go to state 205
    factor                         shift and go to state 100
    var_cte                        shift and go to state 95
    arreglo                        shift and go to state 96
    termino                        shift and go to state 97
    exp                            shift and go to state 107
    factorAux                      shift and go to state 108

state 160

    (64) while -> WHILE while1 LPAREN expresion . RPAREN while2 LBRACE bloqueAux RBRACE while3

    RPAREN          shift and go to state 206


state 161

    (13) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I . RCORCH
    (14) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I . RCORCH COMA varAuxGlobal2

    RCORCH          shift and go to state 207


state 162

    (12) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH COMA varAuxGlobal2 .

    SEMICOLON       reduce using rule 12 (varAuxGlobal2 -> ID LCORCH CTE_I RCORCH COMA varAuxGlobal2 .)


state 163

    (51) functionReturn -> RETURN exp creaCuadReturn . SEMICOLON

    SEMICOLON       shift and go to state 208


state 164

    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn . RBRACE endProc
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn . RBRACE endProc function

    RBRACE          shift and go to state 209


state 165

    (39) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc .
    (41) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc . function
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function

    MAIN            reduce using rule 39 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 210

state 166

    (43) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE . endProc
    (44) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE . endProc function
    (54) endProc -> .

    FUNCTION        reduce using rule 54 (endProc -> .)
    MAIN            reduce using rule 54 (endProc -> .)

    endProc                        shift and go to state 211

state 167

    (48) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . functionReturn RBRACE endProc
    (50) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . functionReturn RBRACE endProc function
    (51) functionReturn -> . RETURN exp creaCuadReturn SEMICOLON
    (52) functionReturn -> . empty
    (59) empty -> .

    RETURN          shift and go to state 85
    RBRACE          reduce using rule 59 (empty -> .)

    functionReturn                 shift and go to state 212
    empty                          shift and go to state 88

state 168

    (45) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE . endProc
    (49) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE . endProc function
    (54) endProc -> .

    FUNCTION        reduce using rule 54 (endProc -> .)
    MAIN            reduce using rule 54 (endProc -> .)

    endProc                        shift and go to state 213

state 169

    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn . RBRACE endProc
    (47) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn . RBRACE endProc function

    RBRACE          shift and go to state 214


state 170

    (56) param -> tipo ID paramAvarTable COMA param .

    RPAREN          reduce using rule 56 (param -> tipo ID paramAvarTable COMA param .)


state 171

    (92) asignacion -> arreglo EQUAL push_poper expresion create_asign . SEMICOLON

    SEMICOLON       shift and go to state 215


state 172

    (109) escrituraAux -> CTE_STRING push_cte .
    (111) escrituraAux -> CTE_STRING push_cte . COMA escrituraAux
    (143) var_cte -> CTE_STRING push_cte .

  ! shift/reduce conflict for COMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 109 (escrituraAux -> CTE_STRING push_cte .)
    RPAREN          reduce using rule 109 (escrituraAux -> CTE_STRING push_cte .)
    COMA            shift and go to state 216
    TIMES           reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    DIVIDE          reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    PLUS            reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    MINUS           reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    LOWERTHAN       reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    MORETHAN        reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    DIFFERENT       reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    DOUBLEEQUAL     reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    LOWEREQUAL      reduce using rule 143 (var_cte -> CTE_STRING push_cte .)
    MOREEQUAL       reduce using rule 143 (var_cte -> CTE_STRING push_cte .)

  ! COMA            [ reduce using rule 143 (var_cte -> CTE_STRING push_cte .) ]
  ! RPAREN          [ reduce using rule 143 (var_cte -> CTE_STRING push_cte .) ]


state 173

    (110) escrituraAux -> expresion COMA . escrituraAux
    (108) escrituraAux -> . expresion
    (109) escrituraAux -> . CTE_STRING push_cte
    (110) escrituraAux -> . expresion COMA escrituraAux
    (111) escrituraAux -> . CTE_STRING push_cte COMA escrituraAux
    (112) escrituraAux -> . llamadaAFuncion
    (113) expresion -> . exp
    (114) expresion -> . exp comp exp quad_comp
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    CTE_STRING      shift and go to state 129
    ID              shift and go to state 131
    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101

    var_cte                        shift and go to state 95
    arreglo                        shift and go to state 96
    termino                        shift and go to state 97
    factor                         shift and go to state 100
    escrituraAux                   shift and go to state 217
    expresion                      shift and go to state 130
    llamadaAFuncion                shift and go to state 218
    exp                            shift and go to state 107
    factorAux                      shift and go to state 108

state 174

    (104) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN . quad_print SEMICOLON
    (107) quad_print -> .

    SEMICOLON       reduce using rule 107 (quad_print -> .)

    quad_print                     shift and go to state 219

state 175

    (105) escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN . quad_print SEMICOLON
    (107) quad_print -> .

    SEMICOLON       reduce using rule 107 (quad_print -> .)

    quad_print                     shift and go to state 220

state 176

    (123) exp -> termino quad_term exp1 .

    LOWERTHAN       reduce using rule 123 (exp -> termino quad_term exp1 .)
    MORETHAN        reduce using rule 123 (exp -> termino quad_term exp1 .)
    DIFFERENT       reduce using rule 123 (exp -> termino quad_term exp1 .)
    DOUBLEEQUAL     reduce using rule 123 (exp -> termino quad_term exp1 .)
    LOWEREQUAL      reduce using rule 123 (exp -> termino quad_term exp1 .)
    MOREEQUAL       reduce using rule 123 (exp -> termino quad_term exp1 .)
    RPAREN          reduce using rule 123 (exp -> termino quad_term exp1 .)
    SEMICOLON       reduce using rule 123 (exp -> termino quad_term exp1 .)
    COMA            reduce using rule 123 (exp -> termino quad_term exp1 .)
    RCORCH          reduce using rule 123 (exp -> termino quad_term exp1 .)
    ID              reduce using rule 123 (exp -> termino quad_term exp1 .)
    IF              reduce using rule 123 (exp -> termino quad_term exp1 .)
    PRINT           reduce using rule 123 (exp -> termino quad_term exp1 .)
    WHILE           reduce using rule 123 (exp -> termino quad_term exp1 .)
    FROM            reduce using rule 123 (exp -> termino quad_term exp1 .)
    INPUT           reduce using rule 123 (exp -> termino quad_term exp1 .)
    RBRACE          reduce using rule 123 (exp -> termino quad_term exp1 .)
    RETURN          reduce using rule 123 (exp -> termino quad_term exp1 .)


state 177

    (124) exp1 -> PLUS . push_poper exp
    (139) push_poper -> .

    LPAREN          reduce using rule 139 (push_poper -> .)
    PLUS            reduce using rule 139 (push_poper -> .)
    MINUS           reduce using rule 139 (push_poper -> .)
    ID              reduce using rule 139 (push_poper -> .)
    CTE_I           reduce using rule 139 (push_poper -> .)
    CTE_F           reduce using rule 139 (push_poper -> .)
    CTE_STRING      reduce using rule 139 (push_poper -> .)

    push_poper                     shift and go to state 221

state 178

    (125) exp1 -> MINUS . push_poper exp
    (139) push_poper -> .

    LPAREN          reduce using rule 139 (push_poper -> .)
    PLUS            reduce using rule 139 (push_poper -> .)
    MINUS           reduce using rule 139 (push_poper -> .)
    ID              reduce using rule 139 (push_poper -> .)
    CTE_I           reduce using rule 139 (push_poper -> .)
    CTE_F           reduce using rule 139 (push_poper -> .)
    CTE_STRING      reduce using rule 139 (push_poper -> .)

    push_poper                     shift and go to state 222

state 179

    (135) factorAux -> MINUS push_poper var_cte .

    TIMES           reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    DIVIDE          reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    PLUS            reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    MINUS           reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    MORETHAN        reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    DIFFERENT       reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    DOUBLEEQUAL     reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    LOWEREQUAL      reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    MOREEQUAL       reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    SEMICOLON       reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    RPAREN          reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    COMA            reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    RCORCH          reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    ID              reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    IF              reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    PRINT           reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    WHILE           reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    FROM            reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    INPUT           reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    RBRACE          reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)
    RETURN          reduce using rule 135 (factorAux -> MINUS push_poper var_cte .)


state 180

    (134) factorAux -> PLUS push_poper var_cte .

    TIMES           reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    DIVIDE          reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    PLUS            reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    MINUS           reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    MORETHAN        reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    DIFFERENT       reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    DOUBLEEQUAL     reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    LOWEREQUAL      reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    MOREEQUAL       reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    SEMICOLON       reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    RPAREN          reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    COMA            reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    RCORCH          reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    ID              reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    IF              reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    PRINT           reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    WHILE           reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    FROM            reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    INPUT           reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    RBRACE          reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)
    RETURN          reduce using rule 134 (factorAux -> PLUS push_poper var_cte .)


state 181

    (131) termino1 -> DIVIDE . push_poper termino
    (139) push_poper -> .

    LPAREN          reduce using rule 139 (push_poper -> .)
    PLUS            reduce using rule 139 (push_poper -> .)
    MINUS           reduce using rule 139 (push_poper -> .)
    ID              reduce using rule 139 (push_poper -> .)
    CTE_I           reduce using rule 139 (push_poper -> .)
    CTE_F           reduce using rule 139 (push_poper -> .)
    CTE_STRING      reduce using rule 139 (push_poper -> .)

    push_poper                     shift and go to state 223

state 182

    (129) termino -> factor quad_fact termino1 .

    PLUS            reduce using rule 129 (termino -> factor quad_fact termino1 .)
    MINUS           reduce using rule 129 (termino -> factor quad_fact termino1 .)
    LOWERTHAN       reduce using rule 129 (termino -> factor quad_fact termino1 .)
    MORETHAN        reduce using rule 129 (termino -> factor quad_fact termino1 .)
    DIFFERENT       reduce using rule 129 (termino -> factor quad_fact termino1 .)
    DOUBLEEQUAL     reduce using rule 129 (termino -> factor quad_fact termino1 .)
    LOWEREQUAL      reduce using rule 129 (termino -> factor quad_fact termino1 .)
    MOREEQUAL       reduce using rule 129 (termino -> factor quad_fact termino1 .)
    RPAREN          reduce using rule 129 (termino -> factor quad_fact termino1 .)
    SEMICOLON       reduce using rule 129 (termino -> factor quad_fact termino1 .)
    COMA            reduce using rule 129 (termino -> factor quad_fact termino1 .)
    RCORCH          reduce using rule 129 (termino -> factor quad_fact termino1 .)
    ID              reduce using rule 129 (termino -> factor quad_fact termino1 .)
    IF              reduce using rule 129 (termino -> factor quad_fact termino1 .)
    PRINT           reduce using rule 129 (termino -> factor quad_fact termino1 .)
    WHILE           reduce using rule 129 (termino -> factor quad_fact termino1 .)
    FROM            reduce using rule 129 (termino -> factor quad_fact termino1 .)
    INPUT           reduce using rule 129 (termino -> factor quad_fact termino1 .)
    RBRACE          reduce using rule 129 (termino -> factor quad_fact termino1 .)
    RETURN          reduce using rule 129 (termino -> factor quad_fact termino1 .)


state 183

    (130) termino1 -> TIMES . push_poper termino
    (139) push_poper -> .

    LPAREN          reduce using rule 139 (push_poper -> .)
    PLUS            reduce using rule 139 (push_poper -> .)
    MINUS           reduce using rule 139 (push_poper -> .)
    ID              reduce using rule 139 (push_poper -> .)
    CTE_I           reduce using rule 139 (push_poper -> .)
    CTE_F           reduce using rule 139 (push_poper -> .)
    CTE_STRING      reduce using rule 139 (push_poper -> .)

    push_poper                     shift and go to state 224

state 184

    (132) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    LOWERTHAN       reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    MORETHAN        reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    DIFFERENT       reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    DOUBLEEQUAL     reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    LOWEREQUAL      reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    MOREEQUAL       reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    COMA            reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    RCORCH          reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    ID              reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    IF              reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    PRINT           reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    WHILE           reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    FROM            reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    INPUT           reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    RBRACE          reduce using rule 132 (factor -> LPAREN expresion RPAREN .)
    RETURN          reduce using rule 132 (factor -> LPAREN expresion RPAREN .)


state 185

    (99) condicion -> IF LPAREN expresion RPAREN cond . bloque condFinal
    (100) condicion -> IF LPAREN expresion RPAREN cond . bloque ELSE condElse bloque condFinal
    (37) bloque -> . LBRACE RBRACE
    (38) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 225

    bloque                         shift and go to state 226

state 186

    (120) comp -> MOREEQUAL push_poper .

    LPAREN          reduce using rule 120 (comp -> MOREEQUAL push_poper .)
    PLUS            reduce using rule 120 (comp -> MOREEQUAL push_poper .)
    MINUS           reduce using rule 120 (comp -> MOREEQUAL push_poper .)
    ID              reduce using rule 120 (comp -> MOREEQUAL push_poper .)
    CTE_I           reduce using rule 120 (comp -> MOREEQUAL push_poper .)
    CTE_F           reduce using rule 120 (comp -> MOREEQUAL push_poper .)
    CTE_STRING      reduce using rule 120 (comp -> MOREEQUAL push_poper .)


state 187

    (117) comp -> DIFFERENT push_poper .

    LPAREN          reduce using rule 117 (comp -> DIFFERENT push_poper .)
    PLUS            reduce using rule 117 (comp -> DIFFERENT push_poper .)
    MINUS           reduce using rule 117 (comp -> DIFFERENT push_poper .)
    ID              reduce using rule 117 (comp -> DIFFERENT push_poper .)
    CTE_I           reduce using rule 117 (comp -> DIFFERENT push_poper .)
    CTE_F           reduce using rule 117 (comp -> DIFFERENT push_poper .)
    CTE_STRING      reduce using rule 117 (comp -> DIFFERENT push_poper .)


state 188

    (118) comp -> DOUBLEEQUAL push_poper .

    LPAREN          reduce using rule 118 (comp -> DOUBLEEQUAL push_poper .)
    PLUS            reduce using rule 118 (comp -> DOUBLEEQUAL push_poper .)
    MINUS           reduce using rule 118 (comp -> DOUBLEEQUAL push_poper .)
    ID              reduce using rule 118 (comp -> DOUBLEEQUAL push_poper .)
    CTE_I           reduce using rule 118 (comp -> DOUBLEEQUAL push_poper .)
    CTE_F           reduce using rule 118 (comp -> DOUBLEEQUAL push_poper .)
    CTE_STRING      reduce using rule 118 (comp -> DOUBLEEQUAL push_poper .)


state 189

    (115) comp -> LOWERTHAN push_poper .

    LPAREN          reduce using rule 115 (comp -> LOWERTHAN push_poper .)
    PLUS            reduce using rule 115 (comp -> LOWERTHAN push_poper .)
    MINUS           reduce using rule 115 (comp -> LOWERTHAN push_poper .)
    ID              reduce using rule 115 (comp -> LOWERTHAN push_poper .)
    CTE_I           reduce using rule 115 (comp -> LOWERTHAN push_poper .)
    CTE_F           reduce using rule 115 (comp -> LOWERTHAN push_poper .)
    CTE_STRING      reduce using rule 115 (comp -> LOWERTHAN push_poper .)


state 190

    (114) expresion -> exp comp exp . quad_comp
    (121) quad_comp -> .

    RPAREN          reduce using rule 121 (quad_comp -> .)
    SEMICOLON       reduce using rule 121 (quad_comp -> .)
    COMA            reduce using rule 121 (quad_comp -> .)
    ID              reduce using rule 121 (quad_comp -> .)
    IF              reduce using rule 121 (quad_comp -> .)
    PRINT           reduce using rule 121 (quad_comp -> .)
    WHILE           reduce using rule 121 (quad_comp -> .)
    FROM            reduce using rule 121 (quad_comp -> .)
    INPUT           reduce using rule 121 (quad_comp -> .)
    RBRACE          reduce using rule 121 (quad_comp -> .)
    RETURN          reduce using rule 121 (quad_comp -> .)

    quad_comp                      shift and go to state 227

state 191

    (119) comp -> LOWEREQUAL push_poper .

    LPAREN          reduce using rule 119 (comp -> LOWEREQUAL push_poper .)
    PLUS            reduce using rule 119 (comp -> LOWEREQUAL push_poper .)
    MINUS           reduce using rule 119 (comp -> LOWEREQUAL push_poper .)
    ID              reduce using rule 119 (comp -> LOWEREQUAL push_poper .)
    CTE_I           reduce using rule 119 (comp -> LOWEREQUAL push_poper .)
    CTE_F           reduce using rule 119 (comp -> LOWEREQUAL push_poper .)
    CTE_STRING      reduce using rule 119 (comp -> LOWEREQUAL push_poper .)


state 192

    (116) comp -> MORETHAN push_poper .

    LPAREN          reduce using rule 116 (comp -> MORETHAN push_poper .)
    PLUS            reduce using rule 116 (comp -> MORETHAN push_poper .)
    MINUS           reduce using rule 116 (comp -> MORETHAN push_poper .)
    ID              reduce using rule 116 (comp -> MORETHAN push_poper .)
    CTE_I           reduce using rule 116 (comp -> MORETHAN push_poper .)
    CTE_F           reduce using rule 116 (comp -> MORETHAN push_poper .)
    CTE_STRING      reduce using rule 116 (comp -> MORETHAN push_poper .)


state 193

    (20) varAux1 -> tipo varAux2 SEMICOLON varAux1 .

    ID              reduce using rule 20 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    IF              reduce using rule 20 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    PRINT           reduce using rule 20 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    WHILE           reduce using rule 20 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    FROM            reduce using rule 20 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    INPUT           reduce using rule 20 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)


state 194

    (23) varAux2 -> ID LCORCH CTE_I . RCORCH push_arreglo
    (24) varAux2 -> ID LCORCH CTE_I . RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> ID LCORCH CTE_I . RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> ID LCORCH CTE_I . RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    RCORCH          shift and go to state 228


state 195

    (22) varAux2 -> ID push_var COMA . varAux2
    (21) varAux2 -> . ID push_var
    (22) varAux2 -> . ID push_var COMA varAux2
    (23) varAux2 -> . ID LCORCH CTE_I RCORCH push_arreglo
    (24) varAux2 -> . ID LCORCH CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    ID              shift and go to state 110

    varAux2                        shift and go to state 229

state 196

    (106) lectura -> INPUT push_poper LPAREN ID push_id . RPAREN quad_print SEMICOLON

    RPAREN          shift and go to state 230


state 197

    (77) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion . gosub RPAREN expresion
    (78) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion . gosub RPAREN
    (79) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion . gosub RPAREN SEMICOLON
    (81) gosub -> .

    RPAREN          reduce using rule 81 (gosub -> .)

    gosub                          shift and go to state 231

state 198

    (87) paramFuncion -> empty .

    RPAREN          reduce using rule 87 (paramFuncion -> empty .)


state 199

    (83) paramFuncion -> ID . push_id2 paramFuncionAux
    (84) paramFuncion -> ID . push_id2 paramFuncionAux COMA paramFuncion
    (140) var_cte -> ID . push_id
    (90) arreglo -> ID . push_id LCORCH exp RCORCH ver_dim1
    (89) push_id2 -> .
    (137) push_id -> .

  ! reduce/reduce conflict for COMA resolved using rule 89 (push_id2 -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 89 (push_id2 -> .)
    COMA            reduce using rule 89 (push_id2 -> .)
    RPAREN          reduce using rule 89 (push_id2 -> .)
    LCORCH          reduce using rule 137 (push_id -> .)
    TIMES           reduce using rule 137 (push_id -> .)
    DIVIDE          reduce using rule 137 (push_id -> .)
    PLUS            reduce using rule 137 (push_id -> .)
    MINUS           reduce using rule 137 (push_id -> .)

  ! COMA            [ reduce using rule 137 (push_id -> .) ]
  ! RPAREN          [ reduce using rule 137 (push_id -> .) ]

    push_id2                       shift and go to state 232
    push_id                        shift and go to state 142

state 200

    (85) paramFuncion -> exp . paramFuncionAux
    (86) paramFuncion -> exp . paramFuncionAux COMA paramFuncion
    (88) paramFuncionAux -> .

    COMA            reduce using rule 88 (paramFuncionAux -> .)
    RPAREN          reduce using rule 88 (paramFuncionAux -> .)

    paramFuncionAux                shift and go to state 233

state 201

    (98) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion . SEMICOLON

    SEMICOLON       shift and go to state 234


state 202

    (90) arreglo -> ID push_id LCORCH exp RCORCH . ver_dim1
    (96) ver_dim1 -> .

    EQUAL           reduce using rule 96 (ver_dim1 -> .)
    TIMES           reduce using rule 96 (ver_dim1 -> .)
    DIVIDE          reduce using rule 96 (ver_dim1 -> .)
    PLUS            reduce using rule 96 (ver_dim1 -> .)
    MINUS           reduce using rule 96 (ver_dim1 -> .)
    LOWERTHAN       reduce using rule 96 (ver_dim1 -> .)
    MORETHAN        reduce using rule 96 (ver_dim1 -> .)
    DIFFERENT       reduce using rule 96 (ver_dim1 -> .)
    DOUBLEEQUAL     reduce using rule 96 (ver_dim1 -> .)
    LOWEREQUAL      reduce using rule 96 (ver_dim1 -> .)
    MOREEQUAL       reduce using rule 96 (ver_dim1 -> .)
    RPAREN          reduce using rule 96 (ver_dim1 -> .)
    SEMICOLON       reduce using rule 96 (ver_dim1 -> .)
    COMA            reduce using rule 96 (ver_dim1 -> .)
    RCORCH          reduce using rule 96 (ver_dim1 -> .)
    ID              reduce using rule 96 (ver_dim1 -> .)
    IF              reduce using rule 96 (ver_dim1 -> .)
    PRINT           reduce using rule 96 (ver_dim1 -> .)
    WHILE           reduce using rule 96 (ver_dim1 -> .)
    FROM            reduce using rule 96 (ver_dim1 -> .)
    INPUT           reduce using rule 96 (ver_dim1 -> .)
    RBRACE          reduce using rule 96 (ver_dim1 -> .)
    RETURN          reduce using rule 96 (ver_dim1 -> .)

    ver_dim1                       shift and go to state 235

state 203

    (91) asignacion -> ID push_id EQUAL push_poper expresion . create_asign SEMICOLON
    (97) create_asign -> .

    SEMICOLON       reduce using rule 97 (create_asign -> .)

    create_asign                   shift and go to state 236

state 204

    (93) asignacion -> ID push_id EQUAL push_poper llamadaAFuncion . create_asign SEMICOLON
    (97) create_asign -> .

    SEMICOLON       reduce using rule 97 (create_asign -> .)

    create_asign                   shift and go to state 237

state 205

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion . RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    RPAREN          shift and go to state 238


state 206

    (64) while -> WHILE while1 LPAREN expresion RPAREN . while2 LBRACE bloqueAux RBRACE while3
    (66) while2 -> .

    LBRACE          reduce using rule 66 (while2 -> .)

    while2                         shift and go to state 239

state 207

    (13) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH .
    (14) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH . COMA varAuxGlobal2

    SEMICOLON       reduce using rule 13 (varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH .)
    COMA            shift and go to state 240


state 208

    (51) functionReturn -> RETURN exp creaCuadReturn SEMICOLON .

    RBRACE          reduce using rule 51 (functionReturn -> RETURN exp creaCuadReturn SEMICOLON .)


state 209

    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE . endProc
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE . endProc function
    (54) endProc -> .

    FUNCTION        reduce using rule 54 (endProc -> .)
    MAIN            reduce using rule 54 (endProc -> .)

    endProc                        shift and go to state 241

state 210

    (41) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function .

    MAIN            reduce using rule 41 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function .)


state 211

    (43) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc .
    (44) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc . function
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function

    MAIN            reduce using rule 43 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 242

state 212

    (48) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn . RBRACE endProc
    (50) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn . RBRACE endProc function

    RBRACE          shift and go to state 243


state 213

    (45) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc .
    (49) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc . function
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function

    MAIN            reduce using rule 45 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 244

state 214

    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE . endProc
    (47) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE . endProc function
    (54) endProc -> .

    FUNCTION        reduce using rule 54 (endProc -> .)
    MAIN            reduce using rule 54 (endProc -> .)

    endProc                        shift and go to state 245

state 215

    (92) asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON .

    ID              reduce using rule 92 (asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON .)
    IF              reduce using rule 92 (asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON .)
    PRINT           reduce using rule 92 (asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON .)
    WHILE           reduce using rule 92 (asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON .)
    FROM            reduce using rule 92 (asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON .)
    INPUT           reduce using rule 92 (asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON .)
    RETURN          reduce using rule 92 (asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON .)
    RBRACE          reduce using rule 92 (asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON .)


state 216

    (111) escrituraAux -> CTE_STRING push_cte COMA . escrituraAux
    (108) escrituraAux -> . expresion
    (109) escrituraAux -> . CTE_STRING push_cte
    (110) escrituraAux -> . expresion COMA escrituraAux
    (111) escrituraAux -> . CTE_STRING push_cte COMA escrituraAux
    (112) escrituraAux -> . llamadaAFuncion
    (113) expresion -> . exp
    (114) expresion -> . exp comp exp quad_comp
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    CTE_STRING      shift and go to state 129
    ID              shift and go to state 131
    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101

    var_cte                        shift and go to state 95
    arreglo                        shift and go to state 96
    termino                        shift and go to state 97
    factor                         shift and go to state 100
    expresion                      shift and go to state 130
    escrituraAux                   shift and go to state 246
    llamadaAFuncion                shift and go to state 218
    exp                            shift and go to state 107
    factorAux                      shift and go to state 108

state 217

    (110) escrituraAux -> expresion COMA escrituraAux .

    RPAREN          reduce using rule 110 (escrituraAux -> expresion COMA escrituraAux .)


state 218

    (112) escrituraAux -> llamadaAFuncion .

    RPAREN          reduce using rule 112 (escrituraAux -> llamadaAFuncion .)


state 219

    (104) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print . SEMICOLON

    SEMICOLON       shift and go to state 247


state 220

    (105) escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print . SEMICOLON

    SEMICOLON       shift and go to state 248


state 221

    (124) exp1 -> PLUS push_poper . exp
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    ID              shift and go to state 105
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    arreglo                        shift and go to state 96
    termino                        shift and go to state 97
    exp                            shift and go to state 249
    factor                         shift and go to state 100
    factorAux                      shift and go to state 108
    var_cte                        shift and go to state 95

state 222

    (125) exp1 -> MINUS push_poper . exp
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    ID              shift and go to state 105
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    arreglo                        shift and go to state 96
    termino                        shift and go to state 97
    exp                            shift and go to state 250
    factor                         shift and go to state 100
    factorAux                      shift and go to state 108
    var_cte                        shift and go to state 95

state 223

    (131) termino1 -> DIVIDE push_poper . termino
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    ID              shift and go to state 105
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    arreglo                        shift and go to state 96
    termino                        shift and go to state 251
    factor                         shift and go to state 100
    factorAux                      shift and go to state 108
    var_cte                        shift and go to state 95

state 224

    (130) termino1 -> TIMES push_poper . termino
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    ID              shift and go to state 105
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    arreglo                        shift and go to state 96
    termino                        shift and go to state 252
    factor                         shift and go to state 100
    factorAux                      shift and go to state 108
    var_cte                        shift and go to state 95

state 225

    (37) bloque -> LBRACE . RBRACE
    (38) bloque -> LBRACE . bloqueAux RBRACE
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (91) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (93) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (100) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (104) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (105) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (98) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (106) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    RBRACE          shift and go to state 253
    ID              shift and go to state 55
    IF              shift and go to state 50
    PRINT           shift and go to state 48
    WHILE           shift and go to state 60
    FROM            shift and go to state 58
    INPUT           shift and go to state 54

    arreglo                        shift and go to state 47
    estatuto                       shift and go to state 49
    condicion                      shift and go to state 52
    lectura                        shift and go to state 51
    loopFromDo                     shift and go to state 56
    llamadaAFuncion                shift and go to state 57
    asignacion                     shift and go to state 59
    bloqueAux                      shift and go to state 254
    while                          shift and go to state 62
    comparacion                    shift and go to state 63
    escritura                      shift and go to state 64

state 226

    (99) condicion -> IF LPAREN expresion RPAREN cond bloque . condFinal
    (100) condicion -> IF LPAREN expresion RPAREN cond bloque . ELSE condElse bloque condFinal
    (103) condFinal -> .

    ELSE            shift and go to state 256
    ID              reduce using rule 103 (condFinal -> .)
    IF              reduce using rule 103 (condFinal -> .)
    PRINT           reduce using rule 103 (condFinal -> .)
    WHILE           reduce using rule 103 (condFinal -> .)
    FROM            reduce using rule 103 (condFinal -> .)
    INPUT           reduce using rule 103 (condFinal -> .)
    RBRACE          reduce using rule 103 (condFinal -> .)
    RETURN          reduce using rule 103 (condFinal -> .)

    condFinal                      shift and go to state 255

state 227

    (114) expresion -> exp comp exp quad_comp .

    RPAREN          reduce using rule 114 (expresion -> exp comp exp quad_comp .)
    COMA            reduce using rule 114 (expresion -> exp comp exp quad_comp .)
    SEMICOLON       reduce using rule 114 (expresion -> exp comp exp quad_comp .)
    ID              reduce using rule 114 (expresion -> exp comp exp quad_comp .)
    IF              reduce using rule 114 (expresion -> exp comp exp quad_comp .)
    PRINT           reduce using rule 114 (expresion -> exp comp exp quad_comp .)
    WHILE           reduce using rule 114 (expresion -> exp comp exp quad_comp .)
    FROM            reduce using rule 114 (expresion -> exp comp exp quad_comp .)
    INPUT           reduce using rule 114 (expresion -> exp comp exp quad_comp .)
    RBRACE          reduce using rule 114 (expresion -> exp comp exp quad_comp .)
    RETURN          reduce using rule 114 (expresion -> exp comp exp quad_comp .)


state 228

    (23) varAux2 -> ID LCORCH CTE_I RCORCH . push_arreglo
    (24) varAux2 -> ID LCORCH CTE_I RCORCH . push_arreglo COMA varAux2
    (25) varAux2 -> ID LCORCH CTE_I RCORCH . LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> ID LCORCH CTE_I RCORCH . LCORCH CTE_I RCORCH push_matriz COMA varAux2
    (28) push_arreglo -> .

    LCORCH          shift and go to state 257
    COMA            reduce using rule 28 (push_arreglo -> .)
    SEMICOLON       reduce using rule 28 (push_arreglo -> .)

    push_arreglo                   shift and go to state 258

state 229

    (22) varAux2 -> ID push_var COMA varAux2 .

    SEMICOLON       reduce using rule 22 (varAux2 -> ID push_var COMA varAux2 .)


state 230

    (106) lectura -> INPUT push_poper LPAREN ID push_id RPAREN . quad_print SEMICOLON
    (107) quad_print -> .

    SEMICOLON       reduce using rule 107 (quad_print -> .)

    quad_print                     shift and go to state 259

state 231

    (77) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub . RPAREN expresion
    (78) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub . RPAREN
    (79) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub . RPAREN SEMICOLON

    RPAREN          shift and go to state 260


state 232

    (83) paramFuncion -> ID push_id2 . paramFuncionAux
    (84) paramFuncion -> ID push_id2 . paramFuncionAux COMA paramFuncion
    (88) paramFuncionAux -> .

    COMA            reduce using rule 88 (paramFuncionAux -> .)
    RPAREN          reduce using rule 88 (paramFuncionAux -> .)

    paramFuncionAux                shift and go to state 261

state 233

    (85) paramFuncion -> exp paramFuncionAux .
    (86) paramFuncion -> exp paramFuncionAux . COMA paramFuncion

    RPAREN          reduce using rule 85 (paramFuncion -> exp paramFuncionAux .)
    COMA            shift and go to state 262


state 234

    (98) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .

    ID              reduce using rule 98 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    IF              reduce using rule 98 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    PRINT           reduce using rule 98 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    WHILE           reduce using rule 98 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    FROM            reduce using rule 98 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    INPUT           reduce using rule 98 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    RBRACE          reduce using rule 98 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    RETURN          reduce using rule 98 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)


state 235

    (90) arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .

    TIMES           reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    DIVIDE          reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    PLUS            reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    MINUS           reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    LOWERTHAN       reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    MORETHAN        reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    DIFFERENT       reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    DOUBLEEQUAL     reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    LOWEREQUAL      reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    MOREEQUAL       reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    SEMICOLON       reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    RCORCH          reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    COMA            reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    RPAREN          reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    EQUAL           reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    ID              reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    IF              reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    PRINT           reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    WHILE           reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    FROM            reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    INPUT           reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    RBRACE          reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    RETURN          reduce using rule 90 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)


state 236

    (91) asignacion -> ID push_id EQUAL push_poper expresion create_asign . SEMICOLON

    SEMICOLON       shift and go to state 263


state 237

    (93) asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign . SEMICOLON

    SEMICOLON       shift and go to state 264


state 238

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN . TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    TO              shift and go to state 265


state 239

    (64) while -> WHILE while1 LPAREN expresion RPAREN while2 . LBRACE bloqueAux RBRACE while3

    LBRACE          shift and go to state 266


state 240

    (14) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA . varAuxGlobal2
    (9) varAuxGlobal2 -> . ID
    (10) varAuxGlobal2 -> . ID COMA varAuxGlobal2
    (11) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH
    (12) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    ID              shift and go to state 34

    varAuxGlobal2                  shift and go to state 267

state 241

    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc .
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc . function
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function

    MAIN            reduce using rule 40 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 268

state 242

    (44) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function .

    MAIN            reduce using rule 44 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function .)


state 243

    (48) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE . endProc
    (50) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE . endProc function
    (54) endProc -> .

    FUNCTION        reduce using rule 54 (endProc -> .)
    MAIN            reduce using rule 54 (endProc -> .)

    endProc                        shift and go to state 269

state 244

    (49) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function .

    MAIN            reduce using rule 49 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function .)


state 245

    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc .
    (47) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc . function
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function

    MAIN            reduce using rule 46 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 270

state 246

    (111) escrituraAux -> CTE_STRING push_cte COMA escrituraAux .

    RPAREN          reduce using rule 111 (escrituraAux -> CTE_STRING push_cte COMA escrituraAux .)


state 247

    (104) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .

    ID              reduce using rule 104 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    IF              reduce using rule 104 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    PRINT           reduce using rule 104 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    WHILE           reduce using rule 104 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    FROM            reduce using rule 104 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    INPUT           reduce using rule 104 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    RETURN          reduce using rule 104 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    RBRACE          reduce using rule 104 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)


state 248

    (105) escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON .

    ID              reduce using rule 105 (escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON .)
    IF              reduce using rule 105 (escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON .)
    PRINT           reduce using rule 105 (escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON .)
    WHILE           reduce using rule 105 (escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON .)
    FROM            reduce using rule 105 (escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON .)
    INPUT           reduce using rule 105 (escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON .)
    RETURN          reduce using rule 105 (escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON .)
    RBRACE          reduce using rule 105 (escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON .)


state 249

    (124) exp1 -> PLUS push_poper exp .

    LOWERTHAN       reduce using rule 124 (exp1 -> PLUS push_poper exp .)
    MORETHAN        reduce using rule 124 (exp1 -> PLUS push_poper exp .)
    DIFFERENT       reduce using rule 124 (exp1 -> PLUS push_poper exp .)
    DOUBLEEQUAL     reduce using rule 124 (exp1 -> PLUS push_poper exp .)
    LOWEREQUAL      reduce using rule 124 (exp1 -> PLUS push_poper exp .)
    MOREEQUAL       reduce using rule 124 (exp1 -> PLUS push_poper exp .)
    RPAREN          reduce using rule 124 (exp1 -> PLUS push_poper exp .)
    SEMICOLON       reduce using rule 124 (exp1 -> PLUS push_poper exp .)
    COMA            reduce using rule 124 (exp1 -> PLUS push_poper exp .)
    RCORCH          reduce using rule 124 (exp1 -> PLUS push_poper exp .)
    ID              reduce using rule 124 (exp1 -> PLUS push_poper exp .)
    IF              reduce using rule 124 (exp1 -> PLUS push_poper exp .)
    PRINT           reduce using rule 124 (exp1 -> PLUS push_poper exp .)
    WHILE           reduce using rule 124 (exp1 -> PLUS push_poper exp .)
    FROM            reduce using rule 124 (exp1 -> PLUS push_poper exp .)
    INPUT           reduce using rule 124 (exp1 -> PLUS push_poper exp .)
    RBRACE          reduce using rule 124 (exp1 -> PLUS push_poper exp .)
    RETURN          reduce using rule 124 (exp1 -> PLUS push_poper exp .)


state 250

    (125) exp1 -> MINUS push_poper exp .

    LOWERTHAN       reduce using rule 125 (exp1 -> MINUS push_poper exp .)
    MORETHAN        reduce using rule 125 (exp1 -> MINUS push_poper exp .)
    DIFFERENT       reduce using rule 125 (exp1 -> MINUS push_poper exp .)
    DOUBLEEQUAL     reduce using rule 125 (exp1 -> MINUS push_poper exp .)
    LOWEREQUAL      reduce using rule 125 (exp1 -> MINUS push_poper exp .)
    MOREEQUAL       reduce using rule 125 (exp1 -> MINUS push_poper exp .)
    RPAREN          reduce using rule 125 (exp1 -> MINUS push_poper exp .)
    SEMICOLON       reduce using rule 125 (exp1 -> MINUS push_poper exp .)
    COMA            reduce using rule 125 (exp1 -> MINUS push_poper exp .)
    RCORCH          reduce using rule 125 (exp1 -> MINUS push_poper exp .)
    ID              reduce using rule 125 (exp1 -> MINUS push_poper exp .)
    IF              reduce using rule 125 (exp1 -> MINUS push_poper exp .)
    PRINT           reduce using rule 125 (exp1 -> MINUS push_poper exp .)
    WHILE           reduce using rule 125 (exp1 -> MINUS push_poper exp .)
    FROM            reduce using rule 125 (exp1 -> MINUS push_poper exp .)
    INPUT           reduce using rule 125 (exp1 -> MINUS push_poper exp .)
    RBRACE          reduce using rule 125 (exp1 -> MINUS push_poper exp .)
    RETURN          reduce using rule 125 (exp1 -> MINUS push_poper exp .)


state 251

    (131) termino1 -> DIVIDE push_poper termino .

    PLUS            reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    MINUS           reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    LOWERTHAN       reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    MORETHAN        reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    DIFFERENT       reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    DOUBLEEQUAL     reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    LOWEREQUAL      reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    MOREEQUAL       reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    RPAREN          reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    SEMICOLON       reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    COMA            reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    RCORCH          reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    ID              reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    IF              reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    PRINT           reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    WHILE           reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    FROM            reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    INPUT           reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    RBRACE          reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)
    RETURN          reduce using rule 131 (termino1 -> DIVIDE push_poper termino .)


state 252

    (130) termino1 -> TIMES push_poper termino .

    PLUS            reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    MINUS           reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    LOWERTHAN       reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    MORETHAN        reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    DIFFERENT       reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    DOUBLEEQUAL     reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    LOWEREQUAL      reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    MOREEQUAL       reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    RPAREN          reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    SEMICOLON       reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    COMA            reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    RCORCH          reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    ID              reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    IF              reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    PRINT           reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    WHILE           reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    FROM            reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    INPUT           reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    RBRACE          reduce using rule 130 (termino1 -> TIMES push_poper termino .)
    RETURN          reduce using rule 130 (termino1 -> TIMES push_poper termino .)


state 253

    (37) bloque -> LBRACE RBRACE .

    ELSE            reduce using rule 37 (bloque -> LBRACE RBRACE .)
    ID              reduce using rule 37 (bloque -> LBRACE RBRACE .)
    IF              reduce using rule 37 (bloque -> LBRACE RBRACE .)
    PRINT           reduce using rule 37 (bloque -> LBRACE RBRACE .)
    WHILE           reduce using rule 37 (bloque -> LBRACE RBRACE .)
    FROM            reduce using rule 37 (bloque -> LBRACE RBRACE .)
    INPUT           reduce using rule 37 (bloque -> LBRACE RBRACE .)
    RBRACE          reduce using rule 37 (bloque -> LBRACE RBRACE .)
    RETURN          reduce using rule 37 (bloque -> LBRACE RBRACE .)


state 254

    (38) bloque -> LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 271


state 255

    (99) condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .

    ID              reduce using rule 99 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    IF              reduce using rule 99 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    PRINT           reduce using rule 99 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    WHILE           reduce using rule 99 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    FROM            reduce using rule 99 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    INPUT           reduce using rule 99 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    RBRACE          reduce using rule 99 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    RETURN          reduce using rule 99 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)


state 256

    (100) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE . condElse bloque condFinal
    (102) condElse -> .

    LBRACE          reduce using rule 102 (condElse -> .)

    condElse                       shift and go to state 272

state 257

    (25) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH . CTE_I RCORCH push_matriz
    (26) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH . CTE_I RCORCH push_matriz COMA varAux2

    CTE_I           shift and go to state 273


state 258

    (23) varAux2 -> ID LCORCH CTE_I RCORCH push_arreglo .
    (24) varAux2 -> ID LCORCH CTE_I RCORCH push_arreglo . COMA varAux2

    SEMICOLON       reduce using rule 23 (varAux2 -> ID LCORCH CTE_I RCORCH push_arreglo .)
    COMA            shift and go to state 274


state 259

    (106) lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print . SEMICOLON

    SEMICOLON       shift and go to state 275


state 260

    (77) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN . expresion
    (78) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .
    (79) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN . SEMICOLON
    (113) expresion -> . exp
    (114) expresion -> . exp comp exp quad_comp
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    IF              reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .)
    PRINT           reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .)
    WHILE           reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .)
    FROM            reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .)
    INPUT           reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .)
    RETURN          reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .)
    RBRACE          reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .)
    RPAREN          reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .)
    SEMICOLON       shift and go to state 276
    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    ID              shift and go to state 105
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

  ! ID              [ reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .) ]
  ! SEMICOLON       [ reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .) ]

    expresion                      shift and go to state 277
    arreglo                        shift and go to state 96
    termino                        shift and go to state 97
    exp                            shift and go to state 107
    factorAux                      shift and go to state 108
    factor                         shift and go to state 100
    var_cte                        shift and go to state 95

state 261

    (83) paramFuncion -> ID push_id2 paramFuncionAux .
    (84) paramFuncion -> ID push_id2 paramFuncionAux . COMA paramFuncion

    RPAREN          reduce using rule 83 (paramFuncion -> ID push_id2 paramFuncionAux .)
    COMA            shift and go to state 278


state 262

    (86) paramFuncion -> exp paramFuncionAux COMA . paramFuncion
    (83) paramFuncion -> . ID push_id2 paramFuncionAux
    (84) paramFuncion -> . ID push_id2 paramFuncionAux COMA paramFuncion
    (85) paramFuncion -> . exp paramFuncionAux
    (86) paramFuncion -> . exp paramFuncionAux COMA paramFuncion
    (87) paramFuncion -> . empty
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (59) empty -> .
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 199
    RPAREN          reduce using rule 59 (empty -> .)
    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    paramFuncion                   shift and go to state 279
    factor                         shift and go to state 100
    arreglo                        shift and go to state 96
    termino                        shift and go to state 97
    exp                            shift and go to state 200
    factorAux                      shift and go to state 108
    var_cte                        shift and go to state 95
    empty                          shift and go to state 198

state 263

    (91) asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .

    ID              reduce using rule 91 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    IF              reduce using rule 91 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    PRINT           reduce using rule 91 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    WHILE           reduce using rule 91 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    FROM            reduce using rule 91 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    INPUT           reduce using rule 91 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    RETURN          reduce using rule 91 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    RBRACE          reduce using rule 91 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)


state 264

    (93) asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON .

    ID              reduce using rule 93 (asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON .)
    IF              reduce using rule 93 (asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON .)
    PRINT           reduce using rule 93 (asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON .)
    WHILE           reduce using rule 93 (asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON .)
    FROM            reduce using rule 93 (asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON .)
    INPUT           reduce using rule 93 (asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON .)
    RETURN          reduce using rule 93 (asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON .)
    RBRACE          reduce using rule 93 (asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON .)


state 265

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO . LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    LPAREN          shift and go to state 280


state 266

    (64) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE . bloqueAux RBRACE while3
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (91) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (93) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (100) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (104) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (105) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (98) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (106) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 55
    IF              shift and go to state 50
    PRINT           shift and go to state 48
    WHILE           shift and go to state 60
    FROM            shift and go to state 58
    INPUT           shift and go to state 54

    arreglo                        shift and go to state 47
    estatuto                       shift and go to state 49
    condicion                      shift and go to state 52
    lectura                        shift and go to state 51
    loopFromDo                     shift and go to state 56
    llamadaAFuncion                shift and go to state 57
    asignacion                     shift and go to state 59
    bloqueAux                      shift and go to state 281
    while                          shift and go to state 62
    comparacion                    shift and go to state 63
    escritura                      shift and go to state 64

state 267

    (14) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2 .

    SEMICOLON       reduce using rule 14 (varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2 .)


state 268

    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function .

    MAIN            reduce using rule 42 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function .)


state 269

    (48) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc .
    (50) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc . function
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function

    MAIN            reduce using rule 48 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 282

state 270

    (47) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function .

    MAIN            reduce using rule 47 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function .)


state 271

    (38) bloque -> LBRACE bloqueAux RBRACE .

    ELSE            reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    ID              reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    FROM            reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    INPUT           reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    RETURN          reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)


state 272

    (100) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse . bloque condFinal
    (37) bloque -> . LBRACE RBRACE
    (38) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 225

    bloque                         shift and go to state 283

state 273

    (25) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I . RCORCH push_matriz
    (26) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I . RCORCH push_matriz COMA varAux2

    RCORCH          shift and go to state 284


state 274

    (24) varAux2 -> ID LCORCH CTE_I RCORCH push_arreglo COMA . varAux2
    (21) varAux2 -> . ID push_var
    (22) varAux2 -> . ID push_var COMA varAux2
    (23) varAux2 -> . ID LCORCH CTE_I RCORCH push_arreglo
    (24) varAux2 -> . ID LCORCH CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    ID              shift and go to state 110

    varAux2                        shift and go to state 285

state 275

    (106) lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .

    ID              reduce using rule 106 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    IF              reduce using rule 106 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    PRINT           reduce using rule 106 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    WHILE           reduce using rule 106 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    FROM            reduce using rule 106 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    INPUT           reduce using rule 106 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    RETURN          reduce using rule 106 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    RBRACE          reduce using rule 106 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)


state 276

    (79) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .

    ID              reduce using rule 79 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    IF              reduce using rule 79 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    PRINT           reduce using rule 79 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    WHILE           reduce using rule 79 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    FROM            reduce using rule 79 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    INPUT           reduce using rule 79 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    RETURN          reduce using rule 79 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    RBRACE          reduce using rule 79 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    RPAREN          reduce using rule 79 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 79 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)


state 277

    (77) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .

    ID              reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    IF              reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    PRINT           reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    WHILE           reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    FROM            reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    INPUT           reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    RETURN          reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    RBRACE          reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    RPAREN          reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    SEMICOLON       reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)


state 278

    (84) paramFuncion -> ID push_id2 paramFuncionAux COMA . paramFuncion
    (83) paramFuncion -> . ID push_id2 paramFuncionAux
    (84) paramFuncion -> . ID push_id2 paramFuncionAux COMA paramFuncion
    (85) paramFuncion -> . exp paramFuncionAux
    (86) paramFuncion -> . exp paramFuncionAux COMA paramFuncion
    (87) paramFuncion -> . empty
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (59) empty -> .
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 199
    RPAREN          reduce using rule 59 (empty -> .)
    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    paramFuncion                   shift and go to state 286
    factor                         shift and go to state 100
    arreglo                        shift and go to state 96
    termino                        shift and go to state 97
    exp                            shift and go to state 200
    factorAux                      shift and go to state 108
    var_cte                        shift and go to state 95
    empty                          shift and go to state 198

state 279

    (86) paramFuncion -> exp paramFuncionAux COMA paramFuncion .

    RPAREN          reduce using rule 86 (paramFuncion -> exp paramFuncionAux COMA paramFuncion .)


state 280

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN . expresion RPAREN DO LBRACE bloqueAux RBRACE
    (113) expresion -> . exp
    (114) expresion -> . exp comp exp quad_comp
    (122) exp -> . termino quad_term
    (123) exp -> . termino quad_term exp1
    (128) termino -> . factor quad_fact
    (129) termino -> . factor quad_fact termino1
    (132) factor -> . LPAREN expresion RPAREN
    (133) factor -> . factorAux
    (134) factorAux -> . PLUS push_poper var_cte
    (135) factorAux -> . MINUS push_poper var_cte
    (136) factorAux -> . var_cte
    (140) var_cte -> . ID push_id
    (141) var_cte -> . CTE_I push_cte
    (142) var_cte -> . CTE_F push_cte
    (143) var_cte -> . CTE_STRING push_cte
    (144) var_cte -> . arreglo
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 104
    PLUS            shift and go to state 99
    MINUS           shift and go to state 98
    ID              shift and go to state 105
    CTE_I           shift and go to state 103
    CTE_F           shift and go to state 101
    CTE_STRING      shift and go to state 102

    expresion                      shift and go to state 287
    factor                         shift and go to state 100
    var_cte                        shift and go to state 95
    arreglo                        shift and go to state 96
    termino                        shift and go to state 97
    exp                            shift and go to state 107
    factorAux                      shift and go to state 108

state 281

    (64) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux . RBRACE while3

    RBRACE          shift and go to state 288


state 282

    (50) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function .

    MAIN            reduce using rule 50 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function .)


state 283

    (100) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque . condFinal
    (103) condFinal -> .

    ID              reduce using rule 103 (condFinal -> .)
    IF              reduce using rule 103 (condFinal -> .)
    PRINT           reduce using rule 103 (condFinal -> .)
    WHILE           reduce using rule 103 (condFinal -> .)
    FROM            reduce using rule 103 (condFinal -> .)
    INPUT           reduce using rule 103 (condFinal -> .)
    RBRACE          reduce using rule 103 (condFinal -> .)
    RETURN          reduce using rule 103 (condFinal -> .)

    condFinal                      shift and go to state 289

state 284

    (25) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH . push_matriz
    (26) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH . push_matriz COMA varAux2
    (29) push_matriz -> .

    COMA            reduce using rule 29 (push_matriz -> .)
    SEMICOLON       reduce using rule 29 (push_matriz -> .)

    push_matriz                    shift and go to state 290

state 285

    (24) varAux2 -> ID LCORCH CTE_I RCORCH push_arreglo COMA varAux2 .

    SEMICOLON       reduce using rule 24 (varAux2 -> ID LCORCH CTE_I RCORCH push_arreglo COMA varAux2 .)


state 286

    (84) paramFuncion -> ID push_id2 paramFuncionAux COMA paramFuncion .

    RPAREN          reduce using rule 84 (paramFuncion -> ID push_id2 paramFuncionAux COMA paramFuncion .)


state 287

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion . RPAREN DO LBRACE bloqueAux RBRACE

    RPAREN          shift and go to state 291


state 288

    (64) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE . while3
    (67) while3 -> .

    ID              reduce using rule 67 (while3 -> .)
    IF              reduce using rule 67 (while3 -> .)
    PRINT           reduce using rule 67 (while3 -> .)
    WHILE           reduce using rule 67 (while3 -> .)
    FROM            reduce using rule 67 (while3 -> .)
    INPUT           reduce using rule 67 (while3 -> .)
    RBRACE          reduce using rule 67 (while3 -> .)
    RETURN          reduce using rule 67 (while3 -> .)

    while3                         shift and go to state 292

state 289

    (100) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .

    ID              reduce using rule 100 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    IF              reduce using rule 100 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    PRINT           reduce using rule 100 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    WHILE           reduce using rule 100 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    FROM            reduce using rule 100 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    INPUT           reduce using rule 100 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    RBRACE          reduce using rule 100 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    RETURN          reduce using rule 100 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)


state 290

    (25) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz .
    (26) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz . COMA varAux2

    SEMICOLON       reduce using rule 25 (varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz .)
    COMA            shift and go to state 293


state 291

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN . DO LBRACE bloqueAux RBRACE

    DO              shift and go to state 294


state 292

    (64) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .

    ID              reduce using rule 64 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    IF              reduce using rule 64 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    PRINT           reduce using rule 64 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    WHILE           reduce using rule 64 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    FROM            reduce using rule 64 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    INPUT           reduce using rule 64 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    RBRACE          reduce using rule 64 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    RETURN          reduce using rule 64 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)


state 293

    (26) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA . varAux2
    (21) varAux2 -> . ID push_var
    (22) varAux2 -> . ID push_var COMA varAux2
    (23) varAux2 -> . ID LCORCH CTE_I RCORCH push_arreglo
    (24) varAux2 -> . ID LCORCH CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    ID              shift and go to state 110

    varAux2                        shift and go to state 295

state 294

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 296


state 295

    (26) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2 .

    SEMICOLON       reduce using rule 26 (varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2 .)


state 296

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE . bloqueAux RBRACE
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (91) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (93) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (100) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (104) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (105) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (98) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (79) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (106) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (90) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 55
    IF              shift and go to state 50
    PRINT           shift and go to state 48
    WHILE           shift and go to state 60
    FROM            shift and go to state 58
    INPUT           shift and go to state 54

    arreglo                        shift and go to state 47
    estatuto                       shift and go to state 49
    condicion                      shift and go to state 52
    lectura                        shift and go to state 51
    loopFromDo                     shift and go to state 56
    llamadaAFuncion                shift and go to state 57
    asignacion                     shift and go to state 59
    bloqueAux                      shift and go to state 297
    while                          shift and go to state 62
    comparacion                    shift and go to state 63
    escritura                      shift and go to state 64

state 297

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 298


state 298

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .

    ID              reduce using rule 68 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 68 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 68 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 68 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    FROM            reduce using rule 68 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    INPUT           reduce using rule 68 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 68 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    RETURN          reduce using rule 68 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 35 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 133 resolved as shift
WARNING: shift/reduce conflict for COMA in state 172 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 260 resolved as shift
WARNING: shift/reduce conflict for ID in state 260 resolved as shift
WARNING: reduce/reduce conflict in state 172 resolved using rule (escrituraAux -> CTE_STRING push_cte)
WARNING: rejected rule (var_cte -> CTE_STRING push_cte) in state 172
WARNING: reduce/reduce conflict in state 199 resolved using rule (push_id2 -> <empty>)
WARNING: rejected rule (push_id -> <empty>) in state 199
