Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID COLON vars main function
Rule 2     program -> PROGRAM ID COLON main function
Rule 3     program -> PROGRAM ID COLON vars main
Rule 4     program -> PROGRAM ID COLON main
Rule 5     main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
Rule 6     main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
Rule 7     nomMain -> MAIN
Rule 8     vars -> VAR varAux1
Rule 9     varAux1 -> tipo varAux2 SEMICOLON
Rule 10    varAux1 -> tipo varAux2 SEMICOLON varAux1
Rule 11    varAux2 -> ID
Rule 12    varAux2 -> ID COMA varAux2
Rule 13    tipo -> INT
Rule 14    tipo -> FLOAT
Rule 15    tipo -> CHAR
Rule 16    tipoFunc -> INT
Rule 17    tipoFunc -> FLOAT
Rule 18    tipoFunc -> CHAR
Rule 19    tipoFunc -> VOID
Rule 20    bloque -> LBRACE RBRACE
Rule 21    bloque -> LBRACE bloqueAux RBRACE
Rule 22    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis
Rule 23    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
Rule 24    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis function
Rule 25    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function
Rule 26    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis
Rule 27    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
Rule 28    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis function
Rule 29    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function
Rule 30    param -> tipo ID funcionTres
Rule 31    param -> tipo ID COMA funcionTres funcionCuatro param
Rule 32    nomFunc -> ID
Rule 33    funcionTres -> <empty>
Rule 34    funcionCuatro -> <empty>
Rule 35    funcionSeis -> <empty>
Rule 36    bloqueAux -> estatuto
Rule 37    bloqueAux -> estatuto bloqueAux
Rule 38    while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
Rule 39    while1 -> <empty>
Rule 40    while2 -> <empty>
Rule 41    while3 -> <empty>
Rule 42    loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
Rule 43    estatuto -> asignacion
Rule 44    estatuto -> condicion
Rule 45    estatuto -> escritura
Rule 46    estatuto -> while
Rule 47    estatuto -> loopFromDo
Rule 48    estatuto -> comparacion
Rule 49    asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON
Rule 50    create_asign -> <empty>
Rule 51    comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
Rule 52    condicion -> IF LPAREN expresion RPAREN cond bloque condFinal
Rule 53    condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
Rule 54    cond -> <empty>
Rule 55    condElse -> <empty>
Rule 56    condFinal -> <empty>
Rule 57    escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
Rule 58    quad_print -> <empty>
Rule 59    escrituraAux -> expresion
Rule 60    escrituraAux -> CTE_STRING
Rule 61    escrituraAux -> expresion COMA escrituraAux
Rule 62    escrituraAux -> CTE_STRING COMA escrituraAux
Rule 63    expresion -> exp
Rule 64    expresion -> exp comp exp quad_comp
Rule 65    comp -> LOWERTHAN push_poper
Rule 66    comp -> MORETHAN push_poper
Rule 67    comp -> DIFFERENT push_poper
Rule 68    comp -> DOUBLEEQUAL push_poper
Rule 69    quad_comp -> <empty>
Rule 70    exp -> termino quad_term
Rule 71    exp -> termino quad_term exp1
Rule 72    exp1 -> PLUS push_poper exp
Rule 73    exp1 -> MINUS push_poper exp
Rule 74    quad_term -> <empty>
Rule 75    quad_fact -> <empty>
Rule 76    termino -> factor quad_fact
Rule 77    termino -> factor quad_fact termino1
Rule 78    termino1 -> TIMES push_poper termino
Rule 79    termino1 -> DIVIDE push_poper termino
Rule 80    factor -> LPAREN expresion RPAREN
Rule 81    factor -> factorAux
Rule 82    factorAux -> PLUS push_poper var_cte
Rule 83    factorAux -> MINUS push_poper var_cte
Rule 84    factorAux -> var_cte
Rule 85    push_id -> <empty>
Rule 86    push_cte -> <empty>
Rule 87    push_poper -> <empty>
Rule 88    var_cte -> ID push_id
Rule 89    var_cte -> CTE_I push_cte
Rule 90    var_cte -> CTE_F push_cte

Terminals, with rules where they appear

AND                  : 
CHAR                 : 15 18
COLON                : 1 2 3 4
COMA                 : 12 31 61 62
CTE_F                : 90
CTE_I                : 89
CTE_STRING           : 60 62
DIFFERENT            : 67
DIVIDE               : 79
DO                   : 42
DOUBLEEQUAL          : 51 68
ELSE                 : 53
EQUAL                : 42 49
FLOAT                : 14 17
FROM                 : 42
FUNCTION             : 22 23 24 25 26 27 28 29
ID                   : 1 2 3 4 11 12 30 31 32 42 49 51 88
IF                   : 52 53
INT                  : 13 16
LBRACE               : 5 6 20 21 22 23 24 25 26 27 28 29 38 42
LOWERTHAN            : 65
LPAREN               : 5 6 22 23 24 25 26 27 28 29 38 42 42 52 53 57 80
MAIN                 : 7
MINUS                : 73 83
MORETHAN             : 66
OR                   : 
PLUS                 : 72 82
PRINT                : 57
PROGRAM              : 1 2 3 4
RBRACE               : 5 6 20 21 22 23 24 25 26 27 28 29 38 42
RPAREN               : 5 6 22 23 24 25 26 27 28 29 38 42 42 52 53 57 80
SEMICOLON            : 9 10 49 51 57
TIMES                : 78
TO                   : 42
VAR                  : 8
VOID                 : 19
WHILE                : 38
error                : 

Nonterminals, with rules where they appear

asignacion           : 43
bloque               : 52 53 53
bloqueAux            : 5 6 21 23 25 27 29 37 38 42
comp                 : 64
comparacion          : 48
cond                 : 52 53
condElse             : 53
condFinal            : 52 53
condicion            : 44
create_asign         : 49
escritura            : 45
escrituraAux         : 61 62
estatuto             : 36 37
exp                  : 57 63 64 64 72 73
exp1                 : 71
expresion            : 38 42 42 49 51 52 53 59 61 80
factor               : 76 77
factorAux            : 81
funcionCuatro        : 31
funcionSeis          : 22 23 24 25 26 27 28 29
funcionTres          : 30 31
function             : 1 2 24 25 28 29
loopFromDo           : 47
main                 : 1 2 3 4
nomFunc              : 22 23 24 25 26 27 28 29
nomMain              : 5 6
param                : 26 27 28 29 31
program              : 0
push_cte             : 89 90
push_id              : 49 51 88
push_poper           : 49 51 57 65 66 67 68 72 73 78 79 82 83
quad_comp            : 64
quad_fact            : 76 77
quad_print           : 57
quad_term            : 70 71
termino              : 70 71 78 79
termino1             : 77
tipo                 : 9 10 30 31
tipoFunc             : 22 23 24 25 26 27 28 29
varAux1              : 8 10
varAux2              : 9 10 12
var_cte              : 82 83 84
vars                 : 1 3 6 23 25 27 29
while                : 46
while1               : 38
while2               : 38
while3               : 38

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID COLON vars main function
    (2) program -> . PROGRAM ID COLON main function
    (3) program -> . PROGRAM ID COLON vars main
    (4) program -> . PROGRAM ID COLON main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID COLON vars main function
    (2) program -> PROGRAM . ID COLON main function
    (3) program -> PROGRAM . ID COLON vars main
    (4) program -> PROGRAM . ID COLON main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . COLON vars main function
    (2) program -> PROGRAM ID . COLON main function
    (3) program -> PROGRAM ID . COLON vars main
    (4) program -> PROGRAM ID . COLON main

    COLON           shift and go to state 4


state 4

    (1) program -> PROGRAM ID COLON . vars main function
    (2) program -> PROGRAM ID COLON . main function
    (3) program -> PROGRAM ID COLON . vars main
    (4) program -> PROGRAM ID COLON . main
    (8) vars -> . VAR varAux1
    (5) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (6) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (7) nomMain -> . MAIN

    VAR             shift and go to state 8
    MAIN            shift and go to state 6

    vars                           shift and go to state 5
    nomMain                        shift and go to state 7
    main                           shift and go to state 9

state 5

    (1) program -> PROGRAM ID COLON vars . main function
    (3) program -> PROGRAM ID COLON vars . main
    (5) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (6) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (7) nomMain -> . MAIN

    MAIN            shift and go to state 6

    nomMain                        shift and go to state 7
    main                           shift and go to state 10

state 6

    (7) nomMain -> MAIN .

    LPAREN          reduce using rule 7 (nomMain -> MAIN .)


state 7

    (5) main -> nomMain . LPAREN RPAREN LBRACE bloqueAux RBRACE
    (6) main -> nomMain . LPAREN RPAREN LBRACE vars bloqueAux RBRACE

    LPAREN          shift and go to state 11


state 8

    (8) vars -> VAR . varAux1
    (9) varAux1 -> . tipo varAux2 SEMICOLON
    (10) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

    varAux1                        shift and go to state 16
    tipo                           shift and go to state 13

state 9

    (2) program -> PROGRAM ID COLON main . function
    (4) program -> PROGRAM ID COLON main .
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function

    $end            reduce using rule 4 (program -> PROGRAM ID COLON main .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 17

state 10

    (1) program -> PROGRAM ID COLON vars main . function
    (3) program -> PROGRAM ID COLON vars main .
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function

    $end            reduce using rule 3 (program -> PROGRAM ID COLON vars main .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 19

state 11

    (5) main -> nomMain LPAREN . RPAREN LBRACE bloqueAux RBRACE
    (6) main -> nomMain LPAREN . RPAREN LBRACE vars bloqueAux RBRACE

    RPAREN          shift and go to state 20


state 12

    (15) tipo -> CHAR .

    ID              reduce using rule 15 (tipo -> CHAR .)


state 13

    (9) varAux1 -> tipo . varAux2 SEMICOLON
    (10) varAux1 -> tipo . varAux2 SEMICOLON varAux1
    (11) varAux2 -> . ID
    (12) varAux2 -> . ID COMA varAux2

    ID              shift and go to state 22

    varAux2                        shift and go to state 21

state 14

    (13) tipo -> INT .

    ID              reduce using rule 13 (tipo -> INT .)


state 15

    (14) tipo -> FLOAT .

    ID              reduce using rule 14 (tipo -> FLOAT .)


state 16

    (8) vars -> VAR varAux1 .

    ID              reduce using rule 8 (vars -> VAR varAux1 .)
    IF              reduce using rule 8 (vars -> VAR varAux1 .)
    PRINT           reduce using rule 8 (vars -> VAR varAux1 .)
    WHILE           reduce using rule 8 (vars -> VAR varAux1 .)
    FROM            reduce using rule 8 (vars -> VAR varAux1 .)
    MAIN            reduce using rule 8 (vars -> VAR varAux1 .)


state 17

    (2) program -> PROGRAM ID COLON main function .

    $end            reduce using rule 2 (program -> PROGRAM ID COLON main function .)


state 18

    (22) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis
    (23) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (24) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis function
    (25) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function
    (26) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis
    (27) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (28) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis function
    (29) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function
    (16) tipoFunc -> . INT
    (17) tipoFunc -> . FLOAT
    (18) tipoFunc -> . CHAR
    (19) tipoFunc -> . VOID

    INT             shift and go to state 23
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26
    VOID            shift and go to state 24

    tipoFunc                       shift and go to state 27

state 19

    (1) program -> PROGRAM ID COLON vars main function .

    $end            reduce using rule 1 (program -> PROGRAM ID COLON vars main function .)


state 20

    (5) main -> nomMain LPAREN RPAREN . LBRACE bloqueAux RBRACE
    (6) main -> nomMain LPAREN RPAREN . LBRACE vars bloqueAux RBRACE

    LBRACE          shift and go to state 28


state 21

    (9) varAux1 -> tipo varAux2 . SEMICOLON
    (10) varAux1 -> tipo varAux2 . SEMICOLON varAux1

    SEMICOLON       shift and go to state 29


state 22

    (11) varAux2 -> ID .
    (12) varAux2 -> ID . COMA varAux2

    SEMICOLON       reduce using rule 11 (varAux2 -> ID .)
    COMA            shift and go to state 30


state 23

    (16) tipoFunc -> INT .

    ID              reduce using rule 16 (tipoFunc -> INT .)


state 24

    (19) tipoFunc -> VOID .

    ID              reduce using rule 19 (tipoFunc -> VOID .)


state 25

    (17) tipoFunc -> FLOAT .

    ID              reduce using rule 17 (tipoFunc -> FLOAT .)


state 26

    (18) tipoFunc -> CHAR .

    ID              reduce using rule 18 (tipoFunc -> CHAR .)


state 27

    (22) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis
    (23) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (24) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis function
    (25) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function
    (26) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis
    (27) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (28) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis function
    (29) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function
    (32) nomFunc -> . ID

    ID              shift and go to state 32

    nomFunc                        shift and go to state 31

state 28

    (5) main -> nomMain LPAREN RPAREN LBRACE . bloqueAux RBRACE
    (6) main -> nomMain LPAREN RPAREN LBRACE . vars bloqueAux RBRACE
    (36) bloqueAux -> . estatuto
    (37) bloqueAux -> . estatuto bloqueAux
    (8) vars -> . VAR varAux1
    (43) estatuto -> . asignacion
    (44) estatuto -> . condicion
    (45) estatuto -> . escritura
    (46) estatuto -> . while
    (47) estatuto -> . loopFromDo
    (48) estatuto -> . comparacion
    (49) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (52) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (53) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (57) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (38) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (42) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (51) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    VAR             shift and go to state 8
    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 42
    FROM            shift and go to state 40

    vars                           shift and go to state 33
    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 39
    asignacion                     shift and go to state 41
    bloqueAux                      shift and go to state 43
    while                          shift and go to state 44
    comparacion                    shift and go to state 45
    escritura                      shift and go to state 46

state 29

    (9) varAux1 -> tipo varAux2 SEMICOLON .
    (10) varAux1 -> tipo varAux2 SEMICOLON . varAux1
    (9) varAux1 -> . tipo varAux2 SEMICOLON
    (10) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR

    MAIN            reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    ID              reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    IF              reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    PRINT           reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    WHILE           reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    FROM            reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

    varAux1                        shift and go to state 47
    tipo                           shift and go to state 13

state 30

    (12) varAux2 -> ID COMA . varAux2
    (11) varAux2 -> . ID
    (12) varAux2 -> . ID COMA varAux2

    ID              shift and go to state 22

    varAux2                        shift and go to state 48

state 31

    (22) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE RBRACE funcionSeis
    (23) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (24) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE RBRACE funcionSeis function
    (25) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function
    (26) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE RBRACE funcionSeis
    (27) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (28) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE RBRACE funcionSeis function
    (29) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function

    LPAREN          shift and go to state 49


state 32

    (32) nomFunc -> ID .

    LPAREN          reduce using rule 32 (nomFunc -> ID .)


state 33

    (6) main -> nomMain LPAREN RPAREN LBRACE vars . bloqueAux RBRACE
    (36) bloqueAux -> . estatuto
    (37) bloqueAux -> . estatuto bloqueAux
    (43) estatuto -> . asignacion
    (44) estatuto -> . condicion
    (45) estatuto -> . escritura
    (46) estatuto -> . while
    (47) estatuto -> . loopFromDo
    (48) estatuto -> . comparacion
    (49) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (52) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (53) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (57) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (38) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (42) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (51) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 42
    FROM            shift and go to state 40

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 39
    asignacion                     shift and go to state 41
    bloqueAux                      shift and go to state 50
    while                          shift and go to state 44
    comparacion                    shift and go to state 45
    escritura                      shift and go to state 46

state 34

    (57) escritura -> PRINT . push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (87) push_poper -> .

    LPAREN          reduce using rule 87 (push_poper -> .)

    push_poper                     shift and go to state 51

state 35

    (36) bloqueAux -> estatuto .
    (37) bloqueAux -> estatuto . bloqueAux
    (36) bloqueAux -> . estatuto
    (37) bloqueAux -> . estatuto bloqueAux
    (43) estatuto -> . asignacion
    (44) estatuto -> . condicion
    (45) estatuto -> . escritura
    (46) estatuto -> . while
    (47) estatuto -> . loopFromDo
    (48) estatuto -> . comparacion
    (49) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (52) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (53) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (57) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (38) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (42) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (51) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    RBRACE          reduce using rule 36 (bloqueAux -> estatuto .)
    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 42
    FROM            shift and go to state 40

    asignacion                     shift and go to state 41
    estatuto                       shift and go to state 35
    bloqueAux                      shift and go to state 52
    while                          shift and go to state 44
    condicion                      shift and go to state 37
    comparacion                    shift and go to state 45
    loopFromDo                     shift and go to state 39
    escritura                      shift and go to state 46

state 36

    (52) condicion -> IF . LPAREN expresion RPAREN cond bloque condFinal
    (53) condicion -> IF . LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal

    LPAREN          shift and go to state 53


state 37

    (44) estatuto -> condicion .

    ID              reduce using rule 44 (estatuto -> condicion .)
    IF              reduce using rule 44 (estatuto -> condicion .)
    PRINT           reduce using rule 44 (estatuto -> condicion .)
    WHILE           reduce using rule 44 (estatuto -> condicion .)
    FROM            reduce using rule 44 (estatuto -> condicion .)
    RBRACE          reduce using rule 44 (estatuto -> condicion .)


state 38

    (49) asignacion -> ID . push_id EQUAL push_poper expresion create_asign SEMICOLON
    (51) comparacion -> ID . push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (85) push_id -> .

    EQUAL           reduce using rule 85 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 85 (push_id -> .)

    push_id                        shift and go to state 54

state 39

    (47) estatuto -> loopFromDo .

    ID              reduce using rule 47 (estatuto -> loopFromDo .)
    IF              reduce using rule 47 (estatuto -> loopFromDo .)
    PRINT           reduce using rule 47 (estatuto -> loopFromDo .)
    WHILE           reduce using rule 47 (estatuto -> loopFromDo .)
    FROM            reduce using rule 47 (estatuto -> loopFromDo .)
    RBRACE          reduce using rule 47 (estatuto -> loopFromDo .)


state 40

    (42) loopFromDo -> FROM . LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    LPAREN          shift and go to state 55


state 41

    (43) estatuto -> asignacion .

    ID              reduce using rule 43 (estatuto -> asignacion .)
    IF              reduce using rule 43 (estatuto -> asignacion .)
    PRINT           reduce using rule 43 (estatuto -> asignacion .)
    WHILE           reduce using rule 43 (estatuto -> asignacion .)
    FROM            reduce using rule 43 (estatuto -> asignacion .)
    RBRACE          reduce using rule 43 (estatuto -> asignacion .)


state 42

    (38) while -> WHILE . while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (39) while1 -> .

    LPAREN          reduce using rule 39 (while1 -> .)

    while1                         shift and go to state 56

state 43

    (5) main -> nomMain LPAREN RPAREN LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 57


state 44

    (46) estatuto -> while .

    ID              reduce using rule 46 (estatuto -> while .)
    IF              reduce using rule 46 (estatuto -> while .)
    PRINT           reduce using rule 46 (estatuto -> while .)
    WHILE           reduce using rule 46 (estatuto -> while .)
    FROM            reduce using rule 46 (estatuto -> while .)
    RBRACE          reduce using rule 46 (estatuto -> while .)


state 45

    (48) estatuto -> comparacion .

    ID              reduce using rule 48 (estatuto -> comparacion .)
    IF              reduce using rule 48 (estatuto -> comparacion .)
    PRINT           reduce using rule 48 (estatuto -> comparacion .)
    WHILE           reduce using rule 48 (estatuto -> comparacion .)
    FROM            reduce using rule 48 (estatuto -> comparacion .)
    RBRACE          reduce using rule 48 (estatuto -> comparacion .)


state 46

    (45) estatuto -> escritura .

    ID              reduce using rule 45 (estatuto -> escritura .)
    IF              reduce using rule 45 (estatuto -> escritura .)
    PRINT           reduce using rule 45 (estatuto -> escritura .)
    WHILE           reduce using rule 45 (estatuto -> escritura .)
    FROM            reduce using rule 45 (estatuto -> escritura .)
    RBRACE          reduce using rule 45 (estatuto -> escritura .)


state 47

    (10) varAux1 -> tipo varAux2 SEMICOLON varAux1 .

    MAIN            reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    ID              reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    IF              reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    PRINT           reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    WHILE           reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    FROM            reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)


state 48

    (12) varAux2 -> ID COMA varAux2 .

    SEMICOLON       reduce using rule 12 (varAux2 -> ID COMA varAux2 .)


state 49

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE RBRACE funcionSeis
    (23) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE RBRACE funcionSeis function
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function
    (26) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE RBRACE funcionSeis
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE RBRACE funcionSeis function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function
    (30) param -> . tipo ID funcionTres
    (31) param -> . tipo ID COMA funcionTres funcionCuatro param
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR

    RPAREN          shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

    tipo                           shift and go to state 60
    param                          shift and go to state 59

state 50

    (6) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux . RBRACE

    RBRACE          shift and go to state 61


state 51

    (57) escritura -> PRINT push_poper . LPAREN exp RPAREN quad_print SEMICOLON

    LPAREN          shift and go to state 62


state 52

    (37) bloqueAux -> estatuto bloqueAux .

    RBRACE          reduce using rule 37 (bloqueAux -> estatuto bloqueAux .)


state 53

    (52) condicion -> IF LPAREN . expresion RPAREN cond bloque condFinal
    (53) condicion -> IF LPAREN . expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (63) expresion -> . exp
    (64) expresion -> . exp comp exp quad_comp
    (70) exp -> . termino quad_term
    (71) exp -> . termino quad_term exp1
    (76) termino -> . factor quad_fact
    (77) termino -> . factor quad_fact termino1
    (80) factor -> . LPAREN expresion RPAREN
    (81) factor -> . factorAux
    (82) factorAux -> . PLUS push_poper var_cte
    (83) factorAux -> . MINUS push_poper var_cte
    (84) factorAux -> . var_cte
    (88) var_cte -> . ID push_id
    (89) var_cte -> . CTE_I push_cte
    (90) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 70
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 71
    CTE_I           shift and go to state 69
    CTE_F           shift and go to state 68

    expresion                      shift and go to state 72
    factor                         shift and go to state 67
    termino                        shift and go to state 64
    exp                            shift and go to state 73
    factorAux                      shift and go to state 74
    var_cte                        shift and go to state 63

state 54

    (49) asignacion -> ID push_id . EQUAL push_poper expresion create_asign SEMICOLON
    (51) comparacion -> ID push_id . DOUBLEEQUAL push_poper expresion SEMICOLON

    EQUAL           shift and go to state 76
    DOUBLEEQUAL     shift and go to state 75


state 55

    (42) loopFromDo -> FROM LPAREN . ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    ID              shift and go to state 77


state 56

    (38) while -> WHILE while1 . LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3

    LPAREN          shift and go to state 78


state 57

    (5) main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE .

    FUNCTION        reduce using rule 5 (main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE .)
    $end            reduce using rule 5 (main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE .)


state 58

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE RBRACE funcionSeis
    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux RBRACE funcionSeis
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE RBRACE funcionSeis function
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux RBRACE funcionSeis function

    LBRACE          shift and go to state 79


state 59

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE RBRACE funcionSeis
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE RBRACE funcionSeis function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function

    RPAREN          shift and go to state 80


state 60

    (30) param -> tipo . ID funcionTres
    (31) param -> tipo . ID COMA funcionTres funcionCuatro param

    ID              shift and go to state 81


state 61

    (6) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE .

    FUNCTION        reduce using rule 6 (main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE .)
    $end            reduce using rule 6 (main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE .)


state 62

    (57) escritura -> PRINT push_poper LPAREN . exp RPAREN quad_print SEMICOLON
    (70) exp -> . termino quad_term
    (71) exp -> . termino quad_term exp1
    (76) termino -> . factor quad_fact
    (77) termino -> . factor quad_fact termino1
    (80) factor -> . LPAREN expresion RPAREN
    (81) factor -> . factorAux
    (82) factorAux -> . PLUS push_poper var_cte
    (83) factorAux -> . MINUS push_poper var_cte
    (84) factorAux -> . var_cte
    (88) var_cte -> . ID push_id
    (89) var_cte -> . CTE_I push_cte
    (90) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 70
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 71
    CTE_I           shift and go to state 69
    CTE_F           shift and go to state 68

    factor                         shift and go to state 67
    termino                        shift and go to state 64
    exp                            shift and go to state 82
    factorAux                      shift and go to state 74
    var_cte                        shift and go to state 63

state 63

    (84) factorAux -> var_cte .

    TIMES           reduce using rule 84 (factorAux -> var_cte .)
    DIVIDE          reduce using rule 84 (factorAux -> var_cte .)
    PLUS            reduce using rule 84 (factorAux -> var_cte .)
    MINUS           reduce using rule 84 (factorAux -> var_cte .)
    RPAREN          reduce using rule 84 (factorAux -> var_cte .)
    LOWERTHAN       reduce using rule 84 (factorAux -> var_cte .)
    MORETHAN        reduce using rule 84 (factorAux -> var_cte .)
    DIFFERENT       reduce using rule 84 (factorAux -> var_cte .)
    DOUBLEEQUAL     reduce using rule 84 (factorAux -> var_cte .)
    SEMICOLON       reduce using rule 84 (factorAux -> var_cte .)


state 64

    (70) exp -> termino . quad_term
    (71) exp -> termino . quad_term exp1
    (74) quad_term -> .

    PLUS            reduce using rule 74 (quad_term -> .)
    MINUS           reduce using rule 74 (quad_term -> .)
    LOWERTHAN       reduce using rule 74 (quad_term -> .)
    MORETHAN        reduce using rule 74 (quad_term -> .)
    DIFFERENT       reduce using rule 74 (quad_term -> .)
    DOUBLEEQUAL     reduce using rule 74 (quad_term -> .)
    RPAREN          reduce using rule 74 (quad_term -> .)
    SEMICOLON       reduce using rule 74 (quad_term -> .)

    quad_term                      shift and go to state 83

state 65

    (83) factorAux -> MINUS . push_poper var_cte
    (87) push_poper -> .

    ID              reduce using rule 87 (push_poper -> .)
    CTE_I           reduce using rule 87 (push_poper -> .)
    CTE_F           reduce using rule 87 (push_poper -> .)

    push_poper                     shift and go to state 84

state 66

    (82) factorAux -> PLUS . push_poper var_cte
    (87) push_poper -> .

    ID              reduce using rule 87 (push_poper -> .)
    CTE_I           reduce using rule 87 (push_poper -> .)
    CTE_F           reduce using rule 87 (push_poper -> .)

    push_poper                     shift and go to state 85

state 67

    (76) termino -> factor . quad_fact
    (77) termino -> factor . quad_fact termino1
    (75) quad_fact -> .

    TIMES           reduce using rule 75 (quad_fact -> .)
    DIVIDE          reduce using rule 75 (quad_fact -> .)
    PLUS            reduce using rule 75 (quad_fact -> .)
    MINUS           reduce using rule 75 (quad_fact -> .)
    LOWERTHAN       reduce using rule 75 (quad_fact -> .)
    MORETHAN        reduce using rule 75 (quad_fact -> .)
    DIFFERENT       reduce using rule 75 (quad_fact -> .)
    DOUBLEEQUAL     reduce using rule 75 (quad_fact -> .)
    RPAREN          reduce using rule 75 (quad_fact -> .)
    SEMICOLON       reduce using rule 75 (quad_fact -> .)

    quad_fact                      shift and go to state 86

state 68

    (90) var_cte -> CTE_F . push_cte
    (86) push_cte -> .

    TIMES           reduce using rule 86 (push_cte -> .)
    DIVIDE          reduce using rule 86 (push_cte -> .)
    PLUS            reduce using rule 86 (push_cte -> .)
    MINUS           reduce using rule 86 (push_cte -> .)
    LOWERTHAN       reduce using rule 86 (push_cte -> .)
    MORETHAN        reduce using rule 86 (push_cte -> .)
    DIFFERENT       reduce using rule 86 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 86 (push_cte -> .)
    RPAREN          reduce using rule 86 (push_cte -> .)
    SEMICOLON       reduce using rule 86 (push_cte -> .)

    push_cte                       shift and go to state 87

state 69

    (89) var_cte -> CTE_I . push_cte
    (86) push_cte -> .

    TIMES           reduce using rule 86 (push_cte -> .)
    DIVIDE          reduce using rule 86 (push_cte -> .)
    PLUS            reduce using rule 86 (push_cte -> .)
    MINUS           reduce using rule 86 (push_cte -> .)
    LOWERTHAN       reduce using rule 86 (push_cte -> .)
    MORETHAN        reduce using rule 86 (push_cte -> .)
    DIFFERENT       reduce using rule 86 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 86 (push_cte -> .)
    RPAREN          reduce using rule 86 (push_cte -> .)
    SEMICOLON       reduce using rule 86 (push_cte -> .)

    push_cte                       shift and go to state 88

state 70

    (80) factor -> LPAREN . expresion RPAREN
    (63) expresion -> . exp
    (64) expresion -> . exp comp exp quad_comp
    (70) exp -> . termino quad_term
    (71) exp -> . termino quad_term exp1
    (76) termino -> . factor quad_fact
    (77) termino -> . factor quad_fact termino1
    (80) factor -> . LPAREN expresion RPAREN
    (81) factor -> . factorAux
    (82) factorAux -> . PLUS push_poper var_cte
    (83) factorAux -> . MINUS push_poper var_cte
    (84) factorAux -> . var_cte
    (88) var_cte -> . ID push_id
    (89) var_cte -> . CTE_I push_cte
    (90) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 70
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 71
    CTE_I           shift and go to state 69
    CTE_F           shift and go to state 68

    expresion                      shift and go to state 89
    factor                         shift and go to state 67
    termino                        shift and go to state 64
    exp                            shift and go to state 73
    factorAux                      shift and go to state 74
    var_cte                        shift and go to state 63

state 71

    (88) var_cte -> ID . push_id
    (85) push_id -> .

    TIMES           reduce using rule 85 (push_id -> .)
    DIVIDE          reduce using rule 85 (push_id -> .)
    PLUS            reduce using rule 85 (push_id -> .)
    MINUS           reduce using rule 85 (push_id -> .)
    LOWERTHAN       reduce using rule 85 (push_id -> .)
    MORETHAN        reduce using rule 85 (push_id -> .)
    DIFFERENT       reduce using rule 85 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 85 (push_id -> .)
    RPAREN          reduce using rule 85 (push_id -> .)
    SEMICOLON       reduce using rule 85 (push_id -> .)

    push_id                        shift and go to state 90

state 72

    (52) condicion -> IF LPAREN expresion . RPAREN cond bloque condFinal
    (53) condicion -> IF LPAREN expresion . RPAREN cond bloque ELSE condElse bloque condFinal

    RPAREN          shift and go to state 91


state 73

    (63) expresion -> exp .
    (64) expresion -> exp . comp exp quad_comp
    (65) comp -> . LOWERTHAN push_poper
    (66) comp -> . MORETHAN push_poper
    (67) comp -> . DIFFERENT push_poper
    (68) comp -> . DOUBLEEQUAL push_poper

    RPAREN          reduce using rule 63 (expresion -> exp .)
    SEMICOLON       reduce using rule 63 (expresion -> exp .)
    LOWERTHAN       shift and go to state 94
    MORETHAN        shift and go to state 96
    DIFFERENT       shift and go to state 92
    DOUBLEEQUAL     shift and go to state 93

    comp                           shift and go to state 95

state 74

    (81) factor -> factorAux .

    TIMES           reduce using rule 81 (factor -> factorAux .)
    DIVIDE          reduce using rule 81 (factor -> factorAux .)
    PLUS            reduce using rule 81 (factor -> factorAux .)
    MINUS           reduce using rule 81 (factor -> factorAux .)
    LOWERTHAN       reduce using rule 81 (factor -> factorAux .)
    MORETHAN        reduce using rule 81 (factor -> factorAux .)
    DIFFERENT       reduce using rule 81 (factor -> factorAux .)
    DOUBLEEQUAL     reduce using rule 81 (factor -> factorAux .)
    SEMICOLON       reduce using rule 81 (factor -> factorAux .)
    RPAREN          reduce using rule 81 (factor -> factorAux .)


state 75

    (51) comparacion -> ID push_id DOUBLEEQUAL . push_poper expresion SEMICOLON
    (87) push_poper -> .

    LPAREN          reduce using rule 87 (push_poper -> .)
    PLUS            reduce using rule 87 (push_poper -> .)
    MINUS           reduce using rule 87 (push_poper -> .)
    ID              reduce using rule 87 (push_poper -> .)
    CTE_I           reduce using rule 87 (push_poper -> .)
    CTE_F           reduce using rule 87 (push_poper -> .)

    push_poper                     shift and go to state 97

state 76

    (49) asignacion -> ID push_id EQUAL . push_poper expresion create_asign SEMICOLON
    (87) push_poper -> .

    LPAREN          reduce using rule 87 (push_poper -> .)
    PLUS            reduce using rule 87 (push_poper -> .)
    MINUS           reduce using rule 87 (push_poper -> .)
    ID              reduce using rule 87 (push_poper -> .)
    CTE_I           reduce using rule 87 (push_poper -> .)
    CTE_F           reduce using rule 87 (push_poper -> .)

    push_poper                     shift and go to state 98

state 77

    (42) loopFromDo -> FROM LPAREN ID . EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    EQUAL           shift and go to state 99


state 78

    (38) while -> WHILE while1 LPAREN . expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (63) expresion -> . exp
    (64) expresion -> . exp comp exp quad_comp
    (70) exp -> . termino quad_term
    (71) exp -> . termino quad_term exp1
    (76) termino -> . factor quad_fact
    (77) termino -> . factor quad_fact termino1
    (80) factor -> . LPAREN expresion RPAREN
    (81) factor -> . factorAux
    (82) factorAux -> . PLUS push_poper var_cte
    (83) factorAux -> . MINUS push_poper var_cte
    (84) factorAux -> . var_cte
    (88) var_cte -> . ID push_id
    (89) var_cte -> . CTE_I push_cte
    (90) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 70
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 71
    CTE_I           shift and go to state 69
    CTE_F           shift and go to state 68

    expresion                      shift and go to state 100
    factor                         shift and go to state 67
    var_cte                        shift and go to state 63
    termino                        shift and go to state 64
    exp                            shift and go to state 73
    factorAux                      shift and go to state 74

state 79

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . RBRACE funcionSeis
    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux RBRACE funcionSeis
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . RBRACE funcionSeis function
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux RBRACE funcionSeis function
    (8) vars -> . VAR varAux1

    RBRACE          shift and go to state 101
    VAR             shift and go to state 8

    vars                           shift and go to state 102

state 80

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE RBRACE funcionSeis
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux RBRACE funcionSeis
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE RBRACE funcionSeis function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux RBRACE funcionSeis function

    LBRACE          shift and go to state 103


state 81

    (30) param -> tipo ID . funcionTres
    (31) param -> tipo ID . COMA funcionTres funcionCuatro param
    (33) funcionTres -> .

    COMA            shift and go to state 105
    RPAREN          reduce using rule 33 (funcionTres -> .)

    funcionTres                    shift and go to state 104

state 82

    (57) escritura -> PRINT push_poper LPAREN exp . RPAREN quad_print SEMICOLON

    RPAREN          shift and go to state 106


state 83

    (70) exp -> termino quad_term .
    (71) exp -> termino quad_term . exp1
    (72) exp1 -> . PLUS push_poper exp
    (73) exp1 -> . MINUS push_poper exp

    LOWERTHAN       reduce using rule 70 (exp -> termino quad_term .)
    MORETHAN        reduce using rule 70 (exp -> termino quad_term .)
    DIFFERENT       reduce using rule 70 (exp -> termino quad_term .)
    DOUBLEEQUAL     reduce using rule 70 (exp -> termino quad_term .)
    RPAREN          reduce using rule 70 (exp -> termino quad_term .)
    SEMICOLON       reduce using rule 70 (exp -> termino quad_term .)
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109

    exp1                           shift and go to state 107

state 84

    (83) factorAux -> MINUS push_poper . var_cte
    (88) var_cte -> . ID push_id
    (89) var_cte -> . CTE_I push_cte
    (90) var_cte -> . CTE_F push_cte

    ID              shift and go to state 71
    CTE_I           shift and go to state 69
    CTE_F           shift and go to state 68

    var_cte                        shift and go to state 110

state 85

    (82) factorAux -> PLUS push_poper . var_cte
    (88) var_cte -> . ID push_id
    (89) var_cte -> . CTE_I push_cte
    (90) var_cte -> . CTE_F push_cte

    ID              shift and go to state 71
    CTE_I           shift and go to state 69
    CTE_F           shift and go to state 68

    var_cte                        shift and go to state 111

state 86

    (76) termino -> factor quad_fact .
    (77) termino -> factor quad_fact . termino1
    (78) termino1 -> . TIMES push_poper termino
    (79) termino1 -> . DIVIDE push_poper termino

    PLUS            reduce using rule 76 (termino -> factor quad_fact .)
    MINUS           reduce using rule 76 (termino -> factor quad_fact .)
    LOWERTHAN       reduce using rule 76 (termino -> factor quad_fact .)
    MORETHAN        reduce using rule 76 (termino -> factor quad_fact .)
    DIFFERENT       reduce using rule 76 (termino -> factor quad_fact .)
    DOUBLEEQUAL     reduce using rule 76 (termino -> factor quad_fact .)
    SEMICOLON       reduce using rule 76 (termino -> factor quad_fact .)
    RPAREN          reduce using rule 76 (termino -> factor quad_fact .)
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 112

    termino1                       shift and go to state 113

state 87

    (90) var_cte -> CTE_F push_cte .

    TIMES           reduce using rule 90 (var_cte -> CTE_F push_cte .)
    DIVIDE          reduce using rule 90 (var_cte -> CTE_F push_cte .)
    PLUS            reduce using rule 90 (var_cte -> CTE_F push_cte .)
    MINUS           reduce using rule 90 (var_cte -> CTE_F push_cte .)
    LOWERTHAN       reduce using rule 90 (var_cte -> CTE_F push_cte .)
    MORETHAN        reduce using rule 90 (var_cte -> CTE_F push_cte .)
    DIFFERENT       reduce using rule 90 (var_cte -> CTE_F push_cte .)
    DOUBLEEQUAL     reduce using rule 90 (var_cte -> CTE_F push_cte .)
    RPAREN          reduce using rule 90 (var_cte -> CTE_F push_cte .)
    SEMICOLON       reduce using rule 90 (var_cte -> CTE_F push_cte .)


state 88

    (89) var_cte -> CTE_I push_cte .

    TIMES           reduce using rule 89 (var_cte -> CTE_I push_cte .)
    DIVIDE          reduce using rule 89 (var_cte -> CTE_I push_cte .)
    PLUS            reduce using rule 89 (var_cte -> CTE_I push_cte .)
    MINUS           reduce using rule 89 (var_cte -> CTE_I push_cte .)
    LOWERTHAN       reduce using rule 89 (var_cte -> CTE_I push_cte .)
    MORETHAN        reduce using rule 89 (var_cte -> CTE_I push_cte .)
    DIFFERENT       reduce using rule 89 (var_cte -> CTE_I push_cte .)
    DOUBLEEQUAL     reduce using rule 89 (var_cte -> CTE_I push_cte .)
    RPAREN          reduce using rule 89 (var_cte -> CTE_I push_cte .)
    SEMICOLON       reduce using rule 89 (var_cte -> CTE_I push_cte .)


state 89

    (80) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 115


state 90

    (88) var_cte -> ID push_id .

    TIMES           reduce using rule 88 (var_cte -> ID push_id .)
    DIVIDE          reduce using rule 88 (var_cte -> ID push_id .)
    PLUS            reduce using rule 88 (var_cte -> ID push_id .)
    MINUS           reduce using rule 88 (var_cte -> ID push_id .)
    LOWERTHAN       reduce using rule 88 (var_cte -> ID push_id .)
    MORETHAN        reduce using rule 88 (var_cte -> ID push_id .)
    DIFFERENT       reduce using rule 88 (var_cte -> ID push_id .)
    DOUBLEEQUAL     reduce using rule 88 (var_cte -> ID push_id .)
    RPAREN          reduce using rule 88 (var_cte -> ID push_id .)
    SEMICOLON       reduce using rule 88 (var_cte -> ID push_id .)


state 91

    (52) condicion -> IF LPAREN expresion RPAREN . cond bloque condFinal
    (53) condicion -> IF LPAREN expresion RPAREN . cond bloque ELSE condElse bloque condFinal
    (54) cond -> .

    LBRACE          reduce using rule 54 (cond -> .)

    cond                           shift and go to state 116

state 92

    (67) comp -> DIFFERENT . push_poper
    (87) push_poper -> .

    LPAREN          reduce using rule 87 (push_poper -> .)
    PLUS            reduce using rule 87 (push_poper -> .)
    MINUS           reduce using rule 87 (push_poper -> .)
    ID              reduce using rule 87 (push_poper -> .)
    CTE_I           reduce using rule 87 (push_poper -> .)
    CTE_F           reduce using rule 87 (push_poper -> .)

    push_poper                     shift and go to state 117

state 93

    (68) comp -> DOUBLEEQUAL . push_poper
    (87) push_poper -> .

    LPAREN          reduce using rule 87 (push_poper -> .)
    PLUS            reduce using rule 87 (push_poper -> .)
    MINUS           reduce using rule 87 (push_poper -> .)
    ID              reduce using rule 87 (push_poper -> .)
    CTE_I           reduce using rule 87 (push_poper -> .)
    CTE_F           reduce using rule 87 (push_poper -> .)

    push_poper                     shift and go to state 118

state 94

    (65) comp -> LOWERTHAN . push_poper
    (87) push_poper -> .

    LPAREN          reduce using rule 87 (push_poper -> .)
    PLUS            reduce using rule 87 (push_poper -> .)
    MINUS           reduce using rule 87 (push_poper -> .)
    ID              reduce using rule 87 (push_poper -> .)
    CTE_I           reduce using rule 87 (push_poper -> .)
    CTE_F           reduce using rule 87 (push_poper -> .)

    push_poper                     shift and go to state 119

state 95

    (64) expresion -> exp comp . exp quad_comp
    (70) exp -> . termino quad_term
    (71) exp -> . termino quad_term exp1
    (76) termino -> . factor quad_fact
    (77) termino -> . factor quad_fact termino1
    (80) factor -> . LPAREN expresion RPAREN
    (81) factor -> . factorAux
    (82) factorAux -> . PLUS push_poper var_cte
    (83) factorAux -> . MINUS push_poper var_cte
    (84) factorAux -> . var_cte
    (88) var_cte -> . ID push_id
    (89) var_cte -> . CTE_I push_cte
    (90) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 70
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 71
    CTE_I           shift and go to state 69
    CTE_F           shift and go to state 68

    factor                         shift and go to state 67
    termino                        shift and go to state 64
    exp                            shift and go to state 120
    factorAux                      shift and go to state 74
    var_cte                        shift and go to state 63

state 96

    (66) comp -> MORETHAN . push_poper
    (87) push_poper -> .

    LPAREN          reduce using rule 87 (push_poper -> .)
    PLUS            reduce using rule 87 (push_poper -> .)
    MINUS           reduce using rule 87 (push_poper -> .)
    ID              reduce using rule 87 (push_poper -> .)
    CTE_I           reduce using rule 87 (push_poper -> .)
    CTE_F           reduce using rule 87 (push_poper -> .)

    push_poper                     shift and go to state 121

state 97

    (51) comparacion -> ID push_id DOUBLEEQUAL push_poper . expresion SEMICOLON
    (63) expresion -> . exp
    (64) expresion -> . exp comp exp quad_comp
    (70) exp -> . termino quad_term
    (71) exp -> . termino quad_term exp1
    (76) termino -> . factor quad_fact
    (77) termino -> . factor quad_fact termino1
    (80) factor -> . LPAREN expresion RPAREN
    (81) factor -> . factorAux
    (82) factorAux -> . PLUS push_poper var_cte
    (83) factorAux -> . MINUS push_poper var_cte
    (84) factorAux -> . var_cte
    (88) var_cte -> . ID push_id
    (89) var_cte -> . CTE_I push_cte
    (90) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 70
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 71
    CTE_I           shift and go to state 69
    CTE_F           shift and go to state 68

    expresion                      shift and go to state 122
    factor                         shift and go to state 67
    var_cte                        shift and go to state 63
    termino                        shift and go to state 64
    exp                            shift and go to state 73
    factorAux                      shift and go to state 74

state 98

    (49) asignacion -> ID push_id EQUAL push_poper . expresion create_asign SEMICOLON
    (63) expresion -> . exp
    (64) expresion -> . exp comp exp quad_comp
    (70) exp -> . termino quad_term
    (71) exp -> . termino quad_term exp1
    (76) termino -> . factor quad_fact
    (77) termino -> . factor quad_fact termino1
    (80) factor -> . LPAREN expresion RPAREN
    (81) factor -> . factorAux
    (82) factorAux -> . PLUS push_poper var_cte
    (83) factorAux -> . MINUS push_poper var_cte
    (84) factorAux -> . var_cte
    (88) var_cte -> . ID push_id
    (89) var_cte -> . CTE_I push_cte
    (90) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 70
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 71
    CTE_I           shift and go to state 69
    CTE_F           shift and go to state 68

    expresion                      shift and go to state 123
    var_cte                        shift and go to state 63
    termino                        shift and go to state 64
    exp                            shift and go to state 73
    factorAux                      shift and go to state 74
    factor                         shift and go to state 67

state 99

    (42) loopFromDo -> FROM LPAREN ID EQUAL . expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (63) expresion -> . exp
    (64) expresion -> . exp comp exp quad_comp
    (70) exp -> . termino quad_term
    (71) exp -> . termino quad_term exp1
    (76) termino -> . factor quad_fact
    (77) termino -> . factor quad_fact termino1
    (80) factor -> . LPAREN expresion RPAREN
    (81) factor -> . factorAux
    (82) factorAux -> . PLUS push_poper var_cte
    (83) factorAux -> . MINUS push_poper var_cte
    (84) factorAux -> . var_cte
    (88) var_cte -> . ID push_id
    (89) var_cte -> . CTE_I push_cte
    (90) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 70
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 71
    CTE_I           shift and go to state 69
    CTE_F           shift and go to state 68

    expresion                      shift and go to state 124
    factor                         shift and go to state 67
    var_cte                        shift and go to state 63
    termino                        shift and go to state 64
    exp                            shift and go to state 73
    factorAux                      shift and go to state 74

state 100

    (38) while -> WHILE while1 LPAREN expresion . RPAREN while2 LBRACE bloqueAux RBRACE while3

    RPAREN          shift and go to state 125


state 101

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE . funcionSeis
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE . funcionSeis function
    (35) funcionSeis -> .

    FUNCTION        reduce using rule 35 (funcionSeis -> .)
    $end            reduce using rule 35 (funcionSeis -> .)

    funcionSeis                    shift and go to state 126

state 102

    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux RBRACE funcionSeis
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux RBRACE funcionSeis function
    (36) bloqueAux -> . estatuto
    (37) bloqueAux -> . estatuto bloqueAux
    (43) estatuto -> . asignacion
    (44) estatuto -> . condicion
    (45) estatuto -> . escritura
    (46) estatuto -> . while
    (47) estatuto -> . loopFromDo
    (48) estatuto -> . comparacion
    (49) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (52) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (53) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (57) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (38) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (42) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (51) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 42
    FROM            shift and go to state 40

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 39
    asignacion                     shift and go to state 41
    bloqueAux                      shift and go to state 127
    while                          shift and go to state 44
    comparacion                    shift and go to state 45
    escritura                      shift and go to state 46

state 103

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . RBRACE funcionSeis
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux RBRACE funcionSeis
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . RBRACE funcionSeis function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux RBRACE funcionSeis function
    (8) vars -> . VAR varAux1

    RBRACE          shift and go to state 128
    VAR             shift and go to state 8

    vars                           shift and go to state 129

state 104

    (30) param -> tipo ID funcionTres .

    RPAREN          reduce using rule 30 (param -> tipo ID funcionTres .)


state 105

    (31) param -> tipo ID COMA . funcionTres funcionCuatro param
    (33) funcionTres -> .

    INT             reduce using rule 33 (funcionTres -> .)
    FLOAT           reduce using rule 33 (funcionTres -> .)
    CHAR            reduce using rule 33 (funcionTres -> .)

    funcionTres                    shift and go to state 130

state 106

    (57) escritura -> PRINT push_poper LPAREN exp RPAREN . quad_print SEMICOLON
    (58) quad_print -> .

    SEMICOLON       reduce using rule 58 (quad_print -> .)

    quad_print                     shift and go to state 131

state 107

    (71) exp -> termino quad_term exp1 .

    LOWERTHAN       reduce using rule 71 (exp -> termino quad_term exp1 .)
    MORETHAN        reduce using rule 71 (exp -> termino quad_term exp1 .)
    DIFFERENT       reduce using rule 71 (exp -> termino quad_term exp1 .)
    DOUBLEEQUAL     reduce using rule 71 (exp -> termino quad_term exp1 .)
    RPAREN          reduce using rule 71 (exp -> termino quad_term exp1 .)
    SEMICOLON       reduce using rule 71 (exp -> termino quad_term exp1 .)


state 108

    (72) exp1 -> PLUS . push_poper exp
    (87) push_poper -> .

    LPAREN          reduce using rule 87 (push_poper -> .)
    PLUS            reduce using rule 87 (push_poper -> .)
    MINUS           reduce using rule 87 (push_poper -> .)
    ID              reduce using rule 87 (push_poper -> .)
    CTE_I           reduce using rule 87 (push_poper -> .)
    CTE_F           reduce using rule 87 (push_poper -> .)

    push_poper                     shift and go to state 132

state 109

    (73) exp1 -> MINUS . push_poper exp
    (87) push_poper -> .

    LPAREN          reduce using rule 87 (push_poper -> .)
    PLUS            reduce using rule 87 (push_poper -> .)
    MINUS           reduce using rule 87 (push_poper -> .)
    ID              reduce using rule 87 (push_poper -> .)
    CTE_I           reduce using rule 87 (push_poper -> .)
    CTE_F           reduce using rule 87 (push_poper -> .)

    push_poper                     shift and go to state 133

state 110

    (83) factorAux -> MINUS push_poper var_cte .

    TIMES           reduce using rule 83 (factorAux -> MINUS push_poper var_cte .)
    DIVIDE          reduce using rule 83 (factorAux -> MINUS push_poper var_cte .)
    PLUS            reduce using rule 83 (factorAux -> MINUS push_poper var_cte .)
    MINUS           reduce using rule 83 (factorAux -> MINUS push_poper var_cte .)
    RPAREN          reduce using rule 83 (factorAux -> MINUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 83 (factorAux -> MINUS push_poper var_cte .)
    MORETHAN        reduce using rule 83 (factorAux -> MINUS push_poper var_cte .)
    DIFFERENT       reduce using rule 83 (factorAux -> MINUS push_poper var_cte .)
    DOUBLEEQUAL     reduce using rule 83 (factorAux -> MINUS push_poper var_cte .)
    SEMICOLON       reduce using rule 83 (factorAux -> MINUS push_poper var_cte .)


state 111

    (82) factorAux -> PLUS push_poper var_cte .

    TIMES           reduce using rule 82 (factorAux -> PLUS push_poper var_cte .)
    DIVIDE          reduce using rule 82 (factorAux -> PLUS push_poper var_cte .)
    PLUS            reduce using rule 82 (factorAux -> PLUS push_poper var_cte .)
    MINUS           reduce using rule 82 (factorAux -> PLUS push_poper var_cte .)
    RPAREN          reduce using rule 82 (factorAux -> PLUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 82 (factorAux -> PLUS push_poper var_cte .)
    MORETHAN        reduce using rule 82 (factorAux -> PLUS push_poper var_cte .)
    DIFFERENT       reduce using rule 82 (factorAux -> PLUS push_poper var_cte .)
    DOUBLEEQUAL     reduce using rule 82 (factorAux -> PLUS push_poper var_cte .)
    SEMICOLON       reduce using rule 82 (factorAux -> PLUS push_poper var_cte .)


state 112

    (79) termino1 -> DIVIDE . push_poper termino
    (87) push_poper -> .

    LPAREN          reduce using rule 87 (push_poper -> .)
    PLUS            reduce using rule 87 (push_poper -> .)
    MINUS           reduce using rule 87 (push_poper -> .)
    ID              reduce using rule 87 (push_poper -> .)
    CTE_I           reduce using rule 87 (push_poper -> .)
    CTE_F           reduce using rule 87 (push_poper -> .)

    push_poper                     shift and go to state 134

state 113

    (77) termino -> factor quad_fact termino1 .

    PLUS            reduce using rule 77 (termino -> factor quad_fact termino1 .)
    MINUS           reduce using rule 77 (termino -> factor quad_fact termino1 .)
    LOWERTHAN       reduce using rule 77 (termino -> factor quad_fact termino1 .)
    MORETHAN        reduce using rule 77 (termino -> factor quad_fact termino1 .)
    DIFFERENT       reduce using rule 77 (termino -> factor quad_fact termino1 .)
    DOUBLEEQUAL     reduce using rule 77 (termino -> factor quad_fact termino1 .)
    SEMICOLON       reduce using rule 77 (termino -> factor quad_fact termino1 .)
    RPAREN          reduce using rule 77 (termino -> factor quad_fact termino1 .)


state 114

    (78) termino1 -> TIMES . push_poper termino
    (87) push_poper -> .

    LPAREN          reduce using rule 87 (push_poper -> .)
    PLUS            reduce using rule 87 (push_poper -> .)
    MINUS           reduce using rule 87 (push_poper -> .)
    ID              reduce using rule 87 (push_poper -> .)
    CTE_I           reduce using rule 87 (push_poper -> .)
    CTE_F           reduce using rule 87 (push_poper -> .)

    push_poper                     shift and go to state 135

state 115

    (80) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 80 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 80 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 80 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 80 (factor -> LPAREN expresion RPAREN .)
    LOWERTHAN       reduce using rule 80 (factor -> LPAREN expresion RPAREN .)
    MORETHAN        reduce using rule 80 (factor -> LPAREN expresion RPAREN .)
    DIFFERENT       reduce using rule 80 (factor -> LPAREN expresion RPAREN .)
    DOUBLEEQUAL     reduce using rule 80 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 80 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 80 (factor -> LPAREN expresion RPAREN .)


state 116

    (52) condicion -> IF LPAREN expresion RPAREN cond . bloque condFinal
    (53) condicion -> IF LPAREN expresion RPAREN cond . bloque ELSE condElse bloque condFinal
    (20) bloque -> . LBRACE RBRACE
    (21) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 136

    bloque                         shift and go to state 137

state 117

    (67) comp -> DIFFERENT push_poper .

    LPAREN          reduce using rule 67 (comp -> DIFFERENT push_poper .)
    PLUS            reduce using rule 67 (comp -> DIFFERENT push_poper .)
    MINUS           reduce using rule 67 (comp -> DIFFERENT push_poper .)
    ID              reduce using rule 67 (comp -> DIFFERENT push_poper .)
    CTE_I           reduce using rule 67 (comp -> DIFFERENT push_poper .)
    CTE_F           reduce using rule 67 (comp -> DIFFERENT push_poper .)


state 118

    (68) comp -> DOUBLEEQUAL push_poper .

    LPAREN          reduce using rule 68 (comp -> DOUBLEEQUAL push_poper .)
    PLUS            reduce using rule 68 (comp -> DOUBLEEQUAL push_poper .)
    MINUS           reduce using rule 68 (comp -> DOUBLEEQUAL push_poper .)
    ID              reduce using rule 68 (comp -> DOUBLEEQUAL push_poper .)
    CTE_I           reduce using rule 68 (comp -> DOUBLEEQUAL push_poper .)
    CTE_F           reduce using rule 68 (comp -> DOUBLEEQUAL push_poper .)


state 119

    (65) comp -> LOWERTHAN push_poper .

    LPAREN          reduce using rule 65 (comp -> LOWERTHAN push_poper .)
    PLUS            reduce using rule 65 (comp -> LOWERTHAN push_poper .)
    MINUS           reduce using rule 65 (comp -> LOWERTHAN push_poper .)
    ID              reduce using rule 65 (comp -> LOWERTHAN push_poper .)
    CTE_I           reduce using rule 65 (comp -> LOWERTHAN push_poper .)
    CTE_F           reduce using rule 65 (comp -> LOWERTHAN push_poper .)


state 120

    (64) expresion -> exp comp exp . quad_comp
    (69) quad_comp -> .

    RPAREN          reduce using rule 69 (quad_comp -> .)
    SEMICOLON       reduce using rule 69 (quad_comp -> .)

    quad_comp                      shift and go to state 138

state 121

    (66) comp -> MORETHAN push_poper .

    LPAREN          reduce using rule 66 (comp -> MORETHAN push_poper .)
    PLUS            reduce using rule 66 (comp -> MORETHAN push_poper .)
    MINUS           reduce using rule 66 (comp -> MORETHAN push_poper .)
    ID              reduce using rule 66 (comp -> MORETHAN push_poper .)
    CTE_I           reduce using rule 66 (comp -> MORETHAN push_poper .)
    CTE_F           reduce using rule 66 (comp -> MORETHAN push_poper .)


state 122

    (51) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion . SEMICOLON

    SEMICOLON       shift and go to state 139


state 123

    (49) asignacion -> ID push_id EQUAL push_poper expresion . create_asign SEMICOLON
    (50) create_asign -> .

    SEMICOLON       reduce using rule 50 (create_asign -> .)

    create_asign                   shift and go to state 140

state 124

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion . RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    RPAREN          shift and go to state 141


state 125

    (38) while -> WHILE while1 LPAREN expresion RPAREN . while2 LBRACE bloqueAux RBRACE while3
    (40) while2 -> .

    LBRACE          reduce using rule 40 (while2 -> .)

    while2                         shift and go to state 142

state 126

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis .
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function

    $end            reduce using rule 22 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 143

state 127

    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . RBRACE funcionSeis
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . RBRACE funcionSeis function

    RBRACE          shift and go to state 144


state 128

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE . funcionSeis
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE . funcionSeis function
    (35) funcionSeis -> .

    FUNCTION        reduce using rule 35 (funcionSeis -> .)
    $end            reduce using rule 35 (funcionSeis -> .)

    funcionSeis                    shift and go to state 145

state 129

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux RBRACE funcionSeis
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux RBRACE funcionSeis function
    (36) bloqueAux -> . estatuto
    (37) bloqueAux -> . estatuto bloqueAux
    (43) estatuto -> . asignacion
    (44) estatuto -> . condicion
    (45) estatuto -> . escritura
    (46) estatuto -> . while
    (47) estatuto -> . loopFromDo
    (48) estatuto -> . comparacion
    (49) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (52) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (53) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (57) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (38) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (42) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (51) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 42
    FROM            shift and go to state 40

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 39
    asignacion                     shift and go to state 41
    bloqueAux                      shift and go to state 146
    while                          shift and go to state 44
    comparacion                    shift and go to state 45
    escritura                      shift and go to state 46

state 130

    (31) param -> tipo ID COMA funcionTres . funcionCuatro param
    (34) funcionCuatro -> .

    INT             reduce using rule 34 (funcionCuatro -> .)
    FLOAT           reduce using rule 34 (funcionCuatro -> .)
    CHAR            reduce using rule 34 (funcionCuatro -> .)

    funcionCuatro                  shift and go to state 147

state 131

    (57) escritura -> PRINT push_poper LPAREN exp RPAREN quad_print . SEMICOLON

    SEMICOLON       shift and go to state 148


state 132

    (72) exp1 -> PLUS push_poper . exp
    (70) exp -> . termino quad_term
    (71) exp -> . termino quad_term exp1
    (76) termino -> . factor quad_fact
    (77) termino -> . factor quad_fact termino1
    (80) factor -> . LPAREN expresion RPAREN
    (81) factor -> . factorAux
    (82) factorAux -> . PLUS push_poper var_cte
    (83) factorAux -> . MINUS push_poper var_cte
    (84) factorAux -> . var_cte
    (88) var_cte -> . ID push_id
    (89) var_cte -> . CTE_I push_cte
    (90) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 70
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 71
    CTE_I           shift and go to state 69
    CTE_F           shift and go to state 68

    termino                        shift and go to state 64
    exp                            shift and go to state 149
    factor                         shift and go to state 67
    factorAux                      shift and go to state 74
    var_cte                        shift and go to state 63

state 133

    (73) exp1 -> MINUS push_poper . exp
    (70) exp -> . termino quad_term
    (71) exp -> . termino quad_term exp1
    (76) termino -> . factor quad_fact
    (77) termino -> . factor quad_fact termino1
    (80) factor -> . LPAREN expresion RPAREN
    (81) factor -> . factorAux
    (82) factorAux -> . PLUS push_poper var_cte
    (83) factorAux -> . MINUS push_poper var_cte
    (84) factorAux -> . var_cte
    (88) var_cte -> . ID push_id
    (89) var_cte -> . CTE_I push_cte
    (90) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 70
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 71
    CTE_I           shift and go to state 69
    CTE_F           shift and go to state 68

    termino                        shift and go to state 64
    exp                            shift and go to state 150
    factor                         shift and go to state 67
    factorAux                      shift and go to state 74
    var_cte                        shift and go to state 63

state 134

    (79) termino1 -> DIVIDE push_poper . termino
    (76) termino -> . factor quad_fact
    (77) termino -> . factor quad_fact termino1
    (80) factor -> . LPAREN expresion RPAREN
    (81) factor -> . factorAux
    (82) factorAux -> . PLUS push_poper var_cte
    (83) factorAux -> . MINUS push_poper var_cte
    (84) factorAux -> . var_cte
    (88) var_cte -> . ID push_id
    (89) var_cte -> . CTE_I push_cte
    (90) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 70
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 71
    CTE_I           shift and go to state 69
    CTE_F           shift and go to state 68

    termino                        shift and go to state 151
    factor                         shift and go to state 67
    factorAux                      shift and go to state 74
    var_cte                        shift and go to state 63

state 135

    (78) termino1 -> TIMES push_poper . termino
    (76) termino -> . factor quad_fact
    (77) termino -> . factor quad_fact termino1
    (80) factor -> . LPAREN expresion RPAREN
    (81) factor -> . factorAux
    (82) factorAux -> . PLUS push_poper var_cte
    (83) factorAux -> . MINUS push_poper var_cte
    (84) factorAux -> . var_cte
    (88) var_cte -> . ID push_id
    (89) var_cte -> . CTE_I push_cte
    (90) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 70
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 71
    CTE_I           shift and go to state 69
    CTE_F           shift and go to state 68

    termino                        shift and go to state 152
    factor                         shift and go to state 67
    factorAux                      shift and go to state 74
    var_cte                        shift and go to state 63

state 136

    (20) bloque -> LBRACE . RBRACE
    (21) bloque -> LBRACE . bloqueAux RBRACE
    (36) bloqueAux -> . estatuto
    (37) bloqueAux -> . estatuto bloqueAux
    (43) estatuto -> . asignacion
    (44) estatuto -> . condicion
    (45) estatuto -> . escritura
    (46) estatuto -> . while
    (47) estatuto -> . loopFromDo
    (48) estatuto -> . comparacion
    (49) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (52) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (53) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (57) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (38) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (42) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (51) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    RBRACE          shift and go to state 153
    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 42
    FROM            shift and go to state 40

    asignacion                     shift and go to state 41
    estatuto                       shift and go to state 35
    bloqueAux                      shift and go to state 154
    while                          shift and go to state 44
    condicion                      shift and go to state 37
    comparacion                    shift and go to state 45
    loopFromDo                     shift and go to state 39
    escritura                      shift and go to state 46

state 137

    (52) condicion -> IF LPAREN expresion RPAREN cond bloque . condFinal
    (53) condicion -> IF LPAREN expresion RPAREN cond bloque . ELSE condElse bloque condFinal
    (56) condFinal -> .

    ELSE            shift and go to state 156
    ID              reduce using rule 56 (condFinal -> .)
    IF              reduce using rule 56 (condFinal -> .)
    PRINT           reduce using rule 56 (condFinal -> .)
    WHILE           reduce using rule 56 (condFinal -> .)
    FROM            reduce using rule 56 (condFinal -> .)
    RBRACE          reduce using rule 56 (condFinal -> .)

    condFinal                      shift and go to state 155

state 138

    (64) expresion -> exp comp exp quad_comp .

    RPAREN          reduce using rule 64 (expresion -> exp comp exp quad_comp .)
    SEMICOLON       reduce using rule 64 (expresion -> exp comp exp quad_comp .)


state 139

    (51) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .

    ID              reduce using rule 51 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    IF              reduce using rule 51 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    PRINT           reduce using rule 51 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    WHILE           reduce using rule 51 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    FROM            reduce using rule 51 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    RBRACE          reduce using rule 51 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)


state 140

    (49) asignacion -> ID push_id EQUAL push_poper expresion create_asign . SEMICOLON

    SEMICOLON       shift and go to state 157


state 141

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN . TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    TO              shift and go to state 158


state 142

    (38) while -> WHILE while1 LPAREN expresion RPAREN while2 . LBRACE bloqueAux RBRACE while3

    LBRACE          shift and go to state 159


state 143

    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis function .

    $end            reduce using rule 24 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis function .)


state 144

    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE . funcionSeis
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE . funcionSeis function
    (35) funcionSeis -> .

    FUNCTION        reduce using rule 35 (funcionSeis -> .)
    $end            reduce using rule 35 (funcionSeis -> .)

    funcionSeis                    shift and go to state 160

state 145

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis .
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function

    $end            reduce using rule 26 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 161

state 146

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . RBRACE funcionSeis
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . RBRACE funcionSeis function

    RBRACE          shift and go to state 162


state 147

    (31) param -> tipo ID COMA funcionTres funcionCuatro . param
    (30) param -> . tipo ID funcionTres
    (31) param -> . tipo ID COMA funcionTres funcionCuatro param
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

    tipo                           shift and go to state 60
    param                          shift and go to state 163

state 148

    (57) escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .

    ID              reduce using rule 57 (escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .)
    IF              reduce using rule 57 (escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .)
    PRINT           reduce using rule 57 (escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .)
    WHILE           reduce using rule 57 (escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .)
    FROM            reduce using rule 57 (escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .)
    RBRACE          reduce using rule 57 (escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .)


state 149

    (72) exp1 -> PLUS push_poper exp .

    LOWERTHAN       reduce using rule 72 (exp1 -> PLUS push_poper exp .)
    MORETHAN        reduce using rule 72 (exp1 -> PLUS push_poper exp .)
    DIFFERENT       reduce using rule 72 (exp1 -> PLUS push_poper exp .)
    DOUBLEEQUAL     reduce using rule 72 (exp1 -> PLUS push_poper exp .)
    RPAREN          reduce using rule 72 (exp1 -> PLUS push_poper exp .)
    SEMICOLON       reduce using rule 72 (exp1 -> PLUS push_poper exp .)


state 150

    (73) exp1 -> MINUS push_poper exp .

    LOWERTHAN       reduce using rule 73 (exp1 -> MINUS push_poper exp .)
    MORETHAN        reduce using rule 73 (exp1 -> MINUS push_poper exp .)
    DIFFERENT       reduce using rule 73 (exp1 -> MINUS push_poper exp .)
    DOUBLEEQUAL     reduce using rule 73 (exp1 -> MINUS push_poper exp .)
    RPAREN          reduce using rule 73 (exp1 -> MINUS push_poper exp .)
    SEMICOLON       reduce using rule 73 (exp1 -> MINUS push_poper exp .)


state 151

    (79) termino1 -> DIVIDE push_poper termino .

    PLUS            reduce using rule 79 (termino1 -> DIVIDE push_poper termino .)
    MINUS           reduce using rule 79 (termino1 -> DIVIDE push_poper termino .)
    LOWERTHAN       reduce using rule 79 (termino1 -> DIVIDE push_poper termino .)
    MORETHAN        reduce using rule 79 (termino1 -> DIVIDE push_poper termino .)
    DIFFERENT       reduce using rule 79 (termino1 -> DIVIDE push_poper termino .)
    DOUBLEEQUAL     reduce using rule 79 (termino1 -> DIVIDE push_poper termino .)
    RPAREN          reduce using rule 79 (termino1 -> DIVIDE push_poper termino .)
    SEMICOLON       reduce using rule 79 (termino1 -> DIVIDE push_poper termino .)


state 152

    (78) termino1 -> TIMES push_poper termino .

    PLUS            reduce using rule 78 (termino1 -> TIMES push_poper termino .)
    MINUS           reduce using rule 78 (termino1 -> TIMES push_poper termino .)
    LOWERTHAN       reduce using rule 78 (termino1 -> TIMES push_poper termino .)
    MORETHAN        reduce using rule 78 (termino1 -> TIMES push_poper termino .)
    DIFFERENT       reduce using rule 78 (termino1 -> TIMES push_poper termino .)
    DOUBLEEQUAL     reduce using rule 78 (termino1 -> TIMES push_poper termino .)
    RPAREN          reduce using rule 78 (termino1 -> TIMES push_poper termino .)
    SEMICOLON       reduce using rule 78 (termino1 -> TIMES push_poper termino .)


state 153

    (20) bloque -> LBRACE RBRACE .

    ELSE            reduce using rule 20 (bloque -> LBRACE RBRACE .)
    ID              reduce using rule 20 (bloque -> LBRACE RBRACE .)
    IF              reduce using rule 20 (bloque -> LBRACE RBRACE .)
    PRINT           reduce using rule 20 (bloque -> LBRACE RBRACE .)
    WHILE           reduce using rule 20 (bloque -> LBRACE RBRACE .)
    FROM            reduce using rule 20 (bloque -> LBRACE RBRACE .)
    RBRACE          reduce using rule 20 (bloque -> LBRACE RBRACE .)


state 154

    (21) bloque -> LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 164


state 155

    (52) condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .

    ID              reduce using rule 52 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    IF              reduce using rule 52 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    PRINT           reduce using rule 52 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    WHILE           reduce using rule 52 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    FROM            reduce using rule 52 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    RBRACE          reduce using rule 52 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)


state 156

    (53) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE . condElse bloque condFinal
    (55) condElse -> .

    LBRACE          reduce using rule 55 (condElse -> .)

    condElse                       shift and go to state 165

state 157

    (49) asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .

    ID              reduce using rule 49 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    IF              reduce using rule 49 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    PRINT           reduce using rule 49 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    WHILE           reduce using rule 49 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    FROM            reduce using rule 49 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    RBRACE          reduce using rule 49 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)


state 158

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO . LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    LPAREN          shift and go to state 166


state 159

    (38) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE . bloqueAux RBRACE while3
    (36) bloqueAux -> . estatuto
    (37) bloqueAux -> . estatuto bloqueAux
    (43) estatuto -> . asignacion
    (44) estatuto -> . condicion
    (45) estatuto -> . escritura
    (46) estatuto -> . while
    (47) estatuto -> . loopFromDo
    (48) estatuto -> . comparacion
    (49) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (52) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (53) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (57) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (38) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (42) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (51) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 42
    FROM            shift and go to state 40

    asignacion                     shift and go to state 41
    estatuto                       shift and go to state 35
    while                          shift and go to state 44
    bloqueAux                      shift and go to state 167
    condicion                      shift and go to state 37
    comparacion                    shift and go to state 45
    loopFromDo                     shift and go to state 39
    escritura                      shift and go to state 46

state 160

    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis .
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function

    $end            reduce using rule 23 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 168

state 161

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis function .

    $end            reduce using rule 28 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis function .)


state 162

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE . funcionSeis
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE . funcionSeis function
    (35) funcionSeis -> .

    FUNCTION        reduce using rule 35 (funcionSeis -> .)
    $end            reduce using rule 35 (funcionSeis -> .)

    funcionSeis                    shift and go to state 169

state 163

    (31) param -> tipo ID COMA funcionTres funcionCuatro param .

    RPAREN          reduce using rule 31 (param -> tipo ID COMA funcionTres funcionCuatro param .)


state 164

    (21) bloque -> LBRACE bloqueAux RBRACE .

    ELSE            reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    ID              reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    FROM            reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)


state 165

    (53) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse . bloque condFinal
    (20) bloque -> . LBRACE RBRACE
    (21) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 136

    bloque                         shift and go to state 170

state 166

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN . expresion RPAREN DO LBRACE bloqueAux RBRACE
    (63) expresion -> . exp
    (64) expresion -> . exp comp exp quad_comp
    (70) exp -> . termino quad_term
    (71) exp -> . termino quad_term exp1
    (76) termino -> . factor quad_fact
    (77) termino -> . factor quad_fact termino1
    (80) factor -> . LPAREN expresion RPAREN
    (81) factor -> . factorAux
    (82) factorAux -> . PLUS push_poper var_cte
    (83) factorAux -> . MINUS push_poper var_cte
    (84) factorAux -> . var_cte
    (88) var_cte -> . ID push_id
    (89) var_cte -> . CTE_I push_cte
    (90) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 70
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 71
    CTE_I           shift and go to state 69
    CTE_F           shift and go to state 68

    expresion                      shift and go to state 171
    factor                         shift and go to state 67
    var_cte                        shift and go to state 63
    termino                        shift and go to state 64
    exp                            shift and go to state 73
    factorAux                      shift and go to state 74

state 167

    (38) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux . RBRACE while3

    RBRACE          shift and go to state 172


state 168

    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function .

    $end            reduce using rule 25 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function .)


state 169

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis .
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE funcionSeis function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE funcionSeis function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function

    $end            reduce using rule 27 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 173

state 170

    (53) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque . condFinal
    (56) condFinal -> .

    ID              reduce using rule 56 (condFinal -> .)
    IF              reduce using rule 56 (condFinal -> .)
    PRINT           reduce using rule 56 (condFinal -> .)
    WHILE           reduce using rule 56 (condFinal -> .)
    FROM            reduce using rule 56 (condFinal -> .)
    RBRACE          reduce using rule 56 (condFinal -> .)

    condFinal                      shift and go to state 174

state 171

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion . RPAREN DO LBRACE bloqueAux RBRACE

    RPAREN          shift and go to state 175


state 172

    (38) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE . while3
    (41) while3 -> .

    ID              reduce using rule 41 (while3 -> .)
    IF              reduce using rule 41 (while3 -> .)
    PRINT           reduce using rule 41 (while3 -> .)
    WHILE           reduce using rule 41 (while3 -> .)
    FROM            reduce using rule 41 (while3 -> .)
    RBRACE          reduce using rule 41 (while3 -> .)

    while3                         shift and go to state 176

state 173

    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function .

    $end            reduce using rule 29 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE funcionSeis function .)


state 174

    (53) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .

    ID              reduce using rule 53 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    IF              reduce using rule 53 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    PRINT           reduce using rule 53 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    WHILE           reduce using rule 53 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    FROM            reduce using rule 53 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    RBRACE          reduce using rule 53 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)


state 175

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN . DO LBRACE bloqueAux RBRACE

    DO              shift and go to state 177


state 176

    (38) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .

    ID              reduce using rule 38 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    IF              reduce using rule 38 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    PRINT           reduce using rule 38 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    WHILE           reduce using rule 38 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    FROM            reduce using rule 38 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    RBRACE          reduce using rule 38 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)


state 177

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 178


state 178

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE . bloqueAux RBRACE
    (36) bloqueAux -> . estatuto
    (37) bloqueAux -> . estatuto bloqueAux
    (43) estatuto -> . asignacion
    (44) estatuto -> . condicion
    (45) estatuto -> . escritura
    (46) estatuto -> . while
    (47) estatuto -> . loopFromDo
    (48) estatuto -> . comparacion
    (49) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (52) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (53) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (57) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (38) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (42) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (51) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 42
    FROM            shift and go to state 40

    asignacion                     shift and go to state 41
    estatuto                       shift and go to state 35
    bloqueAux                      shift and go to state 179
    while                          shift and go to state 44
    condicion                      shift and go to state 37
    comparacion                    shift and go to state 45
    loopFromDo                     shift and go to state 39
    escritura                      shift and go to state 46

state 179

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 180


state 180

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .

    ID              reduce using rule 42 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 42 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 42 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 42 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    FROM            reduce using rule 42 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 42 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)

