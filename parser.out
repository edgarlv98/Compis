Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FOR
    AND
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID COLON vars main function
Rule 2     program -> PROGRAM ID COLON main function
Rule 3     program -> PROGRAM ID COLON vars main
Rule 4     program -> PROGRAM ID COLON main
Rule 5     main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
Rule 6     main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
Rule 7     nomMain -> MAIN
Rule 8     vars -> VAR varAux1
Rule 9     varAux1 -> tipo varAux2 SEMICOLON
Rule 10    varAux1 -> tipo varAux2 SEMICOLON varAux1
Rule 11    varAux2 -> ID
Rule 12    varAux2 -> ID COMA varAux2
Rule 13    tipo -> INT
Rule 14    tipo -> FLOAT
Rule 15    tipo -> CHAR
Rule 16    tipoFunc -> INT
Rule 17    tipoFunc -> FLOAT
Rule 18    tipoFunc -> CHAR
Rule 19    tipoFunc -> VOID
Rule 20    bloque -> LBRACE RBRACE
Rule 21    bloque -> LBRACE bloqueAux RBRACE
Rule 22    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
Rule 23    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
Rule 24    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
Rule 25    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
Rule 26    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
Rule 27    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
Rule 28    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
Rule 29    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function
Rule 30    param -> tipo ID
Rule 31    param -> tipo ID COMA param
Rule 32    nomFunc -> ID
Rule 33    bloqueAux -> estatuto
Rule 34    bloqueAux -> estatuto bloqueAux
Rule 35    while -> WHILE LPAREN expresion RPAREN bloque
Rule 36    estatuto -> asignacion
Rule 37    estatuto -> condicion
Rule 38    estatuto -> escritura
Rule 39    estatuto -> while
Rule 40    estatuto -> comparacion
Rule 41    asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON
Rule 42    create_asign -> <empty>
Rule 43    comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
Rule 44    condicion -> IF LPAREN expresion RPAREN cond bloque condFinal
Rule 45    condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
Rule 46    cond -> <empty>
Rule 47    condElse -> <empty>
Rule 48    condFinal -> <empty>
Rule 49    escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
Rule 50    quad_print -> <empty>
Rule 51    escrituraAux -> expresion
Rule 52    escrituraAux -> CTE_STRING
Rule 53    escrituraAux -> expresion COMA escrituraAux
Rule 54    escrituraAux -> CTE_STRING COMA escrituraAux
Rule 55    expresion -> exp
Rule 56    expresion -> exp LOWERTHAN push_poper exp quad_comp
Rule 57    expresion -> exp MORETHAN push_poper exp quad_comp
Rule 58    expresion -> exp DIFFERENT push_poper exp quad_comp
Rule 59    quad_comp -> <empty>
Rule 60    exp -> termino quad_term
Rule 61    exp -> termino quad_term exp1
Rule 62    exp1 -> PLUS push_poper exp
Rule 63    exp1 -> MINUS push_poper exp
Rule 64    quad_term -> <empty>
Rule 65    quad_fact -> <empty>
Rule 66    termino -> factor quad_fact
Rule 67    termino -> factor quad_fact termino1
Rule 68    termino1 -> TIMES push_poper termino
Rule 69    termino1 -> DIVIDE push_poper termino
Rule 70    factor -> LPAREN expresion RPAREN
Rule 71    factor -> factorAux
Rule 72    factorAux -> PLUS push_poper var_cte
Rule 73    factorAux -> MINUS push_poper var_cte
Rule 74    factorAux -> var_cte
Rule 75    push_id -> <empty>
Rule 76    push_cte -> <empty>
Rule 77    push_poper -> <empty>
Rule 78    var_cte -> ID push_id
Rule 79    var_cte -> CTE_I push_cte
Rule 80    var_cte -> CTE_F push_cte

Terminals, with rules where they appear

AND                  : 
CHAR                 : 15 18
COLON                : 1 2 3 4
COMA                 : 12 31 53 54
CTE_F                : 80
CTE_I                : 79
CTE_STRING           : 52 54
DIFFERENT            : 58
DIVIDE               : 69
DOUBLEEQUAL          : 43
ELSE                 : 45
EQUAL                : 41
FLOAT                : 14 17
FOR                  : 
FUNCTION             : 22 23 24 25 26 27 28 29
ID                   : 1 2 3 4 11 12 30 31 32 41 43 78
IF                   : 44 45
INT                  : 13 16
LBRACE               : 5 6 20 21 22 23 24 25 26 27 28 29
LOWERTHAN            : 56
LPAREN               : 5 6 22 23 24 25 26 27 28 29 35 44 45 49 70
MAIN                 : 7
MINUS                : 63 73
MORETHAN             : 57
OR                   : 
PLUS                 : 62 72
PRINT                : 49
PROGRAM              : 1 2 3 4
RBRACE               : 5 6 20 21 22 23 24 25 26 27 28 29
RPAREN               : 5 6 22 23 24 25 26 27 28 29 35 44 45 49 70
SEMICOLON            : 9 10 41 43 49
TIMES                : 68
VAR                  : 8
VOID                 : 19
WHILE                : 35
error                : 

Nonterminals, with rules where they appear

asignacion           : 36
bloque               : 35 44 45 45
bloqueAux            : 5 6 21 23 25 27 29 34
comparacion          : 40
cond                 : 44 45
condElse             : 45
condFinal            : 44 45
condicion            : 37
create_asign         : 41
escritura            : 38
escrituraAux         : 53 54
estatuto             : 33 34
exp                  : 49 55 56 56 57 57 58 58 62 63
exp1                 : 61
expresion            : 35 41 43 44 45 51 53 70
factor               : 66 67
factorAux            : 71
function             : 1 2 24 25 28 29
main                 : 1 2 3 4
nomFunc              : 22 23 24 25 26 27 28 29
nomMain              : 5 6
param                : 26 27 28 29 31
program              : 0
push_cte             : 79 80
push_id              : 41 43 78
push_poper           : 41 43 49 56 57 58 62 63 68 69 72 73
quad_comp            : 56 57 58
quad_fact            : 66 67
quad_print           : 49
quad_term            : 60 61
termino              : 60 61 68 69
termino1             : 67
tipo                 : 9 10 30 31
tipoFunc             : 22 23 24 25 26 27 28 29
varAux1              : 8 10
varAux2              : 9 10 12
var_cte              : 72 73 74
vars                 : 1 3 6 23 25 27 29
while                : 39

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID COLON vars main function
    (2) program -> . PROGRAM ID COLON main function
    (3) program -> . PROGRAM ID COLON vars main
    (4) program -> . PROGRAM ID COLON main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID COLON vars main function
    (2) program -> PROGRAM . ID COLON main function
    (3) program -> PROGRAM . ID COLON vars main
    (4) program -> PROGRAM . ID COLON main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . COLON vars main function
    (2) program -> PROGRAM ID . COLON main function
    (3) program -> PROGRAM ID . COLON vars main
    (4) program -> PROGRAM ID . COLON main

    COLON           shift and go to state 4


state 4

    (1) program -> PROGRAM ID COLON . vars main function
    (2) program -> PROGRAM ID COLON . main function
    (3) program -> PROGRAM ID COLON . vars main
    (4) program -> PROGRAM ID COLON . main
    (8) vars -> . VAR varAux1
    (5) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (6) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (7) nomMain -> . MAIN

    VAR             shift and go to state 8
    MAIN            shift and go to state 6

    vars                           shift and go to state 5
    nomMain                        shift and go to state 7
    main                           shift and go to state 9

state 5

    (1) program -> PROGRAM ID COLON vars . main function
    (3) program -> PROGRAM ID COLON vars . main
    (5) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (6) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (7) nomMain -> . MAIN

    MAIN            shift and go to state 6

    nomMain                        shift and go to state 7
    main                           shift and go to state 10

state 6

    (7) nomMain -> MAIN .

    LPAREN          reduce using rule 7 (nomMain -> MAIN .)


state 7

    (5) main -> nomMain . LPAREN RPAREN LBRACE bloqueAux RBRACE
    (6) main -> nomMain . LPAREN RPAREN LBRACE vars bloqueAux RBRACE

    LPAREN          shift and go to state 11


state 8

    (8) vars -> VAR . varAux1
    (9) varAux1 -> . tipo varAux2 SEMICOLON
    (10) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

    varAux1                        shift and go to state 16
    tipo                           shift and go to state 13

state 9

    (2) program -> PROGRAM ID COLON main . function
    (4) program -> PROGRAM ID COLON main .
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    $end            reduce using rule 4 (program -> PROGRAM ID COLON main .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 17

state 10

    (1) program -> PROGRAM ID COLON vars main . function
    (3) program -> PROGRAM ID COLON vars main .
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    $end            reduce using rule 3 (program -> PROGRAM ID COLON vars main .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 19

state 11

    (5) main -> nomMain LPAREN . RPAREN LBRACE bloqueAux RBRACE
    (6) main -> nomMain LPAREN . RPAREN LBRACE vars bloqueAux RBRACE

    RPAREN          shift and go to state 20


state 12

    (15) tipo -> CHAR .

    ID              reduce using rule 15 (tipo -> CHAR .)


state 13

    (9) varAux1 -> tipo . varAux2 SEMICOLON
    (10) varAux1 -> tipo . varAux2 SEMICOLON varAux1
    (11) varAux2 -> . ID
    (12) varAux2 -> . ID COMA varAux2

    ID              shift and go to state 22

    varAux2                        shift and go to state 21

state 14

    (13) tipo -> INT .

    ID              reduce using rule 13 (tipo -> INT .)


state 15

    (14) tipo -> FLOAT .

    ID              reduce using rule 14 (tipo -> FLOAT .)


state 16

    (8) vars -> VAR varAux1 .

    ID              reduce using rule 8 (vars -> VAR varAux1 .)
    IF              reduce using rule 8 (vars -> VAR varAux1 .)
    PRINT           reduce using rule 8 (vars -> VAR varAux1 .)
    WHILE           reduce using rule 8 (vars -> VAR varAux1 .)
    MAIN            reduce using rule 8 (vars -> VAR varAux1 .)


state 17

    (2) program -> PROGRAM ID COLON main function .

    $end            reduce using rule 2 (program -> PROGRAM ID COLON main function .)


state 18

    (22) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function
    (16) tipoFunc -> . INT
    (17) tipoFunc -> . FLOAT
    (18) tipoFunc -> . CHAR
    (19) tipoFunc -> . VOID

    INT             shift and go to state 23
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26
    VOID            shift and go to state 24

    tipoFunc                       shift and go to state 27

state 19

    (1) program -> PROGRAM ID COLON vars main function .

    $end            reduce using rule 1 (program -> PROGRAM ID COLON vars main function .)


state 20

    (5) main -> nomMain LPAREN RPAREN . LBRACE bloqueAux RBRACE
    (6) main -> nomMain LPAREN RPAREN . LBRACE vars bloqueAux RBRACE

    LBRACE          shift and go to state 28


state 21

    (9) varAux1 -> tipo varAux2 . SEMICOLON
    (10) varAux1 -> tipo varAux2 . SEMICOLON varAux1

    SEMICOLON       shift and go to state 29


state 22

    (11) varAux2 -> ID .
    (12) varAux2 -> ID . COMA varAux2

    SEMICOLON       reduce using rule 11 (varAux2 -> ID .)
    COMA            shift and go to state 30


state 23

    (16) tipoFunc -> INT .

    ID              reduce using rule 16 (tipoFunc -> INT .)


state 24

    (19) tipoFunc -> VOID .

    ID              reduce using rule 19 (tipoFunc -> VOID .)


state 25

    (17) tipoFunc -> FLOAT .

    ID              reduce using rule 17 (tipoFunc -> FLOAT .)


state 26

    (18) tipoFunc -> CHAR .

    ID              reduce using rule 18 (tipoFunc -> CHAR .)


state 27

    (22) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function
    (32) nomFunc -> . ID

    ID              shift and go to state 32

    nomFunc                        shift and go to state 31

state 28

    (5) main -> nomMain LPAREN RPAREN LBRACE . bloqueAux RBRACE
    (6) main -> nomMain LPAREN RPAREN LBRACE . vars bloqueAux RBRACE
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (8) vars -> . VAR varAux1
    (36) estatuto -> . asignacion
    (37) estatuto -> . condicion
    (38) estatuto -> . escritura
    (39) estatuto -> . while
    (40) estatuto -> . comparacion
    (41) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (44) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (45) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (49) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (35) while -> . WHILE LPAREN expresion RPAREN bloque
    (43) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    VAR             shift and go to state 8
    ID              shift and go to state 37
    IF              shift and go to state 38
    PRINT           shift and go to state 34
    WHILE           shift and go to state 40

    vars                           shift and go to state 33
    asignacion                     shift and go to state 39
    estatuto                       shift and go to state 35
    while                          shift and go to state 42
    bloqueAux                      shift and go to state 41
    condicion                      shift and go to state 36
    comparacion                    shift and go to state 43
    escritura                      shift and go to state 44

state 29

    (9) varAux1 -> tipo varAux2 SEMICOLON .
    (10) varAux1 -> tipo varAux2 SEMICOLON . varAux1
    (9) varAux1 -> . tipo varAux2 SEMICOLON
    (10) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR

    MAIN            reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    ID              reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    IF              reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    PRINT           reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    WHILE           reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

    varAux1                        shift and go to state 45
    tipo                           shift and go to state 13

state 30

    (12) varAux2 -> ID COMA . varAux2
    (11) varAux2 -> . ID
    (12) varAux2 -> . ID COMA varAux2

    ID              shift and go to state 22

    varAux2                        shift and go to state 46

state 31

    (22) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE RBRACE
    (23) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE RBRACE function
    (25) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE RBRACE
    (27) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    LPAREN          shift and go to state 47


state 32

    (32) nomFunc -> ID .

    LPAREN          reduce using rule 32 (nomFunc -> ID .)


state 33

    (6) main -> nomMain LPAREN RPAREN LBRACE vars . bloqueAux RBRACE
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (36) estatuto -> . asignacion
    (37) estatuto -> . condicion
    (38) estatuto -> . escritura
    (39) estatuto -> . while
    (40) estatuto -> . comparacion
    (41) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (44) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (45) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (49) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (35) while -> . WHILE LPAREN expresion RPAREN bloque
    (43) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    ID              shift and go to state 37
    IF              shift and go to state 38
    PRINT           shift and go to state 34
    WHILE           shift and go to state 40

    asignacion                     shift and go to state 39
    estatuto                       shift and go to state 35
    while                          shift and go to state 42
    bloqueAux                      shift and go to state 48
    condicion                      shift and go to state 36
    comparacion                    shift and go to state 43
    escritura                      shift and go to state 44

state 34

    (49) escritura -> PRINT . push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (77) push_poper -> .

    LPAREN          reduce using rule 77 (push_poper -> .)

    push_poper                     shift and go to state 49

state 35

    (33) bloqueAux -> estatuto .
    (34) bloqueAux -> estatuto . bloqueAux
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (36) estatuto -> . asignacion
    (37) estatuto -> . condicion
    (38) estatuto -> . escritura
    (39) estatuto -> . while
    (40) estatuto -> . comparacion
    (41) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (44) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (45) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (49) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (35) while -> . WHILE LPAREN expresion RPAREN bloque
    (43) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    RBRACE          reduce using rule 33 (bloqueAux -> estatuto .)
    ID              shift and go to state 37
    IF              shift and go to state 38
    PRINT           shift and go to state 34
    WHILE           shift and go to state 40

    asignacion                     shift and go to state 39
    estatuto                       shift and go to state 35
    bloqueAux                      shift and go to state 50
    while                          shift and go to state 42
    condicion                      shift and go to state 36
    comparacion                    shift and go to state 43
    escritura                      shift and go to state 44

state 36

    (37) estatuto -> condicion .

    ID              reduce using rule 37 (estatuto -> condicion .)
    IF              reduce using rule 37 (estatuto -> condicion .)
    PRINT           reduce using rule 37 (estatuto -> condicion .)
    WHILE           reduce using rule 37 (estatuto -> condicion .)
    RBRACE          reduce using rule 37 (estatuto -> condicion .)


state 37

    (41) asignacion -> ID . push_id EQUAL push_poper expresion create_asign SEMICOLON
    (43) comparacion -> ID . push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (75) push_id -> .

    EQUAL           reduce using rule 75 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 75 (push_id -> .)

    push_id                        shift and go to state 51

state 38

    (44) condicion -> IF . LPAREN expresion RPAREN cond bloque condFinal
    (45) condicion -> IF . LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal

    LPAREN          shift and go to state 52


state 39

    (36) estatuto -> asignacion .

    ID              reduce using rule 36 (estatuto -> asignacion .)
    IF              reduce using rule 36 (estatuto -> asignacion .)
    PRINT           reduce using rule 36 (estatuto -> asignacion .)
    WHILE           reduce using rule 36 (estatuto -> asignacion .)
    RBRACE          reduce using rule 36 (estatuto -> asignacion .)


state 40

    (35) while -> WHILE . LPAREN expresion RPAREN bloque

    LPAREN          shift and go to state 53


state 41

    (5) main -> nomMain LPAREN RPAREN LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 54


state 42

    (39) estatuto -> while .

    ID              reduce using rule 39 (estatuto -> while .)
    IF              reduce using rule 39 (estatuto -> while .)
    PRINT           reduce using rule 39 (estatuto -> while .)
    WHILE           reduce using rule 39 (estatuto -> while .)
    RBRACE          reduce using rule 39 (estatuto -> while .)


state 43

    (40) estatuto -> comparacion .

    ID              reduce using rule 40 (estatuto -> comparacion .)
    IF              reduce using rule 40 (estatuto -> comparacion .)
    PRINT           reduce using rule 40 (estatuto -> comparacion .)
    WHILE           reduce using rule 40 (estatuto -> comparacion .)
    RBRACE          reduce using rule 40 (estatuto -> comparacion .)


state 44

    (38) estatuto -> escritura .

    ID              reduce using rule 38 (estatuto -> escritura .)
    IF              reduce using rule 38 (estatuto -> escritura .)
    PRINT           reduce using rule 38 (estatuto -> escritura .)
    WHILE           reduce using rule 38 (estatuto -> escritura .)
    RBRACE          reduce using rule 38 (estatuto -> escritura .)


state 45

    (10) varAux1 -> tipo varAux2 SEMICOLON varAux1 .

    MAIN            reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    ID              reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    IF              reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    PRINT           reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    WHILE           reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)


state 46

    (12) varAux2 -> ID COMA varAux2 .

    SEMICOLON       reduce using rule 12 (varAux2 -> ID COMA varAux2 .)


state 47

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE RBRACE
    (23) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE RBRACE function
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE RBRACE
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE RBRACE function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux RBRACE function
    (30) param -> . tipo ID
    (31) param -> . tipo ID COMA param
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR

    RPAREN          shift and go to state 55
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

    tipo                           shift and go to state 57
    param                          shift and go to state 56

state 48

    (6) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux . RBRACE

    RBRACE          shift and go to state 58


state 49

    (49) escritura -> PRINT push_poper . LPAREN exp RPAREN quad_print SEMICOLON

    LPAREN          shift and go to state 59


state 50

    (34) bloqueAux -> estatuto bloqueAux .

    RBRACE          reduce using rule 34 (bloqueAux -> estatuto bloqueAux .)


state 51

    (41) asignacion -> ID push_id . EQUAL push_poper expresion create_asign SEMICOLON
    (43) comparacion -> ID push_id . DOUBLEEQUAL push_poper expresion SEMICOLON

    EQUAL           shift and go to state 61
    DOUBLEEQUAL     shift and go to state 60


state 52

    (44) condicion -> IF LPAREN . expresion RPAREN cond bloque condFinal
    (45) condicion -> IF LPAREN . expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (55) expresion -> . exp
    (56) expresion -> . exp LOWERTHAN push_poper exp quad_comp
    (57) expresion -> . exp MORETHAN push_poper exp quad_comp
    (58) expresion -> . exp DIFFERENT push_poper exp quad_comp
    (60) exp -> . termino quad_term
    (61) exp -> . termino quad_term exp1
    (66) termino -> . factor quad_fact
    (67) termino -> . factor quad_fact termino1
    (70) factor -> . LPAREN expresion RPAREN
    (71) factor -> . factorAux
    (72) factorAux -> . PLUS push_poper var_cte
    (73) factorAux -> . MINUS push_poper var_cte
    (74) factorAux -> . var_cte
    (78) var_cte -> . ID push_id
    (79) var_cte -> . CTE_I push_cte
    (80) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 68
    PLUS            shift and go to state 64
    MINUS           shift and go to state 63
    ID              shift and go to state 70
    CTE_I           shift and go to state 67
    CTE_F           shift and go to state 66

    expresion                      shift and go to state 71
    factor                         shift and go to state 65
    termino                        shift and go to state 62
    exp                            shift and go to state 72
    factorAux                      shift and go to state 73
    var_cte                        shift and go to state 69

state 53

    (35) while -> WHILE LPAREN . expresion RPAREN bloque
    (55) expresion -> . exp
    (56) expresion -> . exp LOWERTHAN push_poper exp quad_comp
    (57) expresion -> . exp MORETHAN push_poper exp quad_comp
    (58) expresion -> . exp DIFFERENT push_poper exp quad_comp
    (60) exp -> . termino quad_term
    (61) exp -> . termino quad_term exp1
    (66) termino -> . factor quad_fact
    (67) termino -> . factor quad_fact termino1
    (70) factor -> . LPAREN expresion RPAREN
    (71) factor -> . factorAux
    (72) factorAux -> . PLUS push_poper var_cte
    (73) factorAux -> . MINUS push_poper var_cte
    (74) factorAux -> . var_cte
    (78) var_cte -> . ID push_id
    (79) var_cte -> . CTE_I push_cte
    (80) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 68
    PLUS            shift and go to state 64
    MINUS           shift and go to state 63
    ID              shift and go to state 70
    CTE_I           shift and go to state 67
    CTE_F           shift and go to state 66

    expresion                      shift and go to state 74
    factor                         shift and go to state 65
    termino                        shift and go to state 62
    exp                            shift and go to state 72
    factorAux                      shift and go to state 73
    var_cte                        shift and go to state 69

state 54

    (5) main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE .

    FUNCTION        reduce using rule 5 (main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE .)
    $end            reduce using rule 5 (main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE .)


state 55

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE RBRACE
    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux RBRACE
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE RBRACE function
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux RBRACE function

    LBRACE          shift and go to state 75


state 56

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE RBRACE
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE RBRACE function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux RBRACE function

    RPAREN          shift and go to state 76


state 57

    (30) param -> tipo . ID
    (31) param -> tipo . ID COMA param

    ID              shift and go to state 77


state 58

    (6) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE .

    FUNCTION        reduce using rule 6 (main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE .)
    $end            reduce using rule 6 (main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE .)


state 59

    (49) escritura -> PRINT push_poper LPAREN . exp RPAREN quad_print SEMICOLON
    (60) exp -> . termino quad_term
    (61) exp -> . termino quad_term exp1
    (66) termino -> . factor quad_fact
    (67) termino -> . factor quad_fact termino1
    (70) factor -> . LPAREN expresion RPAREN
    (71) factor -> . factorAux
    (72) factorAux -> . PLUS push_poper var_cte
    (73) factorAux -> . MINUS push_poper var_cte
    (74) factorAux -> . var_cte
    (78) var_cte -> . ID push_id
    (79) var_cte -> . CTE_I push_cte
    (80) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 68
    PLUS            shift and go to state 64
    MINUS           shift and go to state 63
    ID              shift and go to state 70
    CTE_I           shift and go to state 67
    CTE_F           shift and go to state 66

    factor                         shift and go to state 65
    termino                        shift and go to state 62
    exp                            shift and go to state 78
    factorAux                      shift and go to state 73
    var_cte                        shift and go to state 69

state 60

    (43) comparacion -> ID push_id DOUBLEEQUAL . push_poper expresion SEMICOLON
    (77) push_poper -> .

    LPAREN          reduce using rule 77 (push_poper -> .)
    PLUS            reduce using rule 77 (push_poper -> .)
    MINUS           reduce using rule 77 (push_poper -> .)
    ID              reduce using rule 77 (push_poper -> .)
    CTE_I           reduce using rule 77 (push_poper -> .)
    CTE_F           reduce using rule 77 (push_poper -> .)

    push_poper                     shift and go to state 79

state 61

    (41) asignacion -> ID push_id EQUAL . push_poper expresion create_asign SEMICOLON
    (77) push_poper -> .

    LPAREN          reduce using rule 77 (push_poper -> .)
    PLUS            reduce using rule 77 (push_poper -> .)
    MINUS           reduce using rule 77 (push_poper -> .)
    ID              reduce using rule 77 (push_poper -> .)
    CTE_I           reduce using rule 77 (push_poper -> .)
    CTE_F           reduce using rule 77 (push_poper -> .)

    push_poper                     shift and go to state 80

state 62

    (60) exp -> termino . quad_term
    (61) exp -> termino . quad_term exp1
    (64) quad_term -> .

    PLUS            reduce using rule 64 (quad_term -> .)
    MINUS           reduce using rule 64 (quad_term -> .)
    LOWERTHAN       reduce using rule 64 (quad_term -> .)
    MORETHAN        reduce using rule 64 (quad_term -> .)
    DIFFERENT       reduce using rule 64 (quad_term -> .)
    RPAREN          reduce using rule 64 (quad_term -> .)
    SEMICOLON       reduce using rule 64 (quad_term -> .)

    quad_term                      shift and go to state 81

state 63

    (73) factorAux -> MINUS . push_poper var_cte
    (77) push_poper -> .

    ID              reduce using rule 77 (push_poper -> .)
    CTE_I           reduce using rule 77 (push_poper -> .)
    CTE_F           reduce using rule 77 (push_poper -> .)

    push_poper                     shift and go to state 82

state 64

    (72) factorAux -> PLUS . push_poper var_cte
    (77) push_poper -> .

    ID              reduce using rule 77 (push_poper -> .)
    CTE_I           reduce using rule 77 (push_poper -> .)
    CTE_F           reduce using rule 77 (push_poper -> .)

    push_poper                     shift and go to state 83

state 65

    (66) termino -> factor . quad_fact
    (67) termino -> factor . quad_fact termino1
    (65) quad_fact -> .

    TIMES           reduce using rule 65 (quad_fact -> .)
    DIVIDE          reduce using rule 65 (quad_fact -> .)
    PLUS            reduce using rule 65 (quad_fact -> .)
    MINUS           reduce using rule 65 (quad_fact -> .)
    LOWERTHAN       reduce using rule 65 (quad_fact -> .)
    MORETHAN        reduce using rule 65 (quad_fact -> .)
    DIFFERENT       reduce using rule 65 (quad_fact -> .)
    RPAREN          reduce using rule 65 (quad_fact -> .)
    SEMICOLON       reduce using rule 65 (quad_fact -> .)

    quad_fact                      shift and go to state 84

state 66

    (80) var_cte -> CTE_F . push_cte
    (76) push_cte -> .

    TIMES           reduce using rule 76 (push_cte -> .)
    DIVIDE          reduce using rule 76 (push_cte -> .)
    PLUS            reduce using rule 76 (push_cte -> .)
    MINUS           reduce using rule 76 (push_cte -> .)
    LOWERTHAN       reduce using rule 76 (push_cte -> .)
    MORETHAN        reduce using rule 76 (push_cte -> .)
    DIFFERENT       reduce using rule 76 (push_cte -> .)
    RPAREN          reduce using rule 76 (push_cte -> .)
    SEMICOLON       reduce using rule 76 (push_cte -> .)

    push_cte                       shift and go to state 85

state 67

    (79) var_cte -> CTE_I . push_cte
    (76) push_cte -> .

    TIMES           reduce using rule 76 (push_cte -> .)
    DIVIDE          reduce using rule 76 (push_cte -> .)
    PLUS            reduce using rule 76 (push_cte -> .)
    MINUS           reduce using rule 76 (push_cte -> .)
    LOWERTHAN       reduce using rule 76 (push_cte -> .)
    MORETHAN        reduce using rule 76 (push_cte -> .)
    DIFFERENT       reduce using rule 76 (push_cte -> .)
    RPAREN          reduce using rule 76 (push_cte -> .)
    SEMICOLON       reduce using rule 76 (push_cte -> .)

    push_cte                       shift and go to state 86

state 68

    (70) factor -> LPAREN . expresion RPAREN
    (55) expresion -> . exp
    (56) expresion -> . exp LOWERTHAN push_poper exp quad_comp
    (57) expresion -> . exp MORETHAN push_poper exp quad_comp
    (58) expresion -> . exp DIFFERENT push_poper exp quad_comp
    (60) exp -> . termino quad_term
    (61) exp -> . termino quad_term exp1
    (66) termino -> . factor quad_fact
    (67) termino -> . factor quad_fact termino1
    (70) factor -> . LPAREN expresion RPAREN
    (71) factor -> . factorAux
    (72) factorAux -> . PLUS push_poper var_cte
    (73) factorAux -> . MINUS push_poper var_cte
    (74) factorAux -> . var_cte
    (78) var_cte -> . ID push_id
    (79) var_cte -> . CTE_I push_cte
    (80) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 68
    PLUS            shift and go to state 64
    MINUS           shift and go to state 63
    ID              shift and go to state 70
    CTE_I           shift and go to state 67
    CTE_F           shift and go to state 66

    expresion                      shift and go to state 87
    factor                         shift and go to state 65
    termino                        shift and go to state 62
    exp                            shift and go to state 72
    factorAux                      shift and go to state 73
    var_cte                        shift and go to state 69

state 69

    (74) factorAux -> var_cte .

    TIMES           reduce using rule 74 (factorAux -> var_cte .)
    DIVIDE          reduce using rule 74 (factorAux -> var_cte .)
    PLUS            reduce using rule 74 (factorAux -> var_cte .)
    MINUS           reduce using rule 74 (factorAux -> var_cte .)
    LOWERTHAN       reduce using rule 74 (factorAux -> var_cte .)
    MORETHAN        reduce using rule 74 (factorAux -> var_cte .)
    DIFFERENT       reduce using rule 74 (factorAux -> var_cte .)
    RPAREN          reduce using rule 74 (factorAux -> var_cte .)
    SEMICOLON       reduce using rule 74 (factorAux -> var_cte .)


state 70

    (78) var_cte -> ID . push_id
    (75) push_id -> .

    TIMES           reduce using rule 75 (push_id -> .)
    DIVIDE          reduce using rule 75 (push_id -> .)
    PLUS            reduce using rule 75 (push_id -> .)
    MINUS           reduce using rule 75 (push_id -> .)
    LOWERTHAN       reduce using rule 75 (push_id -> .)
    MORETHAN        reduce using rule 75 (push_id -> .)
    DIFFERENT       reduce using rule 75 (push_id -> .)
    RPAREN          reduce using rule 75 (push_id -> .)
    SEMICOLON       reduce using rule 75 (push_id -> .)

    push_id                        shift and go to state 88

state 71

    (44) condicion -> IF LPAREN expresion . RPAREN cond bloque condFinal
    (45) condicion -> IF LPAREN expresion . RPAREN cond bloque ELSE condElse bloque condFinal

    RPAREN          shift and go to state 89


state 72

    (55) expresion -> exp .
    (56) expresion -> exp . LOWERTHAN push_poper exp quad_comp
    (57) expresion -> exp . MORETHAN push_poper exp quad_comp
    (58) expresion -> exp . DIFFERENT push_poper exp quad_comp

    SEMICOLON       reduce using rule 55 (expresion -> exp .)
    RPAREN          reduce using rule 55 (expresion -> exp .)
    LOWERTHAN       shift and go to state 91
    MORETHAN        shift and go to state 92
    DIFFERENT       shift and go to state 90


state 73

    (71) factor -> factorAux .

    TIMES           reduce using rule 71 (factor -> factorAux .)
    DIVIDE          reduce using rule 71 (factor -> factorAux .)
    PLUS            reduce using rule 71 (factor -> factorAux .)
    MINUS           reduce using rule 71 (factor -> factorAux .)
    LOWERTHAN       reduce using rule 71 (factor -> factorAux .)
    MORETHAN        reduce using rule 71 (factor -> factorAux .)
    DIFFERENT       reduce using rule 71 (factor -> factorAux .)
    RPAREN          reduce using rule 71 (factor -> factorAux .)
    SEMICOLON       reduce using rule 71 (factor -> factorAux .)


state 74

    (35) while -> WHILE LPAREN expresion . RPAREN bloque

    RPAREN          shift and go to state 93


state 75

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . RBRACE
    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux RBRACE
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . RBRACE function
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux RBRACE function
    (8) vars -> . VAR varAux1

    RBRACE          shift and go to state 94
    VAR             shift and go to state 8

    vars                           shift and go to state 95

state 76

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE RBRACE
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux RBRACE
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE RBRACE function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux RBRACE function

    LBRACE          shift and go to state 96


state 77

    (30) param -> tipo ID .
    (31) param -> tipo ID . COMA param

    RPAREN          reduce using rule 30 (param -> tipo ID .)
    COMA            shift and go to state 97


state 78

    (49) escritura -> PRINT push_poper LPAREN exp . RPAREN quad_print SEMICOLON

    RPAREN          shift and go to state 98


state 79

    (43) comparacion -> ID push_id DOUBLEEQUAL push_poper . expresion SEMICOLON
    (55) expresion -> . exp
    (56) expresion -> . exp LOWERTHAN push_poper exp quad_comp
    (57) expresion -> . exp MORETHAN push_poper exp quad_comp
    (58) expresion -> . exp DIFFERENT push_poper exp quad_comp
    (60) exp -> . termino quad_term
    (61) exp -> . termino quad_term exp1
    (66) termino -> . factor quad_fact
    (67) termino -> . factor quad_fact termino1
    (70) factor -> . LPAREN expresion RPAREN
    (71) factor -> . factorAux
    (72) factorAux -> . PLUS push_poper var_cte
    (73) factorAux -> . MINUS push_poper var_cte
    (74) factorAux -> . var_cte
    (78) var_cte -> . ID push_id
    (79) var_cte -> . CTE_I push_cte
    (80) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 68
    PLUS            shift and go to state 64
    MINUS           shift and go to state 63
    ID              shift and go to state 70
    CTE_I           shift and go to state 67
    CTE_F           shift and go to state 66

    expresion                      shift and go to state 99
    factor                         shift and go to state 65
    var_cte                        shift and go to state 69
    termino                        shift and go to state 62
    exp                            shift and go to state 72
    factorAux                      shift and go to state 73

state 80

    (41) asignacion -> ID push_id EQUAL push_poper . expresion create_asign SEMICOLON
    (55) expresion -> . exp
    (56) expresion -> . exp LOWERTHAN push_poper exp quad_comp
    (57) expresion -> . exp MORETHAN push_poper exp quad_comp
    (58) expresion -> . exp DIFFERENT push_poper exp quad_comp
    (60) exp -> . termino quad_term
    (61) exp -> . termino quad_term exp1
    (66) termino -> . factor quad_fact
    (67) termino -> . factor quad_fact termino1
    (70) factor -> . LPAREN expresion RPAREN
    (71) factor -> . factorAux
    (72) factorAux -> . PLUS push_poper var_cte
    (73) factorAux -> . MINUS push_poper var_cte
    (74) factorAux -> . var_cte
    (78) var_cte -> . ID push_id
    (79) var_cte -> . CTE_I push_cte
    (80) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 68
    PLUS            shift and go to state 64
    MINUS           shift and go to state 63
    ID              shift and go to state 70
    CTE_I           shift and go to state 67
    CTE_F           shift and go to state 66

    expresion                      shift and go to state 100
    var_cte                        shift and go to state 69
    termino                        shift and go to state 62
    exp                            shift and go to state 72
    factorAux                      shift and go to state 73
    factor                         shift and go to state 65

state 81

    (60) exp -> termino quad_term .
    (61) exp -> termino quad_term . exp1
    (62) exp1 -> . PLUS push_poper exp
    (63) exp1 -> . MINUS push_poper exp

    LOWERTHAN       reduce using rule 60 (exp -> termino quad_term .)
    MORETHAN        reduce using rule 60 (exp -> termino quad_term .)
    DIFFERENT       reduce using rule 60 (exp -> termino quad_term .)
    RPAREN          reduce using rule 60 (exp -> termino quad_term .)
    SEMICOLON       reduce using rule 60 (exp -> termino quad_term .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103

    exp1                           shift and go to state 101

state 82

    (73) factorAux -> MINUS push_poper . var_cte
    (78) var_cte -> . ID push_id
    (79) var_cte -> . CTE_I push_cte
    (80) var_cte -> . CTE_F push_cte

    ID              shift and go to state 70
    CTE_I           shift and go to state 67
    CTE_F           shift and go to state 66

    var_cte                        shift and go to state 104

state 83

    (72) factorAux -> PLUS push_poper . var_cte
    (78) var_cte -> . ID push_id
    (79) var_cte -> . CTE_I push_cte
    (80) var_cte -> . CTE_F push_cte

    ID              shift and go to state 70
    CTE_I           shift and go to state 67
    CTE_F           shift and go to state 66

    var_cte                        shift and go to state 105

state 84

    (66) termino -> factor quad_fact .
    (67) termino -> factor quad_fact . termino1
    (68) termino1 -> . TIMES push_poper termino
    (69) termino1 -> . DIVIDE push_poper termino

    PLUS            reduce using rule 66 (termino -> factor quad_fact .)
    MINUS           reduce using rule 66 (termino -> factor quad_fact .)
    LOWERTHAN       reduce using rule 66 (termino -> factor quad_fact .)
    MORETHAN        reduce using rule 66 (termino -> factor quad_fact .)
    DIFFERENT       reduce using rule 66 (termino -> factor quad_fact .)
    RPAREN          reduce using rule 66 (termino -> factor quad_fact .)
    SEMICOLON       reduce using rule 66 (termino -> factor quad_fact .)
    TIMES           shift and go to state 108
    DIVIDE          shift and go to state 106

    termino1                       shift and go to state 107

state 85

    (80) var_cte -> CTE_F push_cte .

    TIMES           reduce using rule 80 (var_cte -> CTE_F push_cte .)
    DIVIDE          reduce using rule 80 (var_cte -> CTE_F push_cte .)
    PLUS            reduce using rule 80 (var_cte -> CTE_F push_cte .)
    MINUS           reduce using rule 80 (var_cte -> CTE_F push_cte .)
    LOWERTHAN       reduce using rule 80 (var_cte -> CTE_F push_cte .)
    MORETHAN        reduce using rule 80 (var_cte -> CTE_F push_cte .)
    DIFFERENT       reduce using rule 80 (var_cte -> CTE_F push_cte .)
    RPAREN          reduce using rule 80 (var_cte -> CTE_F push_cte .)
    SEMICOLON       reduce using rule 80 (var_cte -> CTE_F push_cte .)


state 86

    (79) var_cte -> CTE_I push_cte .

    TIMES           reduce using rule 79 (var_cte -> CTE_I push_cte .)
    DIVIDE          reduce using rule 79 (var_cte -> CTE_I push_cte .)
    PLUS            reduce using rule 79 (var_cte -> CTE_I push_cte .)
    MINUS           reduce using rule 79 (var_cte -> CTE_I push_cte .)
    LOWERTHAN       reduce using rule 79 (var_cte -> CTE_I push_cte .)
    MORETHAN        reduce using rule 79 (var_cte -> CTE_I push_cte .)
    DIFFERENT       reduce using rule 79 (var_cte -> CTE_I push_cte .)
    RPAREN          reduce using rule 79 (var_cte -> CTE_I push_cte .)
    SEMICOLON       reduce using rule 79 (var_cte -> CTE_I push_cte .)


state 87

    (70) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 109


state 88

    (78) var_cte -> ID push_id .

    TIMES           reduce using rule 78 (var_cte -> ID push_id .)
    DIVIDE          reduce using rule 78 (var_cte -> ID push_id .)
    PLUS            reduce using rule 78 (var_cte -> ID push_id .)
    MINUS           reduce using rule 78 (var_cte -> ID push_id .)
    LOWERTHAN       reduce using rule 78 (var_cte -> ID push_id .)
    MORETHAN        reduce using rule 78 (var_cte -> ID push_id .)
    DIFFERENT       reduce using rule 78 (var_cte -> ID push_id .)
    RPAREN          reduce using rule 78 (var_cte -> ID push_id .)
    SEMICOLON       reduce using rule 78 (var_cte -> ID push_id .)


state 89

    (44) condicion -> IF LPAREN expresion RPAREN . cond bloque condFinal
    (45) condicion -> IF LPAREN expresion RPAREN . cond bloque ELSE condElse bloque condFinal
    (46) cond -> .

    LBRACE          reduce using rule 46 (cond -> .)

    cond                           shift and go to state 110

state 90

    (58) expresion -> exp DIFFERENT . push_poper exp quad_comp
    (77) push_poper -> .

    LPAREN          reduce using rule 77 (push_poper -> .)
    PLUS            reduce using rule 77 (push_poper -> .)
    MINUS           reduce using rule 77 (push_poper -> .)
    ID              reduce using rule 77 (push_poper -> .)
    CTE_I           reduce using rule 77 (push_poper -> .)
    CTE_F           reduce using rule 77 (push_poper -> .)

    push_poper                     shift and go to state 111

state 91

    (56) expresion -> exp LOWERTHAN . push_poper exp quad_comp
    (77) push_poper -> .

    LPAREN          reduce using rule 77 (push_poper -> .)
    PLUS            reduce using rule 77 (push_poper -> .)
    MINUS           reduce using rule 77 (push_poper -> .)
    ID              reduce using rule 77 (push_poper -> .)
    CTE_I           reduce using rule 77 (push_poper -> .)
    CTE_F           reduce using rule 77 (push_poper -> .)

    push_poper                     shift and go to state 112

state 92

    (57) expresion -> exp MORETHAN . push_poper exp quad_comp
    (77) push_poper -> .

    LPAREN          reduce using rule 77 (push_poper -> .)
    PLUS            reduce using rule 77 (push_poper -> .)
    MINUS           reduce using rule 77 (push_poper -> .)
    ID              reduce using rule 77 (push_poper -> .)
    CTE_I           reduce using rule 77 (push_poper -> .)
    CTE_F           reduce using rule 77 (push_poper -> .)

    push_poper                     shift and go to state 113

state 93

    (35) while -> WHILE LPAREN expresion RPAREN . bloque
    (20) bloque -> . LBRACE RBRACE
    (21) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 114

    bloque                         shift and go to state 115

state 94

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE .
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    $end            reduce using rule 22 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 116

state 95

    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux RBRACE
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux RBRACE function
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (36) estatuto -> . asignacion
    (37) estatuto -> . condicion
    (38) estatuto -> . escritura
    (39) estatuto -> . while
    (40) estatuto -> . comparacion
    (41) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (44) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (45) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (49) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (35) while -> . WHILE LPAREN expresion RPAREN bloque
    (43) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    ID              shift and go to state 37
    IF              shift and go to state 38
    PRINT           shift and go to state 34
    WHILE           shift and go to state 40

    asignacion                     shift and go to state 39
    estatuto                       shift and go to state 35
    bloqueAux                      shift and go to state 117
    while                          shift and go to state 42
    condicion                      shift and go to state 36
    comparacion                    shift and go to state 43
    escritura                      shift and go to state 44

state 96

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . RBRACE
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux RBRACE
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . RBRACE function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux RBRACE function
    (8) vars -> . VAR varAux1

    RBRACE          shift and go to state 118
    VAR             shift and go to state 8

    vars                           shift and go to state 119

state 97

    (31) param -> tipo ID COMA . param
    (30) param -> . tipo ID
    (31) param -> . tipo ID COMA param
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

    param                          shift and go to state 120
    tipo                           shift and go to state 57

state 98

    (49) escritura -> PRINT push_poper LPAREN exp RPAREN . quad_print SEMICOLON
    (50) quad_print -> .

    SEMICOLON       reduce using rule 50 (quad_print -> .)

    quad_print                     shift and go to state 121

state 99

    (43) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion . SEMICOLON

    SEMICOLON       shift and go to state 122


state 100

    (41) asignacion -> ID push_id EQUAL push_poper expresion . create_asign SEMICOLON
    (42) create_asign -> .

    SEMICOLON       reduce using rule 42 (create_asign -> .)

    create_asign                   shift and go to state 123

state 101

    (61) exp -> termino quad_term exp1 .

    LOWERTHAN       reduce using rule 61 (exp -> termino quad_term exp1 .)
    MORETHAN        reduce using rule 61 (exp -> termino quad_term exp1 .)
    DIFFERENT       reduce using rule 61 (exp -> termino quad_term exp1 .)
    RPAREN          reduce using rule 61 (exp -> termino quad_term exp1 .)
    SEMICOLON       reduce using rule 61 (exp -> termino quad_term exp1 .)


state 102

    (62) exp1 -> PLUS . push_poper exp
    (77) push_poper -> .

    LPAREN          reduce using rule 77 (push_poper -> .)
    PLUS            reduce using rule 77 (push_poper -> .)
    MINUS           reduce using rule 77 (push_poper -> .)
    ID              reduce using rule 77 (push_poper -> .)
    CTE_I           reduce using rule 77 (push_poper -> .)
    CTE_F           reduce using rule 77 (push_poper -> .)

    push_poper                     shift and go to state 124

state 103

    (63) exp1 -> MINUS . push_poper exp
    (77) push_poper -> .

    LPAREN          reduce using rule 77 (push_poper -> .)
    PLUS            reduce using rule 77 (push_poper -> .)
    MINUS           reduce using rule 77 (push_poper -> .)
    ID              reduce using rule 77 (push_poper -> .)
    CTE_I           reduce using rule 77 (push_poper -> .)
    CTE_F           reduce using rule 77 (push_poper -> .)

    push_poper                     shift and go to state 125

state 104

    (73) factorAux -> MINUS push_poper var_cte .

    TIMES           reduce using rule 73 (factorAux -> MINUS push_poper var_cte .)
    DIVIDE          reduce using rule 73 (factorAux -> MINUS push_poper var_cte .)
    PLUS            reduce using rule 73 (factorAux -> MINUS push_poper var_cte .)
    MINUS           reduce using rule 73 (factorAux -> MINUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 73 (factorAux -> MINUS push_poper var_cte .)
    MORETHAN        reduce using rule 73 (factorAux -> MINUS push_poper var_cte .)
    DIFFERENT       reduce using rule 73 (factorAux -> MINUS push_poper var_cte .)
    RPAREN          reduce using rule 73 (factorAux -> MINUS push_poper var_cte .)
    SEMICOLON       reduce using rule 73 (factorAux -> MINUS push_poper var_cte .)


state 105

    (72) factorAux -> PLUS push_poper var_cte .

    TIMES           reduce using rule 72 (factorAux -> PLUS push_poper var_cte .)
    DIVIDE          reduce using rule 72 (factorAux -> PLUS push_poper var_cte .)
    PLUS            reduce using rule 72 (factorAux -> PLUS push_poper var_cte .)
    MINUS           reduce using rule 72 (factorAux -> PLUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 72 (factorAux -> PLUS push_poper var_cte .)
    MORETHAN        reduce using rule 72 (factorAux -> PLUS push_poper var_cte .)
    DIFFERENT       reduce using rule 72 (factorAux -> PLUS push_poper var_cte .)
    RPAREN          reduce using rule 72 (factorAux -> PLUS push_poper var_cte .)
    SEMICOLON       reduce using rule 72 (factorAux -> PLUS push_poper var_cte .)


state 106

    (69) termino1 -> DIVIDE . push_poper termino
    (77) push_poper -> .

    LPAREN          reduce using rule 77 (push_poper -> .)
    PLUS            reduce using rule 77 (push_poper -> .)
    MINUS           reduce using rule 77 (push_poper -> .)
    ID              reduce using rule 77 (push_poper -> .)
    CTE_I           reduce using rule 77 (push_poper -> .)
    CTE_F           reduce using rule 77 (push_poper -> .)

    push_poper                     shift and go to state 126

state 107

    (67) termino -> factor quad_fact termino1 .

    PLUS            reduce using rule 67 (termino -> factor quad_fact termino1 .)
    MINUS           reduce using rule 67 (termino -> factor quad_fact termino1 .)
    LOWERTHAN       reduce using rule 67 (termino -> factor quad_fact termino1 .)
    MORETHAN        reduce using rule 67 (termino -> factor quad_fact termino1 .)
    DIFFERENT       reduce using rule 67 (termino -> factor quad_fact termino1 .)
    RPAREN          reduce using rule 67 (termino -> factor quad_fact termino1 .)
    SEMICOLON       reduce using rule 67 (termino -> factor quad_fact termino1 .)


state 108

    (68) termino1 -> TIMES . push_poper termino
    (77) push_poper -> .

    LPAREN          reduce using rule 77 (push_poper -> .)
    PLUS            reduce using rule 77 (push_poper -> .)
    MINUS           reduce using rule 77 (push_poper -> .)
    ID              reduce using rule 77 (push_poper -> .)
    CTE_I           reduce using rule 77 (push_poper -> .)
    CTE_F           reduce using rule 77 (push_poper -> .)

    push_poper                     shift and go to state 127

state 109

    (70) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 70 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 70 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 70 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 70 (factor -> LPAREN expresion RPAREN .)
    LOWERTHAN       reduce using rule 70 (factor -> LPAREN expresion RPAREN .)
    MORETHAN        reduce using rule 70 (factor -> LPAREN expresion RPAREN .)
    DIFFERENT       reduce using rule 70 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 70 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 70 (factor -> LPAREN expresion RPAREN .)


state 110

    (44) condicion -> IF LPAREN expresion RPAREN cond . bloque condFinal
    (45) condicion -> IF LPAREN expresion RPAREN cond . bloque ELSE condElse bloque condFinal
    (20) bloque -> . LBRACE RBRACE
    (21) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 114

    bloque                         shift and go to state 128

state 111

    (58) expresion -> exp DIFFERENT push_poper . exp quad_comp
    (60) exp -> . termino quad_term
    (61) exp -> . termino quad_term exp1
    (66) termino -> . factor quad_fact
    (67) termino -> . factor quad_fact termino1
    (70) factor -> . LPAREN expresion RPAREN
    (71) factor -> . factorAux
    (72) factorAux -> . PLUS push_poper var_cte
    (73) factorAux -> . MINUS push_poper var_cte
    (74) factorAux -> . var_cte
    (78) var_cte -> . ID push_id
    (79) var_cte -> . CTE_I push_cte
    (80) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 68
    PLUS            shift and go to state 64
    MINUS           shift and go to state 63
    ID              shift and go to state 70
    CTE_I           shift and go to state 67
    CTE_F           shift and go to state 66

    factor                         shift and go to state 65
    termino                        shift and go to state 62
    exp                            shift and go to state 129
    factorAux                      shift and go to state 73
    var_cte                        shift and go to state 69

state 112

    (56) expresion -> exp LOWERTHAN push_poper . exp quad_comp
    (60) exp -> . termino quad_term
    (61) exp -> . termino quad_term exp1
    (66) termino -> . factor quad_fact
    (67) termino -> . factor quad_fact termino1
    (70) factor -> . LPAREN expresion RPAREN
    (71) factor -> . factorAux
    (72) factorAux -> . PLUS push_poper var_cte
    (73) factorAux -> . MINUS push_poper var_cte
    (74) factorAux -> . var_cte
    (78) var_cte -> . ID push_id
    (79) var_cte -> . CTE_I push_cte
    (80) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 68
    PLUS            shift and go to state 64
    MINUS           shift and go to state 63
    ID              shift and go to state 70
    CTE_I           shift and go to state 67
    CTE_F           shift and go to state 66

    factor                         shift and go to state 65
    termino                        shift and go to state 62
    exp                            shift and go to state 130
    factorAux                      shift and go to state 73
    var_cte                        shift and go to state 69

state 113

    (57) expresion -> exp MORETHAN push_poper . exp quad_comp
    (60) exp -> . termino quad_term
    (61) exp -> . termino quad_term exp1
    (66) termino -> . factor quad_fact
    (67) termino -> . factor quad_fact termino1
    (70) factor -> . LPAREN expresion RPAREN
    (71) factor -> . factorAux
    (72) factorAux -> . PLUS push_poper var_cte
    (73) factorAux -> . MINUS push_poper var_cte
    (74) factorAux -> . var_cte
    (78) var_cte -> . ID push_id
    (79) var_cte -> . CTE_I push_cte
    (80) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 68
    PLUS            shift and go to state 64
    MINUS           shift and go to state 63
    ID              shift and go to state 70
    CTE_I           shift and go to state 67
    CTE_F           shift and go to state 66

    factor                         shift and go to state 65
    termino                        shift and go to state 62
    exp                            shift and go to state 131
    factorAux                      shift and go to state 73
    var_cte                        shift and go to state 69

state 114

    (20) bloque -> LBRACE . RBRACE
    (21) bloque -> LBRACE . bloqueAux RBRACE
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (36) estatuto -> . asignacion
    (37) estatuto -> . condicion
    (38) estatuto -> . escritura
    (39) estatuto -> . while
    (40) estatuto -> . comparacion
    (41) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (44) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (45) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (49) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (35) while -> . WHILE LPAREN expresion RPAREN bloque
    (43) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    RBRACE          shift and go to state 132
    ID              shift and go to state 37
    IF              shift and go to state 38
    PRINT           shift and go to state 34
    WHILE           shift and go to state 40

    asignacion                     shift and go to state 39
    estatuto                       shift and go to state 35
    bloqueAux                      shift and go to state 133
    while                          shift and go to state 42
    condicion                      shift and go to state 36
    comparacion                    shift and go to state 43
    escritura                      shift and go to state 44

state 115

    (35) while -> WHILE LPAREN expresion RPAREN bloque .

    ID              reduce using rule 35 (while -> WHILE LPAREN expresion RPAREN bloque .)
    IF              reduce using rule 35 (while -> WHILE LPAREN expresion RPAREN bloque .)
    PRINT           reduce using rule 35 (while -> WHILE LPAREN expresion RPAREN bloque .)
    WHILE           reduce using rule 35 (while -> WHILE LPAREN expresion RPAREN bloque .)
    RBRACE          reduce using rule 35 (while -> WHILE LPAREN expresion RPAREN bloque .)


state 116

    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function .

    $end            reduce using rule 24 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function .)


state 117

    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . RBRACE
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . RBRACE function

    RBRACE          shift and go to state 134


state 118

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE .
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    $end            reduce using rule 26 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 135

state 119

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux RBRACE
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux RBRACE function
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (36) estatuto -> . asignacion
    (37) estatuto -> . condicion
    (38) estatuto -> . escritura
    (39) estatuto -> . while
    (40) estatuto -> . comparacion
    (41) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (44) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (45) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (49) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (35) while -> . WHILE LPAREN expresion RPAREN bloque
    (43) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    ID              shift and go to state 37
    IF              shift and go to state 38
    PRINT           shift and go to state 34
    WHILE           shift and go to state 40

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 36
    asignacion                     shift and go to state 39
    bloqueAux                      shift and go to state 136
    while                          shift and go to state 42
    comparacion                    shift and go to state 43
    escritura                      shift and go to state 44

state 120

    (31) param -> tipo ID COMA param .

    RPAREN          reduce using rule 31 (param -> tipo ID COMA param .)


state 121

    (49) escritura -> PRINT push_poper LPAREN exp RPAREN quad_print . SEMICOLON

    SEMICOLON       shift and go to state 137


state 122

    (43) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .

    ID              reduce using rule 43 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    IF              reduce using rule 43 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    PRINT           reduce using rule 43 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    WHILE           reduce using rule 43 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    RBRACE          reduce using rule 43 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)


state 123

    (41) asignacion -> ID push_id EQUAL push_poper expresion create_asign . SEMICOLON

    SEMICOLON       shift and go to state 138


state 124

    (62) exp1 -> PLUS push_poper . exp
    (60) exp -> . termino quad_term
    (61) exp -> . termino quad_term exp1
    (66) termino -> . factor quad_fact
    (67) termino -> . factor quad_fact termino1
    (70) factor -> . LPAREN expresion RPAREN
    (71) factor -> . factorAux
    (72) factorAux -> . PLUS push_poper var_cte
    (73) factorAux -> . MINUS push_poper var_cte
    (74) factorAux -> . var_cte
    (78) var_cte -> . ID push_id
    (79) var_cte -> . CTE_I push_cte
    (80) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 68
    PLUS            shift and go to state 64
    MINUS           shift and go to state 63
    ID              shift and go to state 70
    CTE_I           shift and go to state 67
    CTE_F           shift and go to state 66

    termino                        shift and go to state 62
    exp                            shift and go to state 139
    factor                         shift and go to state 65
    factorAux                      shift and go to state 73
    var_cte                        shift and go to state 69

state 125

    (63) exp1 -> MINUS push_poper . exp
    (60) exp -> . termino quad_term
    (61) exp -> . termino quad_term exp1
    (66) termino -> . factor quad_fact
    (67) termino -> . factor quad_fact termino1
    (70) factor -> . LPAREN expresion RPAREN
    (71) factor -> . factorAux
    (72) factorAux -> . PLUS push_poper var_cte
    (73) factorAux -> . MINUS push_poper var_cte
    (74) factorAux -> . var_cte
    (78) var_cte -> . ID push_id
    (79) var_cte -> . CTE_I push_cte
    (80) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 68
    PLUS            shift and go to state 64
    MINUS           shift and go to state 63
    ID              shift and go to state 70
    CTE_I           shift and go to state 67
    CTE_F           shift and go to state 66

    termino                        shift and go to state 62
    exp                            shift and go to state 140
    factor                         shift and go to state 65
    factorAux                      shift and go to state 73
    var_cte                        shift and go to state 69

state 126

    (69) termino1 -> DIVIDE push_poper . termino
    (66) termino -> . factor quad_fact
    (67) termino -> . factor quad_fact termino1
    (70) factor -> . LPAREN expresion RPAREN
    (71) factor -> . factorAux
    (72) factorAux -> . PLUS push_poper var_cte
    (73) factorAux -> . MINUS push_poper var_cte
    (74) factorAux -> . var_cte
    (78) var_cte -> . ID push_id
    (79) var_cte -> . CTE_I push_cte
    (80) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 68
    PLUS            shift and go to state 64
    MINUS           shift and go to state 63
    ID              shift and go to state 70
    CTE_I           shift and go to state 67
    CTE_F           shift and go to state 66

    termino                        shift and go to state 141
    factor                         shift and go to state 65
    factorAux                      shift and go to state 73
    var_cte                        shift and go to state 69

state 127

    (68) termino1 -> TIMES push_poper . termino
    (66) termino -> . factor quad_fact
    (67) termino -> . factor quad_fact termino1
    (70) factor -> . LPAREN expresion RPAREN
    (71) factor -> . factorAux
    (72) factorAux -> . PLUS push_poper var_cte
    (73) factorAux -> . MINUS push_poper var_cte
    (74) factorAux -> . var_cte
    (78) var_cte -> . ID push_id
    (79) var_cte -> . CTE_I push_cte
    (80) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 68
    PLUS            shift and go to state 64
    MINUS           shift and go to state 63
    ID              shift and go to state 70
    CTE_I           shift and go to state 67
    CTE_F           shift and go to state 66

    termino                        shift and go to state 142
    factor                         shift and go to state 65
    factorAux                      shift and go to state 73
    var_cte                        shift and go to state 69

state 128

    (44) condicion -> IF LPAREN expresion RPAREN cond bloque . condFinal
    (45) condicion -> IF LPAREN expresion RPAREN cond bloque . ELSE condElse bloque condFinal
    (48) condFinal -> .

    ELSE            shift and go to state 144
    ID              reduce using rule 48 (condFinal -> .)
    IF              reduce using rule 48 (condFinal -> .)
    PRINT           reduce using rule 48 (condFinal -> .)
    WHILE           reduce using rule 48 (condFinal -> .)
    RBRACE          reduce using rule 48 (condFinal -> .)

    condFinal                      shift and go to state 143

state 129

    (58) expresion -> exp DIFFERENT push_poper exp . quad_comp
    (59) quad_comp -> .

    RPAREN          reduce using rule 59 (quad_comp -> .)
    SEMICOLON       reduce using rule 59 (quad_comp -> .)

    quad_comp                      shift and go to state 145

state 130

    (56) expresion -> exp LOWERTHAN push_poper exp . quad_comp
    (59) quad_comp -> .

    RPAREN          reduce using rule 59 (quad_comp -> .)
    SEMICOLON       reduce using rule 59 (quad_comp -> .)

    quad_comp                      shift and go to state 146

state 131

    (57) expresion -> exp MORETHAN push_poper exp . quad_comp
    (59) quad_comp -> .

    RPAREN          reduce using rule 59 (quad_comp -> .)
    SEMICOLON       reduce using rule 59 (quad_comp -> .)

    quad_comp                      shift and go to state 147

state 132

    (20) bloque -> LBRACE RBRACE .

    ELSE            reduce using rule 20 (bloque -> LBRACE RBRACE .)
    ID              reduce using rule 20 (bloque -> LBRACE RBRACE .)
    IF              reduce using rule 20 (bloque -> LBRACE RBRACE .)
    PRINT           reduce using rule 20 (bloque -> LBRACE RBRACE .)
    WHILE           reduce using rule 20 (bloque -> LBRACE RBRACE .)
    RBRACE          reduce using rule 20 (bloque -> LBRACE RBRACE .)


state 133

    (21) bloque -> LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 148


state 134

    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE .
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    $end            reduce using rule 23 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 149

state 135

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function .

    $end            reduce using rule 28 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function .)


state 136

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . RBRACE
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . RBRACE function

    RBRACE          shift and go to state 150


state 137

    (49) escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .

    ID              reduce using rule 49 (escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .)
    IF              reduce using rule 49 (escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .)
    PRINT           reduce using rule 49 (escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .)
    WHILE           reduce using rule 49 (escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .)
    RBRACE          reduce using rule 49 (escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .)


state 138

    (41) asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .

    ID              reduce using rule 41 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    IF              reduce using rule 41 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    PRINT           reduce using rule 41 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    WHILE           reduce using rule 41 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    RBRACE          reduce using rule 41 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)


state 139

    (62) exp1 -> PLUS push_poper exp .

    LOWERTHAN       reduce using rule 62 (exp1 -> PLUS push_poper exp .)
    MORETHAN        reduce using rule 62 (exp1 -> PLUS push_poper exp .)
    DIFFERENT       reduce using rule 62 (exp1 -> PLUS push_poper exp .)
    RPAREN          reduce using rule 62 (exp1 -> PLUS push_poper exp .)
    SEMICOLON       reduce using rule 62 (exp1 -> PLUS push_poper exp .)


state 140

    (63) exp1 -> MINUS push_poper exp .

    LOWERTHAN       reduce using rule 63 (exp1 -> MINUS push_poper exp .)
    MORETHAN        reduce using rule 63 (exp1 -> MINUS push_poper exp .)
    DIFFERENT       reduce using rule 63 (exp1 -> MINUS push_poper exp .)
    RPAREN          reduce using rule 63 (exp1 -> MINUS push_poper exp .)
    SEMICOLON       reduce using rule 63 (exp1 -> MINUS push_poper exp .)


state 141

    (69) termino1 -> DIVIDE push_poper termino .

    PLUS            reduce using rule 69 (termino1 -> DIVIDE push_poper termino .)
    MINUS           reduce using rule 69 (termino1 -> DIVIDE push_poper termino .)
    LOWERTHAN       reduce using rule 69 (termino1 -> DIVIDE push_poper termino .)
    MORETHAN        reduce using rule 69 (termino1 -> DIVIDE push_poper termino .)
    DIFFERENT       reduce using rule 69 (termino1 -> DIVIDE push_poper termino .)
    RPAREN          reduce using rule 69 (termino1 -> DIVIDE push_poper termino .)
    SEMICOLON       reduce using rule 69 (termino1 -> DIVIDE push_poper termino .)


state 142

    (68) termino1 -> TIMES push_poper termino .

    PLUS            reduce using rule 68 (termino1 -> TIMES push_poper termino .)
    MINUS           reduce using rule 68 (termino1 -> TIMES push_poper termino .)
    LOWERTHAN       reduce using rule 68 (termino1 -> TIMES push_poper termino .)
    MORETHAN        reduce using rule 68 (termino1 -> TIMES push_poper termino .)
    DIFFERENT       reduce using rule 68 (termino1 -> TIMES push_poper termino .)
    RPAREN          reduce using rule 68 (termino1 -> TIMES push_poper termino .)
    SEMICOLON       reduce using rule 68 (termino1 -> TIMES push_poper termino .)


state 143

    (44) condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .

    ID              reduce using rule 44 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    IF              reduce using rule 44 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    PRINT           reduce using rule 44 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    WHILE           reduce using rule 44 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    RBRACE          reduce using rule 44 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)


state 144

    (45) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE . condElse bloque condFinal
    (47) condElse -> .

    LBRACE          reduce using rule 47 (condElse -> .)

    condElse                       shift and go to state 151

state 145

    (58) expresion -> exp DIFFERENT push_poper exp quad_comp .

    SEMICOLON       reduce using rule 58 (expresion -> exp DIFFERENT push_poper exp quad_comp .)
    RPAREN          reduce using rule 58 (expresion -> exp DIFFERENT push_poper exp quad_comp .)


state 146

    (56) expresion -> exp LOWERTHAN push_poper exp quad_comp .

    SEMICOLON       reduce using rule 56 (expresion -> exp LOWERTHAN push_poper exp quad_comp .)
    RPAREN          reduce using rule 56 (expresion -> exp LOWERTHAN push_poper exp quad_comp .)


state 147

    (57) expresion -> exp MORETHAN push_poper exp quad_comp .

    SEMICOLON       reduce using rule 57 (expresion -> exp MORETHAN push_poper exp quad_comp .)
    RPAREN          reduce using rule 57 (expresion -> exp MORETHAN push_poper exp quad_comp .)


state 148

    (21) bloque -> LBRACE bloqueAux RBRACE .

    ELSE            reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    ID              reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)


state 149

    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function .

    $end            reduce using rule 25 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function .)


state 150

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE .
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    $end            reduce using rule 27 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 152

state 151

    (45) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse . bloque condFinal
    (20) bloque -> . LBRACE RBRACE
    (21) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 114

    bloque                         shift and go to state 153

state 152

    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function .

    $end            reduce using rule 29 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function .)


state 153

    (45) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque . condFinal
    (48) condFinal -> .

    ID              reduce using rule 48 (condFinal -> .)
    IF              reduce using rule 48 (condFinal -> .)
    PRINT           reduce using rule 48 (condFinal -> .)
    WHILE           reduce using rule 48 (condFinal -> .)
    RBRACE          reduce using rule 48 (condFinal -> .)

    condFinal                      shift and go to state 154

state 154

    (45) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .

    ID              reduce using rule 45 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    IF              reduce using rule 45 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    PRINT           reduce using rule 45 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    WHILE           reduce using rule 45 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    RBRACE          reduce using rule 45 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)

