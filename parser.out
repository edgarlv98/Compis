Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID COLON varsGlobal function main endPrograma
Rule 2     program -> PROGRAM ID COLON function main endPrograma
Rule 3     program -> PROGRAM ID COLON varsGlobal main endPrograma
Rule 4     program -> PROGRAM ID COLON main endPrograma
Rule 5     endPrograma -> <empty>
Rule 6     varsGlobal -> VAR varAuxGlobal1
Rule 7     varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON
Rule 8     varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1
Rule 9     varAuxGlobal2 -> ID
Rule 10    varAuxGlobal2 -> ID COMA varAuxGlobal2
Rule 11    varAuxGlobal2 -> ID LCORCH CTE_I RCORCH
Rule 12    varAuxGlobal2 -> ID LCORCH CTE_I RCORCH COMA varAuxGlobal2
Rule 13    varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH
Rule 14    varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2
Rule 15    main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
Rule 16    main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
Rule 17    nomMain -> MAIN
Rule 18    vars -> VAR varAux1
Rule 19    varAux1 -> tipo varAux2 SEMICOLON
Rule 20    varAux1 -> tipo varAux2 SEMICOLON varAux1
Rule 21    varAux2 -> ID push_var
Rule 22    varAux2 -> ID push_var COMA varAux2
Rule 23    varAux2 -> ID push_var LCORCH CTE_I RCORCH push_arreglo
Rule 24    varAux2 -> ID push_var LCORCH CTE_I RCORCH push_arreglo COMA varAux2
Rule 25    varAux2 -> ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
Rule 26    varAux2 -> ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2
Rule 27    push_var -> <empty>
Rule 28    push_arreglo -> <empty>
Rule 29    push_matriz -> <empty>
Rule 30    tipo -> INT
Rule 31    tipo -> FLOAT
Rule 32    tipo -> CHAR
Rule 33    tipoFunc -> INT
Rule 34    tipoFunc -> FLOAT
Rule 35    tipoFunc -> CHAR
Rule 36    tipoFunc -> VOID
Rule 37    bloque -> LBRACE RBRACE
Rule 38    bloque -> LBRACE bloqueAux RBRACE
Rule 39    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
Rule 40    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
Rule 41    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
Rule 42    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
Rule 43    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
Rule 44    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
Rule 45    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
Rule 46    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
Rule 47    endProc -> <empty>
Rule 48    param -> tipo ID paramAvarTable
Rule 49    param -> tipo ID paramAvarTable COMA param
Rule 50    param -> empty
Rule 51    paramAvarTable -> <empty>
Rule 52    empty -> <empty>
Rule 53    push_function -> <empty>
Rule 54    nomFunc -> ID push_function
Rule 55    bloqueAux -> estatuto
Rule 56    bloqueAux -> estatuto bloqueAux
Rule 57    while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
Rule 58    while1 -> <empty>
Rule 59    while2 -> <empty>
Rule 60    while3 -> <empty>
Rule 61    loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
Rule 62    estatuto -> asignacion
Rule 63    estatuto -> condicion
Rule 64    estatuto -> escritura
Rule 65    estatuto -> while
Rule 66    estatuto -> loopFromDo
Rule 67    estatuto -> comparacion
Rule 68    estatuto -> llamadaAFuncion
Rule 69    estatuto -> lectura
Rule 70    llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
Rule 71    llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
Rule 72    actualizaFuncion -> <empty>
Rule 73    gosub -> <empty>
Rule 74    generarEra -> <empty>
Rule 75    paramFuncion -> ID push_id2
Rule 76    paramFuncion -> ID push_id2 COMA paramFuncion
Rule 77    paramFuncion -> expresion
Rule 78    paramFuncion -> expresion COMA paramFuncion
Rule 79    paramFuncion -> empty
Rule 80    push_id2 -> <empty>
Rule 81    asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON
Rule 82    create_asign -> <empty>
Rule 83    comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
Rule 84    condicion -> IF LPAREN expresion RPAREN cond bloque condFinal
Rule 85    condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
Rule 86    cond -> <empty>
Rule 87    condElse -> <empty>
Rule 88    condFinal -> <empty>
Rule 89    escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
Rule 90    lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
Rule 91    quad_print -> <empty>
Rule 92    escrituraAux -> expresion
Rule 93    escrituraAux -> CTE_STRING push_cte
Rule 94    escrituraAux -> expresion COMA escrituraAux
Rule 95    escrituraAux -> CTE_STRING push_cte COMA escrituraAux
Rule 96    escrituraAux -> llamadaAFuncion
Rule 97    expresion -> exp
Rule 98    expresion -> exp comp exp quad_comp
Rule 99    comp -> LOWERTHAN push_poper
Rule 100   comp -> MORETHAN push_poper
Rule 101   comp -> DIFFERENT push_poper
Rule 102   comp -> DOUBLEEQUAL push_poper
Rule 103   comp -> LOWEREQUAL push_poper
Rule 104   comp -> MOREEQUAL push_poper
Rule 105   quad_comp -> <empty>
Rule 106   exp -> termino quad_term
Rule 107   exp -> termino quad_term exp1
Rule 108   exp1 -> PLUS push_poper exp
Rule 109   exp1 -> MINUS push_poper exp
Rule 110   quad_term -> <empty>
Rule 111   quad_fact -> <empty>
Rule 112   termino -> factor quad_fact
Rule 113   termino -> factor quad_fact termino1
Rule 114   termino1 -> TIMES push_poper termino
Rule 115   termino1 -> DIVIDE push_poper termino
Rule 116   factor -> LPAREN expresion RPAREN
Rule 117   factor -> factorAux
Rule 118   factorAux -> PLUS push_poper var_cte
Rule 119   factorAux -> MINUS push_poper var_cte
Rule 120   factorAux -> var_cte
Rule 121   push_id -> <empty>
Rule 122   push_cte -> <empty>
Rule 123   push_poper -> <empty>
Rule 124   var_cte -> ID push_id
Rule 125   var_cte -> CTE_I push_cte
Rule 126   var_cte -> CTE_F push_cte
Rule 127   var_cte -> CTE_STRING push_cte

Terminals, with rules where they appear

AND                  : 
CHAR                 : 32 35
COLON                : 1 2 3 4
COMA                 : 10 12 14 22 24 26 49 76 78 94 95
CTE_F                : 126
CTE_I                : 11 12 13 13 14 14 23 24 25 25 26 26 125
CTE_STRING           : 93 95 127
DIFFERENT            : 101
DIVIDE               : 115
DO                   : 61
DOUBLEEQUAL          : 83 102
ELSE                 : 85
EQUAL                : 61 81
FLOAT                : 31 34
FROM                 : 61
FUNCTION             : 39 40 41 42 43 44 45 46
ID                   : 1 2 3 4 9 10 11 12 13 14 21 22 23 24 25 26 48 49 54 61 70 71 75 76 81 83 90 124
IF                   : 84 85
INPUT                : 90
INT                  : 30 33
LBRACE               : 15 16 37 38 39 40 41 42 43 44 45 46 57 61
LCORCH               : 11 12 13 13 14 14 23 24 25 25 26 26
LOWEREQUAL           : 103
LOWERTHAN            : 99
LPAREN               : 15 16 39 40 41 42 43 44 45 46 57 61 61 70 71 84 85 89 90 116
MAIN                 : 17
MINUS                : 109 119
MOREEQUAL            : 104
MORETHAN             : 100
OR                   : 
PLUS                 : 108 118
PRINT                : 89
PROGRAM              : 1 2 3 4
RBRACE               : 15 16 37 38 39 40 41 42 43 44 45 46 57 61
RCORCH               : 11 12 13 13 14 14 23 24 25 25 26 26
RPAREN               : 15 16 39 40 41 42 43 44 45 46 57 61 61 70 71 84 85 89 90 116
SEMICOLON            : 7 8 19 20 71 81 83 89 90
TIMES                : 114
TO                   : 61
VAR                  : 6 18
VOID                 : 36
WHILE                : 57
error                : 

Nonterminals, with rules where they appear

actualizaFuncion     : 70 71
asignacion           : 62
bloque               : 84 85 85
bloqueAux            : 15 16 38 40 42 44 46 56 57 61
comp                 : 98
comparacion          : 67
cond                 : 84 85
condElse             : 85
condFinal            : 84 85
condicion            : 63
create_asign         : 81
empty                : 50 79
endProc              : 39 40 41 42 43 44 45 46
endPrograma          : 1 2 3 4
escritura            : 64
escrituraAux         : 89 94 95
estatuto             : 55 56
exp                  : 97 98 98 108 109
exp1                 : 107
expresion            : 57 61 61 70 77 78 81 83 84 85 92 94 116
factor               : 112 113
factorAux            : 117
function             : 1 2 41 42 45 46
generarEra           : 70 71
gosub                : 70 71
lectura              : 69
llamadaAFuncion      : 68 96
loopFromDo           : 66
main                 : 1 2 3 4
nomFunc              : 39 40 41 42 43 44 45 46
nomMain              : 15 16
param                : 43 44 45 46 49
paramAvarTable       : 48 49
paramFuncion         : 70 71 76 78
program              : 0
push_arreglo         : 23 24
push_cte             : 93 95 125 126 127
push_function        : 54
push_id              : 81 83 90 124
push_id2             : 75 76
push_matriz          : 25 26
push_poper           : 81 83 89 90 99 100 101 102 103 104 108 109 114 115 118 119
push_var             : 21 22 23 24 25 26
quad_comp            : 98
quad_fact            : 112 113
quad_print           : 89 90
quad_term            : 106 107
termino              : 106 107 114 115
termino1             : 113
tipo                 : 7 8 19 20 48 49
tipoFunc             : 39 40 41 42 43 44 45 46
varAux1              : 18 20
varAux2              : 19 20 22 24 26
varAuxGlobal1        : 6 8
varAuxGlobal2        : 7 8 10 12 14
var_cte              : 118 119 120
vars                 : 16 40 42 44 46
varsGlobal           : 1 3
while                : 65
while1               : 57
while2               : 57
while3               : 57

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID COLON varsGlobal function main endPrograma
    (2) program -> . PROGRAM ID COLON function main endPrograma
    (3) program -> . PROGRAM ID COLON varsGlobal main endPrograma
    (4) program -> . PROGRAM ID COLON main endPrograma

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID COLON varsGlobal function main endPrograma
    (2) program -> PROGRAM . ID COLON function main endPrograma
    (3) program -> PROGRAM . ID COLON varsGlobal main endPrograma
    (4) program -> PROGRAM . ID COLON main endPrograma

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . COLON varsGlobal function main endPrograma
    (2) program -> PROGRAM ID . COLON function main endPrograma
    (3) program -> PROGRAM ID . COLON varsGlobal main endPrograma
    (4) program -> PROGRAM ID . COLON main endPrograma

    COLON           shift and go to state 4


state 4

    (1) program -> PROGRAM ID COLON . varsGlobal function main endPrograma
    (2) program -> PROGRAM ID COLON . function main endPrograma
    (3) program -> PROGRAM ID COLON . varsGlobal main endPrograma
    (4) program -> PROGRAM ID COLON . main endPrograma
    (6) varsGlobal -> . VAR varAuxGlobal1
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (15) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (16) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (17) nomMain -> . MAIN

    VAR             shift and go to state 10
    FUNCTION        shift and go to state 5
    MAIN            shift and go to state 11

    function                       shift and go to state 9
    varsGlobal                     shift and go to state 7
    nomMain                        shift and go to state 6
    main                           shift and go to state 8

state 5

    (39) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (40) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (41) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (42) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (43) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (44) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (45) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (46) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (33) tipoFunc -> . INT
    (34) tipoFunc -> . FLOAT
    (35) tipoFunc -> . CHAR
    (36) tipoFunc -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    VOID            shift and go to state 13

    tipoFunc                       shift and go to state 16

state 6

    (15) main -> nomMain . LPAREN RPAREN LBRACE bloqueAux RBRACE
    (16) main -> nomMain . LPAREN RPAREN LBRACE vars bloqueAux RBRACE

    LPAREN          shift and go to state 17


state 7

    (1) program -> PROGRAM ID COLON varsGlobal . function main endPrograma
    (3) program -> PROGRAM ID COLON varsGlobal . main endPrograma
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (15) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (16) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (17) nomMain -> . MAIN

    FUNCTION        shift and go to state 5
    MAIN            shift and go to state 11

    function                       shift and go to state 18
    nomMain                        shift and go to state 6
    main                           shift and go to state 19

state 8

    (4) program -> PROGRAM ID COLON main . endPrograma
    (5) endPrograma -> .

    $end            reduce using rule 5 (endPrograma -> .)

    endPrograma                    shift and go to state 20

state 9

    (2) program -> PROGRAM ID COLON function . main endPrograma
    (15) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (16) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (17) nomMain -> . MAIN

    MAIN            shift and go to state 11

    nomMain                        shift and go to state 6
    main                           shift and go to state 21

state 10

    (6) varsGlobal -> VAR . varAuxGlobal1
    (7) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON
    (8) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON varAuxGlobal1
    (30) tipo -> . INT
    (31) tipo -> . FLOAT
    (32) tipo -> . CHAR

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    varAuxGlobal1                  shift and go to state 26
    tipo                           shift and go to state 22

state 11

    (17) nomMain -> MAIN .

    LPAREN          reduce using rule 17 (nomMain -> MAIN .)


state 12

    (33) tipoFunc -> INT .

    ID              reduce using rule 33 (tipoFunc -> INT .)


state 13

    (36) tipoFunc -> VOID .

    ID              reduce using rule 36 (tipoFunc -> VOID .)


state 14

    (34) tipoFunc -> FLOAT .

    ID              reduce using rule 34 (tipoFunc -> FLOAT .)


state 15

    (35) tipoFunc -> CHAR .

    ID              reduce using rule 35 (tipoFunc -> CHAR .)


state 16

    (39) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (40) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (41) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (42) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (43) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (44) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (45) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (46) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (54) nomFunc -> . ID push_function

    ID              shift and go to state 28

    nomFunc                        shift and go to state 27

state 17

    (15) main -> nomMain LPAREN . RPAREN LBRACE bloqueAux RBRACE
    (16) main -> nomMain LPAREN . RPAREN LBRACE vars bloqueAux RBRACE

    RPAREN          shift and go to state 29


state 18

    (1) program -> PROGRAM ID COLON varsGlobal function . main endPrograma
    (15) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (16) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (17) nomMain -> . MAIN

    MAIN            shift and go to state 11

    nomMain                        shift and go to state 6
    main                           shift and go to state 30

state 19

    (3) program -> PROGRAM ID COLON varsGlobal main . endPrograma
    (5) endPrograma -> .

    $end            reduce using rule 5 (endPrograma -> .)

    endPrograma                    shift and go to state 31

state 20

    (4) program -> PROGRAM ID COLON main endPrograma .

    $end            reduce using rule 4 (program -> PROGRAM ID COLON main endPrograma .)


state 21

    (2) program -> PROGRAM ID COLON function main . endPrograma
    (5) endPrograma -> .

    $end            reduce using rule 5 (endPrograma -> .)

    endPrograma                    shift and go to state 32

state 22

    (7) varAuxGlobal1 -> tipo . varAuxGlobal2 SEMICOLON
    (8) varAuxGlobal1 -> tipo . varAuxGlobal2 SEMICOLON varAuxGlobal1
    (9) varAuxGlobal2 -> . ID
    (10) varAuxGlobal2 -> . ID COMA varAuxGlobal2
    (11) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH
    (12) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    ID              shift and go to state 34

    varAuxGlobal2                  shift and go to state 33

state 23

    (30) tipo -> INT .

    ID              reduce using rule 30 (tipo -> INT .)


state 24

    (31) tipo -> FLOAT .

    ID              reduce using rule 31 (tipo -> FLOAT .)


state 25

    (32) tipo -> CHAR .

    ID              reduce using rule 32 (tipo -> CHAR .)


state 26

    (6) varsGlobal -> VAR varAuxGlobal1 .

    FUNCTION        reduce using rule 6 (varsGlobal -> VAR varAuxGlobal1 .)
    MAIN            reduce using rule 6 (varsGlobal -> VAR varAuxGlobal1 .)


state 27

    (39) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE RBRACE endProc
    (40) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (41) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE RBRACE endProc function
    (42) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (43) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE RBRACE endProc
    (44) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (45) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE RBRACE endProc function
    (46) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    LPAREN          shift and go to state 35


state 28

    (54) nomFunc -> ID . push_function
    (53) push_function -> .

    LPAREN          reduce using rule 53 (push_function -> .)

    push_function                  shift and go to state 36

state 29

    (15) main -> nomMain LPAREN RPAREN . LBRACE bloqueAux RBRACE
    (16) main -> nomMain LPAREN RPAREN . LBRACE vars bloqueAux RBRACE

    LBRACE          shift and go to state 37


state 30

    (1) program -> PROGRAM ID COLON varsGlobal function main . endPrograma
    (5) endPrograma -> .

    $end            reduce using rule 5 (endPrograma -> .)

    endPrograma                    shift and go to state 38

state 31

    (3) program -> PROGRAM ID COLON varsGlobal main endPrograma .

    $end            reduce using rule 3 (program -> PROGRAM ID COLON varsGlobal main endPrograma .)


state 32

    (2) program -> PROGRAM ID COLON function main endPrograma .

    $end            reduce using rule 2 (program -> PROGRAM ID COLON function main endPrograma .)


state 33

    (7) varAuxGlobal1 -> tipo varAuxGlobal2 . SEMICOLON
    (8) varAuxGlobal1 -> tipo varAuxGlobal2 . SEMICOLON varAuxGlobal1

    SEMICOLON       shift and go to state 39


state 34

    (9) varAuxGlobal2 -> ID .
    (10) varAuxGlobal2 -> ID . COMA varAuxGlobal2
    (11) varAuxGlobal2 -> ID . LCORCH CTE_I RCORCH
    (12) varAuxGlobal2 -> ID . LCORCH CTE_I RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> ID . LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> ID . LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    SEMICOLON       reduce using rule 9 (varAuxGlobal2 -> ID .)
    COMA            shift and go to state 41
    LCORCH          shift and go to state 40


state 35

    (39) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE RBRACE endProc
    (40) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux RBRACE endProc
    (41) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE RBRACE endProc function
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (43) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE RBRACE endProc
    (44) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (45) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE RBRACE endProc function
    (46) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (48) param -> . tipo ID paramAvarTable
    (49) param -> . tipo ID paramAvarTable COMA param
    (50) param -> . empty
    (30) tipo -> . INT
    (31) tipo -> . FLOAT
    (32) tipo -> . CHAR
    (52) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 42
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

  ! RPAREN          [ reduce using rule 52 (empty -> .) ]

    tipo                           shift and go to state 45
    param                          shift and go to state 43
    empty                          shift and go to state 44

state 36

    (54) nomFunc -> ID push_function .

    LPAREN          reduce using rule 54 (nomFunc -> ID push_function .)


state 37

    (15) main -> nomMain LPAREN RPAREN LBRACE . bloqueAux RBRACE
    (16) main -> nomMain LPAREN RPAREN LBRACE . vars bloqueAux RBRACE
    (55) bloqueAux -> . estatuto
    (56) bloqueAux -> . estatuto bloqueAux
    (18) vars -> . VAR varAux1
    (62) estatuto -> . asignacion
    (63) estatuto -> . condicion
    (64) estatuto -> . escritura
    (65) estatuto -> . while
    (66) estatuto -> . loopFromDo
    (67) estatuto -> . comparacion
    (68) estatuto -> . llamadaAFuncion
    (69) estatuto -> . lectura
    (81) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (84) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (85) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (89) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (57) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (61) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (83) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (70) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (71) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (90) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON

    VAR             shift and go to state 52
    ID              shift and go to state 54
    IF              shift and go to state 49
    PRINT           shift and go to state 47
    WHILE           shift and go to state 59
    FROM            shift and go to state 57
    INPUT           shift and go to state 53

    vars                           shift and go to state 46
    estatuto                       shift and go to state 48
    lectura                        shift and go to state 50
    condicion                      shift and go to state 51
    loopFromDo                     shift and go to state 55
    llamadaAFuncion                shift and go to state 56
    asignacion                     shift and go to state 58
    bloqueAux                      shift and go to state 60
    while                          shift and go to state 61
    comparacion                    shift and go to state 62
    escritura                      shift and go to state 63

state 38

    (1) program -> PROGRAM ID COLON varsGlobal function main endPrograma .

    $end            reduce using rule 1 (program -> PROGRAM ID COLON varsGlobal function main endPrograma .)


state 39

    (7) varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON .
    (8) varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON . varAuxGlobal1
    (7) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON
    (8) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON varAuxGlobal1
    (30) tipo -> . INT
    (31) tipo -> . FLOAT
    (32) tipo -> . CHAR

    FUNCTION        reduce using rule 7 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON .)
    MAIN            reduce using rule 7 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON .)
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    varAuxGlobal1                  shift and go to state 64
    tipo                           shift and go to state 22

state 40

    (11) varAuxGlobal2 -> ID LCORCH . CTE_I RCORCH
    (12) varAuxGlobal2 -> ID LCORCH . CTE_I RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> ID LCORCH . CTE_I RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> ID LCORCH . CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    CTE_I           shift and go to state 65


state 41

    (10) varAuxGlobal2 -> ID COMA . varAuxGlobal2
    (9) varAuxGlobal2 -> . ID
    (10) varAuxGlobal2 -> . ID COMA varAuxGlobal2
    (11) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH
    (12) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    ID              shift and go to state 34

    varAuxGlobal2                  shift and go to state 66

state 42

    (39) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE RBRACE endProc
    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux RBRACE endProc
    (41) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE RBRACE endProc function
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux RBRACE endProc function

    LBRACE          shift and go to state 67


state 43

    (43) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE RBRACE endProc
    (44) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux RBRACE endProc
    (45) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE RBRACE endProc function
    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux RBRACE endProc function

    RPAREN          shift and go to state 68


state 44

    (50) param -> empty .

    RPAREN          reduce using rule 50 (param -> empty .)


state 45

    (48) param -> tipo . ID paramAvarTable
    (49) param -> tipo . ID paramAvarTable COMA param

    ID              shift and go to state 69


state 46

    (16) main -> nomMain LPAREN RPAREN LBRACE vars . bloqueAux RBRACE
    (55) bloqueAux -> . estatuto
    (56) bloqueAux -> . estatuto bloqueAux
    (62) estatuto -> . asignacion
    (63) estatuto -> . condicion
    (64) estatuto -> . escritura
    (65) estatuto -> . while
    (66) estatuto -> . loopFromDo
    (67) estatuto -> . comparacion
    (68) estatuto -> . llamadaAFuncion
    (69) estatuto -> . lectura
    (81) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (84) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (85) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (89) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (57) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (61) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (83) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (70) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (71) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (90) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON

    ID              shift and go to state 54
    IF              shift and go to state 49
    PRINT           shift and go to state 47
    WHILE           shift and go to state 59
    FROM            shift and go to state 57
    INPUT           shift and go to state 53

    estatuto                       shift and go to state 48
    condicion                      shift and go to state 51
    lectura                        shift and go to state 50
    loopFromDo                     shift and go to state 55
    llamadaAFuncion                shift and go to state 56
    asignacion                     shift and go to state 58
    bloqueAux                      shift and go to state 70
    while                          shift and go to state 61
    comparacion                    shift and go to state 62
    escritura                      shift and go to state 63

state 47

    (89) escritura -> PRINT . push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (123) push_poper -> .

    LPAREN          reduce using rule 123 (push_poper -> .)

    push_poper                     shift and go to state 71

state 48

    (55) bloqueAux -> estatuto .
    (56) bloqueAux -> estatuto . bloqueAux
    (55) bloqueAux -> . estatuto
    (56) bloqueAux -> . estatuto bloqueAux
    (62) estatuto -> . asignacion
    (63) estatuto -> . condicion
    (64) estatuto -> . escritura
    (65) estatuto -> . while
    (66) estatuto -> . loopFromDo
    (67) estatuto -> . comparacion
    (68) estatuto -> . llamadaAFuncion
    (69) estatuto -> . lectura
    (81) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (84) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (85) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (89) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (57) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (61) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (83) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (70) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (71) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (90) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON

    RBRACE          reduce using rule 55 (bloqueAux -> estatuto .)
    ID              shift and go to state 54
    IF              shift and go to state 49
    PRINT           shift and go to state 47
    WHILE           shift and go to state 59
    FROM            shift and go to state 57
    INPUT           shift and go to state 53

    estatuto                       shift and go to state 48
    condicion                      shift and go to state 51
    lectura                        shift and go to state 50
    loopFromDo                     shift and go to state 55
    llamadaAFuncion                shift and go to state 56
    asignacion                     shift and go to state 58
    bloqueAux                      shift and go to state 72
    while                          shift and go to state 61
    comparacion                    shift and go to state 62
    escritura                      shift and go to state 63

state 49

    (84) condicion -> IF . LPAREN expresion RPAREN cond bloque condFinal
    (85) condicion -> IF . LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal

    LPAREN          shift and go to state 73


state 50

    (69) estatuto -> lectura .

    ID              reduce using rule 69 (estatuto -> lectura .)
    IF              reduce using rule 69 (estatuto -> lectura .)
    PRINT           reduce using rule 69 (estatuto -> lectura .)
    WHILE           reduce using rule 69 (estatuto -> lectura .)
    FROM            reduce using rule 69 (estatuto -> lectura .)
    INPUT           reduce using rule 69 (estatuto -> lectura .)
    RBRACE          reduce using rule 69 (estatuto -> lectura .)


state 51

    (63) estatuto -> condicion .

    ID              reduce using rule 63 (estatuto -> condicion .)
    IF              reduce using rule 63 (estatuto -> condicion .)
    PRINT           reduce using rule 63 (estatuto -> condicion .)
    WHILE           reduce using rule 63 (estatuto -> condicion .)
    FROM            reduce using rule 63 (estatuto -> condicion .)
    INPUT           reduce using rule 63 (estatuto -> condicion .)
    RBRACE          reduce using rule 63 (estatuto -> condicion .)


state 52

    (18) vars -> VAR . varAux1
    (19) varAux1 -> . tipo varAux2 SEMICOLON
    (20) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (30) tipo -> . INT
    (31) tipo -> . FLOAT
    (32) tipo -> . CHAR

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    varAux1                        shift and go to state 75
    tipo                           shift and go to state 74

state 53

    (90) lectura -> INPUT . push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (123) push_poper -> .

    LPAREN          reduce using rule 123 (push_poper -> .)

    push_poper                     shift and go to state 76

state 54

    (81) asignacion -> ID . push_id EQUAL push_poper expresion create_asign SEMICOLON
    (83) comparacion -> ID . push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (70) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (71) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (121) push_id -> .
    (72) actualizaFuncion -> .

    EQUAL           reduce using rule 121 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 121 (push_id -> .)
    LPAREN          reduce using rule 72 (actualizaFuncion -> .)

    actualizaFuncion               shift and go to state 77
    push_id                        shift and go to state 78

state 55

    (66) estatuto -> loopFromDo .

    ID              reduce using rule 66 (estatuto -> loopFromDo .)
    IF              reduce using rule 66 (estatuto -> loopFromDo .)
    PRINT           reduce using rule 66 (estatuto -> loopFromDo .)
    WHILE           reduce using rule 66 (estatuto -> loopFromDo .)
    FROM            reduce using rule 66 (estatuto -> loopFromDo .)
    INPUT           reduce using rule 66 (estatuto -> loopFromDo .)
    RBRACE          reduce using rule 66 (estatuto -> loopFromDo .)


state 56

    (68) estatuto -> llamadaAFuncion .

    ID              reduce using rule 68 (estatuto -> llamadaAFuncion .)
    IF              reduce using rule 68 (estatuto -> llamadaAFuncion .)
    PRINT           reduce using rule 68 (estatuto -> llamadaAFuncion .)
    WHILE           reduce using rule 68 (estatuto -> llamadaAFuncion .)
    FROM            reduce using rule 68 (estatuto -> llamadaAFuncion .)
    INPUT           reduce using rule 68 (estatuto -> llamadaAFuncion .)
    RBRACE          reduce using rule 68 (estatuto -> llamadaAFuncion .)


state 57

    (61) loopFromDo -> FROM . LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    LPAREN          shift and go to state 79


state 58

    (62) estatuto -> asignacion .

    ID              reduce using rule 62 (estatuto -> asignacion .)
    IF              reduce using rule 62 (estatuto -> asignacion .)
    PRINT           reduce using rule 62 (estatuto -> asignacion .)
    WHILE           reduce using rule 62 (estatuto -> asignacion .)
    FROM            reduce using rule 62 (estatuto -> asignacion .)
    INPUT           reduce using rule 62 (estatuto -> asignacion .)
    RBRACE          reduce using rule 62 (estatuto -> asignacion .)


state 59

    (57) while -> WHILE . while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (58) while1 -> .

    LPAREN          reduce using rule 58 (while1 -> .)

    while1                         shift and go to state 80

state 60

    (15) main -> nomMain LPAREN RPAREN LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 81


state 61

    (65) estatuto -> while .

    ID              reduce using rule 65 (estatuto -> while .)
    IF              reduce using rule 65 (estatuto -> while .)
    PRINT           reduce using rule 65 (estatuto -> while .)
    WHILE           reduce using rule 65 (estatuto -> while .)
    FROM            reduce using rule 65 (estatuto -> while .)
    INPUT           reduce using rule 65 (estatuto -> while .)
    RBRACE          reduce using rule 65 (estatuto -> while .)


state 62

    (67) estatuto -> comparacion .

    ID              reduce using rule 67 (estatuto -> comparacion .)
    IF              reduce using rule 67 (estatuto -> comparacion .)
    PRINT           reduce using rule 67 (estatuto -> comparacion .)
    WHILE           reduce using rule 67 (estatuto -> comparacion .)
    FROM            reduce using rule 67 (estatuto -> comparacion .)
    INPUT           reduce using rule 67 (estatuto -> comparacion .)
    RBRACE          reduce using rule 67 (estatuto -> comparacion .)


state 63

    (64) estatuto -> escritura .

    ID              reduce using rule 64 (estatuto -> escritura .)
    IF              reduce using rule 64 (estatuto -> escritura .)
    PRINT           reduce using rule 64 (estatuto -> escritura .)
    WHILE           reduce using rule 64 (estatuto -> escritura .)
    FROM            reduce using rule 64 (estatuto -> escritura .)
    INPUT           reduce using rule 64 (estatuto -> escritura .)
    RBRACE          reduce using rule 64 (estatuto -> escritura .)


state 64

    (8) varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1 .

    FUNCTION        reduce using rule 8 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1 .)
    MAIN            reduce using rule 8 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1 .)


state 65

    (11) varAuxGlobal2 -> ID LCORCH CTE_I . RCORCH
    (12) varAuxGlobal2 -> ID LCORCH CTE_I . RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> ID LCORCH CTE_I . RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> ID LCORCH CTE_I . RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    RCORCH          shift and go to state 82


state 66

    (10) varAuxGlobal2 -> ID COMA varAuxGlobal2 .

    SEMICOLON       reduce using rule 10 (varAuxGlobal2 -> ID COMA varAuxGlobal2 .)


state 67

    (39) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . RBRACE endProc
    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux RBRACE endProc
    (41) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . RBRACE endProc function
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux RBRACE endProc function
    (18) vars -> . VAR varAux1

    RBRACE          shift and go to state 83
    VAR             shift and go to state 52

    vars                           shift and go to state 84

state 68

    (43) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE RBRACE endProc
    (44) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux RBRACE endProc
    (45) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE RBRACE endProc function
    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux RBRACE endProc function

    LBRACE          shift and go to state 85


state 69

    (48) param -> tipo ID . paramAvarTable
    (49) param -> tipo ID . paramAvarTable COMA param
    (51) paramAvarTable -> .

    COMA            reduce using rule 51 (paramAvarTable -> .)
    RPAREN          reduce using rule 51 (paramAvarTable -> .)

    paramAvarTable                 shift and go to state 86

state 70

    (16) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux . RBRACE

    RBRACE          shift and go to state 87


state 71

    (89) escritura -> PRINT push_poper . LPAREN escrituraAux RPAREN quad_print SEMICOLON

    LPAREN          shift and go to state 88


state 72

    (56) bloqueAux -> estatuto bloqueAux .

    RBRACE          reduce using rule 56 (bloqueAux -> estatuto bloqueAux .)


state 73

    (84) condicion -> IF LPAREN . expresion RPAREN cond bloque condFinal
    (85) condicion -> IF LPAREN . expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (97) expresion -> . exp
    (98) expresion -> . exp comp exp quad_comp
    (106) exp -> . termino quad_term
    (107) exp -> . termino quad_term exp1
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    ID              shift and go to state 98
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94
    CTE_STRING      shift and go to state 95

    expresion                      shift and go to state 99
    factor                         shift and go to state 93
    termino                        shift and go to state 90
    exp                            shift and go to state 100
    factorAux                      shift and go to state 101
    var_cte                        shift and go to state 89

state 74

    (19) varAux1 -> tipo . varAux2 SEMICOLON
    (20) varAux1 -> tipo . varAux2 SEMICOLON varAux1
    (21) varAux2 -> . ID push_var
    (22) varAux2 -> . ID push_var COMA varAux2
    (23) varAux2 -> . ID push_var LCORCH CTE_I RCORCH push_arreglo
    (24) varAux2 -> . ID push_var LCORCH CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> . ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> . ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    ID              shift and go to state 103

    varAux2                        shift and go to state 102

state 75

    (18) vars -> VAR varAux1 .

    ID              reduce using rule 18 (vars -> VAR varAux1 .)
    IF              reduce using rule 18 (vars -> VAR varAux1 .)
    PRINT           reduce using rule 18 (vars -> VAR varAux1 .)
    WHILE           reduce using rule 18 (vars -> VAR varAux1 .)
    FROM            reduce using rule 18 (vars -> VAR varAux1 .)
    INPUT           reduce using rule 18 (vars -> VAR varAux1 .)


state 76

    (90) lectura -> INPUT push_poper . LPAREN ID push_id RPAREN quad_print SEMICOLON

    LPAREN          shift and go to state 104


state 77

    (70) llamadaAFuncion -> ID actualizaFuncion . generarEra LPAREN paramFuncion gosub RPAREN expresion
    (71) llamadaAFuncion -> ID actualizaFuncion . generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (74) generarEra -> .

    LPAREN          reduce using rule 74 (generarEra -> .)

    generarEra                     shift and go to state 105

state 78

    (81) asignacion -> ID push_id . EQUAL push_poper expresion create_asign SEMICOLON
    (83) comparacion -> ID push_id . DOUBLEEQUAL push_poper expresion SEMICOLON

    EQUAL           shift and go to state 107
    DOUBLEEQUAL     shift and go to state 106


state 79

    (61) loopFromDo -> FROM LPAREN . ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    ID              shift and go to state 108


state 80

    (57) while -> WHILE while1 . LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3

    LPAREN          shift and go to state 109


state 81

    (15) main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE .

    $end            reduce using rule 15 (main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE .)


state 82

    (11) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH .
    (12) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH . COMA varAuxGlobal2
    (13) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH . LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH . LCORCH CTE_I RCORCH COMA varAuxGlobal2

    SEMICOLON       reduce using rule 11 (varAuxGlobal2 -> ID LCORCH CTE_I RCORCH .)
    COMA            shift and go to state 111
    LCORCH          shift and go to state 110


state 83

    (39) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE . endProc
    (41) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE . endProc function
    (47) endProc -> .

    FUNCTION        reduce using rule 47 (endProc -> .)
    MAIN            reduce using rule 47 (endProc -> .)

    endProc                        shift and go to state 112

state 84

    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux RBRACE endProc
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux RBRACE endProc function
    (55) bloqueAux -> . estatuto
    (56) bloqueAux -> . estatuto bloqueAux
    (62) estatuto -> . asignacion
    (63) estatuto -> . condicion
    (64) estatuto -> . escritura
    (65) estatuto -> . while
    (66) estatuto -> . loopFromDo
    (67) estatuto -> . comparacion
    (68) estatuto -> . llamadaAFuncion
    (69) estatuto -> . lectura
    (81) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (84) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (85) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (89) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (57) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (61) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (83) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (70) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (71) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (90) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON

    ID              shift and go to state 54
    IF              shift and go to state 49
    PRINT           shift and go to state 47
    WHILE           shift and go to state 59
    FROM            shift and go to state 57
    INPUT           shift and go to state 53

    estatuto                       shift and go to state 48
    condicion                      shift and go to state 51
    lectura                        shift and go to state 50
    loopFromDo                     shift and go to state 55
    llamadaAFuncion                shift and go to state 56
    asignacion                     shift and go to state 58
    bloqueAux                      shift and go to state 113
    while                          shift and go to state 61
    comparacion                    shift and go to state 62
    escritura                      shift and go to state 63

state 85

    (43) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . RBRACE endProc
    (44) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux RBRACE endProc
    (45) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . RBRACE endProc function
    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux RBRACE endProc function
    (18) vars -> . VAR varAux1

    RBRACE          shift and go to state 114
    VAR             shift and go to state 52

    vars                           shift and go to state 115

state 86

    (48) param -> tipo ID paramAvarTable .
    (49) param -> tipo ID paramAvarTable . COMA param

    RPAREN          reduce using rule 48 (param -> tipo ID paramAvarTable .)
    COMA            shift and go to state 116


state 87

    (16) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE .

    $end            reduce using rule 16 (main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE .)


state 88

    (89) escritura -> PRINT push_poper LPAREN . escrituraAux RPAREN quad_print SEMICOLON
    (92) escrituraAux -> . expresion
    (93) escrituraAux -> . CTE_STRING push_cte
    (94) escrituraAux -> . expresion COMA escrituraAux
    (95) escrituraAux -> . CTE_STRING push_cte COMA escrituraAux
    (96) escrituraAux -> . llamadaAFuncion
    (97) expresion -> . exp
    (98) expresion -> . exp comp exp quad_comp
    (70) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (71) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (106) exp -> . termino quad_term
    (107) exp -> . termino quad_term exp1
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    CTE_STRING      shift and go to state 117
    ID              shift and go to state 119
    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94

    termino                        shift and go to state 90
    factor                         shift and go to state 93
    expresion                      shift and go to state 118
    var_cte                        shift and go to state 89
    escrituraAux                   shift and go to state 120
    llamadaAFuncion                shift and go to state 121
    exp                            shift and go to state 100
    factorAux                      shift and go to state 101

state 89

    (120) factorAux -> var_cte .

    TIMES           reduce using rule 120 (factorAux -> var_cte .)
    DIVIDE          reduce using rule 120 (factorAux -> var_cte .)
    PLUS            reduce using rule 120 (factorAux -> var_cte .)
    MINUS           reduce using rule 120 (factorAux -> var_cte .)
    LOWERTHAN       reduce using rule 120 (factorAux -> var_cte .)
    MORETHAN        reduce using rule 120 (factorAux -> var_cte .)
    DIFFERENT       reduce using rule 120 (factorAux -> var_cte .)
    DOUBLEEQUAL     reduce using rule 120 (factorAux -> var_cte .)
    LOWEREQUAL      reduce using rule 120 (factorAux -> var_cte .)
    MOREEQUAL       reduce using rule 120 (factorAux -> var_cte .)
    ID              reduce using rule 120 (factorAux -> var_cte .)
    IF              reduce using rule 120 (factorAux -> var_cte .)
    PRINT           reduce using rule 120 (factorAux -> var_cte .)
    WHILE           reduce using rule 120 (factorAux -> var_cte .)
    FROM            reduce using rule 120 (factorAux -> var_cte .)
    INPUT           reduce using rule 120 (factorAux -> var_cte .)
    RBRACE          reduce using rule 120 (factorAux -> var_cte .)
    RPAREN          reduce using rule 120 (factorAux -> var_cte .)
    COMA            reduce using rule 120 (factorAux -> var_cte .)
    SEMICOLON       reduce using rule 120 (factorAux -> var_cte .)


state 90

    (106) exp -> termino . quad_term
    (107) exp -> termino . quad_term exp1
    (110) quad_term -> .

    PLUS            reduce using rule 110 (quad_term -> .)
    MINUS           reduce using rule 110 (quad_term -> .)
    LOWERTHAN       reduce using rule 110 (quad_term -> .)
    MORETHAN        reduce using rule 110 (quad_term -> .)
    DIFFERENT       reduce using rule 110 (quad_term -> .)
    DOUBLEEQUAL     reduce using rule 110 (quad_term -> .)
    LOWEREQUAL      reduce using rule 110 (quad_term -> .)
    MOREEQUAL       reduce using rule 110 (quad_term -> .)
    RPAREN          reduce using rule 110 (quad_term -> .)
    COMA            reduce using rule 110 (quad_term -> .)
    SEMICOLON       reduce using rule 110 (quad_term -> .)
    ID              reduce using rule 110 (quad_term -> .)
    IF              reduce using rule 110 (quad_term -> .)
    PRINT           reduce using rule 110 (quad_term -> .)
    WHILE           reduce using rule 110 (quad_term -> .)
    FROM            reduce using rule 110 (quad_term -> .)
    INPUT           reduce using rule 110 (quad_term -> .)
    RBRACE          reduce using rule 110 (quad_term -> .)

    quad_term                      shift and go to state 122

state 91

    (119) factorAux -> MINUS . push_poper var_cte
    (123) push_poper -> .

    ID              reduce using rule 123 (push_poper -> .)
    CTE_I           reduce using rule 123 (push_poper -> .)
    CTE_F           reduce using rule 123 (push_poper -> .)
    CTE_STRING      reduce using rule 123 (push_poper -> .)

    push_poper                     shift and go to state 123

state 92

    (118) factorAux -> PLUS . push_poper var_cte
    (123) push_poper -> .

    ID              reduce using rule 123 (push_poper -> .)
    CTE_I           reduce using rule 123 (push_poper -> .)
    CTE_F           reduce using rule 123 (push_poper -> .)
    CTE_STRING      reduce using rule 123 (push_poper -> .)

    push_poper                     shift and go to state 124

state 93

    (112) termino -> factor . quad_fact
    (113) termino -> factor . quad_fact termino1
    (111) quad_fact -> .

    TIMES           reduce using rule 111 (quad_fact -> .)
    DIVIDE          reduce using rule 111 (quad_fact -> .)
    PLUS            reduce using rule 111 (quad_fact -> .)
    MINUS           reduce using rule 111 (quad_fact -> .)
    LOWERTHAN       reduce using rule 111 (quad_fact -> .)
    MORETHAN        reduce using rule 111 (quad_fact -> .)
    DIFFERENT       reduce using rule 111 (quad_fact -> .)
    DOUBLEEQUAL     reduce using rule 111 (quad_fact -> .)
    LOWEREQUAL      reduce using rule 111 (quad_fact -> .)
    MOREEQUAL       reduce using rule 111 (quad_fact -> .)
    RPAREN          reduce using rule 111 (quad_fact -> .)
    COMA            reduce using rule 111 (quad_fact -> .)
    SEMICOLON       reduce using rule 111 (quad_fact -> .)
    ID              reduce using rule 111 (quad_fact -> .)
    IF              reduce using rule 111 (quad_fact -> .)
    PRINT           reduce using rule 111 (quad_fact -> .)
    WHILE           reduce using rule 111 (quad_fact -> .)
    FROM            reduce using rule 111 (quad_fact -> .)
    INPUT           reduce using rule 111 (quad_fact -> .)
    RBRACE          reduce using rule 111 (quad_fact -> .)

    quad_fact                      shift and go to state 125

state 94

    (126) var_cte -> CTE_F . push_cte
    (122) push_cte -> .

    TIMES           reduce using rule 122 (push_cte -> .)
    DIVIDE          reduce using rule 122 (push_cte -> .)
    PLUS            reduce using rule 122 (push_cte -> .)
    MINUS           reduce using rule 122 (push_cte -> .)
    LOWERTHAN       reduce using rule 122 (push_cte -> .)
    MORETHAN        reduce using rule 122 (push_cte -> .)
    DIFFERENT       reduce using rule 122 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 122 (push_cte -> .)
    LOWEREQUAL      reduce using rule 122 (push_cte -> .)
    MOREEQUAL       reduce using rule 122 (push_cte -> .)
    RPAREN          reduce using rule 122 (push_cte -> .)
    COMA            reduce using rule 122 (push_cte -> .)
    SEMICOLON       reduce using rule 122 (push_cte -> .)
    ID              reduce using rule 122 (push_cte -> .)
    IF              reduce using rule 122 (push_cte -> .)
    PRINT           reduce using rule 122 (push_cte -> .)
    WHILE           reduce using rule 122 (push_cte -> .)
    FROM            reduce using rule 122 (push_cte -> .)
    INPUT           reduce using rule 122 (push_cte -> .)
    RBRACE          reduce using rule 122 (push_cte -> .)

    push_cte                       shift and go to state 126

state 95

    (127) var_cte -> CTE_STRING . push_cte
    (122) push_cte -> .

    TIMES           reduce using rule 122 (push_cte -> .)
    DIVIDE          reduce using rule 122 (push_cte -> .)
    PLUS            reduce using rule 122 (push_cte -> .)
    MINUS           reduce using rule 122 (push_cte -> .)
    LOWERTHAN       reduce using rule 122 (push_cte -> .)
    MORETHAN        reduce using rule 122 (push_cte -> .)
    DIFFERENT       reduce using rule 122 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 122 (push_cte -> .)
    LOWEREQUAL      reduce using rule 122 (push_cte -> .)
    MOREEQUAL       reduce using rule 122 (push_cte -> .)
    RPAREN          reduce using rule 122 (push_cte -> .)
    COMA            reduce using rule 122 (push_cte -> .)
    SEMICOLON       reduce using rule 122 (push_cte -> .)
    ID              reduce using rule 122 (push_cte -> .)
    IF              reduce using rule 122 (push_cte -> .)
    PRINT           reduce using rule 122 (push_cte -> .)
    WHILE           reduce using rule 122 (push_cte -> .)
    FROM            reduce using rule 122 (push_cte -> .)
    INPUT           reduce using rule 122 (push_cte -> .)
    RBRACE          reduce using rule 122 (push_cte -> .)

    push_cte                       shift and go to state 127

state 96

    (125) var_cte -> CTE_I . push_cte
    (122) push_cte -> .

    TIMES           reduce using rule 122 (push_cte -> .)
    DIVIDE          reduce using rule 122 (push_cte -> .)
    PLUS            reduce using rule 122 (push_cte -> .)
    MINUS           reduce using rule 122 (push_cte -> .)
    LOWERTHAN       reduce using rule 122 (push_cte -> .)
    MORETHAN        reduce using rule 122 (push_cte -> .)
    DIFFERENT       reduce using rule 122 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 122 (push_cte -> .)
    LOWEREQUAL      reduce using rule 122 (push_cte -> .)
    MOREEQUAL       reduce using rule 122 (push_cte -> .)
    RPAREN          reduce using rule 122 (push_cte -> .)
    COMA            reduce using rule 122 (push_cte -> .)
    SEMICOLON       reduce using rule 122 (push_cte -> .)
    ID              reduce using rule 122 (push_cte -> .)
    IF              reduce using rule 122 (push_cte -> .)
    PRINT           reduce using rule 122 (push_cte -> .)
    WHILE           reduce using rule 122 (push_cte -> .)
    FROM            reduce using rule 122 (push_cte -> .)
    INPUT           reduce using rule 122 (push_cte -> .)
    RBRACE          reduce using rule 122 (push_cte -> .)

    push_cte                       shift and go to state 128

state 97

    (116) factor -> LPAREN . expresion RPAREN
    (97) expresion -> . exp
    (98) expresion -> . exp comp exp quad_comp
    (106) exp -> . termino quad_term
    (107) exp -> . termino quad_term exp1
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    ID              shift and go to state 98
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94
    CTE_STRING      shift and go to state 95

    expresion                      shift and go to state 129
    factor                         shift and go to state 93
    termino                        shift and go to state 90
    exp                            shift and go to state 100
    factorAux                      shift and go to state 101
    var_cte                        shift and go to state 89

state 98

    (124) var_cte -> ID . push_id
    (121) push_id -> .

    TIMES           reduce using rule 121 (push_id -> .)
    DIVIDE          reduce using rule 121 (push_id -> .)
    PLUS            reduce using rule 121 (push_id -> .)
    MINUS           reduce using rule 121 (push_id -> .)
    LOWERTHAN       reduce using rule 121 (push_id -> .)
    MORETHAN        reduce using rule 121 (push_id -> .)
    DIFFERENT       reduce using rule 121 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 121 (push_id -> .)
    LOWEREQUAL      reduce using rule 121 (push_id -> .)
    MOREEQUAL       reduce using rule 121 (push_id -> .)
    RPAREN          reduce using rule 121 (push_id -> .)
    COMA            reduce using rule 121 (push_id -> .)
    SEMICOLON       reduce using rule 121 (push_id -> .)
    ID              reduce using rule 121 (push_id -> .)
    IF              reduce using rule 121 (push_id -> .)
    PRINT           reduce using rule 121 (push_id -> .)
    WHILE           reduce using rule 121 (push_id -> .)
    FROM            reduce using rule 121 (push_id -> .)
    INPUT           reduce using rule 121 (push_id -> .)
    RBRACE          reduce using rule 121 (push_id -> .)

    push_id                        shift and go to state 130

state 99

    (84) condicion -> IF LPAREN expresion . RPAREN cond bloque condFinal
    (85) condicion -> IF LPAREN expresion . RPAREN cond bloque ELSE condElse bloque condFinal

    RPAREN          shift and go to state 131


state 100

    (97) expresion -> exp .
    (98) expresion -> exp . comp exp quad_comp
    (99) comp -> . LOWERTHAN push_poper
    (100) comp -> . MORETHAN push_poper
    (101) comp -> . DIFFERENT push_poper
    (102) comp -> . DOUBLEEQUAL push_poper
    (103) comp -> . LOWEREQUAL push_poper
    (104) comp -> . MOREEQUAL push_poper

    RPAREN          reduce using rule 97 (expresion -> exp .)
    ID              reduce using rule 97 (expresion -> exp .)
    IF              reduce using rule 97 (expresion -> exp .)
    PRINT           reduce using rule 97 (expresion -> exp .)
    WHILE           reduce using rule 97 (expresion -> exp .)
    FROM            reduce using rule 97 (expresion -> exp .)
    INPUT           reduce using rule 97 (expresion -> exp .)
    RBRACE          reduce using rule 97 (expresion -> exp .)
    COMA            reduce using rule 97 (expresion -> exp .)
    SEMICOLON       reduce using rule 97 (expresion -> exp .)
    LOWERTHAN       shift and go to state 135
    MORETHAN        shift and go to state 138
    DIFFERENT       shift and go to state 133
    DOUBLEEQUAL     shift and go to state 134
    LOWEREQUAL      shift and go to state 137
    MOREEQUAL       shift and go to state 132

    comp                           shift and go to state 136

state 101

    (117) factor -> factorAux .

    TIMES           reduce using rule 117 (factor -> factorAux .)
    DIVIDE          reduce using rule 117 (factor -> factorAux .)
    PLUS            reduce using rule 117 (factor -> factorAux .)
    MINUS           reduce using rule 117 (factor -> factorAux .)
    LOWERTHAN       reduce using rule 117 (factor -> factorAux .)
    MORETHAN        reduce using rule 117 (factor -> factorAux .)
    DIFFERENT       reduce using rule 117 (factor -> factorAux .)
    DOUBLEEQUAL     reduce using rule 117 (factor -> factorAux .)
    LOWEREQUAL      reduce using rule 117 (factor -> factorAux .)
    MOREEQUAL       reduce using rule 117 (factor -> factorAux .)
    RPAREN          reduce using rule 117 (factor -> factorAux .)
    COMA            reduce using rule 117 (factor -> factorAux .)
    SEMICOLON       reduce using rule 117 (factor -> factorAux .)
    ID              reduce using rule 117 (factor -> factorAux .)
    IF              reduce using rule 117 (factor -> factorAux .)
    PRINT           reduce using rule 117 (factor -> factorAux .)
    WHILE           reduce using rule 117 (factor -> factorAux .)
    FROM            reduce using rule 117 (factor -> factorAux .)
    INPUT           reduce using rule 117 (factor -> factorAux .)
    RBRACE          reduce using rule 117 (factor -> factorAux .)


state 102

    (19) varAux1 -> tipo varAux2 . SEMICOLON
    (20) varAux1 -> tipo varAux2 . SEMICOLON varAux1

    SEMICOLON       shift and go to state 139


state 103

    (21) varAux2 -> ID . push_var
    (22) varAux2 -> ID . push_var COMA varAux2
    (23) varAux2 -> ID . push_var LCORCH CTE_I RCORCH push_arreglo
    (24) varAux2 -> ID . push_var LCORCH CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> ID . push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> ID . push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2
    (27) push_var -> .

    COMA            reduce using rule 27 (push_var -> .)
    LCORCH          reduce using rule 27 (push_var -> .)
    SEMICOLON       reduce using rule 27 (push_var -> .)

    push_var                       shift and go to state 140

state 104

    (90) lectura -> INPUT push_poper LPAREN . ID push_id RPAREN quad_print SEMICOLON

    ID              shift and go to state 141


state 105

    (70) llamadaAFuncion -> ID actualizaFuncion generarEra . LPAREN paramFuncion gosub RPAREN expresion
    (71) llamadaAFuncion -> ID actualizaFuncion generarEra . LPAREN paramFuncion gosub RPAREN SEMICOLON

    LPAREN          shift and go to state 142


state 106

    (83) comparacion -> ID push_id DOUBLEEQUAL . push_poper expresion SEMICOLON
    (123) push_poper -> .

    LPAREN          reduce using rule 123 (push_poper -> .)
    PLUS            reduce using rule 123 (push_poper -> .)
    MINUS           reduce using rule 123 (push_poper -> .)
    ID              reduce using rule 123 (push_poper -> .)
    CTE_I           reduce using rule 123 (push_poper -> .)
    CTE_F           reduce using rule 123 (push_poper -> .)
    CTE_STRING      reduce using rule 123 (push_poper -> .)

    push_poper                     shift and go to state 143

state 107

    (81) asignacion -> ID push_id EQUAL . push_poper expresion create_asign SEMICOLON
    (123) push_poper -> .

    LPAREN          reduce using rule 123 (push_poper -> .)
    PLUS            reduce using rule 123 (push_poper -> .)
    MINUS           reduce using rule 123 (push_poper -> .)
    ID              reduce using rule 123 (push_poper -> .)
    CTE_I           reduce using rule 123 (push_poper -> .)
    CTE_F           reduce using rule 123 (push_poper -> .)
    CTE_STRING      reduce using rule 123 (push_poper -> .)

    push_poper                     shift and go to state 144

state 108

    (61) loopFromDo -> FROM LPAREN ID . EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    EQUAL           shift and go to state 145


state 109

    (57) while -> WHILE while1 LPAREN . expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (97) expresion -> . exp
    (98) expresion -> . exp comp exp quad_comp
    (106) exp -> . termino quad_term
    (107) exp -> . termino quad_term exp1
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    ID              shift and go to state 98
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94
    CTE_STRING      shift and go to state 95

    expresion                      shift and go to state 146
    factor                         shift and go to state 93
    var_cte                        shift and go to state 89
    termino                        shift and go to state 90
    exp                            shift and go to state 100
    factorAux                      shift and go to state 101

state 110

    (13) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH . CTE_I RCORCH
    (14) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH . CTE_I RCORCH COMA varAuxGlobal2

    CTE_I           shift and go to state 147


state 111

    (12) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH COMA . varAuxGlobal2
    (9) varAuxGlobal2 -> . ID
    (10) varAuxGlobal2 -> . ID COMA varAuxGlobal2
    (11) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH
    (12) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    ID              shift and go to state 34

    varAuxGlobal2                  shift and go to state 148

state 112

    (39) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc .
    (41) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc . function
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    MAIN            reduce using rule 39 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 149

state 113

    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . RBRACE endProc
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . RBRACE endProc function

    RBRACE          shift and go to state 150


state 114

    (43) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE . endProc
    (45) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE . endProc function
    (47) endProc -> .

    FUNCTION        reduce using rule 47 (endProc -> .)
    MAIN            reduce using rule 47 (endProc -> .)

    endProc                        shift and go to state 151

state 115

    (44) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux RBRACE endProc
    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux RBRACE endProc function
    (55) bloqueAux -> . estatuto
    (56) bloqueAux -> . estatuto bloqueAux
    (62) estatuto -> . asignacion
    (63) estatuto -> . condicion
    (64) estatuto -> . escritura
    (65) estatuto -> . while
    (66) estatuto -> . loopFromDo
    (67) estatuto -> . comparacion
    (68) estatuto -> . llamadaAFuncion
    (69) estatuto -> . lectura
    (81) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (84) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (85) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (89) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (57) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (61) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (83) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (70) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (71) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (90) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON

    ID              shift and go to state 54
    IF              shift and go to state 49
    PRINT           shift and go to state 47
    WHILE           shift and go to state 59
    FROM            shift and go to state 57
    INPUT           shift and go to state 53

    estatuto                       shift and go to state 48
    condicion                      shift and go to state 51
    lectura                        shift and go to state 50
    loopFromDo                     shift and go to state 55
    llamadaAFuncion                shift and go to state 56
    asignacion                     shift and go to state 58
    bloqueAux                      shift and go to state 152
    while                          shift and go to state 61
    comparacion                    shift and go to state 62
    escritura                      shift and go to state 63

state 116

    (49) param -> tipo ID paramAvarTable COMA . param
    (48) param -> . tipo ID paramAvarTable
    (49) param -> . tipo ID paramAvarTable COMA param
    (50) param -> . empty
    (30) tipo -> . INT
    (31) tipo -> . FLOAT
    (32) tipo -> . CHAR
    (52) empty -> .

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25
    RPAREN          reduce using rule 52 (empty -> .)

    empty                          shift and go to state 44
    param                          shift and go to state 153
    tipo                           shift and go to state 45

state 117

    (93) escrituraAux -> CTE_STRING . push_cte
    (95) escrituraAux -> CTE_STRING . push_cte COMA escrituraAux
    (127) var_cte -> CTE_STRING . push_cte
    (122) push_cte -> .

    COMA            reduce using rule 122 (push_cte -> .)
    RPAREN          reduce using rule 122 (push_cte -> .)
    TIMES           reduce using rule 122 (push_cte -> .)
    DIVIDE          reduce using rule 122 (push_cte -> .)
    PLUS            reduce using rule 122 (push_cte -> .)
    MINUS           reduce using rule 122 (push_cte -> .)
    LOWERTHAN       reduce using rule 122 (push_cte -> .)
    MORETHAN        reduce using rule 122 (push_cte -> .)
    DIFFERENT       reduce using rule 122 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 122 (push_cte -> .)
    LOWEREQUAL      reduce using rule 122 (push_cte -> .)
    MOREEQUAL       reduce using rule 122 (push_cte -> .)

    push_cte                       shift and go to state 154

state 118

    (92) escrituraAux -> expresion .
    (94) escrituraAux -> expresion . COMA escrituraAux

    RPAREN          reduce using rule 92 (escrituraAux -> expresion .)
    COMA            shift and go to state 155


state 119

    (70) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (71) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (124) var_cte -> ID . push_id
    (72) actualizaFuncion -> .
    (121) push_id -> .

    LPAREN          reduce using rule 72 (actualizaFuncion -> .)
    TIMES           reduce using rule 121 (push_id -> .)
    DIVIDE          reduce using rule 121 (push_id -> .)
    PLUS            reduce using rule 121 (push_id -> .)
    MINUS           reduce using rule 121 (push_id -> .)
    LOWERTHAN       reduce using rule 121 (push_id -> .)
    MORETHAN        reduce using rule 121 (push_id -> .)
    DIFFERENT       reduce using rule 121 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 121 (push_id -> .)
    LOWEREQUAL      reduce using rule 121 (push_id -> .)
    MOREEQUAL       reduce using rule 121 (push_id -> .)
    COMA            reduce using rule 121 (push_id -> .)
    RPAREN          reduce using rule 121 (push_id -> .)

    actualizaFuncion               shift and go to state 77
    push_id                        shift and go to state 130

state 120

    (89) escritura -> PRINT push_poper LPAREN escrituraAux . RPAREN quad_print SEMICOLON

    RPAREN          shift and go to state 156


state 121

    (96) escrituraAux -> llamadaAFuncion .

    RPAREN          reduce using rule 96 (escrituraAux -> llamadaAFuncion .)


state 122

    (106) exp -> termino quad_term .
    (107) exp -> termino quad_term . exp1
    (108) exp1 -> . PLUS push_poper exp
    (109) exp1 -> . MINUS push_poper exp

    LOWERTHAN       reduce using rule 106 (exp -> termino quad_term .)
    MORETHAN        reduce using rule 106 (exp -> termino quad_term .)
    DIFFERENT       reduce using rule 106 (exp -> termino quad_term .)
    DOUBLEEQUAL     reduce using rule 106 (exp -> termino quad_term .)
    LOWEREQUAL      reduce using rule 106 (exp -> termino quad_term .)
    MOREEQUAL       reduce using rule 106 (exp -> termino quad_term .)
    COMA            reduce using rule 106 (exp -> termino quad_term .)
    RPAREN          reduce using rule 106 (exp -> termino quad_term .)
    SEMICOLON       reduce using rule 106 (exp -> termino quad_term .)
    ID              reduce using rule 106 (exp -> termino quad_term .)
    IF              reduce using rule 106 (exp -> termino quad_term .)
    PRINT           reduce using rule 106 (exp -> termino quad_term .)
    WHILE           reduce using rule 106 (exp -> termino quad_term .)
    FROM            reduce using rule 106 (exp -> termino quad_term .)
    INPUT           reduce using rule 106 (exp -> termino quad_term .)
    RBRACE          reduce using rule 106 (exp -> termino quad_term .)
    PLUS            shift and go to state 158
    MINUS           shift and go to state 159

    exp1                           shift and go to state 157

state 123

    (119) factorAux -> MINUS push_poper . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 98
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94
    CTE_STRING      shift and go to state 95

    var_cte                        shift and go to state 160

state 124

    (118) factorAux -> PLUS push_poper . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 98
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94
    CTE_STRING      shift and go to state 95

    var_cte                        shift and go to state 161

state 125

    (112) termino -> factor quad_fact .
    (113) termino -> factor quad_fact . termino1
    (114) termino1 -> . TIMES push_poper termino
    (115) termino1 -> . DIVIDE push_poper termino

    PLUS            reduce using rule 112 (termino -> factor quad_fact .)
    MINUS           reduce using rule 112 (termino -> factor quad_fact .)
    LOWERTHAN       reduce using rule 112 (termino -> factor quad_fact .)
    MORETHAN        reduce using rule 112 (termino -> factor quad_fact .)
    DIFFERENT       reduce using rule 112 (termino -> factor quad_fact .)
    DOUBLEEQUAL     reduce using rule 112 (termino -> factor quad_fact .)
    LOWEREQUAL      reduce using rule 112 (termino -> factor quad_fact .)
    MOREEQUAL       reduce using rule 112 (termino -> factor quad_fact .)
    SEMICOLON       reduce using rule 112 (termino -> factor quad_fact .)
    COMA            reduce using rule 112 (termino -> factor quad_fact .)
    RPAREN          reduce using rule 112 (termino -> factor quad_fact .)
    ID              reduce using rule 112 (termino -> factor quad_fact .)
    IF              reduce using rule 112 (termino -> factor quad_fact .)
    PRINT           reduce using rule 112 (termino -> factor quad_fact .)
    WHILE           reduce using rule 112 (termino -> factor quad_fact .)
    FROM            reduce using rule 112 (termino -> factor quad_fact .)
    INPUT           reduce using rule 112 (termino -> factor quad_fact .)
    RBRACE          reduce using rule 112 (termino -> factor quad_fact .)
    TIMES           shift and go to state 164
    DIVIDE          shift and go to state 162

    termino1                       shift and go to state 163

state 126

    (126) var_cte -> CTE_F push_cte .

    TIMES           reduce using rule 126 (var_cte -> CTE_F push_cte .)
    DIVIDE          reduce using rule 126 (var_cte -> CTE_F push_cte .)
    PLUS            reduce using rule 126 (var_cte -> CTE_F push_cte .)
    MINUS           reduce using rule 126 (var_cte -> CTE_F push_cte .)
    LOWERTHAN       reduce using rule 126 (var_cte -> CTE_F push_cte .)
    MORETHAN        reduce using rule 126 (var_cte -> CTE_F push_cte .)
    DIFFERENT       reduce using rule 126 (var_cte -> CTE_F push_cte .)
    DOUBLEEQUAL     reduce using rule 126 (var_cte -> CTE_F push_cte .)
    LOWEREQUAL      reduce using rule 126 (var_cte -> CTE_F push_cte .)
    MOREEQUAL       reduce using rule 126 (var_cte -> CTE_F push_cte .)
    COMA            reduce using rule 126 (var_cte -> CTE_F push_cte .)
    RPAREN          reduce using rule 126 (var_cte -> CTE_F push_cte .)
    SEMICOLON       reduce using rule 126 (var_cte -> CTE_F push_cte .)
    ID              reduce using rule 126 (var_cte -> CTE_F push_cte .)
    IF              reduce using rule 126 (var_cte -> CTE_F push_cte .)
    PRINT           reduce using rule 126 (var_cte -> CTE_F push_cte .)
    WHILE           reduce using rule 126 (var_cte -> CTE_F push_cte .)
    FROM            reduce using rule 126 (var_cte -> CTE_F push_cte .)
    INPUT           reduce using rule 126 (var_cte -> CTE_F push_cte .)
    RBRACE          reduce using rule 126 (var_cte -> CTE_F push_cte .)


state 127

    (127) var_cte -> CTE_STRING push_cte .

    TIMES           reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    DIVIDE          reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    PLUS            reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    MINUS           reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    LOWERTHAN       reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    MORETHAN        reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    DIFFERENT       reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    DOUBLEEQUAL     reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    LOWEREQUAL      reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    MOREEQUAL       reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    RPAREN          reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    COMA            reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    SEMICOLON       reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    ID              reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    IF              reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    PRINT           reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    WHILE           reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    FROM            reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    INPUT           reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    RBRACE          reduce using rule 127 (var_cte -> CTE_STRING push_cte .)


state 128

    (125) var_cte -> CTE_I push_cte .

    TIMES           reduce using rule 125 (var_cte -> CTE_I push_cte .)
    DIVIDE          reduce using rule 125 (var_cte -> CTE_I push_cte .)
    PLUS            reduce using rule 125 (var_cte -> CTE_I push_cte .)
    MINUS           reduce using rule 125 (var_cte -> CTE_I push_cte .)
    LOWERTHAN       reduce using rule 125 (var_cte -> CTE_I push_cte .)
    MORETHAN        reduce using rule 125 (var_cte -> CTE_I push_cte .)
    DIFFERENT       reduce using rule 125 (var_cte -> CTE_I push_cte .)
    DOUBLEEQUAL     reduce using rule 125 (var_cte -> CTE_I push_cte .)
    LOWEREQUAL      reduce using rule 125 (var_cte -> CTE_I push_cte .)
    MOREEQUAL       reduce using rule 125 (var_cte -> CTE_I push_cte .)
    COMA            reduce using rule 125 (var_cte -> CTE_I push_cte .)
    RPAREN          reduce using rule 125 (var_cte -> CTE_I push_cte .)
    SEMICOLON       reduce using rule 125 (var_cte -> CTE_I push_cte .)
    ID              reduce using rule 125 (var_cte -> CTE_I push_cte .)
    IF              reduce using rule 125 (var_cte -> CTE_I push_cte .)
    PRINT           reduce using rule 125 (var_cte -> CTE_I push_cte .)
    WHILE           reduce using rule 125 (var_cte -> CTE_I push_cte .)
    FROM            reduce using rule 125 (var_cte -> CTE_I push_cte .)
    INPUT           reduce using rule 125 (var_cte -> CTE_I push_cte .)
    RBRACE          reduce using rule 125 (var_cte -> CTE_I push_cte .)


state 129

    (116) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 165


state 130

    (124) var_cte -> ID push_id .

    TIMES           reduce using rule 124 (var_cte -> ID push_id .)
    DIVIDE          reduce using rule 124 (var_cte -> ID push_id .)
    PLUS            reduce using rule 124 (var_cte -> ID push_id .)
    MINUS           reduce using rule 124 (var_cte -> ID push_id .)
    LOWERTHAN       reduce using rule 124 (var_cte -> ID push_id .)
    MORETHAN        reduce using rule 124 (var_cte -> ID push_id .)
    DIFFERENT       reduce using rule 124 (var_cte -> ID push_id .)
    DOUBLEEQUAL     reduce using rule 124 (var_cte -> ID push_id .)
    LOWEREQUAL      reduce using rule 124 (var_cte -> ID push_id .)
    MOREEQUAL       reduce using rule 124 (var_cte -> ID push_id .)
    COMA            reduce using rule 124 (var_cte -> ID push_id .)
    RPAREN          reduce using rule 124 (var_cte -> ID push_id .)
    SEMICOLON       reduce using rule 124 (var_cte -> ID push_id .)
    ID              reduce using rule 124 (var_cte -> ID push_id .)
    IF              reduce using rule 124 (var_cte -> ID push_id .)
    PRINT           reduce using rule 124 (var_cte -> ID push_id .)
    WHILE           reduce using rule 124 (var_cte -> ID push_id .)
    FROM            reduce using rule 124 (var_cte -> ID push_id .)
    INPUT           reduce using rule 124 (var_cte -> ID push_id .)
    RBRACE          reduce using rule 124 (var_cte -> ID push_id .)


state 131

    (84) condicion -> IF LPAREN expresion RPAREN . cond bloque condFinal
    (85) condicion -> IF LPAREN expresion RPAREN . cond bloque ELSE condElse bloque condFinal
    (86) cond -> .

    LBRACE          reduce using rule 86 (cond -> .)

    cond                           shift and go to state 166

state 132

    (104) comp -> MOREEQUAL . push_poper
    (123) push_poper -> .

    LPAREN          reduce using rule 123 (push_poper -> .)
    PLUS            reduce using rule 123 (push_poper -> .)
    MINUS           reduce using rule 123 (push_poper -> .)
    ID              reduce using rule 123 (push_poper -> .)
    CTE_I           reduce using rule 123 (push_poper -> .)
    CTE_F           reduce using rule 123 (push_poper -> .)
    CTE_STRING      reduce using rule 123 (push_poper -> .)

    push_poper                     shift and go to state 167

state 133

    (101) comp -> DIFFERENT . push_poper
    (123) push_poper -> .

    LPAREN          reduce using rule 123 (push_poper -> .)
    PLUS            reduce using rule 123 (push_poper -> .)
    MINUS           reduce using rule 123 (push_poper -> .)
    ID              reduce using rule 123 (push_poper -> .)
    CTE_I           reduce using rule 123 (push_poper -> .)
    CTE_F           reduce using rule 123 (push_poper -> .)
    CTE_STRING      reduce using rule 123 (push_poper -> .)

    push_poper                     shift and go to state 168

state 134

    (102) comp -> DOUBLEEQUAL . push_poper
    (123) push_poper -> .

    LPAREN          reduce using rule 123 (push_poper -> .)
    PLUS            reduce using rule 123 (push_poper -> .)
    MINUS           reduce using rule 123 (push_poper -> .)
    ID              reduce using rule 123 (push_poper -> .)
    CTE_I           reduce using rule 123 (push_poper -> .)
    CTE_F           reduce using rule 123 (push_poper -> .)
    CTE_STRING      reduce using rule 123 (push_poper -> .)

    push_poper                     shift and go to state 169

state 135

    (99) comp -> LOWERTHAN . push_poper
    (123) push_poper -> .

    LPAREN          reduce using rule 123 (push_poper -> .)
    PLUS            reduce using rule 123 (push_poper -> .)
    MINUS           reduce using rule 123 (push_poper -> .)
    ID              reduce using rule 123 (push_poper -> .)
    CTE_I           reduce using rule 123 (push_poper -> .)
    CTE_F           reduce using rule 123 (push_poper -> .)
    CTE_STRING      reduce using rule 123 (push_poper -> .)

    push_poper                     shift and go to state 170

state 136

    (98) expresion -> exp comp . exp quad_comp
    (106) exp -> . termino quad_term
    (107) exp -> . termino quad_term exp1
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    ID              shift and go to state 98
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94
    CTE_STRING      shift and go to state 95

    factor                         shift and go to state 93
    termino                        shift and go to state 90
    exp                            shift and go to state 171
    factorAux                      shift and go to state 101
    var_cte                        shift and go to state 89

state 137

    (103) comp -> LOWEREQUAL . push_poper
    (123) push_poper -> .

    LPAREN          reduce using rule 123 (push_poper -> .)
    PLUS            reduce using rule 123 (push_poper -> .)
    MINUS           reduce using rule 123 (push_poper -> .)
    ID              reduce using rule 123 (push_poper -> .)
    CTE_I           reduce using rule 123 (push_poper -> .)
    CTE_F           reduce using rule 123 (push_poper -> .)
    CTE_STRING      reduce using rule 123 (push_poper -> .)

    push_poper                     shift and go to state 172

state 138

    (100) comp -> MORETHAN . push_poper
    (123) push_poper -> .

    LPAREN          reduce using rule 123 (push_poper -> .)
    PLUS            reduce using rule 123 (push_poper -> .)
    MINUS           reduce using rule 123 (push_poper -> .)
    ID              reduce using rule 123 (push_poper -> .)
    CTE_I           reduce using rule 123 (push_poper -> .)
    CTE_F           reduce using rule 123 (push_poper -> .)
    CTE_STRING      reduce using rule 123 (push_poper -> .)

    push_poper                     shift and go to state 173

state 139

    (19) varAux1 -> tipo varAux2 SEMICOLON .
    (20) varAux1 -> tipo varAux2 SEMICOLON . varAux1
    (19) varAux1 -> . tipo varAux2 SEMICOLON
    (20) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (30) tipo -> . INT
    (31) tipo -> . FLOAT
    (32) tipo -> . CHAR

    ID              reduce using rule 19 (varAux1 -> tipo varAux2 SEMICOLON .)
    IF              reduce using rule 19 (varAux1 -> tipo varAux2 SEMICOLON .)
    PRINT           reduce using rule 19 (varAux1 -> tipo varAux2 SEMICOLON .)
    WHILE           reduce using rule 19 (varAux1 -> tipo varAux2 SEMICOLON .)
    FROM            reduce using rule 19 (varAux1 -> tipo varAux2 SEMICOLON .)
    INPUT           reduce using rule 19 (varAux1 -> tipo varAux2 SEMICOLON .)
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    varAux1                        shift and go to state 174
    tipo                           shift and go to state 74

state 140

    (21) varAux2 -> ID push_var .
    (22) varAux2 -> ID push_var . COMA varAux2
    (23) varAux2 -> ID push_var . LCORCH CTE_I RCORCH push_arreglo
    (24) varAux2 -> ID push_var . LCORCH CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> ID push_var . LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> ID push_var . LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    SEMICOLON       reduce using rule 21 (varAux2 -> ID push_var .)
    COMA            shift and go to state 176
    LCORCH          shift and go to state 175


state 141

    (90) lectura -> INPUT push_poper LPAREN ID . push_id RPAREN quad_print SEMICOLON
    (121) push_id -> .

    RPAREN          reduce using rule 121 (push_id -> .)

    push_id                        shift and go to state 177

state 142

    (70) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN . paramFuncion gosub RPAREN expresion
    (71) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN . paramFuncion gosub RPAREN SEMICOLON
    (75) paramFuncion -> . ID push_id2
    (76) paramFuncion -> . ID push_id2 COMA paramFuncion
    (77) paramFuncion -> . expresion
    (78) paramFuncion -> . expresion COMA paramFuncion
    (79) paramFuncion -> . empty
    (97) expresion -> . exp
    (98) expresion -> . exp comp exp quad_comp
    (52) empty -> .
    (106) exp -> . termino quad_term
    (107) exp -> . termino quad_term exp1
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 180
    RPAREN          reduce using rule 52 (empty -> .)
    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94
    CTE_STRING      shift and go to state 95

    expresion                      shift and go to state 181
    paramFuncion                   shift and go to state 178
    empty                          shift and go to state 179
    exp                            shift and go to state 100
    factorAux                      shift and go to state 101
    factor                         shift and go to state 93
    var_cte                        shift and go to state 89
    termino                        shift and go to state 90

state 143

    (83) comparacion -> ID push_id DOUBLEEQUAL push_poper . expresion SEMICOLON
    (97) expresion -> . exp
    (98) expresion -> . exp comp exp quad_comp
    (106) exp -> . termino quad_term
    (107) exp -> . termino quad_term exp1
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    ID              shift and go to state 98
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94
    CTE_STRING      shift and go to state 95

    expresion                      shift and go to state 182
    factor                         shift and go to state 93
    var_cte                        shift and go to state 89
    termino                        shift and go to state 90
    exp                            shift and go to state 100
    factorAux                      shift and go to state 101

state 144

    (81) asignacion -> ID push_id EQUAL push_poper . expresion create_asign SEMICOLON
    (97) expresion -> . exp
    (98) expresion -> . exp comp exp quad_comp
    (106) exp -> . termino quad_term
    (107) exp -> . termino quad_term exp1
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    ID              shift and go to state 98
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94
    CTE_STRING      shift and go to state 95

    expresion                      shift and go to state 183
    var_cte                        shift and go to state 89
    termino                        shift and go to state 90
    exp                            shift and go to state 100
    factorAux                      shift and go to state 101
    factor                         shift and go to state 93

state 145

    (61) loopFromDo -> FROM LPAREN ID EQUAL . expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (97) expresion -> . exp
    (98) expresion -> . exp comp exp quad_comp
    (106) exp -> . termino quad_term
    (107) exp -> . termino quad_term exp1
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    ID              shift and go to state 98
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94
    CTE_STRING      shift and go to state 95

    expresion                      shift and go to state 184
    factor                         shift and go to state 93
    var_cte                        shift and go to state 89
    termino                        shift and go to state 90
    exp                            shift and go to state 100
    factorAux                      shift and go to state 101

state 146

    (57) while -> WHILE while1 LPAREN expresion . RPAREN while2 LBRACE bloqueAux RBRACE while3

    RPAREN          shift and go to state 185


state 147

    (13) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I . RCORCH
    (14) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I . RCORCH COMA varAuxGlobal2

    RCORCH          shift and go to state 186


state 148

    (12) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH COMA varAuxGlobal2 .

    SEMICOLON       reduce using rule 12 (varAuxGlobal2 -> ID LCORCH CTE_I RCORCH COMA varAuxGlobal2 .)


state 149

    (41) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function .

    MAIN            reduce using rule 41 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function .)


state 150

    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE . endProc
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE . endProc function
    (47) endProc -> .

    FUNCTION        reduce using rule 47 (endProc -> .)
    MAIN            reduce using rule 47 (endProc -> .)

    endProc                        shift and go to state 187

state 151

    (43) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc .
    (45) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc . function
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    MAIN            reduce using rule 43 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 188

state 152

    (44) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . RBRACE endProc
    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . RBRACE endProc function

    RBRACE          shift and go to state 189


state 153

    (49) param -> tipo ID paramAvarTable COMA param .

    RPAREN          reduce using rule 49 (param -> tipo ID paramAvarTable COMA param .)


state 154

    (93) escrituraAux -> CTE_STRING push_cte .
    (95) escrituraAux -> CTE_STRING push_cte . COMA escrituraAux
    (127) var_cte -> CTE_STRING push_cte .

  ! shift/reduce conflict for COMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 93 (escrituraAux -> CTE_STRING push_cte .)
    RPAREN          reduce using rule 93 (escrituraAux -> CTE_STRING push_cte .)
    COMA            shift and go to state 190
    TIMES           reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    DIVIDE          reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    PLUS            reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    MINUS           reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    LOWERTHAN       reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    MORETHAN        reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    DIFFERENT       reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    DOUBLEEQUAL     reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    LOWEREQUAL      reduce using rule 127 (var_cte -> CTE_STRING push_cte .)
    MOREEQUAL       reduce using rule 127 (var_cte -> CTE_STRING push_cte .)

  ! COMA            [ reduce using rule 127 (var_cte -> CTE_STRING push_cte .) ]
  ! RPAREN          [ reduce using rule 127 (var_cte -> CTE_STRING push_cte .) ]


state 155

    (94) escrituraAux -> expresion COMA . escrituraAux
    (92) escrituraAux -> . expresion
    (93) escrituraAux -> . CTE_STRING push_cte
    (94) escrituraAux -> . expresion COMA escrituraAux
    (95) escrituraAux -> . CTE_STRING push_cte COMA escrituraAux
    (96) escrituraAux -> . llamadaAFuncion
    (97) expresion -> . exp
    (98) expresion -> . exp comp exp quad_comp
    (70) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (71) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (106) exp -> . termino quad_term
    (107) exp -> . termino quad_term exp1
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    CTE_STRING      shift and go to state 117
    ID              shift and go to state 119
    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94

    expresion                      shift and go to state 118
    escrituraAux                   shift and go to state 191
    llamadaAFuncion                shift and go to state 121
    var_cte                        shift and go to state 89
    termino                        shift and go to state 90
    exp                            shift and go to state 100
    factorAux                      shift and go to state 101
    factor                         shift and go to state 93

state 156

    (89) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN . quad_print SEMICOLON
    (91) quad_print -> .

    SEMICOLON       reduce using rule 91 (quad_print -> .)

    quad_print                     shift and go to state 192

state 157

    (107) exp -> termino quad_term exp1 .

    LOWERTHAN       reduce using rule 107 (exp -> termino quad_term exp1 .)
    MORETHAN        reduce using rule 107 (exp -> termino quad_term exp1 .)
    DIFFERENT       reduce using rule 107 (exp -> termino quad_term exp1 .)
    DOUBLEEQUAL     reduce using rule 107 (exp -> termino quad_term exp1 .)
    LOWEREQUAL      reduce using rule 107 (exp -> termino quad_term exp1 .)
    MOREEQUAL       reduce using rule 107 (exp -> termino quad_term exp1 .)
    COMA            reduce using rule 107 (exp -> termino quad_term exp1 .)
    RPAREN          reduce using rule 107 (exp -> termino quad_term exp1 .)
    SEMICOLON       reduce using rule 107 (exp -> termino quad_term exp1 .)
    ID              reduce using rule 107 (exp -> termino quad_term exp1 .)
    IF              reduce using rule 107 (exp -> termino quad_term exp1 .)
    PRINT           reduce using rule 107 (exp -> termino quad_term exp1 .)
    WHILE           reduce using rule 107 (exp -> termino quad_term exp1 .)
    FROM            reduce using rule 107 (exp -> termino quad_term exp1 .)
    INPUT           reduce using rule 107 (exp -> termino quad_term exp1 .)
    RBRACE          reduce using rule 107 (exp -> termino quad_term exp1 .)


state 158

    (108) exp1 -> PLUS . push_poper exp
    (123) push_poper -> .

    LPAREN          reduce using rule 123 (push_poper -> .)
    PLUS            reduce using rule 123 (push_poper -> .)
    MINUS           reduce using rule 123 (push_poper -> .)
    ID              reduce using rule 123 (push_poper -> .)
    CTE_I           reduce using rule 123 (push_poper -> .)
    CTE_F           reduce using rule 123 (push_poper -> .)
    CTE_STRING      reduce using rule 123 (push_poper -> .)

    push_poper                     shift and go to state 193

state 159

    (109) exp1 -> MINUS . push_poper exp
    (123) push_poper -> .

    LPAREN          reduce using rule 123 (push_poper -> .)
    PLUS            reduce using rule 123 (push_poper -> .)
    MINUS           reduce using rule 123 (push_poper -> .)
    ID              reduce using rule 123 (push_poper -> .)
    CTE_I           reduce using rule 123 (push_poper -> .)
    CTE_F           reduce using rule 123 (push_poper -> .)
    CTE_STRING      reduce using rule 123 (push_poper -> .)

    push_poper                     shift and go to state 194

state 160

    (119) factorAux -> MINUS push_poper var_cte .

    TIMES           reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    DIVIDE          reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    PLUS            reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    MINUS           reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    MORETHAN        reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    DIFFERENT       reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    DOUBLEEQUAL     reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    LOWEREQUAL      reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    MOREEQUAL       reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    ID              reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    IF              reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    PRINT           reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    WHILE           reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    FROM            reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    INPUT           reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    RBRACE          reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    RPAREN          reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    COMA            reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)
    SEMICOLON       reduce using rule 119 (factorAux -> MINUS push_poper var_cte .)


state 161

    (118) factorAux -> PLUS push_poper var_cte .

    TIMES           reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    DIVIDE          reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    PLUS            reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    MINUS           reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    MORETHAN        reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    DIFFERENT       reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    DOUBLEEQUAL     reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    LOWEREQUAL      reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    MOREEQUAL       reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    ID              reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    IF              reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    PRINT           reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    WHILE           reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    FROM            reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    INPUT           reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    RBRACE          reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    RPAREN          reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    COMA            reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)
    SEMICOLON       reduce using rule 118 (factorAux -> PLUS push_poper var_cte .)


state 162

    (115) termino1 -> DIVIDE . push_poper termino
    (123) push_poper -> .

    LPAREN          reduce using rule 123 (push_poper -> .)
    PLUS            reduce using rule 123 (push_poper -> .)
    MINUS           reduce using rule 123 (push_poper -> .)
    ID              reduce using rule 123 (push_poper -> .)
    CTE_I           reduce using rule 123 (push_poper -> .)
    CTE_F           reduce using rule 123 (push_poper -> .)
    CTE_STRING      reduce using rule 123 (push_poper -> .)

    push_poper                     shift and go to state 195

state 163

    (113) termino -> factor quad_fact termino1 .

    PLUS            reduce using rule 113 (termino -> factor quad_fact termino1 .)
    MINUS           reduce using rule 113 (termino -> factor quad_fact termino1 .)
    LOWERTHAN       reduce using rule 113 (termino -> factor quad_fact termino1 .)
    MORETHAN        reduce using rule 113 (termino -> factor quad_fact termino1 .)
    DIFFERENT       reduce using rule 113 (termino -> factor quad_fact termino1 .)
    DOUBLEEQUAL     reduce using rule 113 (termino -> factor quad_fact termino1 .)
    LOWEREQUAL      reduce using rule 113 (termino -> factor quad_fact termino1 .)
    MOREEQUAL       reduce using rule 113 (termino -> factor quad_fact termino1 .)
    SEMICOLON       reduce using rule 113 (termino -> factor quad_fact termino1 .)
    COMA            reduce using rule 113 (termino -> factor quad_fact termino1 .)
    RPAREN          reduce using rule 113 (termino -> factor quad_fact termino1 .)
    ID              reduce using rule 113 (termino -> factor quad_fact termino1 .)
    IF              reduce using rule 113 (termino -> factor quad_fact termino1 .)
    PRINT           reduce using rule 113 (termino -> factor quad_fact termino1 .)
    WHILE           reduce using rule 113 (termino -> factor quad_fact termino1 .)
    FROM            reduce using rule 113 (termino -> factor quad_fact termino1 .)
    INPUT           reduce using rule 113 (termino -> factor quad_fact termino1 .)
    RBRACE          reduce using rule 113 (termino -> factor quad_fact termino1 .)


state 164

    (114) termino1 -> TIMES . push_poper termino
    (123) push_poper -> .

    LPAREN          reduce using rule 123 (push_poper -> .)
    PLUS            reduce using rule 123 (push_poper -> .)
    MINUS           reduce using rule 123 (push_poper -> .)
    ID              reduce using rule 123 (push_poper -> .)
    CTE_I           reduce using rule 123 (push_poper -> .)
    CTE_F           reduce using rule 123 (push_poper -> .)
    CTE_STRING      reduce using rule 123 (push_poper -> .)

    push_poper                     shift and go to state 196

state 165

    (116) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    LOWERTHAN       reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    MORETHAN        reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    DIFFERENT       reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    DOUBLEEQUAL     reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    LOWEREQUAL      reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    MOREEQUAL       reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    COMA            reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    ID              reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    IF              reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    PRINT           reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    WHILE           reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    FROM            reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    INPUT           reduce using rule 116 (factor -> LPAREN expresion RPAREN .)
    RBRACE          reduce using rule 116 (factor -> LPAREN expresion RPAREN .)


state 166

    (84) condicion -> IF LPAREN expresion RPAREN cond . bloque condFinal
    (85) condicion -> IF LPAREN expresion RPAREN cond . bloque ELSE condElse bloque condFinal
    (37) bloque -> . LBRACE RBRACE
    (38) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 197

    bloque                         shift and go to state 198

state 167

    (104) comp -> MOREEQUAL push_poper .

    LPAREN          reduce using rule 104 (comp -> MOREEQUAL push_poper .)
    PLUS            reduce using rule 104 (comp -> MOREEQUAL push_poper .)
    MINUS           reduce using rule 104 (comp -> MOREEQUAL push_poper .)
    ID              reduce using rule 104 (comp -> MOREEQUAL push_poper .)
    CTE_I           reduce using rule 104 (comp -> MOREEQUAL push_poper .)
    CTE_F           reduce using rule 104 (comp -> MOREEQUAL push_poper .)
    CTE_STRING      reduce using rule 104 (comp -> MOREEQUAL push_poper .)


state 168

    (101) comp -> DIFFERENT push_poper .

    LPAREN          reduce using rule 101 (comp -> DIFFERENT push_poper .)
    PLUS            reduce using rule 101 (comp -> DIFFERENT push_poper .)
    MINUS           reduce using rule 101 (comp -> DIFFERENT push_poper .)
    ID              reduce using rule 101 (comp -> DIFFERENT push_poper .)
    CTE_I           reduce using rule 101 (comp -> DIFFERENT push_poper .)
    CTE_F           reduce using rule 101 (comp -> DIFFERENT push_poper .)
    CTE_STRING      reduce using rule 101 (comp -> DIFFERENT push_poper .)


state 169

    (102) comp -> DOUBLEEQUAL push_poper .

    LPAREN          reduce using rule 102 (comp -> DOUBLEEQUAL push_poper .)
    PLUS            reduce using rule 102 (comp -> DOUBLEEQUAL push_poper .)
    MINUS           reduce using rule 102 (comp -> DOUBLEEQUAL push_poper .)
    ID              reduce using rule 102 (comp -> DOUBLEEQUAL push_poper .)
    CTE_I           reduce using rule 102 (comp -> DOUBLEEQUAL push_poper .)
    CTE_F           reduce using rule 102 (comp -> DOUBLEEQUAL push_poper .)
    CTE_STRING      reduce using rule 102 (comp -> DOUBLEEQUAL push_poper .)


state 170

    (99) comp -> LOWERTHAN push_poper .

    LPAREN          reduce using rule 99 (comp -> LOWERTHAN push_poper .)
    PLUS            reduce using rule 99 (comp -> LOWERTHAN push_poper .)
    MINUS           reduce using rule 99 (comp -> LOWERTHAN push_poper .)
    ID              reduce using rule 99 (comp -> LOWERTHAN push_poper .)
    CTE_I           reduce using rule 99 (comp -> LOWERTHAN push_poper .)
    CTE_F           reduce using rule 99 (comp -> LOWERTHAN push_poper .)
    CTE_STRING      reduce using rule 99 (comp -> LOWERTHAN push_poper .)


state 171

    (98) expresion -> exp comp exp . quad_comp
    (105) quad_comp -> .

    RPAREN          reduce using rule 105 (quad_comp -> .)
    COMA            reduce using rule 105 (quad_comp -> .)
    SEMICOLON       reduce using rule 105 (quad_comp -> .)
    ID              reduce using rule 105 (quad_comp -> .)
    IF              reduce using rule 105 (quad_comp -> .)
    PRINT           reduce using rule 105 (quad_comp -> .)
    WHILE           reduce using rule 105 (quad_comp -> .)
    FROM            reduce using rule 105 (quad_comp -> .)
    INPUT           reduce using rule 105 (quad_comp -> .)
    RBRACE          reduce using rule 105 (quad_comp -> .)

    quad_comp                      shift and go to state 199

state 172

    (103) comp -> LOWEREQUAL push_poper .

    LPAREN          reduce using rule 103 (comp -> LOWEREQUAL push_poper .)
    PLUS            reduce using rule 103 (comp -> LOWEREQUAL push_poper .)
    MINUS           reduce using rule 103 (comp -> LOWEREQUAL push_poper .)
    ID              reduce using rule 103 (comp -> LOWEREQUAL push_poper .)
    CTE_I           reduce using rule 103 (comp -> LOWEREQUAL push_poper .)
    CTE_F           reduce using rule 103 (comp -> LOWEREQUAL push_poper .)
    CTE_STRING      reduce using rule 103 (comp -> LOWEREQUAL push_poper .)


state 173

    (100) comp -> MORETHAN push_poper .

    LPAREN          reduce using rule 100 (comp -> MORETHAN push_poper .)
    PLUS            reduce using rule 100 (comp -> MORETHAN push_poper .)
    MINUS           reduce using rule 100 (comp -> MORETHAN push_poper .)
    ID              reduce using rule 100 (comp -> MORETHAN push_poper .)
    CTE_I           reduce using rule 100 (comp -> MORETHAN push_poper .)
    CTE_F           reduce using rule 100 (comp -> MORETHAN push_poper .)
    CTE_STRING      reduce using rule 100 (comp -> MORETHAN push_poper .)


state 174

    (20) varAux1 -> tipo varAux2 SEMICOLON varAux1 .

    ID              reduce using rule 20 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    IF              reduce using rule 20 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    PRINT           reduce using rule 20 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    WHILE           reduce using rule 20 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    FROM            reduce using rule 20 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    INPUT           reduce using rule 20 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)


state 175

    (23) varAux2 -> ID push_var LCORCH . CTE_I RCORCH push_arreglo
    (24) varAux2 -> ID push_var LCORCH . CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> ID push_var LCORCH . CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> ID push_var LCORCH . CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    CTE_I           shift and go to state 200


state 176

    (22) varAux2 -> ID push_var COMA . varAux2
    (21) varAux2 -> . ID push_var
    (22) varAux2 -> . ID push_var COMA varAux2
    (23) varAux2 -> . ID push_var LCORCH CTE_I RCORCH push_arreglo
    (24) varAux2 -> . ID push_var LCORCH CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> . ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> . ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    ID              shift and go to state 103

    varAux2                        shift and go to state 201

state 177

    (90) lectura -> INPUT push_poper LPAREN ID push_id . RPAREN quad_print SEMICOLON

    RPAREN          shift and go to state 202


state 178

    (70) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion . gosub RPAREN expresion
    (71) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion . gosub RPAREN SEMICOLON
    (73) gosub -> .

    RPAREN          reduce using rule 73 (gosub -> .)

    gosub                          shift and go to state 203

state 179

    (79) paramFuncion -> empty .

    RPAREN          reduce using rule 79 (paramFuncion -> empty .)


state 180

    (75) paramFuncion -> ID . push_id2
    (76) paramFuncion -> ID . push_id2 COMA paramFuncion
    (124) var_cte -> ID . push_id
    (80) push_id2 -> .
    (121) push_id -> .

  ! reduce/reduce conflict for COMA resolved using rule 80 (push_id2 -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 80 (push_id2 -> .)
    COMA            reduce using rule 80 (push_id2 -> .)
    RPAREN          reduce using rule 80 (push_id2 -> .)
    TIMES           reduce using rule 121 (push_id -> .)
    DIVIDE          reduce using rule 121 (push_id -> .)
    PLUS            reduce using rule 121 (push_id -> .)
    MINUS           reduce using rule 121 (push_id -> .)
    LOWERTHAN       reduce using rule 121 (push_id -> .)
    MORETHAN        reduce using rule 121 (push_id -> .)
    DIFFERENT       reduce using rule 121 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 121 (push_id -> .)
    LOWEREQUAL      reduce using rule 121 (push_id -> .)
    MOREEQUAL       reduce using rule 121 (push_id -> .)

  ! COMA            [ reduce using rule 121 (push_id -> .) ]
  ! RPAREN          [ reduce using rule 121 (push_id -> .) ]

    push_id                        shift and go to state 130
    push_id2                       shift and go to state 204

state 181

    (77) paramFuncion -> expresion .
    (78) paramFuncion -> expresion . COMA paramFuncion

    RPAREN          reduce using rule 77 (paramFuncion -> expresion .)
    COMA            shift and go to state 205


state 182

    (83) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion . SEMICOLON

    SEMICOLON       shift and go to state 206


state 183

    (81) asignacion -> ID push_id EQUAL push_poper expresion . create_asign SEMICOLON
    (82) create_asign -> .

    SEMICOLON       reduce using rule 82 (create_asign -> .)

    create_asign                   shift and go to state 207

state 184

    (61) loopFromDo -> FROM LPAREN ID EQUAL expresion . RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    RPAREN          shift and go to state 208


state 185

    (57) while -> WHILE while1 LPAREN expresion RPAREN . while2 LBRACE bloqueAux RBRACE while3
    (59) while2 -> .

    LBRACE          reduce using rule 59 (while2 -> .)

    while2                         shift and go to state 209

state 186

    (13) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH .
    (14) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH . COMA varAuxGlobal2

    SEMICOLON       reduce using rule 13 (varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH .)
    COMA            shift and go to state 210


state 187

    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc . function
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    MAIN            reduce using rule 40 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 211

state 188

    (45) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function .

    MAIN            reduce using rule 45 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function .)


state 189

    (44) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE . endProc
    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE . endProc function
    (47) endProc -> .

    FUNCTION        reduce using rule 47 (endProc -> .)
    MAIN            reduce using rule 47 (endProc -> .)

    endProc                        shift and go to state 212

state 190

    (95) escrituraAux -> CTE_STRING push_cte COMA . escrituraAux
    (92) escrituraAux -> . expresion
    (93) escrituraAux -> . CTE_STRING push_cte
    (94) escrituraAux -> . expresion COMA escrituraAux
    (95) escrituraAux -> . CTE_STRING push_cte COMA escrituraAux
    (96) escrituraAux -> . llamadaAFuncion
    (97) expresion -> . exp
    (98) expresion -> . exp comp exp quad_comp
    (70) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (71) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (106) exp -> . termino quad_term
    (107) exp -> . termino quad_term exp1
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    CTE_STRING      shift and go to state 117
    ID              shift and go to state 119
    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94

    escrituraAux                   shift and go to state 213
    expresion                      shift and go to state 118
    llamadaAFuncion                shift and go to state 121
    var_cte                        shift and go to state 89
    termino                        shift and go to state 90
    exp                            shift and go to state 100
    factorAux                      shift and go to state 101
    factor                         shift and go to state 93

state 191

    (94) escrituraAux -> expresion COMA escrituraAux .

    RPAREN          reduce using rule 94 (escrituraAux -> expresion COMA escrituraAux .)


state 192

    (89) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print . SEMICOLON

    SEMICOLON       shift and go to state 214


state 193

    (108) exp1 -> PLUS push_poper . exp
    (106) exp -> . termino quad_term
    (107) exp -> . termino quad_term exp1
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    ID              shift and go to state 98
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94
    CTE_STRING      shift and go to state 95

    termino                        shift and go to state 90
    exp                            shift and go to state 215
    factor                         shift and go to state 93
    factorAux                      shift and go to state 101
    var_cte                        shift and go to state 89

state 194

    (109) exp1 -> MINUS push_poper . exp
    (106) exp -> . termino quad_term
    (107) exp -> . termino quad_term exp1
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    ID              shift and go to state 98
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94
    CTE_STRING      shift and go to state 95

    termino                        shift and go to state 90
    exp                            shift and go to state 216
    factor                         shift and go to state 93
    factorAux                      shift and go to state 101
    var_cte                        shift and go to state 89

state 195

    (115) termino1 -> DIVIDE push_poper . termino
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    ID              shift and go to state 98
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94
    CTE_STRING      shift and go to state 95

    termino                        shift and go to state 217
    factor                         shift and go to state 93
    factorAux                      shift and go to state 101
    var_cte                        shift and go to state 89

state 196

    (114) termino1 -> TIMES push_poper . termino
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    ID              shift and go to state 98
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94
    CTE_STRING      shift and go to state 95

    termino                        shift and go to state 218
    factor                         shift and go to state 93
    factorAux                      shift and go to state 101
    var_cte                        shift and go to state 89

state 197

    (37) bloque -> LBRACE . RBRACE
    (38) bloque -> LBRACE . bloqueAux RBRACE
    (55) bloqueAux -> . estatuto
    (56) bloqueAux -> . estatuto bloqueAux
    (62) estatuto -> . asignacion
    (63) estatuto -> . condicion
    (64) estatuto -> . escritura
    (65) estatuto -> . while
    (66) estatuto -> . loopFromDo
    (67) estatuto -> . comparacion
    (68) estatuto -> . llamadaAFuncion
    (69) estatuto -> . lectura
    (81) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (84) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (85) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (89) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (57) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (61) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (83) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (70) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (71) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (90) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON

    RBRACE          shift and go to state 219
    ID              shift and go to state 54
    IF              shift and go to state 49
    PRINT           shift and go to state 47
    WHILE           shift and go to state 59
    FROM            shift and go to state 57
    INPUT           shift and go to state 53

    estatuto                       shift and go to state 48
    condicion                      shift and go to state 51
    lectura                        shift and go to state 50
    loopFromDo                     shift and go to state 55
    llamadaAFuncion                shift and go to state 56
    asignacion                     shift and go to state 58
    bloqueAux                      shift and go to state 220
    while                          shift and go to state 61
    comparacion                    shift and go to state 62
    escritura                      shift and go to state 63

state 198

    (84) condicion -> IF LPAREN expresion RPAREN cond bloque . condFinal
    (85) condicion -> IF LPAREN expresion RPAREN cond bloque . ELSE condElse bloque condFinal
    (88) condFinal -> .

    ELSE            shift and go to state 222
    ID              reduce using rule 88 (condFinal -> .)
    IF              reduce using rule 88 (condFinal -> .)
    PRINT           reduce using rule 88 (condFinal -> .)
    WHILE           reduce using rule 88 (condFinal -> .)
    FROM            reduce using rule 88 (condFinal -> .)
    INPUT           reduce using rule 88 (condFinal -> .)
    RBRACE          reduce using rule 88 (condFinal -> .)

    condFinal                      shift and go to state 221

state 199

    (98) expresion -> exp comp exp quad_comp .

    RPAREN          reduce using rule 98 (expresion -> exp comp exp quad_comp .)
    ID              reduce using rule 98 (expresion -> exp comp exp quad_comp .)
    IF              reduce using rule 98 (expresion -> exp comp exp quad_comp .)
    PRINT           reduce using rule 98 (expresion -> exp comp exp quad_comp .)
    WHILE           reduce using rule 98 (expresion -> exp comp exp quad_comp .)
    FROM            reduce using rule 98 (expresion -> exp comp exp quad_comp .)
    INPUT           reduce using rule 98 (expresion -> exp comp exp quad_comp .)
    RBRACE          reduce using rule 98 (expresion -> exp comp exp quad_comp .)
    COMA            reduce using rule 98 (expresion -> exp comp exp quad_comp .)
    SEMICOLON       reduce using rule 98 (expresion -> exp comp exp quad_comp .)


state 200

    (23) varAux2 -> ID push_var LCORCH CTE_I . RCORCH push_arreglo
    (24) varAux2 -> ID push_var LCORCH CTE_I . RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> ID push_var LCORCH CTE_I . RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> ID push_var LCORCH CTE_I . RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    RCORCH          shift and go to state 223


state 201

    (22) varAux2 -> ID push_var COMA varAux2 .

    SEMICOLON       reduce using rule 22 (varAux2 -> ID push_var COMA varAux2 .)


state 202

    (90) lectura -> INPUT push_poper LPAREN ID push_id RPAREN . quad_print SEMICOLON
    (91) quad_print -> .

    SEMICOLON       reduce using rule 91 (quad_print -> .)

    quad_print                     shift and go to state 224

state 203

    (70) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub . RPAREN expresion
    (71) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub . RPAREN SEMICOLON

    RPAREN          shift and go to state 225


state 204

    (75) paramFuncion -> ID push_id2 .
    (76) paramFuncion -> ID push_id2 . COMA paramFuncion

    RPAREN          reduce using rule 75 (paramFuncion -> ID push_id2 .)
    COMA            shift and go to state 226


state 205

    (78) paramFuncion -> expresion COMA . paramFuncion
    (75) paramFuncion -> . ID push_id2
    (76) paramFuncion -> . ID push_id2 COMA paramFuncion
    (77) paramFuncion -> . expresion
    (78) paramFuncion -> . expresion COMA paramFuncion
    (79) paramFuncion -> . empty
    (97) expresion -> . exp
    (98) expresion -> . exp comp exp quad_comp
    (52) empty -> .
    (106) exp -> . termino quad_term
    (107) exp -> . termino quad_term exp1
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 180
    RPAREN          reduce using rule 52 (empty -> .)
    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94
    CTE_STRING      shift and go to state 95

    expresion                      shift and go to state 181
    paramFuncion                   shift and go to state 227
    termino                        shift and go to state 90
    exp                            shift and go to state 100
    factorAux                      shift and go to state 101
    factor                         shift and go to state 93
    var_cte                        shift and go to state 89
    empty                          shift and go to state 179

state 206

    (83) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .

    ID              reduce using rule 83 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    IF              reduce using rule 83 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    PRINT           reduce using rule 83 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    WHILE           reduce using rule 83 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    FROM            reduce using rule 83 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    INPUT           reduce using rule 83 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    RBRACE          reduce using rule 83 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)


state 207

    (81) asignacion -> ID push_id EQUAL push_poper expresion create_asign . SEMICOLON

    SEMICOLON       shift and go to state 228


state 208

    (61) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN . TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    TO              shift and go to state 229


state 209

    (57) while -> WHILE while1 LPAREN expresion RPAREN while2 . LBRACE bloqueAux RBRACE while3

    LBRACE          shift and go to state 230


state 210

    (14) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA . varAuxGlobal2
    (9) varAuxGlobal2 -> . ID
    (10) varAuxGlobal2 -> . ID COMA varAuxGlobal2
    (11) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH
    (12) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    ID              shift and go to state 34

    varAuxGlobal2                  shift and go to state 231

state 211

    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function .

    MAIN            reduce using rule 42 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function .)


state 212

    (44) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc .
    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc . function
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    MAIN            reduce using rule 44 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 232

state 213

    (95) escrituraAux -> CTE_STRING push_cte COMA escrituraAux .

    RPAREN          reduce using rule 95 (escrituraAux -> CTE_STRING push_cte COMA escrituraAux .)


state 214

    (89) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .

    ID              reduce using rule 89 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    IF              reduce using rule 89 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    PRINT           reduce using rule 89 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    WHILE           reduce using rule 89 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    FROM            reduce using rule 89 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    INPUT           reduce using rule 89 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    RBRACE          reduce using rule 89 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)


state 215

    (108) exp1 -> PLUS push_poper exp .

    LOWERTHAN       reduce using rule 108 (exp1 -> PLUS push_poper exp .)
    MORETHAN        reduce using rule 108 (exp1 -> PLUS push_poper exp .)
    DIFFERENT       reduce using rule 108 (exp1 -> PLUS push_poper exp .)
    DOUBLEEQUAL     reduce using rule 108 (exp1 -> PLUS push_poper exp .)
    LOWEREQUAL      reduce using rule 108 (exp1 -> PLUS push_poper exp .)
    MOREEQUAL       reduce using rule 108 (exp1 -> PLUS push_poper exp .)
    RPAREN          reduce using rule 108 (exp1 -> PLUS push_poper exp .)
    COMA            reduce using rule 108 (exp1 -> PLUS push_poper exp .)
    SEMICOLON       reduce using rule 108 (exp1 -> PLUS push_poper exp .)
    ID              reduce using rule 108 (exp1 -> PLUS push_poper exp .)
    IF              reduce using rule 108 (exp1 -> PLUS push_poper exp .)
    PRINT           reduce using rule 108 (exp1 -> PLUS push_poper exp .)
    WHILE           reduce using rule 108 (exp1 -> PLUS push_poper exp .)
    FROM            reduce using rule 108 (exp1 -> PLUS push_poper exp .)
    INPUT           reduce using rule 108 (exp1 -> PLUS push_poper exp .)
    RBRACE          reduce using rule 108 (exp1 -> PLUS push_poper exp .)


state 216

    (109) exp1 -> MINUS push_poper exp .

    LOWERTHAN       reduce using rule 109 (exp1 -> MINUS push_poper exp .)
    MORETHAN        reduce using rule 109 (exp1 -> MINUS push_poper exp .)
    DIFFERENT       reduce using rule 109 (exp1 -> MINUS push_poper exp .)
    DOUBLEEQUAL     reduce using rule 109 (exp1 -> MINUS push_poper exp .)
    LOWEREQUAL      reduce using rule 109 (exp1 -> MINUS push_poper exp .)
    MOREEQUAL       reduce using rule 109 (exp1 -> MINUS push_poper exp .)
    RPAREN          reduce using rule 109 (exp1 -> MINUS push_poper exp .)
    COMA            reduce using rule 109 (exp1 -> MINUS push_poper exp .)
    SEMICOLON       reduce using rule 109 (exp1 -> MINUS push_poper exp .)
    ID              reduce using rule 109 (exp1 -> MINUS push_poper exp .)
    IF              reduce using rule 109 (exp1 -> MINUS push_poper exp .)
    PRINT           reduce using rule 109 (exp1 -> MINUS push_poper exp .)
    WHILE           reduce using rule 109 (exp1 -> MINUS push_poper exp .)
    FROM            reduce using rule 109 (exp1 -> MINUS push_poper exp .)
    INPUT           reduce using rule 109 (exp1 -> MINUS push_poper exp .)
    RBRACE          reduce using rule 109 (exp1 -> MINUS push_poper exp .)


state 217

    (115) termino1 -> DIVIDE push_poper termino .

    PLUS            reduce using rule 115 (termino1 -> DIVIDE push_poper termino .)
    MINUS           reduce using rule 115 (termino1 -> DIVIDE push_poper termino .)
    LOWERTHAN       reduce using rule 115 (termino1 -> DIVIDE push_poper termino .)
    MORETHAN        reduce using rule 115 (termino1 -> DIVIDE push_poper termino .)
    DIFFERENT       reduce using rule 115 (termino1 -> DIVIDE push_poper termino .)
    DOUBLEEQUAL     reduce using rule 115 (termino1 -> DIVIDE push_poper termino .)
    LOWEREQUAL      reduce using rule 115 (termino1 -> DIVIDE push_poper termino .)
    MOREEQUAL       reduce using rule 115 (termino1 -> DIVIDE push_poper termino .)
    RPAREN          reduce using rule 115 (termino1 -> DIVIDE push_poper termino .)
    COMA            reduce using rule 115 (termino1 -> DIVIDE push_poper termino .)
    SEMICOLON       reduce using rule 115 (termino1 -> DIVIDE push_poper termino .)
    ID              reduce using rule 115 (termino1 -> DIVIDE push_poper termino .)
    IF              reduce using rule 115 (termino1 -> DIVIDE push_poper termino .)
    PRINT           reduce using rule 115 (termino1 -> DIVIDE push_poper termino .)
    WHILE           reduce using rule 115 (termino1 -> DIVIDE push_poper termino .)
    FROM            reduce using rule 115 (termino1 -> DIVIDE push_poper termino .)
    INPUT           reduce using rule 115 (termino1 -> DIVIDE push_poper termino .)
    RBRACE          reduce using rule 115 (termino1 -> DIVIDE push_poper termino .)


state 218

    (114) termino1 -> TIMES push_poper termino .

    PLUS            reduce using rule 114 (termino1 -> TIMES push_poper termino .)
    MINUS           reduce using rule 114 (termino1 -> TIMES push_poper termino .)
    LOWERTHAN       reduce using rule 114 (termino1 -> TIMES push_poper termino .)
    MORETHAN        reduce using rule 114 (termino1 -> TIMES push_poper termino .)
    DIFFERENT       reduce using rule 114 (termino1 -> TIMES push_poper termino .)
    DOUBLEEQUAL     reduce using rule 114 (termino1 -> TIMES push_poper termino .)
    LOWEREQUAL      reduce using rule 114 (termino1 -> TIMES push_poper termino .)
    MOREEQUAL       reduce using rule 114 (termino1 -> TIMES push_poper termino .)
    RPAREN          reduce using rule 114 (termino1 -> TIMES push_poper termino .)
    COMA            reduce using rule 114 (termino1 -> TIMES push_poper termino .)
    SEMICOLON       reduce using rule 114 (termino1 -> TIMES push_poper termino .)
    ID              reduce using rule 114 (termino1 -> TIMES push_poper termino .)
    IF              reduce using rule 114 (termino1 -> TIMES push_poper termino .)
    PRINT           reduce using rule 114 (termino1 -> TIMES push_poper termino .)
    WHILE           reduce using rule 114 (termino1 -> TIMES push_poper termino .)
    FROM            reduce using rule 114 (termino1 -> TIMES push_poper termino .)
    INPUT           reduce using rule 114 (termino1 -> TIMES push_poper termino .)
    RBRACE          reduce using rule 114 (termino1 -> TIMES push_poper termino .)


state 219

    (37) bloque -> LBRACE RBRACE .

    ELSE            reduce using rule 37 (bloque -> LBRACE RBRACE .)
    ID              reduce using rule 37 (bloque -> LBRACE RBRACE .)
    IF              reduce using rule 37 (bloque -> LBRACE RBRACE .)
    PRINT           reduce using rule 37 (bloque -> LBRACE RBRACE .)
    WHILE           reduce using rule 37 (bloque -> LBRACE RBRACE .)
    FROM            reduce using rule 37 (bloque -> LBRACE RBRACE .)
    INPUT           reduce using rule 37 (bloque -> LBRACE RBRACE .)
    RBRACE          reduce using rule 37 (bloque -> LBRACE RBRACE .)


state 220

    (38) bloque -> LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 233


state 221

    (84) condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .

    ID              reduce using rule 84 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    IF              reduce using rule 84 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    PRINT           reduce using rule 84 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    WHILE           reduce using rule 84 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    FROM            reduce using rule 84 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    INPUT           reduce using rule 84 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    RBRACE          reduce using rule 84 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)


state 222

    (85) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE . condElse bloque condFinal
    (87) condElse -> .

    LBRACE          reduce using rule 87 (condElse -> .)

    condElse                       shift and go to state 234

state 223

    (23) varAux2 -> ID push_var LCORCH CTE_I RCORCH . push_arreglo
    (24) varAux2 -> ID push_var LCORCH CTE_I RCORCH . push_arreglo COMA varAux2
    (25) varAux2 -> ID push_var LCORCH CTE_I RCORCH . LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> ID push_var LCORCH CTE_I RCORCH . LCORCH CTE_I RCORCH push_matriz COMA varAux2
    (28) push_arreglo -> .

    LCORCH          shift and go to state 235
    COMA            reduce using rule 28 (push_arreglo -> .)
    SEMICOLON       reduce using rule 28 (push_arreglo -> .)

    push_arreglo                   shift and go to state 236

state 224

    (90) lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print . SEMICOLON

    SEMICOLON       shift and go to state 237


state 225

    (70) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN . expresion
    (71) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN . SEMICOLON
    (97) expresion -> . exp
    (98) expresion -> . exp comp exp quad_comp
    (106) exp -> . termino quad_term
    (107) exp -> . termino quad_term exp1
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    SEMICOLON       shift and go to state 238
    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    ID              shift and go to state 98
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94
    CTE_STRING      shift and go to state 95

    expresion                      shift and go to state 239
    termino                        shift and go to state 90
    exp                            shift and go to state 100
    factorAux                      shift and go to state 101
    factor                         shift and go to state 93
    var_cte                        shift and go to state 89

state 226

    (76) paramFuncion -> ID push_id2 COMA . paramFuncion
    (75) paramFuncion -> . ID push_id2
    (76) paramFuncion -> . ID push_id2 COMA paramFuncion
    (77) paramFuncion -> . expresion
    (78) paramFuncion -> . expresion COMA paramFuncion
    (79) paramFuncion -> . empty
    (97) expresion -> . exp
    (98) expresion -> . exp comp exp quad_comp
    (52) empty -> .
    (106) exp -> . termino quad_term
    (107) exp -> . termino quad_term exp1
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 180
    RPAREN          reduce using rule 52 (empty -> .)
    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94
    CTE_STRING      shift and go to state 95

    expresion                      shift and go to state 181
    paramFuncion                   shift and go to state 240
    termino                        shift and go to state 90
    exp                            shift and go to state 100
    factorAux                      shift and go to state 101
    factor                         shift and go to state 93
    var_cte                        shift and go to state 89
    empty                          shift and go to state 179

state 227

    (78) paramFuncion -> expresion COMA paramFuncion .

    RPAREN          reduce using rule 78 (paramFuncion -> expresion COMA paramFuncion .)


state 228

    (81) asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .

    ID              reduce using rule 81 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    IF              reduce using rule 81 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    PRINT           reduce using rule 81 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    WHILE           reduce using rule 81 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    FROM            reduce using rule 81 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    INPUT           reduce using rule 81 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    RBRACE          reduce using rule 81 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)


state 229

    (61) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO . LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    LPAREN          shift and go to state 241


state 230

    (57) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE . bloqueAux RBRACE while3
    (55) bloqueAux -> . estatuto
    (56) bloqueAux -> . estatuto bloqueAux
    (62) estatuto -> . asignacion
    (63) estatuto -> . condicion
    (64) estatuto -> . escritura
    (65) estatuto -> . while
    (66) estatuto -> . loopFromDo
    (67) estatuto -> . comparacion
    (68) estatuto -> . llamadaAFuncion
    (69) estatuto -> . lectura
    (81) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (84) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (85) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (89) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (57) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (61) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (83) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (70) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (71) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (90) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON

    ID              shift and go to state 54
    IF              shift and go to state 49
    PRINT           shift and go to state 47
    WHILE           shift and go to state 59
    FROM            shift and go to state 57
    INPUT           shift and go to state 53

    estatuto                       shift and go to state 48
    condicion                      shift and go to state 51
    lectura                        shift and go to state 50
    loopFromDo                     shift and go to state 55
    llamadaAFuncion                shift and go to state 56
    asignacion                     shift and go to state 58
    bloqueAux                      shift and go to state 242
    while                          shift and go to state 61
    comparacion                    shift and go to state 62
    escritura                      shift and go to state 63

state 231

    (14) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2 .

    SEMICOLON       reduce using rule 14 (varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2 .)


state 232

    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function .

    MAIN            reduce using rule 46 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function .)


state 233

    (38) bloque -> LBRACE bloqueAux RBRACE .

    ELSE            reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    ID              reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    FROM            reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    INPUT           reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)


state 234

    (85) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse . bloque condFinal
    (37) bloque -> . LBRACE RBRACE
    (38) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 197

    bloque                         shift and go to state 243

state 235

    (25) varAux2 -> ID push_var LCORCH CTE_I RCORCH LCORCH . CTE_I RCORCH push_matriz
    (26) varAux2 -> ID push_var LCORCH CTE_I RCORCH LCORCH . CTE_I RCORCH push_matriz COMA varAux2

    CTE_I           shift and go to state 244


state 236

    (23) varAux2 -> ID push_var LCORCH CTE_I RCORCH push_arreglo .
    (24) varAux2 -> ID push_var LCORCH CTE_I RCORCH push_arreglo . COMA varAux2

    SEMICOLON       reduce using rule 23 (varAux2 -> ID push_var LCORCH CTE_I RCORCH push_arreglo .)
    COMA            shift and go to state 245


state 237

    (90) lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .

    ID              reduce using rule 90 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    IF              reduce using rule 90 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    PRINT           reduce using rule 90 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    WHILE           reduce using rule 90 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    FROM            reduce using rule 90 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    INPUT           reduce using rule 90 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    RBRACE          reduce using rule 90 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)


state 238

    (71) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .

    ID              reduce using rule 71 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    IF              reduce using rule 71 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    PRINT           reduce using rule 71 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    WHILE           reduce using rule 71 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    FROM            reduce using rule 71 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    INPUT           reduce using rule 71 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    RBRACE          reduce using rule 71 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    RPAREN          reduce using rule 71 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)


state 239

    (70) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .

    ID              reduce using rule 70 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    IF              reduce using rule 70 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    PRINT           reduce using rule 70 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    WHILE           reduce using rule 70 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    FROM            reduce using rule 70 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    INPUT           reduce using rule 70 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    RBRACE          reduce using rule 70 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    RPAREN          reduce using rule 70 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)


state 240

    (76) paramFuncion -> ID push_id2 COMA paramFuncion .

    RPAREN          reduce using rule 76 (paramFuncion -> ID push_id2 COMA paramFuncion .)


state 241

    (61) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN . expresion RPAREN DO LBRACE bloqueAux RBRACE
    (97) expresion -> . exp
    (98) expresion -> . exp comp exp quad_comp
    (106) exp -> . termino quad_term
    (107) exp -> . termino quad_term exp1
    (112) termino -> . factor quad_fact
    (113) termino -> . factor quad_fact termino1
    (116) factor -> . LPAREN expresion RPAREN
    (117) factor -> . factorAux
    (118) factorAux -> . PLUS push_poper var_cte
    (119) factorAux -> . MINUS push_poper var_cte
    (120) factorAux -> . var_cte
    (124) var_cte -> . ID push_id
    (125) var_cte -> . CTE_I push_cte
    (126) var_cte -> . CTE_F push_cte
    (127) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 97
    PLUS            shift and go to state 92
    MINUS           shift and go to state 91
    ID              shift and go to state 98
    CTE_I           shift and go to state 96
    CTE_F           shift and go to state 94
    CTE_STRING      shift and go to state 95

    expresion                      shift and go to state 246
    factor                         shift and go to state 93
    var_cte                        shift and go to state 89
    termino                        shift and go to state 90
    exp                            shift and go to state 100
    factorAux                      shift and go to state 101

state 242

    (57) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux . RBRACE while3

    RBRACE          shift and go to state 247


state 243

    (85) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque . condFinal
    (88) condFinal -> .

    ID              reduce using rule 88 (condFinal -> .)
    IF              reduce using rule 88 (condFinal -> .)
    PRINT           reduce using rule 88 (condFinal -> .)
    WHILE           reduce using rule 88 (condFinal -> .)
    FROM            reduce using rule 88 (condFinal -> .)
    INPUT           reduce using rule 88 (condFinal -> .)
    RBRACE          reduce using rule 88 (condFinal -> .)

    condFinal                      shift and go to state 248

state 244

    (25) varAux2 -> ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I . RCORCH push_matriz
    (26) varAux2 -> ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I . RCORCH push_matriz COMA varAux2

    RCORCH          shift and go to state 249


state 245

    (24) varAux2 -> ID push_var LCORCH CTE_I RCORCH push_arreglo COMA . varAux2
    (21) varAux2 -> . ID push_var
    (22) varAux2 -> . ID push_var COMA varAux2
    (23) varAux2 -> . ID push_var LCORCH CTE_I RCORCH push_arreglo
    (24) varAux2 -> . ID push_var LCORCH CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> . ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> . ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    ID              shift and go to state 103

    varAux2                        shift and go to state 250

state 246

    (61) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion . RPAREN DO LBRACE bloqueAux RBRACE

    RPAREN          shift and go to state 251


state 247

    (57) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE . while3
    (60) while3 -> .

    ID              reduce using rule 60 (while3 -> .)
    IF              reduce using rule 60 (while3 -> .)
    PRINT           reduce using rule 60 (while3 -> .)
    WHILE           reduce using rule 60 (while3 -> .)
    FROM            reduce using rule 60 (while3 -> .)
    INPUT           reduce using rule 60 (while3 -> .)
    RBRACE          reduce using rule 60 (while3 -> .)

    while3                         shift and go to state 252

state 248

    (85) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .

    ID              reduce using rule 85 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    IF              reduce using rule 85 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    PRINT           reduce using rule 85 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    WHILE           reduce using rule 85 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    FROM            reduce using rule 85 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    INPUT           reduce using rule 85 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    RBRACE          reduce using rule 85 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)


state 249

    (25) varAux2 -> ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH . push_matriz
    (26) varAux2 -> ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH . push_matriz COMA varAux2
    (29) push_matriz -> .

    COMA            reduce using rule 29 (push_matriz -> .)
    SEMICOLON       reduce using rule 29 (push_matriz -> .)

    push_matriz                    shift and go to state 253

state 250

    (24) varAux2 -> ID push_var LCORCH CTE_I RCORCH push_arreglo COMA varAux2 .

    SEMICOLON       reduce using rule 24 (varAux2 -> ID push_var LCORCH CTE_I RCORCH push_arreglo COMA varAux2 .)


state 251

    (61) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN . DO LBRACE bloqueAux RBRACE

    DO              shift and go to state 254


state 252

    (57) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .

    ID              reduce using rule 57 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    IF              reduce using rule 57 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    PRINT           reduce using rule 57 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    WHILE           reduce using rule 57 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    FROM            reduce using rule 57 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    INPUT           reduce using rule 57 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    RBRACE          reduce using rule 57 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)


state 253

    (25) varAux2 -> ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz .
    (26) varAux2 -> ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz . COMA varAux2

    SEMICOLON       reduce using rule 25 (varAux2 -> ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz .)
    COMA            shift and go to state 255


state 254

    (61) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 256


state 255

    (26) varAux2 -> ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA . varAux2
    (21) varAux2 -> . ID push_var
    (22) varAux2 -> . ID push_var COMA varAux2
    (23) varAux2 -> . ID push_var LCORCH CTE_I RCORCH push_arreglo
    (24) varAux2 -> . ID push_var LCORCH CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> . ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> . ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    ID              shift and go to state 103

    varAux2                        shift and go to state 257

state 256

    (61) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE . bloqueAux RBRACE
    (55) bloqueAux -> . estatuto
    (56) bloqueAux -> . estatuto bloqueAux
    (62) estatuto -> . asignacion
    (63) estatuto -> . condicion
    (64) estatuto -> . escritura
    (65) estatuto -> . while
    (66) estatuto -> . loopFromDo
    (67) estatuto -> . comparacion
    (68) estatuto -> . llamadaAFuncion
    (69) estatuto -> . lectura
    (81) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (84) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (85) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (89) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (57) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (61) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (83) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (70) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (71) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (90) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON

    ID              shift and go to state 54
    IF              shift and go to state 49
    PRINT           shift and go to state 47
    WHILE           shift and go to state 59
    FROM            shift and go to state 57
    INPUT           shift and go to state 53

    estatuto                       shift and go to state 48
    condicion                      shift and go to state 51
    lectura                        shift and go to state 50
    loopFromDo                     shift and go to state 55
    llamadaAFuncion                shift and go to state 56
    asignacion                     shift and go to state 58
    bloqueAux                      shift and go to state 258
    while                          shift and go to state 61
    comparacion                    shift and go to state 62
    escritura                      shift and go to state 63

state 257

    (26) varAux2 -> ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2 .

    SEMICOLON       reduce using rule 26 (varAux2 -> ID push_var LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2 .)


state 258

    (61) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 259


state 259

    (61) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .

    ID              reduce using rule 61 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 61 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 61 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 61 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    FROM            reduce using rule 61 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    INPUT           reduce using rule 61 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 61 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 35 resolved as shift
WARNING: shift/reduce conflict for COMA in state 154 resolved as shift
WARNING: reduce/reduce conflict in state 154 resolved using rule (escrituraAux -> CTE_STRING push_cte)
WARNING: rejected rule (var_cte -> CTE_STRING push_cte) in state 154
WARNING: reduce/reduce conflict in state 180 resolved using rule (push_id2 -> <empty>)
WARNING: rejected rule (push_id -> <empty>) in state 180
