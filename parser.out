Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID COLON vars main function
Rule 2     program -> PROGRAM ID COLON main function
Rule 3     program -> PROGRAM ID COLON vars main
Rule 4     program -> PROGRAM ID COLON main
Rule 5     main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
Rule 6     main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
Rule 7     nomMain -> MAIN
Rule 8     vars -> VAR varAux1
Rule 9     varAux1 -> tipo varAux2 SEMICOLON
Rule 10    varAux1 -> tipo varAux2 SEMICOLON varAux1
Rule 11    varAux2 -> ID
Rule 12    varAux2 -> ID COMA varAux2
Rule 13    tipo -> INT
Rule 14    tipo -> FLOAT
Rule 15    tipo -> CHAR
Rule 16    tipoFunc -> INT
Rule 17    tipoFunc -> FLOAT
Rule 18    tipoFunc -> CHAR
Rule 19    tipoFunc -> VOID
Rule 20    bloque -> LBRACE RBRACE
Rule 21    bloque -> LBRACE bloqueAux RBRACE
Rule 22    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
Rule 23    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
Rule 24    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
Rule 25    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
Rule 26    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
Rule 27    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
Rule 28    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
Rule 29    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function
Rule 30    param -> tipo ID
Rule 31    param -> tipo ID COMA param
Rule 32    nomFunc -> ID
Rule 33    bloqueAux -> estatuto
Rule 34    bloqueAux -> estatuto bloqueAux
Rule 35    while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
Rule 36    while1 -> <empty>
Rule 37    while2 -> <empty>
Rule 38    while3 -> <empty>
Rule 39    loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
Rule 40    estatuto -> asignacion
Rule 41    estatuto -> condicion
Rule 42    estatuto -> escritura
Rule 43    estatuto -> while
Rule 44    estatuto -> loopFromDo
Rule 45    estatuto -> comparacion
Rule 46    asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON
Rule 47    create_asign -> <empty>
Rule 48    comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
Rule 49    condicion -> IF LPAREN expresion RPAREN cond bloque condFinal
Rule 50    condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
Rule 51    cond -> <empty>
Rule 52    condElse -> <empty>
Rule 53    condFinal -> <empty>
Rule 54    escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
Rule 55    quad_print -> <empty>
Rule 56    escrituraAux -> expresion
Rule 57    escrituraAux -> CTE_STRING
Rule 58    escrituraAux -> expresion COMA escrituraAux
Rule 59    escrituraAux -> CTE_STRING COMA escrituraAux
Rule 60    expresion -> exp
Rule 61    expresion -> exp comp exp quad_comp
Rule 62    comp -> LOWERTHAN push_poper
Rule 63    comp -> MORETHAN push_poper
Rule 64    comp -> DIFFERENT push_poper
Rule 65    comp -> DOUBLEEQUAL push_poper
Rule 66    quad_comp -> <empty>
Rule 67    exp -> termino quad_term
Rule 68    exp -> termino quad_term exp1
Rule 69    exp1 -> PLUS push_poper exp
Rule 70    exp1 -> MINUS push_poper exp
Rule 71    quad_term -> <empty>
Rule 72    quad_fact -> <empty>
Rule 73    termino -> factor quad_fact
Rule 74    termino -> factor quad_fact termino1
Rule 75    termino1 -> TIMES push_poper termino
Rule 76    termino1 -> DIVIDE push_poper termino
Rule 77    factor -> LPAREN expresion RPAREN
Rule 78    factor -> factorAux
Rule 79    factorAux -> PLUS push_poper var_cte
Rule 80    factorAux -> MINUS push_poper var_cte
Rule 81    factorAux -> var_cte
Rule 82    push_id -> <empty>
Rule 83    push_cte -> <empty>
Rule 84    push_poper -> <empty>
Rule 85    var_cte -> ID push_id
Rule 86    var_cte -> CTE_I push_cte
Rule 87    var_cte -> CTE_F push_cte
Rule 88    var_cte -> CTE_STRING push_cte

Terminals, with rules where they appear

AND                  : 
CHAR                 : 15 18
COLON                : 1 2 3 4
COMA                 : 12 31 58 59
CTE_F                : 87
CTE_I                : 86
CTE_STRING           : 57 59 88
DIFFERENT            : 64
DIVIDE               : 76
DO                   : 39
DOUBLEEQUAL          : 48 65
ELSE                 : 50
EQUAL                : 39 46
FLOAT                : 14 17
FROM                 : 39
FUNCTION             : 22 23 24 25 26 27 28 29
ID                   : 1 2 3 4 11 12 30 31 32 39 46 48 85
IF                   : 49 50
INT                  : 13 16
LBRACE               : 5 6 20 21 22 23 24 25 26 27 28 29 35 39
LOWERTHAN            : 62
LPAREN               : 5 6 22 23 24 25 26 27 28 29 35 39 39 49 50 54 77
MAIN                 : 7
MINUS                : 70 80
MORETHAN             : 63
OR                   : 
PLUS                 : 69 79
PRINT                : 54
PROGRAM              : 1 2 3 4
RBRACE               : 5 6 20 21 22 23 24 25 26 27 28 29 35 39
RPAREN               : 5 6 22 23 24 25 26 27 28 29 35 39 39 49 50 54 77
SEMICOLON            : 9 10 46 48 54
TIMES                : 75
TO                   : 39
VAR                  : 8
VOID                 : 19
WHILE                : 35
error                : 

Nonterminals, with rules where they appear

asignacion           : 40
bloque               : 49 50 50
bloqueAux            : 5 6 21 23 25 27 29 34 35 39
comp                 : 61
comparacion          : 45
cond                 : 49 50
condElse             : 50
condFinal            : 49 50
condicion            : 41
create_asign         : 46
escritura            : 42
escrituraAux         : 58 59
estatuto             : 33 34
exp                  : 54 60 61 61 69 70
exp1                 : 68
expresion            : 35 39 39 46 48 49 50 56 58 77
factor               : 73 74
factorAux            : 78
function             : 1 2 24 25 28 29
loopFromDo           : 44
main                 : 1 2 3 4
nomFunc              : 22 23 24 25 26 27 28 29
nomMain              : 5 6
param                : 26 27 28 29 31
program              : 0
push_cte             : 86 87 88
push_id              : 46 48 85
push_poper           : 46 48 54 62 63 64 65 69 70 75 76 79 80
quad_comp            : 61
quad_fact            : 73 74
quad_print           : 54
quad_term            : 67 68
termino              : 67 68 75 76
termino1             : 74
tipo                 : 9 10 30 31
tipoFunc             : 22 23 24 25 26 27 28 29
varAux1              : 8 10
varAux2              : 9 10 12
var_cte              : 79 80 81
vars                 : 1 3 6 23 25 27 29
while                : 43
while1               : 35
while2               : 35
while3               : 35

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID COLON vars main function
    (2) program -> . PROGRAM ID COLON main function
    (3) program -> . PROGRAM ID COLON vars main
    (4) program -> . PROGRAM ID COLON main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID COLON vars main function
    (2) program -> PROGRAM . ID COLON main function
    (3) program -> PROGRAM . ID COLON vars main
    (4) program -> PROGRAM . ID COLON main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . COLON vars main function
    (2) program -> PROGRAM ID . COLON main function
    (3) program -> PROGRAM ID . COLON vars main
    (4) program -> PROGRAM ID . COLON main

    COLON           shift and go to state 4


state 4

    (1) program -> PROGRAM ID COLON . vars main function
    (2) program -> PROGRAM ID COLON . main function
    (3) program -> PROGRAM ID COLON . vars main
    (4) program -> PROGRAM ID COLON . main
    (8) vars -> . VAR varAux1
    (5) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (6) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (7) nomMain -> . MAIN

    VAR             shift and go to state 8
    MAIN            shift and go to state 6

    vars                           shift and go to state 5
    nomMain                        shift and go to state 7
    main                           shift and go to state 9

state 5

    (1) program -> PROGRAM ID COLON vars . main function
    (3) program -> PROGRAM ID COLON vars . main
    (5) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (6) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (7) nomMain -> . MAIN

    MAIN            shift and go to state 6

    nomMain                        shift and go to state 7
    main                           shift and go to state 10

state 6

    (7) nomMain -> MAIN .

    LPAREN          reduce using rule 7 (nomMain -> MAIN .)


state 7

    (5) main -> nomMain . LPAREN RPAREN LBRACE bloqueAux RBRACE
    (6) main -> nomMain . LPAREN RPAREN LBRACE vars bloqueAux RBRACE

    LPAREN          shift and go to state 11


state 8

    (8) vars -> VAR . varAux1
    (9) varAux1 -> . tipo varAux2 SEMICOLON
    (10) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

    varAux1                        shift and go to state 16
    tipo                           shift and go to state 13

state 9

    (2) program -> PROGRAM ID COLON main . function
    (4) program -> PROGRAM ID COLON main .
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    $end            reduce using rule 4 (program -> PROGRAM ID COLON main .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 17

state 10

    (1) program -> PROGRAM ID COLON vars main . function
    (3) program -> PROGRAM ID COLON vars main .
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    $end            reduce using rule 3 (program -> PROGRAM ID COLON vars main .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 19

state 11

    (5) main -> nomMain LPAREN . RPAREN LBRACE bloqueAux RBRACE
    (6) main -> nomMain LPAREN . RPAREN LBRACE vars bloqueAux RBRACE

    RPAREN          shift and go to state 20


state 12

    (15) tipo -> CHAR .

    ID              reduce using rule 15 (tipo -> CHAR .)


state 13

    (9) varAux1 -> tipo . varAux2 SEMICOLON
    (10) varAux1 -> tipo . varAux2 SEMICOLON varAux1
    (11) varAux2 -> . ID
    (12) varAux2 -> . ID COMA varAux2

    ID              shift and go to state 22

    varAux2                        shift and go to state 21

state 14

    (13) tipo -> INT .

    ID              reduce using rule 13 (tipo -> INT .)


state 15

    (14) tipo -> FLOAT .

    ID              reduce using rule 14 (tipo -> FLOAT .)


state 16

    (8) vars -> VAR varAux1 .

    ID              reduce using rule 8 (vars -> VAR varAux1 .)
    IF              reduce using rule 8 (vars -> VAR varAux1 .)
    PRINT           reduce using rule 8 (vars -> VAR varAux1 .)
    WHILE           reduce using rule 8 (vars -> VAR varAux1 .)
    FROM            reduce using rule 8 (vars -> VAR varAux1 .)
    MAIN            reduce using rule 8 (vars -> VAR varAux1 .)


state 17

    (2) program -> PROGRAM ID COLON main function .

    $end            reduce using rule 2 (program -> PROGRAM ID COLON main function .)


state 18

    (22) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function
    (16) tipoFunc -> . INT
    (17) tipoFunc -> . FLOAT
    (18) tipoFunc -> . CHAR
    (19) tipoFunc -> . VOID

    INT             shift and go to state 23
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26
    VOID            shift and go to state 24

    tipoFunc                       shift and go to state 27

state 19

    (1) program -> PROGRAM ID COLON vars main function .

    $end            reduce using rule 1 (program -> PROGRAM ID COLON vars main function .)


state 20

    (5) main -> nomMain LPAREN RPAREN . LBRACE bloqueAux RBRACE
    (6) main -> nomMain LPAREN RPAREN . LBRACE vars bloqueAux RBRACE

    LBRACE          shift and go to state 28


state 21

    (9) varAux1 -> tipo varAux2 . SEMICOLON
    (10) varAux1 -> tipo varAux2 . SEMICOLON varAux1

    SEMICOLON       shift and go to state 29


state 22

    (11) varAux2 -> ID .
    (12) varAux2 -> ID . COMA varAux2

    SEMICOLON       reduce using rule 11 (varAux2 -> ID .)
    COMA            shift and go to state 30


state 23

    (16) tipoFunc -> INT .

    ID              reduce using rule 16 (tipoFunc -> INT .)


state 24

    (19) tipoFunc -> VOID .

    ID              reduce using rule 19 (tipoFunc -> VOID .)


state 25

    (17) tipoFunc -> FLOAT .

    ID              reduce using rule 17 (tipoFunc -> FLOAT .)


state 26

    (18) tipoFunc -> CHAR .

    ID              reduce using rule 18 (tipoFunc -> CHAR .)


state 27

    (22) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function
    (32) nomFunc -> . ID

    ID              shift and go to state 32

    nomFunc                        shift and go to state 31

state 28

    (5) main -> nomMain LPAREN RPAREN LBRACE . bloqueAux RBRACE
    (6) main -> nomMain LPAREN RPAREN LBRACE . vars bloqueAux RBRACE
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (8) vars -> . VAR varAux1
    (40) estatuto -> . asignacion
    (41) estatuto -> . condicion
    (42) estatuto -> . escritura
    (43) estatuto -> . while
    (44) estatuto -> . loopFromDo
    (45) estatuto -> . comparacion
    (46) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (49) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (50) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (54) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (35) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (39) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (48) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    VAR             shift and go to state 8
    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 42
    FROM            shift and go to state 40

    vars                           shift and go to state 33
    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 39
    asignacion                     shift and go to state 41
    bloqueAux                      shift and go to state 43
    while                          shift and go to state 44
    comparacion                    shift and go to state 45
    escritura                      shift and go to state 46

state 29

    (9) varAux1 -> tipo varAux2 SEMICOLON .
    (10) varAux1 -> tipo varAux2 SEMICOLON . varAux1
    (9) varAux1 -> . tipo varAux2 SEMICOLON
    (10) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR

    MAIN            reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    ID              reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    IF              reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    PRINT           reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    WHILE           reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    FROM            reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

    varAux1                        shift and go to state 47
    tipo                           shift and go to state 13

state 30

    (12) varAux2 -> ID COMA . varAux2
    (11) varAux2 -> . ID
    (12) varAux2 -> . ID COMA varAux2

    ID              shift and go to state 22

    varAux2                        shift and go to state 48

state 31

    (22) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE RBRACE
    (23) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE RBRACE function
    (25) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE RBRACE
    (27) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    LPAREN          shift and go to state 49


state 32

    (32) nomFunc -> ID .

    LPAREN          reduce using rule 32 (nomFunc -> ID .)


state 33

    (6) main -> nomMain LPAREN RPAREN LBRACE vars . bloqueAux RBRACE
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (40) estatuto -> . asignacion
    (41) estatuto -> . condicion
    (42) estatuto -> . escritura
    (43) estatuto -> . while
    (44) estatuto -> . loopFromDo
    (45) estatuto -> . comparacion
    (46) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (49) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (50) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (54) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (35) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (39) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (48) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 42
    FROM            shift and go to state 40

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 39
    asignacion                     shift and go to state 41
    bloqueAux                      shift and go to state 50
    while                          shift and go to state 44
    comparacion                    shift and go to state 45
    escritura                      shift and go to state 46

state 34

    (54) escritura -> PRINT . push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (84) push_poper -> .

    LPAREN          reduce using rule 84 (push_poper -> .)

    push_poper                     shift and go to state 51

state 35

    (33) bloqueAux -> estatuto .
    (34) bloqueAux -> estatuto . bloqueAux
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (40) estatuto -> . asignacion
    (41) estatuto -> . condicion
    (42) estatuto -> . escritura
    (43) estatuto -> . while
    (44) estatuto -> . loopFromDo
    (45) estatuto -> . comparacion
    (46) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (49) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (50) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (54) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (35) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (39) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (48) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    RBRACE          reduce using rule 33 (bloqueAux -> estatuto .)
    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 42
    FROM            shift and go to state 40

    asignacion                     shift and go to state 41
    estatuto                       shift and go to state 35
    bloqueAux                      shift and go to state 52
    while                          shift and go to state 44
    condicion                      shift and go to state 37
    comparacion                    shift and go to state 45
    loopFromDo                     shift and go to state 39
    escritura                      shift and go to state 46

state 36

    (49) condicion -> IF . LPAREN expresion RPAREN cond bloque condFinal
    (50) condicion -> IF . LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal

    LPAREN          shift and go to state 53


state 37

    (41) estatuto -> condicion .

    ID              reduce using rule 41 (estatuto -> condicion .)
    IF              reduce using rule 41 (estatuto -> condicion .)
    PRINT           reduce using rule 41 (estatuto -> condicion .)
    WHILE           reduce using rule 41 (estatuto -> condicion .)
    FROM            reduce using rule 41 (estatuto -> condicion .)
    RBRACE          reduce using rule 41 (estatuto -> condicion .)


state 38

    (46) asignacion -> ID . push_id EQUAL push_poper expresion create_asign SEMICOLON
    (48) comparacion -> ID . push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (82) push_id -> .

    EQUAL           reduce using rule 82 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 82 (push_id -> .)

    push_id                        shift and go to state 54

state 39

    (44) estatuto -> loopFromDo .

    ID              reduce using rule 44 (estatuto -> loopFromDo .)
    IF              reduce using rule 44 (estatuto -> loopFromDo .)
    PRINT           reduce using rule 44 (estatuto -> loopFromDo .)
    WHILE           reduce using rule 44 (estatuto -> loopFromDo .)
    FROM            reduce using rule 44 (estatuto -> loopFromDo .)
    RBRACE          reduce using rule 44 (estatuto -> loopFromDo .)


state 40

    (39) loopFromDo -> FROM . LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    LPAREN          shift and go to state 55


state 41

    (40) estatuto -> asignacion .

    ID              reduce using rule 40 (estatuto -> asignacion .)
    IF              reduce using rule 40 (estatuto -> asignacion .)
    PRINT           reduce using rule 40 (estatuto -> asignacion .)
    WHILE           reduce using rule 40 (estatuto -> asignacion .)
    FROM            reduce using rule 40 (estatuto -> asignacion .)
    RBRACE          reduce using rule 40 (estatuto -> asignacion .)


state 42

    (35) while -> WHILE . while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (36) while1 -> .

    LPAREN          reduce using rule 36 (while1 -> .)

    while1                         shift and go to state 56

state 43

    (5) main -> nomMain LPAREN RPAREN LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 57


state 44

    (43) estatuto -> while .

    ID              reduce using rule 43 (estatuto -> while .)
    IF              reduce using rule 43 (estatuto -> while .)
    PRINT           reduce using rule 43 (estatuto -> while .)
    WHILE           reduce using rule 43 (estatuto -> while .)
    FROM            reduce using rule 43 (estatuto -> while .)
    RBRACE          reduce using rule 43 (estatuto -> while .)


state 45

    (45) estatuto -> comparacion .

    ID              reduce using rule 45 (estatuto -> comparacion .)
    IF              reduce using rule 45 (estatuto -> comparacion .)
    PRINT           reduce using rule 45 (estatuto -> comparacion .)
    WHILE           reduce using rule 45 (estatuto -> comparacion .)
    FROM            reduce using rule 45 (estatuto -> comparacion .)
    RBRACE          reduce using rule 45 (estatuto -> comparacion .)


state 46

    (42) estatuto -> escritura .

    ID              reduce using rule 42 (estatuto -> escritura .)
    IF              reduce using rule 42 (estatuto -> escritura .)
    PRINT           reduce using rule 42 (estatuto -> escritura .)
    WHILE           reduce using rule 42 (estatuto -> escritura .)
    FROM            reduce using rule 42 (estatuto -> escritura .)
    RBRACE          reduce using rule 42 (estatuto -> escritura .)


state 47

    (10) varAux1 -> tipo varAux2 SEMICOLON varAux1 .

    MAIN            reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    ID              reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    IF              reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    PRINT           reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    WHILE           reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    FROM            reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)


state 48

    (12) varAux2 -> ID COMA varAux2 .

    SEMICOLON       reduce using rule 12 (varAux2 -> ID COMA varAux2 .)


state 49

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE RBRACE
    (23) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE RBRACE function
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE RBRACE
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE RBRACE function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux RBRACE function
    (30) param -> . tipo ID
    (31) param -> . tipo ID COMA param
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR

    RPAREN          shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

    tipo                           shift and go to state 60
    param                          shift and go to state 59

state 50

    (6) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux . RBRACE

    RBRACE          shift and go to state 61


state 51

    (54) escritura -> PRINT push_poper . LPAREN exp RPAREN quad_print SEMICOLON

    LPAREN          shift and go to state 62


state 52

    (34) bloqueAux -> estatuto bloqueAux .

    RBRACE          reduce using rule 34 (bloqueAux -> estatuto bloqueAux .)


state 53

    (49) condicion -> IF LPAREN . expresion RPAREN cond bloque condFinal
    (50) condicion -> IF LPAREN . expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (60) expresion -> . exp
    (61) expresion -> . exp comp exp quad_comp
    (67) exp -> . termino quad_term
    (68) exp -> . termino quad_term exp1
    (73) termino -> . factor quad_fact
    (74) termino -> . factor quad_fact termino1
    (77) factor -> . LPAREN expresion RPAREN
    (78) factor -> . factorAux
    (79) factorAux -> . PLUS push_poper var_cte
    (80) factorAux -> . MINUS push_poper var_cte
    (81) factorAux -> . var_cte
    (85) var_cte -> . ID push_id
    (86) var_cte -> . CTE_I push_cte
    (87) var_cte -> . CTE_F push_cte
    (88) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 71
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 72
    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 68
    CTE_STRING      shift and go to state 69

    expresion                      shift and go to state 73
    factor                         shift and go to state 67
    termino                        shift and go to state 64
    exp                            shift and go to state 74
    factorAux                      shift and go to state 75
    var_cte                        shift and go to state 63

state 54

    (46) asignacion -> ID push_id . EQUAL push_poper expresion create_asign SEMICOLON
    (48) comparacion -> ID push_id . DOUBLEEQUAL push_poper expresion SEMICOLON

    EQUAL           shift and go to state 77
    DOUBLEEQUAL     shift and go to state 76


state 55

    (39) loopFromDo -> FROM LPAREN . ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    ID              shift and go to state 78


state 56

    (35) while -> WHILE while1 . LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3

    LPAREN          shift and go to state 79


state 57

    (5) main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE .

    FUNCTION        reduce using rule 5 (main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE .)
    $end            reduce using rule 5 (main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE .)


state 58

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE RBRACE
    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux RBRACE
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE RBRACE function
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux RBRACE function

    LBRACE          shift and go to state 80


state 59

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE RBRACE
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE RBRACE function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux RBRACE function

    RPAREN          shift and go to state 81


state 60

    (30) param -> tipo . ID
    (31) param -> tipo . ID COMA param

    ID              shift and go to state 82


state 61

    (6) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE .

    FUNCTION        reduce using rule 6 (main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE .)
    $end            reduce using rule 6 (main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE .)


state 62

    (54) escritura -> PRINT push_poper LPAREN . exp RPAREN quad_print SEMICOLON
    (67) exp -> . termino quad_term
    (68) exp -> . termino quad_term exp1
    (73) termino -> . factor quad_fact
    (74) termino -> . factor quad_fact termino1
    (77) factor -> . LPAREN expresion RPAREN
    (78) factor -> . factorAux
    (79) factorAux -> . PLUS push_poper var_cte
    (80) factorAux -> . MINUS push_poper var_cte
    (81) factorAux -> . var_cte
    (85) var_cte -> . ID push_id
    (86) var_cte -> . CTE_I push_cte
    (87) var_cte -> . CTE_F push_cte
    (88) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 71
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 72
    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 68
    CTE_STRING      shift and go to state 69

    factor                         shift and go to state 67
    termino                        shift and go to state 64
    exp                            shift and go to state 83
    factorAux                      shift and go to state 75
    var_cte                        shift and go to state 63

state 63

    (81) factorAux -> var_cte .

    TIMES           reduce using rule 81 (factorAux -> var_cte .)
    DIVIDE          reduce using rule 81 (factorAux -> var_cte .)
    PLUS            reduce using rule 81 (factorAux -> var_cte .)
    MINUS           reduce using rule 81 (factorAux -> var_cte .)
    RPAREN          reduce using rule 81 (factorAux -> var_cte .)
    LOWERTHAN       reduce using rule 81 (factorAux -> var_cte .)
    MORETHAN        reduce using rule 81 (factorAux -> var_cte .)
    DIFFERENT       reduce using rule 81 (factorAux -> var_cte .)
    DOUBLEEQUAL     reduce using rule 81 (factorAux -> var_cte .)
    SEMICOLON       reduce using rule 81 (factorAux -> var_cte .)


state 64

    (67) exp -> termino . quad_term
    (68) exp -> termino . quad_term exp1
    (71) quad_term -> .

    PLUS            reduce using rule 71 (quad_term -> .)
    MINUS           reduce using rule 71 (quad_term -> .)
    LOWERTHAN       reduce using rule 71 (quad_term -> .)
    MORETHAN        reduce using rule 71 (quad_term -> .)
    DIFFERENT       reduce using rule 71 (quad_term -> .)
    DOUBLEEQUAL     reduce using rule 71 (quad_term -> .)
    RPAREN          reduce using rule 71 (quad_term -> .)
    SEMICOLON       reduce using rule 71 (quad_term -> .)

    quad_term                      shift and go to state 84

state 65

    (80) factorAux -> MINUS . push_poper var_cte
    (84) push_poper -> .

    ID              reduce using rule 84 (push_poper -> .)
    CTE_I           reduce using rule 84 (push_poper -> .)
    CTE_F           reduce using rule 84 (push_poper -> .)
    CTE_STRING      reduce using rule 84 (push_poper -> .)

    push_poper                     shift and go to state 85

state 66

    (79) factorAux -> PLUS . push_poper var_cte
    (84) push_poper -> .

    ID              reduce using rule 84 (push_poper -> .)
    CTE_I           reduce using rule 84 (push_poper -> .)
    CTE_F           reduce using rule 84 (push_poper -> .)
    CTE_STRING      reduce using rule 84 (push_poper -> .)

    push_poper                     shift and go to state 86

state 67

    (73) termino -> factor . quad_fact
    (74) termino -> factor . quad_fact termino1
    (72) quad_fact -> .

    TIMES           reduce using rule 72 (quad_fact -> .)
    DIVIDE          reduce using rule 72 (quad_fact -> .)
    PLUS            reduce using rule 72 (quad_fact -> .)
    MINUS           reduce using rule 72 (quad_fact -> .)
    LOWERTHAN       reduce using rule 72 (quad_fact -> .)
    MORETHAN        reduce using rule 72 (quad_fact -> .)
    DIFFERENT       reduce using rule 72 (quad_fact -> .)
    DOUBLEEQUAL     reduce using rule 72 (quad_fact -> .)
    RPAREN          reduce using rule 72 (quad_fact -> .)
    SEMICOLON       reduce using rule 72 (quad_fact -> .)

    quad_fact                      shift and go to state 87

state 68

    (87) var_cte -> CTE_F . push_cte
    (83) push_cte -> .

    TIMES           reduce using rule 83 (push_cte -> .)
    DIVIDE          reduce using rule 83 (push_cte -> .)
    PLUS            reduce using rule 83 (push_cte -> .)
    MINUS           reduce using rule 83 (push_cte -> .)
    LOWERTHAN       reduce using rule 83 (push_cte -> .)
    MORETHAN        reduce using rule 83 (push_cte -> .)
    DIFFERENT       reduce using rule 83 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 83 (push_cte -> .)
    RPAREN          reduce using rule 83 (push_cte -> .)
    SEMICOLON       reduce using rule 83 (push_cte -> .)

    push_cte                       shift and go to state 88

state 69

    (88) var_cte -> CTE_STRING . push_cte
    (83) push_cte -> .

    TIMES           reduce using rule 83 (push_cte -> .)
    DIVIDE          reduce using rule 83 (push_cte -> .)
    PLUS            reduce using rule 83 (push_cte -> .)
    MINUS           reduce using rule 83 (push_cte -> .)
    LOWERTHAN       reduce using rule 83 (push_cte -> .)
    MORETHAN        reduce using rule 83 (push_cte -> .)
    DIFFERENT       reduce using rule 83 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 83 (push_cte -> .)
    RPAREN          reduce using rule 83 (push_cte -> .)
    SEMICOLON       reduce using rule 83 (push_cte -> .)

    push_cte                       shift and go to state 89

state 70

    (86) var_cte -> CTE_I . push_cte
    (83) push_cte -> .

    TIMES           reduce using rule 83 (push_cte -> .)
    DIVIDE          reduce using rule 83 (push_cte -> .)
    PLUS            reduce using rule 83 (push_cte -> .)
    MINUS           reduce using rule 83 (push_cte -> .)
    LOWERTHAN       reduce using rule 83 (push_cte -> .)
    MORETHAN        reduce using rule 83 (push_cte -> .)
    DIFFERENT       reduce using rule 83 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 83 (push_cte -> .)
    RPAREN          reduce using rule 83 (push_cte -> .)
    SEMICOLON       reduce using rule 83 (push_cte -> .)

    push_cte                       shift and go to state 90

state 71

    (77) factor -> LPAREN . expresion RPAREN
    (60) expresion -> . exp
    (61) expresion -> . exp comp exp quad_comp
    (67) exp -> . termino quad_term
    (68) exp -> . termino quad_term exp1
    (73) termino -> . factor quad_fact
    (74) termino -> . factor quad_fact termino1
    (77) factor -> . LPAREN expresion RPAREN
    (78) factor -> . factorAux
    (79) factorAux -> . PLUS push_poper var_cte
    (80) factorAux -> . MINUS push_poper var_cte
    (81) factorAux -> . var_cte
    (85) var_cte -> . ID push_id
    (86) var_cte -> . CTE_I push_cte
    (87) var_cte -> . CTE_F push_cte
    (88) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 71
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 72
    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 68
    CTE_STRING      shift and go to state 69

    expresion                      shift and go to state 91
    factor                         shift and go to state 67
    termino                        shift and go to state 64
    exp                            shift and go to state 74
    factorAux                      shift and go to state 75
    var_cte                        shift and go to state 63

state 72

    (85) var_cte -> ID . push_id
    (82) push_id -> .

    TIMES           reduce using rule 82 (push_id -> .)
    DIVIDE          reduce using rule 82 (push_id -> .)
    PLUS            reduce using rule 82 (push_id -> .)
    MINUS           reduce using rule 82 (push_id -> .)
    LOWERTHAN       reduce using rule 82 (push_id -> .)
    MORETHAN        reduce using rule 82 (push_id -> .)
    DIFFERENT       reduce using rule 82 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 82 (push_id -> .)
    RPAREN          reduce using rule 82 (push_id -> .)
    SEMICOLON       reduce using rule 82 (push_id -> .)

    push_id                        shift and go to state 92

state 73

    (49) condicion -> IF LPAREN expresion . RPAREN cond bloque condFinal
    (50) condicion -> IF LPAREN expresion . RPAREN cond bloque ELSE condElse bloque condFinal

    RPAREN          shift and go to state 93


state 74

    (60) expresion -> exp .
    (61) expresion -> exp . comp exp quad_comp
    (62) comp -> . LOWERTHAN push_poper
    (63) comp -> . MORETHAN push_poper
    (64) comp -> . DIFFERENT push_poper
    (65) comp -> . DOUBLEEQUAL push_poper

    RPAREN          reduce using rule 60 (expresion -> exp .)
    SEMICOLON       reduce using rule 60 (expresion -> exp .)
    LOWERTHAN       shift and go to state 96
    MORETHAN        shift and go to state 98
    DIFFERENT       shift and go to state 94
    DOUBLEEQUAL     shift and go to state 95

    comp                           shift and go to state 97

state 75

    (78) factor -> factorAux .

    TIMES           reduce using rule 78 (factor -> factorAux .)
    DIVIDE          reduce using rule 78 (factor -> factorAux .)
    PLUS            reduce using rule 78 (factor -> factorAux .)
    MINUS           reduce using rule 78 (factor -> factorAux .)
    LOWERTHAN       reduce using rule 78 (factor -> factorAux .)
    MORETHAN        reduce using rule 78 (factor -> factorAux .)
    DIFFERENT       reduce using rule 78 (factor -> factorAux .)
    DOUBLEEQUAL     reduce using rule 78 (factor -> factorAux .)
    RPAREN          reduce using rule 78 (factor -> factorAux .)
    SEMICOLON       reduce using rule 78 (factor -> factorAux .)


state 76

    (48) comparacion -> ID push_id DOUBLEEQUAL . push_poper expresion SEMICOLON
    (84) push_poper -> .

    LPAREN          reduce using rule 84 (push_poper -> .)
    PLUS            reduce using rule 84 (push_poper -> .)
    MINUS           reduce using rule 84 (push_poper -> .)
    ID              reduce using rule 84 (push_poper -> .)
    CTE_I           reduce using rule 84 (push_poper -> .)
    CTE_F           reduce using rule 84 (push_poper -> .)
    CTE_STRING      reduce using rule 84 (push_poper -> .)

    push_poper                     shift and go to state 99

state 77

    (46) asignacion -> ID push_id EQUAL . push_poper expresion create_asign SEMICOLON
    (84) push_poper -> .

    LPAREN          reduce using rule 84 (push_poper -> .)
    PLUS            reduce using rule 84 (push_poper -> .)
    MINUS           reduce using rule 84 (push_poper -> .)
    ID              reduce using rule 84 (push_poper -> .)
    CTE_I           reduce using rule 84 (push_poper -> .)
    CTE_F           reduce using rule 84 (push_poper -> .)
    CTE_STRING      reduce using rule 84 (push_poper -> .)

    push_poper                     shift and go to state 100

state 78

    (39) loopFromDo -> FROM LPAREN ID . EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    EQUAL           shift and go to state 101


state 79

    (35) while -> WHILE while1 LPAREN . expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (60) expresion -> . exp
    (61) expresion -> . exp comp exp quad_comp
    (67) exp -> . termino quad_term
    (68) exp -> . termino quad_term exp1
    (73) termino -> . factor quad_fact
    (74) termino -> . factor quad_fact termino1
    (77) factor -> . LPAREN expresion RPAREN
    (78) factor -> . factorAux
    (79) factorAux -> . PLUS push_poper var_cte
    (80) factorAux -> . MINUS push_poper var_cte
    (81) factorAux -> . var_cte
    (85) var_cte -> . ID push_id
    (86) var_cte -> . CTE_I push_cte
    (87) var_cte -> . CTE_F push_cte
    (88) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 71
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 72
    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 68
    CTE_STRING      shift and go to state 69

    expresion                      shift and go to state 102
    factor                         shift and go to state 67
    var_cte                        shift and go to state 63
    termino                        shift and go to state 64
    exp                            shift and go to state 74
    factorAux                      shift and go to state 75

state 80

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . RBRACE
    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux RBRACE
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . RBRACE function
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux RBRACE function
    (8) vars -> . VAR varAux1

    RBRACE          shift and go to state 103
    VAR             shift and go to state 8

    vars                           shift and go to state 104

state 81

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE RBRACE
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux RBRACE
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE RBRACE function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux RBRACE function

    LBRACE          shift and go to state 105


state 82

    (30) param -> tipo ID .
    (31) param -> tipo ID . COMA param

    RPAREN          reduce using rule 30 (param -> tipo ID .)
    COMA            shift and go to state 106


state 83

    (54) escritura -> PRINT push_poper LPAREN exp . RPAREN quad_print SEMICOLON

    RPAREN          shift and go to state 107


state 84

    (67) exp -> termino quad_term .
    (68) exp -> termino quad_term . exp1
    (69) exp1 -> . PLUS push_poper exp
    (70) exp1 -> . MINUS push_poper exp

    LOWERTHAN       reduce using rule 67 (exp -> termino quad_term .)
    MORETHAN        reduce using rule 67 (exp -> termino quad_term .)
    DIFFERENT       reduce using rule 67 (exp -> termino quad_term .)
    DOUBLEEQUAL     reduce using rule 67 (exp -> termino quad_term .)
    RPAREN          reduce using rule 67 (exp -> termino quad_term .)
    SEMICOLON       reduce using rule 67 (exp -> termino quad_term .)
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110

    exp1                           shift and go to state 108

state 85

    (80) factorAux -> MINUS push_poper . var_cte
    (85) var_cte -> . ID push_id
    (86) var_cte -> . CTE_I push_cte
    (87) var_cte -> . CTE_F push_cte
    (88) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 72
    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 68
    CTE_STRING      shift and go to state 69

    var_cte                        shift and go to state 111

state 86

    (79) factorAux -> PLUS push_poper . var_cte
    (85) var_cte -> . ID push_id
    (86) var_cte -> . CTE_I push_cte
    (87) var_cte -> . CTE_F push_cte
    (88) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 72
    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 68
    CTE_STRING      shift and go to state 69

    var_cte                        shift and go to state 112

state 87

    (73) termino -> factor quad_fact .
    (74) termino -> factor quad_fact . termino1
    (75) termino1 -> . TIMES push_poper termino
    (76) termino1 -> . DIVIDE push_poper termino

    PLUS            reduce using rule 73 (termino -> factor quad_fact .)
    MINUS           reduce using rule 73 (termino -> factor quad_fact .)
    LOWERTHAN       reduce using rule 73 (termino -> factor quad_fact .)
    MORETHAN        reduce using rule 73 (termino -> factor quad_fact .)
    DIFFERENT       reduce using rule 73 (termino -> factor quad_fact .)
    DOUBLEEQUAL     reduce using rule 73 (termino -> factor quad_fact .)
    SEMICOLON       reduce using rule 73 (termino -> factor quad_fact .)
    RPAREN          reduce using rule 73 (termino -> factor quad_fact .)
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 113

    termino1                       shift and go to state 114

state 88

    (87) var_cte -> CTE_F push_cte .

    TIMES           reduce using rule 87 (var_cte -> CTE_F push_cte .)
    DIVIDE          reduce using rule 87 (var_cte -> CTE_F push_cte .)
    PLUS            reduce using rule 87 (var_cte -> CTE_F push_cte .)
    MINUS           reduce using rule 87 (var_cte -> CTE_F push_cte .)
    LOWERTHAN       reduce using rule 87 (var_cte -> CTE_F push_cte .)
    MORETHAN        reduce using rule 87 (var_cte -> CTE_F push_cte .)
    DIFFERENT       reduce using rule 87 (var_cte -> CTE_F push_cte .)
    DOUBLEEQUAL     reduce using rule 87 (var_cte -> CTE_F push_cte .)
    RPAREN          reduce using rule 87 (var_cte -> CTE_F push_cte .)
    SEMICOLON       reduce using rule 87 (var_cte -> CTE_F push_cte .)


state 89

    (88) var_cte -> CTE_STRING push_cte .

    TIMES           reduce using rule 88 (var_cte -> CTE_STRING push_cte .)
    DIVIDE          reduce using rule 88 (var_cte -> CTE_STRING push_cte .)
    PLUS            reduce using rule 88 (var_cte -> CTE_STRING push_cte .)
    MINUS           reduce using rule 88 (var_cte -> CTE_STRING push_cte .)
    LOWERTHAN       reduce using rule 88 (var_cte -> CTE_STRING push_cte .)
    MORETHAN        reduce using rule 88 (var_cte -> CTE_STRING push_cte .)
    DIFFERENT       reduce using rule 88 (var_cte -> CTE_STRING push_cte .)
    DOUBLEEQUAL     reduce using rule 88 (var_cte -> CTE_STRING push_cte .)
    RPAREN          reduce using rule 88 (var_cte -> CTE_STRING push_cte .)
    SEMICOLON       reduce using rule 88 (var_cte -> CTE_STRING push_cte .)


state 90

    (86) var_cte -> CTE_I push_cte .

    TIMES           reduce using rule 86 (var_cte -> CTE_I push_cte .)
    DIVIDE          reduce using rule 86 (var_cte -> CTE_I push_cte .)
    PLUS            reduce using rule 86 (var_cte -> CTE_I push_cte .)
    MINUS           reduce using rule 86 (var_cte -> CTE_I push_cte .)
    LOWERTHAN       reduce using rule 86 (var_cte -> CTE_I push_cte .)
    MORETHAN        reduce using rule 86 (var_cte -> CTE_I push_cte .)
    DIFFERENT       reduce using rule 86 (var_cte -> CTE_I push_cte .)
    DOUBLEEQUAL     reduce using rule 86 (var_cte -> CTE_I push_cte .)
    RPAREN          reduce using rule 86 (var_cte -> CTE_I push_cte .)
    SEMICOLON       reduce using rule 86 (var_cte -> CTE_I push_cte .)


state 91

    (77) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 116


state 92

    (85) var_cte -> ID push_id .

    TIMES           reduce using rule 85 (var_cte -> ID push_id .)
    DIVIDE          reduce using rule 85 (var_cte -> ID push_id .)
    PLUS            reduce using rule 85 (var_cte -> ID push_id .)
    MINUS           reduce using rule 85 (var_cte -> ID push_id .)
    LOWERTHAN       reduce using rule 85 (var_cte -> ID push_id .)
    MORETHAN        reduce using rule 85 (var_cte -> ID push_id .)
    DIFFERENT       reduce using rule 85 (var_cte -> ID push_id .)
    DOUBLEEQUAL     reduce using rule 85 (var_cte -> ID push_id .)
    RPAREN          reduce using rule 85 (var_cte -> ID push_id .)
    SEMICOLON       reduce using rule 85 (var_cte -> ID push_id .)


state 93

    (49) condicion -> IF LPAREN expresion RPAREN . cond bloque condFinal
    (50) condicion -> IF LPAREN expresion RPAREN . cond bloque ELSE condElse bloque condFinal
    (51) cond -> .

    LBRACE          reduce using rule 51 (cond -> .)

    cond                           shift and go to state 117

state 94

    (64) comp -> DIFFERENT . push_poper
    (84) push_poper -> .

    LPAREN          reduce using rule 84 (push_poper -> .)
    PLUS            reduce using rule 84 (push_poper -> .)
    MINUS           reduce using rule 84 (push_poper -> .)
    ID              reduce using rule 84 (push_poper -> .)
    CTE_I           reduce using rule 84 (push_poper -> .)
    CTE_F           reduce using rule 84 (push_poper -> .)
    CTE_STRING      reduce using rule 84 (push_poper -> .)

    push_poper                     shift and go to state 118

state 95

    (65) comp -> DOUBLEEQUAL . push_poper
    (84) push_poper -> .

    LPAREN          reduce using rule 84 (push_poper -> .)
    PLUS            reduce using rule 84 (push_poper -> .)
    MINUS           reduce using rule 84 (push_poper -> .)
    ID              reduce using rule 84 (push_poper -> .)
    CTE_I           reduce using rule 84 (push_poper -> .)
    CTE_F           reduce using rule 84 (push_poper -> .)
    CTE_STRING      reduce using rule 84 (push_poper -> .)

    push_poper                     shift and go to state 119

state 96

    (62) comp -> LOWERTHAN . push_poper
    (84) push_poper -> .

    LPAREN          reduce using rule 84 (push_poper -> .)
    PLUS            reduce using rule 84 (push_poper -> .)
    MINUS           reduce using rule 84 (push_poper -> .)
    ID              reduce using rule 84 (push_poper -> .)
    CTE_I           reduce using rule 84 (push_poper -> .)
    CTE_F           reduce using rule 84 (push_poper -> .)
    CTE_STRING      reduce using rule 84 (push_poper -> .)

    push_poper                     shift and go to state 120

state 97

    (61) expresion -> exp comp . exp quad_comp
    (67) exp -> . termino quad_term
    (68) exp -> . termino quad_term exp1
    (73) termino -> . factor quad_fact
    (74) termino -> . factor quad_fact termino1
    (77) factor -> . LPAREN expresion RPAREN
    (78) factor -> . factorAux
    (79) factorAux -> . PLUS push_poper var_cte
    (80) factorAux -> . MINUS push_poper var_cte
    (81) factorAux -> . var_cte
    (85) var_cte -> . ID push_id
    (86) var_cte -> . CTE_I push_cte
    (87) var_cte -> . CTE_F push_cte
    (88) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 71
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 72
    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 68
    CTE_STRING      shift and go to state 69

    factor                         shift and go to state 67
    termino                        shift and go to state 64
    exp                            shift and go to state 121
    factorAux                      shift and go to state 75
    var_cte                        shift and go to state 63

state 98

    (63) comp -> MORETHAN . push_poper
    (84) push_poper -> .

    LPAREN          reduce using rule 84 (push_poper -> .)
    PLUS            reduce using rule 84 (push_poper -> .)
    MINUS           reduce using rule 84 (push_poper -> .)
    ID              reduce using rule 84 (push_poper -> .)
    CTE_I           reduce using rule 84 (push_poper -> .)
    CTE_F           reduce using rule 84 (push_poper -> .)
    CTE_STRING      reduce using rule 84 (push_poper -> .)

    push_poper                     shift and go to state 122

state 99

    (48) comparacion -> ID push_id DOUBLEEQUAL push_poper . expresion SEMICOLON
    (60) expresion -> . exp
    (61) expresion -> . exp comp exp quad_comp
    (67) exp -> . termino quad_term
    (68) exp -> . termino quad_term exp1
    (73) termino -> . factor quad_fact
    (74) termino -> . factor quad_fact termino1
    (77) factor -> . LPAREN expresion RPAREN
    (78) factor -> . factorAux
    (79) factorAux -> . PLUS push_poper var_cte
    (80) factorAux -> . MINUS push_poper var_cte
    (81) factorAux -> . var_cte
    (85) var_cte -> . ID push_id
    (86) var_cte -> . CTE_I push_cte
    (87) var_cte -> . CTE_F push_cte
    (88) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 71
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 72
    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 68
    CTE_STRING      shift and go to state 69

    expresion                      shift and go to state 123
    factor                         shift and go to state 67
    var_cte                        shift and go to state 63
    termino                        shift and go to state 64
    exp                            shift and go to state 74
    factorAux                      shift and go to state 75

state 100

    (46) asignacion -> ID push_id EQUAL push_poper . expresion create_asign SEMICOLON
    (60) expresion -> . exp
    (61) expresion -> . exp comp exp quad_comp
    (67) exp -> . termino quad_term
    (68) exp -> . termino quad_term exp1
    (73) termino -> . factor quad_fact
    (74) termino -> . factor quad_fact termino1
    (77) factor -> . LPAREN expresion RPAREN
    (78) factor -> . factorAux
    (79) factorAux -> . PLUS push_poper var_cte
    (80) factorAux -> . MINUS push_poper var_cte
    (81) factorAux -> . var_cte
    (85) var_cte -> . ID push_id
    (86) var_cte -> . CTE_I push_cte
    (87) var_cte -> . CTE_F push_cte
    (88) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 71
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 72
    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 68
    CTE_STRING      shift and go to state 69

    expresion                      shift and go to state 124
    var_cte                        shift and go to state 63
    termino                        shift and go to state 64
    exp                            shift and go to state 74
    factorAux                      shift and go to state 75
    factor                         shift and go to state 67

state 101

    (39) loopFromDo -> FROM LPAREN ID EQUAL . expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (60) expresion -> . exp
    (61) expresion -> . exp comp exp quad_comp
    (67) exp -> . termino quad_term
    (68) exp -> . termino quad_term exp1
    (73) termino -> . factor quad_fact
    (74) termino -> . factor quad_fact termino1
    (77) factor -> . LPAREN expresion RPAREN
    (78) factor -> . factorAux
    (79) factorAux -> . PLUS push_poper var_cte
    (80) factorAux -> . MINUS push_poper var_cte
    (81) factorAux -> . var_cte
    (85) var_cte -> . ID push_id
    (86) var_cte -> . CTE_I push_cte
    (87) var_cte -> . CTE_F push_cte
    (88) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 71
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 72
    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 68
    CTE_STRING      shift and go to state 69

    expresion                      shift and go to state 125
    factor                         shift and go to state 67
    var_cte                        shift and go to state 63
    termino                        shift and go to state 64
    exp                            shift and go to state 74
    factorAux                      shift and go to state 75

state 102

    (35) while -> WHILE while1 LPAREN expresion . RPAREN while2 LBRACE bloqueAux RBRACE while3

    RPAREN          shift and go to state 126


state 103

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE .
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    $end            reduce using rule 22 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 127

state 104

    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux RBRACE
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux RBRACE function
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (40) estatuto -> . asignacion
    (41) estatuto -> . condicion
    (42) estatuto -> . escritura
    (43) estatuto -> . while
    (44) estatuto -> . loopFromDo
    (45) estatuto -> . comparacion
    (46) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (49) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (50) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (54) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (35) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (39) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (48) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 42
    FROM            shift and go to state 40

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 39
    asignacion                     shift and go to state 41
    bloqueAux                      shift and go to state 128
    while                          shift and go to state 44
    comparacion                    shift and go to state 45
    escritura                      shift and go to state 46

state 105

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . RBRACE
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux RBRACE
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . RBRACE function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux RBRACE function
    (8) vars -> . VAR varAux1

    RBRACE          shift and go to state 129
    VAR             shift and go to state 8

    vars                           shift and go to state 130

state 106

    (31) param -> tipo ID COMA . param
    (30) param -> . tipo ID
    (31) param -> . tipo ID COMA param
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

    param                          shift and go to state 131
    tipo                           shift and go to state 60

state 107

    (54) escritura -> PRINT push_poper LPAREN exp RPAREN . quad_print SEMICOLON
    (55) quad_print -> .

    SEMICOLON       reduce using rule 55 (quad_print -> .)

    quad_print                     shift and go to state 132

state 108

    (68) exp -> termino quad_term exp1 .

    LOWERTHAN       reduce using rule 68 (exp -> termino quad_term exp1 .)
    MORETHAN        reduce using rule 68 (exp -> termino quad_term exp1 .)
    DIFFERENT       reduce using rule 68 (exp -> termino quad_term exp1 .)
    DOUBLEEQUAL     reduce using rule 68 (exp -> termino quad_term exp1 .)
    RPAREN          reduce using rule 68 (exp -> termino quad_term exp1 .)
    SEMICOLON       reduce using rule 68 (exp -> termino quad_term exp1 .)


state 109

    (69) exp1 -> PLUS . push_poper exp
    (84) push_poper -> .

    LPAREN          reduce using rule 84 (push_poper -> .)
    PLUS            reduce using rule 84 (push_poper -> .)
    MINUS           reduce using rule 84 (push_poper -> .)
    ID              reduce using rule 84 (push_poper -> .)
    CTE_I           reduce using rule 84 (push_poper -> .)
    CTE_F           reduce using rule 84 (push_poper -> .)
    CTE_STRING      reduce using rule 84 (push_poper -> .)

    push_poper                     shift and go to state 133

state 110

    (70) exp1 -> MINUS . push_poper exp
    (84) push_poper -> .

    LPAREN          reduce using rule 84 (push_poper -> .)
    PLUS            reduce using rule 84 (push_poper -> .)
    MINUS           reduce using rule 84 (push_poper -> .)
    ID              reduce using rule 84 (push_poper -> .)
    CTE_I           reduce using rule 84 (push_poper -> .)
    CTE_F           reduce using rule 84 (push_poper -> .)
    CTE_STRING      reduce using rule 84 (push_poper -> .)

    push_poper                     shift and go to state 134

state 111

    (80) factorAux -> MINUS push_poper var_cte .

    TIMES           reduce using rule 80 (factorAux -> MINUS push_poper var_cte .)
    DIVIDE          reduce using rule 80 (factorAux -> MINUS push_poper var_cte .)
    PLUS            reduce using rule 80 (factorAux -> MINUS push_poper var_cte .)
    MINUS           reduce using rule 80 (factorAux -> MINUS push_poper var_cte .)
    RPAREN          reduce using rule 80 (factorAux -> MINUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 80 (factorAux -> MINUS push_poper var_cte .)
    MORETHAN        reduce using rule 80 (factorAux -> MINUS push_poper var_cte .)
    DIFFERENT       reduce using rule 80 (factorAux -> MINUS push_poper var_cte .)
    DOUBLEEQUAL     reduce using rule 80 (factorAux -> MINUS push_poper var_cte .)
    SEMICOLON       reduce using rule 80 (factorAux -> MINUS push_poper var_cte .)


state 112

    (79) factorAux -> PLUS push_poper var_cte .

    TIMES           reduce using rule 79 (factorAux -> PLUS push_poper var_cte .)
    DIVIDE          reduce using rule 79 (factorAux -> PLUS push_poper var_cte .)
    PLUS            reduce using rule 79 (factorAux -> PLUS push_poper var_cte .)
    MINUS           reduce using rule 79 (factorAux -> PLUS push_poper var_cte .)
    RPAREN          reduce using rule 79 (factorAux -> PLUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 79 (factorAux -> PLUS push_poper var_cte .)
    MORETHAN        reduce using rule 79 (factorAux -> PLUS push_poper var_cte .)
    DIFFERENT       reduce using rule 79 (factorAux -> PLUS push_poper var_cte .)
    DOUBLEEQUAL     reduce using rule 79 (factorAux -> PLUS push_poper var_cte .)
    SEMICOLON       reduce using rule 79 (factorAux -> PLUS push_poper var_cte .)


state 113

    (76) termino1 -> DIVIDE . push_poper termino
    (84) push_poper -> .

    LPAREN          reduce using rule 84 (push_poper -> .)
    PLUS            reduce using rule 84 (push_poper -> .)
    MINUS           reduce using rule 84 (push_poper -> .)
    ID              reduce using rule 84 (push_poper -> .)
    CTE_I           reduce using rule 84 (push_poper -> .)
    CTE_F           reduce using rule 84 (push_poper -> .)
    CTE_STRING      reduce using rule 84 (push_poper -> .)

    push_poper                     shift and go to state 135

state 114

    (74) termino -> factor quad_fact termino1 .

    PLUS            reduce using rule 74 (termino -> factor quad_fact termino1 .)
    MINUS           reduce using rule 74 (termino -> factor quad_fact termino1 .)
    LOWERTHAN       reduce using rule 74 (termino -> factor quad_fact termino1 .)
    MORETHAN        reduce using rule 74 (termino -> factor quad_fact termino1 .)
    DIFFERENT       reduce using rule 74 (termino -> factor quad_fact termino1 .)
    DOUBLEEQUAL     reduce using rule 74 (termino -> factor quad_fact termino1 .)
    SEMICOLON       reduce using rule 74 (termino -> factor quad_fact termino1 .)
    RPAREN          reduce using rule 74 (termino -> factor quad_fact termino1 .)


state 115

    (75) termino1 -> TIMES . push_poper termino
    (84) push_poper -> .

    LPAREN          reduce using rule 84 (push_poper -> .)
    PLUS            reduce using rule 84 (push_poper -> .)
    MINUS           reduce using rule 84 (push_poper -> .)
    ID              reduce using rule 84 (push_poper -> .)
    CTE_I           reduce using rule 84 (push_poper -> .)
    CTE_F           reduce using rule 84 (push_poper -> .)
    CTE_STRING      reduce using rule 84 (push_poper -> .)

    push_poper                     shift and go to state 136

state 116

    (77) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 77 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 77 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 77 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 77 (factor -> LPAREN expresion RPAREN .)
    LOWERTHAN       reduce using rule 77 (factor -> LPAREN expresion RPAREN .)
    MORETHAN        reduce using rule 77 (factor -> LPAREN expresion RPAREN .)
    DIFFERENT       reduce using rule 77 (factor -> LPAREN expresion RPAREN .)
    DOUBLEEQUAL     reduce using rule 77 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 77 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 77 (factor -> LPAREN expresion RPAREN .)


state 117

    (49) condicion -> IF LPAREN expresion RPAREN cond . bloque condFinal
    (50) condicion -> IF LPAREN expresion RPAREN cond . bloque ELSE condElse bloque condFinal
    (20) bloque -> . LBRACE RBRACE
    (21) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 137

    bloque                         shift and go to state 138

state 118

    (64) comp -> DIFFERENT push_poper .

    LPAREN          reduce using rule 64 (comp -> DIFFERENT push_poper .)
    PLUS            reduce using rule 64 (comp -> DIFFERENT push_poper .)
    MINUS           reduce using rule 64 (comp -> DIFFERENT push_poper .)
    ID              reduce using rule 64 (comp -> DIFFERENT push_poper .)
    CTE_I           reduce using rule 64 (comp -> DIFFERENT push_poper .)
    CTE_F           reduce using rule 64 (comp -> DIFFERENT push_poper .)
    CTE_STRING      reduce using rule 64 (comp -> DIFFERENT push_poper .)


state 119

    (65) comp -> DOUBLEEQUAL push_poper .

    LPAREN          reduce using rule 65 (comp -> DOUBLEEQUAL push_poper .)
    PLUS            reduce using rule 65 (comp -> DOUBLEEQUAL push_poper .)
    MINUS           reduce using rule 65 (comp -> DOUBLEEQUAL push_poper .)
    ID              reduce using rule 65 (comp -> DOUBLEEQUAL push_poper .)
    CTE_I           reduce using rule 65 (comp -> DOUBLEEQUAL push_poper .)
    CTE_F           reduce using rule 65 (comp -> DOUBLEEQUAL push_poper .)
    CTE_STRING      reduce using rule 65 (comp -> DOUBLEEQUAL push_poper .)


state 120

    (62) comp -> LOWERTHAN push_poper .

    LPAREN          reduce using rule 62 (comp -> LOWERTHAN push_poper .)
    PLUS            reduce using rule 62 (comp -> LOWERTHAN push_poper .)
    MINUS           reduce using rule 62 (comp -> LOWERTHAN push_poper .)
    ID              reduce using rule 62 (comp -> LOWERTHAN push_poper .)
    CTE_I           reduce using rule 62 (comp -> LOWERTHAN push_poper .)
    CTE_F           reduce using rule 62 (comp -> LOWERTHAN push_poper .)
    CTE_STRING      reduce using rule 62 (comp -> LOWERTHAN push_poper .)


state 121

    (61) expresion -> exp comp exp . quad_comp
    (66) quad_comp -> .

    RPAREN          reduce using rule 66 (quad_comp -> .)
    SEMICOLON       reduce using rule 66 (quad_comp -> .)

    quad_comp                      shift and go to state 139

state 122

    (63) comp -> MORETHAN push_poper .

    LPAREN          reduce using rule 63 (comp -> MORETHAN push_poper .)
    PLUS            reduce using rule 63 (comp -> MORETHAN push_poper .)
    MINUS           reduce using rule 63 (comp -> MORETHAN push_poper .)
    ID              reduce using rule 63 (comp -> MORETHAN push_poper .)
    CTE_I           reduce using rule 63 (comp -> MORETHAN push_poper .)
    CTE_F           reduce using rule 63 (comp -> MORETHAN push_poper .)
    CTE_STRING      reduce using rule 63 (comp -> MORETHAN push_poper .)


state 123

    (48) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion . SEMICOLON

    SEMICOLON       shift and go to state 140


state 124

    (46) asignacion -> ID push_id EQUAL push_poper expresion . create_asign SEMICOLON
    (47) create_asign -> .

    SEMICOLON       reduce using rule 47 (create_asign -> .)

    create_asign                   shift and go to state 141

state 125

    (39) loopFromDo -> FROM LPAREN ID EQUAL expresion . RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    RPAREN          shift and go to state 142


state 126

    (35) while -> WHILE while1 LPAREN expresion RPAREN . while2 LBRACE bloqueAux RBRACE while3
    (37) while2 -> .

    LBRACE          reduce using rule 37 (while2 -> .)

    while2                         shift and go to state 143

state 127

    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function .

    $end            reduce using rule 24 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function .)


state 128

    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . RBRACE
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . RBRACE function

    RBRACE          shift and go to state 144


state 129

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE .
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    $end            reduce using rule 26 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 145

state 130

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux RBRACE
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux RBRACE function
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (40) estatuto -> . asignacion
    (41) estatuto -> . condicion
    (42) estatuto -> . escritura
    (43) estatuto -> . while
    (44) estatuto -> . loopFromDo
    (45) estatuto -> . comparacion
    (46) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (49) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (50) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (54) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (35) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (39) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (48) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 42
    FROM            shift and go to state 40

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 39
    asignacion                     shift and go to state 41
    bloqueAux                      shift and go to state 146
    while                          shift and go to state 44
    comparacion                    shift and go to state 45
    escritura                      shift and go to state 46

state 131

    (31) param -> tipo ID COMA param .

    RPAREN          reduce using rule 31 (param -> tipo ID COMA param .)


state 132

    (54) escritura -> PRINT push_poper LPAREN exp RPAREN quad_print . SEMICOLON

    SEMICOLON       shift and go to state 147


state 133

    (69) exp1 -> PLUS push_poper . exp
    (67) exp -> . termino quad_term
    (68) exp -> . termino quad_term exp1
    (73) termino -> . factor quad_fact
    (74) termino -> . factor quad_fact termino1
    (77) factor -> . LPAREN expresion RPAREN
    (78) factor -> . factorAux
    (79) factorAux -> . PLUS push_poper var_cte
    (80) factorAux -> . MINUS push_poper var_cte
    (81) factorAux -> . var_cte
    (85) var_cte -> . ID push_id
    (86) var_cte -> . CTE_I push_cte
    (87) var_cte -> . CTE_F push_cte
    (88) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 71
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 72
    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 68
    CTE_STRING      shift and go to state 69

    termino                        shift and go to state 64
    exp                            shift and go to state 148
    factor                         shift and go to state 67
    factorAux                      shift and go to state 75
    var_cte                        shift and go to state 63

state 134

    (70) exp1 -> MINUS push_poper . exp
    (67) exp -> . termino quad_term
    (68) exp -> . termino quad_term exp1
    (73) termino -> . factor quad_fact
    (74) termino -> . factor quad_fact termino1
    (77) factor -> . LPAREN expresion RPAREN
    (78) factor -> . factorAux
    (79) factorAux -> . PLUS push_poper var_cte
    (80) factorAux -> . MINUS push_poper var_cte
    (81) factorAux -> . var_cte
    (85) var_cte -> . ID push_id
    (86) var_cte -> . CTE_I push_cte
    (87) var_cte -> . CTE_F push_cte
    (88) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 71
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 72
    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 68
    CTE_STRING      shift and go to state 69

    termino                        shift and go to state 64
    exp                            shift and go to state 149
    factor                         shift and go to state 67
    factorAux                      shift and go to state 75
    var_cte                        shift and go to state 63

state 135

    (76) termino1 -> DIVIDE push_poper . termino
    (73) termino -> . factor quad_fact
    (74) termino -> . factor quad_fact termino1
    (77) factor -> . LPAREN expresion RPAREN
    (78) factor -> . factorAux
    (79) factorAux -> . PLUS push_poper var_cte
    (80) factorAux -> . MINUS push_poper var_cte
    (81) factorAux -> . var_cte
    (85) var_cte -> . ID push_id
    (86) var_cte -> . CTE_I push_cte
    (87) var_cte -> . CTE_F push_cte
    (88) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 71
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 72
    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 68
    CTE_STRING      shift and go to state 69

    termino                        shift and go to state 150
    factor                         shift and go to state 67
    factorAux                      shift and go to state 75
    var_cte                        shift and go to state 63

state 136

    (75) termino1 -> TIMES push_poper . termino
    (73) termino -> . factor quad_fact
    (74) termino -> . factor quad_fact termino1
    (77) factor -> . LPAREN expresion RPAREN
    (78) factor -> . factorAux
    (79) factorAux -> . PLUS push_poper var_cte
    (80) factorAux -> . MINUS push_poper var_cte
    (81) factorAux -> . var_cte
    (85) var_cte -> . ID push_id
    (86) var_cte -> . CTE_I push_cte
    (87) var_cte -> . CTE_F push_cte
    (88) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 71
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 72
    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 68
    CTE_STRING      shift and go to state 69

    termino                        shift and go to state 151
    factor                         shift and go to state 67
    factorAux                      shift and go to state 75
    var_cte                        shift and go to state 63

state 137

    (20) bloque -> LBRACE . RBRACE
    (21) bloque -> LBRACE . bloqueAux RBRACE
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (40) estatuto -> . asignacion
    (41) estatuto -> . condicion
    (42) estatuto -> . escritura
    (43) estatuto -> . while
    (44) estatuto -> . loopFromDo
    (45) estatuto -> . comparacion
    (46) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (49) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (50) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (54) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (35) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (39) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (48) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    RBRACE          shift and go to state 152
    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 42
    FROM            shift and go to state 40

    asignacion                     shift and go to state 41
    estatuto                       shift and go to state 35
    bloqueAux                      shift and go to state 153
    while                          shift and go to state 44
    condicion                      shift and go to state 37
    comparacion                    shift and go to state 45
    loopFromDo                     shift and go to state 39
    escritura                      shift and go to state 46

state 138

    (49) condicion -> IF LPAREN expresion RPAREN cond bloque . condFinal
    (50) condicion -> IF LPAREN expresion RPAREN cond bloque . ELSE condElse bloque condFinal
    (53) condFinal -> .

    ELSE            shift and go to state 155
    ID              reduce using rule 53 (condFinal -> .)
    IF              reduce using rule 53 (condFinal -> .)
    PRINT           reduce using rule 53 (condFinal -> .)
    WHILE           reduce using rule 53 (condFinal -> .)
    FROM            reduce using rule 53 (condFinal -> .)
    RBRACE          reduce using rule 53 (condFinal -> .)

    condFinal                      shift and go to state 154

state 139

    (61) expresion -> exp comp exp quad_comp .

    RPAREN          reduce using rule 61 (expresion -> exp comp exp quad_comp .)
    SEMICOLON       reduce using rule 61 (expresion -> exp comp exp quad_comp .)


state 140

    (48) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .

    ID              reduce using rule 48 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    IF              reduce using rule 48 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    PRINT           reduce using rule 48 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    WHILE           reduce using rule 48 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    FROM            reduce using rule 48 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    RBRACE          reduce using rule 48 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)


state 141

    (46) asignacion -> ID push_id EQUAL push_poper expresion create_asign . SEMICOLON

    SEMICOLON       shift and go to state 156


state 142

    (39) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN . TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    TO              shift and go to state 157


state 143

    (35) while -> WHILE while1 LPAREN expresion RPAREN while2 . LBRACE bloqueAux RBRACE while3

    LBRACE          shift and go to state 158


state 144

    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE .
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    $end            reduce using rule 23 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 159

state 145

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function .

    $end            reduce using rule 28 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function .)


state 146

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . RBRACE
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . RBRACE function

    RBRACE          shift and go to state 160


state 147

    (54) escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .

    ID              reduce using rule 54 (escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .)
    IF              reduce using rule 54 (escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .)
    PRINT           reduce using rule 54 (escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .)
    WHILE           reduce using rule 54 (escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .)
    FROM            reduce using rule 54 (escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .)
    RBRACE          reduce using rule 54 (escritura -> PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON .)


state 148

    (69) exp1 -> PLUS push_poper exp .

    LOWERTHAN       reduce using rule 69 (exp1 -> PLUS push_poper exp .)
    MORETHAN        reduce using rule 69 (exp1 -> PLUS push_poper exp .)
    DIFFERENT       reduce using rule 69 (exp1 -> PLUS push_poper exp .)
    DOUBLEEQUAL     reduce using rule 69 (exp1 -> PLUS push_poper exp .)
    RPAREN          reduce using rule 69 (exp1 -> PLUS push_poper exp .)
    SEMICOLON       reduce using rule 69 (exp1 -> PLUS push_poper exp .)


state 149

    (70) exp1 -> MINUS push_poper exp .

    LOWERTHAN       reduce using rule 70 (exp1 -> MINUS push_poper exp .)
    MORETHAN        reduce using rule 70 (exp1 -> MINUS push_poper exp .)
    DIFFERENT       reduce using rule 70 (exp1 -> MINUS push_poper exp .)
    DOUBLEEQUAL     reduce using rule 70 (exp1 -> MINUS push_poper exp .)
    RPAREN          reduce using rule 70 (exp1 -> MINUS push_poper exp .)
    SEMICOLON       reduce using rule 70 (exp1 -> MINUS push_poper exp .)


state 150

    (76) termino1 -> DIVIDE push_poper termino .

    PLUS            reduce using rule 76 (termino1 -> DIVIDE push_poper termino .)
    MINUS           reduce using rule 76 (termino1 -> DIVIDE push_poper termino .)
    LOWERTHAN       reduce using rule 76 (termino1 -> DIVIDE push_poper termino .)
    MORETHAN        reduce using rule 76 (termino1 -> DIVIDE push_poper termino .)
    DIFFERENT       reduce using rule 76 (termino1 -> DIVIDE push_poper termino .)
    DOUBLEEQUAL     reduce using rule 76 (termino1 -> DIVIDE push_poper termino .)
    RPAREN          reduce using rule 76 (termino1 -> DIVIDE push_poper termino .)
    SEMICOLON       reduce using rule 76 (termino1 -> DIVIDE push_poper termino .)


state 151

    (75) termino1 -> TIMES push_poper termino .

    PLUS            reduce using rule 75 (termino1 -> TIMES push_poper termino .)
    MINUS           reduce using rule 75 (termino1 -> TIMES push_poper termino .)
    LOWERTHAN       reduce using rule 75 (termino1 -> TIMES push_poper termino .)
    MORETHAN        reduce using rule 75 (termino1 -> TIMES push_poper termino .)
    DIFFERENT       reduce using rule 75 (termino1 -> TIMES push_poper termino .)
    DOUBLEEQUAL     reduce using rule 75 (termino1 -> TIMES push_poper termino .)
    RPAREN          reduce using rule 75 (termino1 -> TIMES push_poper termino .)
    SEMICOLON       reduce using rule 75 (termino1 -> TIMES push_poper termino .)


state 152

    (20) bloque -> LBRACE RBRACE .

    ELSE            reduce using rule 20 (bloque -> LBRACE RBRACE .)
    ID              reduce using rule 20 (bloque -> LBRACE RBRACE .)
    IF              reduce using rule 20 (bloque -> LBRACE RBRACE .)
    PRINT           reduce using rule 20 (bloque -> LBRACE RBRACE .)
    WHILE           reduce using rule 20 (bloque -> LBRACE RBRACE .)
    FROM            reduce using rule 20 (bloque -> LBRACE RBRACE .)
    RBRACE          reduce using rule 20 (bloque -> LBRACE RBRACE .)


state 153

    (21) bloque -> LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 161


state 154

    (49) condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .

    ID              reduce using rule 49 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    IF              reduce using rule 49 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    PRINT           reduce using rule 49 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    WHILE           reduce using rule 49 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    FROM            reduce using rule 49 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    RBRACE          reduce using rule 49 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)


state 155

    (50) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE . condElse bloque condFinal
    (52) condElse -> .

    LBRACE          reduce using rule 52 (condElse -> .)

    condElse                       shift and go to state 162

state 156

    (46) asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .

    ID              reduce using rule 46 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    IF              reduce using rule 46 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    PRINT           reduce using rule 46 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    WHILE           reduce using rule 46 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    FROM            reduce using rule 46 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    RBRACE          reduce using rule 46 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)


state 157

    (39) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO . LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    LPAREN          shift and go to state 163


state 158

    (35) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE . bloqueAux RBRACE while3
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (40) estatuto -> . asignacion
    (41) estatuto -> . condicion
    (42) estatuto -> . escritura
    (43) estatuto -> . while
    (44) estatuto -> . loopFromDo
    (45) estatuto -> . comparacion
    (46) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (49) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (50) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (54) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (35) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (39) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (48) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 42
    FROM            shift and go to state 40

    asignacion                     shift and go to state 41
    estatuto                       shift and go to state 35
    while                          shift and go to state 44
    bloqueAux                      shift and go to state 164
    condicion                      shift and go to state 37
    comparacion                    shift and go to state 45
    loopFromDo                     shift and go to state 39
    escritura                      shift and go to state 46

state 159

    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function .

    $end            reduce using rule 25 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function .)


state 160

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE .
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    $end            reduce using rule 27 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 165

state 161

    (21) bloque -> LBRACE bloqueAux RBRACE .

    ELSE            reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    ID              reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    FROM            reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)


state 162

    (50) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse . bloque condFinal
    (20) bloque -> . LBRACE RBRACE
    (21) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 137

    bloque                         shift and go to state 166

state 163

    (39) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN . expresion RPAREN DO LBRACE bloqueAux RBRACE
    (60) expresion -> . exp
    (61) expresion -> . exp comp exp quad_comp
    (67) exp -> . termino quad_term
    (68) exp -> . termino quad_term exp1
    (73) termino -> . factor quad_fact
    (74) termino -> . factor quad_fact termino1
    (77) factor -> . LPAREN expresion RPAREN
    (78) factor -> . factorAux
    (79) factorAux -> . PLUS push_poper var_cte
    (80) factorAux -> . MINUS push_poper var_cte
    (81) factorAux -> . var_cte
    (85) var_cte -> . ID push_id
    (86) var_cte -> . CTE_I push_cte
    (87) var_cte -> . CTE_F push_cte
    (88) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 71
    PLUS            shift and go to state 66
    MINUS           shift and go to state 65
    ID              shift and go to state 72
    CTE_I           shift and go to state 70
    CTE_F           shift and go to state 68
    CTE_STRING      shift and go to state 69

    expresion                      shift and go to state 167
    factor                         shift and go to state 67
    var_cte                        shift and go to state 63
    termino                        shift and go to state 64
    exp                            shift and go to state 74
    factorAux                      shift and go to state 75

state 164

    (35) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux . RBRACE while3

    RBRACE          shift and go to state 168


state 165

    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function .

    $end            reduce using rule 29 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function .)


state 166

    (50) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque . condFinal
    (53) condFinal -> .

    ID              reduce using rule 53 (condFinal -> .)
    IF              reduce using rule 53 (condFinal -> .)
    PRINT           reduce using rule 53 (condFinal -> .)
    WHILE           reduce using rule 53 (condFinal -> .)
    FROM            reduce using rule 53 (condFinal -> .)
    RBRACE          reduce using rule 53 (condFinal -> .)

    condFinal                      shift and go to state 169

state 167

    (39) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion . RPAREN DO LBRACE bloqueAux RBRACE

    RPAREN          shift and go to state 170


state 168

    (35) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE . while3
    (38) while3 -> .

    ID              reduce using rule 38 (while3 -> .)
    IF              reduce using rule 38 (while3 -> .)
    PRINT           reduce using rule 38 (while3 -> .)
    WHILE           reduce using rule 38 (while3 -> .)
    FROM            reduce using rule 38 (while3 -> .)
    RBRACE          reduce using rule 38 (while3 -> .)

    while3                         shift and go to state 171

state 169

    (50) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .

    ID              reduce using rule 50 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    IF              reduce using rule 50 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    PRINT           reduce using rule 50 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    WHILE           reduce using rule 50 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    FROM            reduce using rule 50 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    RBRACE          reduce using rule 50 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)


state 170

    (39) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN . DO LBRACE bloqueAux RBRACE

    DO              shift and go to state 172


state 171

    (35) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .

    ID              reduce using rule 35 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    IF              reduce using rule 35 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    PRINT           reduce using rule 35 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    WHILE           reduce using rule 35 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    FROM            reduce using rule 35 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    RBRACE          reduce using rule 35 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)


state 172

    (39) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 173


state 173

    (39) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE . bloqueAux RBRACE
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (40) estatuto -> . asignacion
    (41) estatuto -> . condicion
    (42) estatuto -> . escritura
    (43) estatuto -> . while
    (44) estatuto -> . loopFromDo
    (45) estatuto -> . comparacion
    (46) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (49) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (50) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (54) escritura -> . PRINT push_poper LPAREN exp RPAREN quad_print SEMICOLON
    (35) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (39) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (48) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON

    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 42
    FROM            shift and go to state 40

    asignacion                     shift and go to state 41
    estatuto                       shift and go to state 35
    bloqueAux                      shift and go to state 174
    while                          shift and go to state 44
    condicion                      shift and go to state 37
    comparacion                    shift and go to state 45
    loopFromDo                     shift and go to state 39
    escritura                      shift and go to state 46

state 174

    (39) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 175


state 175

    (39) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .

    ID              reduce using rule 39 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 39 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 39 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 39 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    FROM            reduce using rule 39 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 39 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)

