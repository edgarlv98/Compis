Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID COLON vars main function
Rule 2     program -> PROGRAM ID COLON main function
Rule 3     program -> PROGRAM ID COLON vars main
Rule 4     program -> PROGRAM ID COLON main
Rule 5     main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
Rule 6     main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
Rule 7     nomMain -> MAIN
Rule 8     vars -> VAR varAux1
Rule 9     varAux1 -> tipo varAux2 SEMICOLON
Rule 10    varAux1 -> tipo varAux2 SEMICOLON varAux1
Rule 11    varAux2 -> ID
Rule 12    varAux2 -> ID COMA varAux2
Rule 13    tipo -> INT
Rule 14    tipo -> FLOAT
Rule 15    tipo -> CHAR
Rule 16    tipoFunc -> INT
Rule 17    tipoFunc -> FLOAT
Rule 18    tipoFunc -> CHAR
Rule 19    tipoFunc -> VOID
Rule 20    bloque -> LBRACE RBRACE
Rule 21    bloque -> LBRACE bloqueAux RBRACE
Rule 22    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
Rule 23    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
Rule 24    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
Rule 25    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
Rule 26    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
Rule 27    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
Rule 28    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
Rule 29    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function
Rule 30    param -> tipo ID funcionTres
Rule 31    param -> tipo ID COMA funcionTres funcionCuatro param
Rule 32    param -> empty
Rule 33    empty -> <empty>
Rule 34    nomFunc -> ID
Rule 35    funcionTres -> <empty>
Rule 36    funcionCuatro -> <empty>
Rule 37    funcionSeis -> <empty>
Rule 38    bloqueAux -> estatuto
Rule 39    bloqueAux -> estatuto bloqueAux
Rule 40    while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
Rule 41    while1 -> <empty>
Rule 42    while2 -> <empty>
Rule 43    while3 -> <empty>
Rule 44    loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
Rule 45    estatuto -> asignacion
Rule 46    estatuto -> condicion
Rule 47    estatuto -> escritura
Rule 48    estatuto -> while
Rule 49    estatuto -> loopFromDo
Rule 50    estatuto -> comparacion
Rule 51    estatuto -> llamadaAFuncion
Rule 52    llamadaAFuncion -> ID LPAREN param RPAREN expresion
Rule 53    llamadaAFuncion -> ID LPAREN param RPAREN SEMICOLON
Rule 54    asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON
Rule 55    create_asign -> <empty>
Rule 56    comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
Rule 57    condicion -> IF LPAREN expresion RPAREN cond bloque condFinal
Rule 58    condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
Rule 59    cond -> <empty>
Rule 60    condElse -> <empty>
Rule 61    condFinal -> <empty>
Rule 62    escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
Rule 63    quad_print -> <empty>
Rule 64    escrituraAux -> expresion
Rule 65    escrituraAux -> CTE_STRING
Rule 66    escrituraAux -> expresion COMA escrituraAux
Rule 67    escrituraAux -> CTE_STRING COMA escrituraAux
Rule 68    escrituraAux -> llamadaFuncion
Rule 69    expresion -> exp
Rule 70    expresion -> exp comp exp quad_comp
Rule 71    comp -> LOWERTHAN push_poper
Rule 72    comp -> MORETHAN push_poper
Rule 73    comp -> DIFFERENT push_poper
Rule 74    comp -> DOUBLEEQUAL push_poper
Rule 75    quad_comp -> <empty>
Rule 76    exp -> termino quad_term
Rule 77    exp -> termino quad_term exp1
Rule 78    exp1 -> PLUS push_poper exp
Rule 79    exp1 -> MINUS push_poper exp
Rule 80    quad_term -> <empty>
Rule 81    quad_fact -> <empty>
Rule 82    termino -> factor quad_fact
Rule 83    termino -> factor quad_fact termino1
Rule 84    termino1 -> TIMES push_poper termino
Rule 85    termino1 -> DIVIDE push_poper termino
Rule 86    factor -> LPAREN expresion RPAREN
Rule 87    factor -> factorAux
Rule 88    factorAux -> PLUS push_poper var_cte
Rule 89    factorAux -> MINUS push_poper var_cte
Rule 90    factorAux -> var_cte
Rule 91    push_id -> <empty>
Rule 92    push_cte -> <empty>
Rule 93    push_poper -> <empty>
Rule 94    var_cte -> ID push_id
Rule 95    var_cte -> CTE_I push_cte
Rule 96    var_cte -> CTE_F push_cte

Terminals, with rules where they appear

AND                  : 
CHAR                 : 15 18
COLON                : 1 2 3 4
COMA                 : 12 31 66 67
CTE_F                : 96
CTE_I                : 95
CTE_STRING           : 65 67
DIFFERENT            : 73
DIVIDE               : 85
DO                   : 44
DOUBLEEQUAL          : 56 74
ELSE                 : 58
EQUAL                : 44 54
FLOAT                : 14 17
FROM                 : 44
FUNCTION             : 22 23 24 25 26 27 28 29
ID                   : 1 2 3 4 11 12 30 31 34 44 52 53 54 56 94
IF                   : 57 58
INT                  : 13 16
LBRACE               : 5 6 20 21 22 23 24 25 26 27 28 29 40 44
LOWERTHAN            : 71
LPAREN               : 5 6 22 23 24 25 26 27 28 29 40 44 44 52 53 57 58 62 86
MAIN                 : 7
MINUS                : 79 89
MORETHAN             : 72
OR                   : 
PLUS                 : 78 88
PRINT                : 62
PROGRAM              : 1 2 3 4
RBRACE               : 5 6 20 21 22 23 24 25 26 27 28 29 40 44
RPAREN               : 5 6 22 23 24 25 26 27 28 29 40 44 44 52 53 57 58 62 86
SEMICOLON            : 9 10 53 54 56 62
TIMES                : 84
TO                   : 44
VAR                  : 8
VOID                 : 19
WHILE                : 40
error                : 

Nonterminals, with rules where they appear

asignacion           : 45
bloque               : 57 58 58
bloqueAux            : 5 6 21 23 25 27 29 39 40 44
comp                 : 70
comparacion          : 50
cond                 : 57 58
condElse             : 58
condFinal            : 57 58
condicion            : 46
create_asign         : 54
empty                : 32
escritura            : 47
escrituraAux         : 62 66 67
estatuto             : 38 39
exp                  : 69 70 70 78 79
exp1                 : 77
expresion            : 40 44 44 52 54 56 57 58 64 66 86
factor               : 82 83
factorAux            : 87
funcionCuatro        : 31
funcionSeis          : 
funcionTres          : 30 31
function             : 1 2 24 25 28 29
llamadaAFuncion      : 51
llamadaFuncion       : 68
loopFromDo           : 49
main                 : 1 2 3 4
nomFunc              : 22 23 24 25 26 27 28 29
nomMain              : 5 6
param                : 26 27 28 29 31 52 53
program              : 0
push_cte             : 95 96
push_id              : 54 56 94
push_poper           : 54 56 62 71 72 73 74 78 79 84 85 88 89
quad_comp            : 70
quad_fact            : 82 83
quad_print           : 62
quad_term            : 76 77
termino              : 76 77 84 85
termino1             : 83
tipo                 : 9 10 30 31
tipoFunc             : 22 23 24 25 26 27 28 29
varAux1              : 8 10
varAux2              : 9 10 12
var_cte              : 88 89 90
vars                 : 1 3 6 23 25 27 29
while                : 48
while1               : 40
while2               : 40
while3               : 40

