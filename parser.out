Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FOR
    AND
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID COLON vars main function
Rule 2     program -> PROGRAM ID COLON main function
Rule 3     program -> PROGRAM ID COLON vars main
Rule 4     program -> PROGRAM ID COLON main
Rule 5     main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
Rule 6     main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
Rule 7     nomMain -> MAIN
Rule 8     vars -> VAR varAux1
Rule 9     varAux1 -> tipo varAux2 SEMICOLON
Rule 10    varAux1 -> tipo varAux2 SEMICOLON varAux1
Rule 11    varAux2 -> ID
Rule 12    varAux2 -> ID COMA varAux2
Rule 13    tipo -> INT
Rule 14    tipo -> FLOAT
Rule 15    tipo -> CHAR
Rule 16    tipoFunc -> INT
Rule 17    tipoFunc -> FLOAT
Rule 18    tipoFunc -> CHAR
Rule 19    tipoFunc -> VOID
Rule 20    bloque -> LBRACE RBRACE
Rule 21    bloque -> LBRACE bloqueAux RBRACE
Rule 22    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
Rule 23    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
Rule 24    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
Rule 25    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
Rule 26    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
Rule 27    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
Rule 28    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
Rule 29    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function
Rule 30    param -> tipo ID
Rule 31    param -> tipo ID COMA param
Rule 32    nomFunc -> ID
Rule 33    bloqueAux -> estatuto
Rule 34    bloqueAux -> estatuto bloqueAux
Rule 35    while -> WHILE LPAREN expresion RPAREN bloque
Rule 36    estatuto -> asignacion
Rule 37    estatuto -> condicion
Rule 38    estatuto -> escritura
Rule 39    estatuto -> while
Rule 40    estatuto -> comparacion
Rule 41    asignacion -> ID EQUAL expresion SEMICOLON
Rule 42    comparacion -> ID DOUBLEEQUAL expresion SEMICOLON
Rule 43    condicion -> IF LPAREN expresion RPAREN bloque SEMICOLON
Rule 44    condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque SEMICOLON
Rule 45    escritura -> PRINT LPAREN escrituraAux RPAREN SEMICOLON
Rule 46    escrituraAux -> expresion
Rule 47    escrituraAux -> CTE_STRING
Rule 48    escrituraAux -> expresion COMA escrituraAux
Rule 49    escrituraAux -> CTE_STRING COMA escrituraAux
Rule 50    expresion -> exp
Rule 51    expresion -> exp LOWERTHAN exp
Rule 52    expresion -> exp MORETHAN exp
Rule 53    expresion -> exp DIFFERENT exp
Rule 54    exp -> termino
Rule 55    exp -> termino PLUS exp
Rule 56    exp -> termino MINUS exp
Rule 57    termino -> factor
Rule 58    termino -> factor TIMES termino
Rule 59    termino -> factor DIVIDE termino
Rule 60    factor -> LPAREN expresion RPAREN
Rule 61    factor -> factorAux
Rule 62    factorAux -> PLUS var_cte
Rule 63    factorAux -> MINUS var_cte
Rule 64    factorAux -> var_cte
Rule 65    var_cte -> ID
Rule 66    var_cte -> CTE_I
Rule 67    var_cte -> CTE_F

Terminals, with rules where they appear

AND                  : 
CHAR                 : 15 18
COLON                : 1 2 3 4
COMA                 : 12 31 48 49
CTE_F                : 67
CTE_I                : 66
CTE_STRING           : 47 49
DIFFERENT            : 53
DIVIDE               : 59
DOUBLEEQUAL          : 42
ELSE                 : 44
EQUAL                : 41
FLOAT                : 14 17
FOR                  : 
FUNCTION             : 22 23 24 25 26 27 28 29
ID                   : 1 2 3 4 11 12 30 31 32 41 42 65
IF                   : 43 44
INT                  : 13 16
LBRACE               : 5 6 20 21 22 23 24 25 26 27 28 29
LOWERTHAN            : 51
LPAREN               : 5 6 22 23 24 25 26 27 28 29 35 43 44 45 60
MAIN                 : 7
MINUS                : 56 63
MORETHAN             : 52
OR                   : 
PLUS                 : 55 62
PRINT                : 45
PROGRAM              : 1 2 3 4
RBRACE               : 5 6 20 21 22 23 24 25 26 27 28 29
RPAREN               : 5 6 22 23 24 25 26 27 28 29 35 43 44 45 60
SEMICOLON            : 9 10 41 42 43 44 45
TIMES                : 58
VAR                  : 8
VOID                 : 19
WHILE                : 35
error                : 

Nonterminals, with rules where they appear

asignacion           : 36
bloque               : 35 43 44 44
bloqueAux            : 5 6 21 23 25 27 29 34
comparacion          : 40
condicion            : 37
escritura            : 38
escrituraAux         : 45 48 49
estatuto             : 33 34
exp                  : 50 51 51 52 52 53 53 55 56
expresion            : 35 41 42 43 44 46 48 60
factor               : 57 58 59
factorAux            : 61
function             : 1 2 24 25 28 29
main                 : 1 2 3 4
nomFunc              : 22 23 24 25 26 27 28 29
nomMain              : 5 6
param                : 26 27 28 29 31
program              : 0
termino              : 54 55 56 58 59
tipo                 : 9 10 30 31
tipoFunc             : 22 23 24 25 26 27 28 29
varAux1              : 8 10
varAux2              : 9 10 12
var_cte              : 62 63 64
vars                 : 1 3 6 23 25 27 29
while                : 39

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID COLON vars main function
    (2) program -> . PROGRAM ID COLON main function
    (3) program -> . PROGRAM ID COLON vars main
    (4) program -> . PROGRAM ID COLON main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID COLON vars main function
    (2) program -> PROGRAM . ID COLON main function
    (3) program -> PROGRAM . ID COLON vars main
    (4) program -> PROGRAM . ID COLON main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . COLON vars main function
    (2) program -> PROGRAM ID . COLON main function
    (3) program -> PROGRAM ID . COLON vars main
    (4) program -> PROGRAM ID . COLON main

    COLON           shift and go to state 4


state 4

    (1) program -> PROGRAM ID COLON . vars main function
    (2) program -> PROGRAM ID COLON . main function
    (3) program -> PROGRAM ID COLON . vars main
    (4) program -> PROGRAM ID COLON . main
    (8) vars -> . VAR varAux1
    (5) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (6) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (7) nomMain -> . MAIN

    VAR             shift and go to state 8
    MAIN            shift and go to state 6

    vars                           shift and go to state 5
    nomMain                        shift and go to state 7
    main                           shift and go to state 9

state 5

    (1) program -> PROGRAM ID COLON vars . main function
    (3) program -> PROGRAM ID COLON vars . main
    (5) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (6) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (7) nomMain -> . MAIN

    MAIN            shift and go to state 6

    nomMain                        shift and go to state 7
    main                           shift and go to state 10

state 6

    (7) nomMain -> MAIN .

    LPAREN          reduce using rule 7 (nomMain -> MAIN .)


state 7

    (5) main -> nomMain . LPAREN RPAREN LBRACE bloqueAux RBRACE
    (6) main -> nomMain . LPAREN RPAREN LBRACE vars bloqueAux RBRACE

    LPAREN          shift and go to state 11


state 8

    (8) vars -> VAR . varAux1
    (9) varAux1 -> . tipo varAux2 SEMICOLON
    (10) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

    varAux1                        shift and go to state 16
    tipo                           shift and go to state 13

state 9

    (2) program -> PROGRAM ID COLON main . function
    (4) program -> PROGRAM ID COLON main .
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    $end            reduce using rule 4 (program -> PROGRAM ID COLON main .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 17

state 10

    (1) program -> PROGRAM ID COLON vars main . function
    (3) program -> PROGRAM ID COLON vars main .
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    $end            reduce using rule 3 (program -> PROGRAM ID COLON vars main .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 19

state 11

    (5) main -> nomMain LPAREN . RPAREN LBRACE bloqueAux RBRACE
    (6) main -> nomMain LPAREN . RPAREN LBRACE vars bloqueAux RBRACE

    RPAREN          shift and go to state 20


state 12

    (15) tipo -> CHAR .

    ID              reduce using rule 15 (tipo -> CHAR .)


state 13

    (9) varAux1 -> tipo . varAux2 SEMICOLON
    (10) varAux1 -> tipo . varAux2 SEMICOLON varAux1
    (11) varAux2 -> . ID
    (12) varAux2 -> . ID COMA varAux2

    ID              shift and go to state 22

    varAux2                        shift and go to state 21

state 14

    (13) tipo -> INT .

    ID              reduce using rule 13 (tipo -> INT .)


state 15

    (14) tipo -> FLOAT .

    ID              reduce using rule 14 (tipo -> FLOAT .)


state 16

    (8) vars -> VAR varAux1 .

    ID              reduce using rule 8 (vars -> VAR varAux1 .)
    IF              reduce using rule 8 (vars -> VAR varAux1 .)
    PRINT           reduce using rule 8 (vars -> VAR varAux1 .)
    WHILE           reduce using rule 8 (vars -> VAR varAux1 .)
    MAIN            reduce using rule 8 (vars -> VAR varAux1 .)


state 17

    (2) program -> PROGRAM ID COLON main function .

    $end            reduce using rule 2 (program -> PROGRAM ID COLON main function .)


state 18

    (22) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function
    (16) tipoFunc -> . INT
    (17) tipoFunc -> . FLOAT
    (18) tipoFunc -> . CHAR
    (19) tipoFunc -> . VOID

    INT             shift and go to state 23
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26
    VOID            shift and go to state 24

    tipoFunc                       shift and go to state 27

state 19

    (1) program -> PROGRAM ID COLON vars main function .

    $end            reduce using rule 1 (program -> PROGRAM ID COLON vars main function .)


state 20

    (5) main -> nomMain LPAREN RPAREN . LBRACE bloqueAux RBRACE
    (6) main -> nomMain LPAREN RPAREN . LBRACE vars bloqueAux RBRACE

    LBRACE          shift and go to state 28


state 21

    (9) varAux1 -> tipo varAux2 . SEMICOLON
    (10) varAux1 -> tipo varAux2 . SEMICOLON varAux1

    SEMICOLON       shift and go to state 29


state 22

    (11) varAux2 -> ID .
    (12) varAux2 -> ID . COMA varAux2

    SEMICOLON       reduce using rule 11 (varAux2 -> ID .)
    COMA            shift and go to state 30


state 23

    (16) tipoFunc -> INT .

    ID              reduce using rule 16 (tipoFunc -> INT .)


state 24

    (19) tipoFunc -> VOID .

    ID              reduce using rule 19 (tipoFunc -> VOID .)


state 25

    (17) tipoFunc -> FLOAT .

    ID              reduce using rule 17 (tipoFunc -> FLOAT .)


state 26

    (18) tipoFunc -> CHAR .

    ID              reduce using rule 18 (tipoFunc -> CHAR .)


state 27

    (22) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function
    (32) nomFunc -> . ID

    ID              shift and go to state 32

    nomFunc                        shift and go to state 31

state 28

    (5) main -> nomMain LPAREN RPAREN LBRACE . bloqueAux RBRACE
    (6) main -> nomMain LPAREN RPAREN LBRACE . vars bloqueAux RBRACE
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (8) vars -> . VAR varAux1
    (36) estatuto -> . asignacion
    (37) estatuto -> . condicion
    (38) estatuto -> . escritura
    (39) estatuto -> . while
    (40) estatuto -> . comparacion
    (41) asignacion -> . ID EQUAL expresion SEMICOLON
    (43) condicion -> . IF LPAREN expresion RPAREN bloque SEMICOLON
    (44) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque SEMICOLON
    (45) escritura -> . PRINT LPAREN escrituraAux RPAREN SEMICOLON
    (35) while -> . WHILE LPAREN expresion RPAREN bloque
    (42) comparacion -> . ID DOUBLEEQUAL expresion SEMICOLON

    VAR             shift and go to state 8
    ID              shift and go to state 37
    IF              shift and go to state 38
    PRINT           shift and go to state 34
    WHILE           shift and go to state 40

    vars                           shift and go to state 33
    asignacion                     shift and go to state 39
    estatuto                       shift and go to state 35
    while                          shift and go to state 42
    bloqueAux                      shift and go to state 41
    condicion                      shift and go to state 36
    comparacion                    shift and go to state 43
    escritura                      shift and go to state 44

state 29

    (9) varAux1 -> tipo varAux2 SEMICOLON .
    (10) varAux1 -> tipo varAux2 SEMICOLON . varAux1
    (9) varAux1 -> . tipo varAux2 SEMICOLON
    (10) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR

    MAIN            reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    ID              reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    IF              reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    PRINT           reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    WHILE           reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

    varAux1                        shift and go to state 45
    tipo                           shift and go to state 13

state 30

    (12) varAux2 -> ID COMA . varAux2
    (11) varAux2 -> . ID
    (12) varAux2 -> . ID COMA varAux2

    ID              shift and go to state 22

    varAux2                        shift and go to state 46

state 31

    (22) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE RBRACE
    (23) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE RBRACE function
    (25) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE RBRACE
    (27) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    LPAREN          shift and go to state 47


state 32

    (32) nomFunc -> ID .

    LPAREN          reduce using rule 32 (nomFunc -> ID .)


state 33

    (6) main -> nomMain LPAREN RPAREN LBRACE vars . bloqueAux RBRACE
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (36) estatuto -> . asignacion
    (37) estatuto -> . condicion
    (38) estatuto -> . escritura
    (39) estatuto -> . while
    (40) estatuto -> . comparacion
    (41) asignacion -> . ID EQUAL expresion SEMICOLON
    (43) condicion -> . IF LPAREN expresion RPAREN bloque SEMICOLON
    (44) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque SEMICOLON
    (45) escritura -> . PRINT LPAREN escrituraAux RPAREN SEMICOLON
    (35) while -> . WHILE LPAREN expresion RPAREN bloque
    (42) comparacion -> . ID DOUBLEEQUAL expresion SEMICOLON

    ID              shift and go to state 37
    IF              shift and go to state 38
    PRINT           shift and go to state 34
    WHILE           shift and go to state 40

    asignacion                     shift and go to state 39
    estatuto                       shift and go to state 35
    while                          shift and go to state 42
    bloqueAux                      shift and go to state 48
    condicion                      shift and go to state 36
    comparacion                    shift and go to state 43
    escritura                      shift and go to state 44

state 34

    (45) escritura -> PRINT . LPAREN escrituraAux RPAREN SEMICOLON

    LPAREN          shift and go to state 49


state 35

    (33) bloqueAux -> estatuto .
    (34) bloqueAux -> estatuto . bloqueAux
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (36) estatuto -> . asignacion
    (37) estatuto -> . condicion
    (38) estatuto -> . escritura
    (39) estatuto -> . while
    (40) estatuto -> . comparacion
    (41) asignacion -> . ID EQUAL expresion SEMICOLON
    (43) condicion -> . IF LPAREN expresion RPAREN bloque SEMICOLON
    (44) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque SEMICOLON
    (45) escritura -> . PRINT LPAREN escrituraAux RPAREN SEMICOLON
    (35) while -> . WHILE LPAREN expresion RPAREN bloque
    (42) comparacion -> . ID DOUBLEEQUAL expresion SEMICOLON

    RBRACE          reduce using rule 33 (bloqueAux -> estatuto .)
    ID              shift and go to state 37
    IF              shift and go to state 38
    PRINT           shift and go to state 34
    WHILE           shift and go to state 40

    asignacion                     shift and go to state 39
    estatuto                       shift and go to state 35
    bloqueAux                      shift and go to state 50
    while                          shift and go to state 42
    condicion                      shift and go to state 36
    comparacion                    shift and go to state 43
    escritura                      shift and go to state 44

state 36

    (37) estatuto -> condicion .

    ID              reduce using rule 37 (estatuto -> condicion .)
    IF              reduce using rule 37 (estatuto -> condicion .)
    PRINT           reduce using rule 37 (estatuto -> condicion .)
    WHILE           reduce using rule 37 (estatuto -> condicion .)
    RBRACE          reduce using rule 37 (estatuto -> condicion .)


state 37

    (41) asignacion -> ID . EQUAL expresion SEMICOLON
    (42) comparacion -> ID . DOUBLEEQUAL expresion SEMICOLON

    EQUAL           shift and go to state 52
    DOUBLEEQUAL     shift and go to state 51


state 38

    (43) condicion -> IF . LPAREN expresion RPAREN bloque SEMICOLON
    (44) condicion -> IF . LPAREN expresion RPAREN bloque ELSE bloque SEMICOLON

    LPAREN          shift and go to state 53


state 39

    (36) estatuto -> asignacion .

    ID              reduce using rule 36 (estatuto -> asignacion .)
    IF              reduce using rule 36 (estatuto -> asignacion .)
    PRINT           reduce using rule 36 (estatuto -> asignacion .)
    WHILE           reduce using rule 36 (estatuto -> asignacion .)
    RBRACE          reduce using rule 36 (estatuto -> asignacion .)


state 40

    (35) while -> WHILE . LPAREN expresion RPAREN bloque

    LPAREN          shift and go to state 54


state 41

    (5) main -> nomMain LPAREN RPAREN LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 55


state 42

    (39) estatuto -> while .

    ID              reduce using rule 39 (estatuto -> while .)
    IF              reduce using rule 39 (estatuto -> while .)
    PRINT           reduce using rule 39 (estatuto -> while .)
    WHILE           reduce using rule 39 (estatuto -> while .)
    RBRACE          reduce using rule 39 (estatuto -> while .)


state 43

    (40) estatuto -> comparacion .

    ID              reduce using rule 40 (estatuto -> comparacion .)
    IF              reduce using rule 40 (estatuto -> comparacion .)
    PRINT           reduce using rule 40 (estatuto -> comparacion .)
    WHILE           reduce using rule 40 (estatuto -> comparacion .)
    RBRACE          reduce using rule 40 (estatuto -> comparacion .)


state 44

    (38) estatuto -> escritura .

    ID              reduce using rule 38 (estatuto -> escritura .)
    IF              reduce using rule 38 (estatuto -> escritura .)
    PRINT           reduce using rule 38 (estatuto -> escritura .)
    WHILE           reduce using rule 38 (estatuto -> escritura .)
    RBRACE          reduce using rule 38 (estatuto -> escritura .)


state 45

    (10) varAux1 -> tipo varAux2 SEMICOLON varAux1 .

    MAIN            reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    ID              reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    IF              reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    PRINT           reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    WHILE           reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)


state 46

    (12) varAux2 -> ID COMA varAux2 .

    SEMICOLON       reduce using rule 12 (varAux2 -> ID COMA varAux2 .)


state 47

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE RBRACE
    (23) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE RBRACE function
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE RBRACE
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE RBRACE function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux RBRACE function
    (30) param -> . tipo ID
    (31) param -> . tipo ID COMA param
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR

    RPAREN          shift and go to state 56
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

    tipo                           shift and go to state 58
    param                          shift and go to state 57

state 48

    (6) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux . RBRACE

    RBRACE          shift and go to state 59


state 49

    (45) escritura -> PRINT LPAREN . escrituraAux RPAREN SEMICOLON
    (46) escrituraAux -> . expresion
    (47) escrituraAux -> . CTE_STRING
    (48) escrituraAux -> . expresion COMA escrituraAux
    (49) escrituraAux -> . CTE_STRING COMA escrituraAux
    (50) expresion -> . exp
    (51) expresion -> . exp LOWERTHAN exp
    (52) expresion -> . exp MORETHAN exp
    (53) expresion -> . exp DIFFERENT exp
    (54) exp -> . termino
    (55) exp -> . termino PLUS exp
    (56) exp -> . termino MINUS exp
    (57) termino -> . factor
    (58) termino -> . factor TIMES termino
    (59) termino -> . factor DIVIDE termino
    (60) factor -> . LPAREN expresion RPAREN
    (61) factor -> . factorAux
    (62) factorAux -> . PLUS var_cte
    (63) factorAux -> . MINUS var_cte
    (64) factorAux -> . var_cte
    (65) var_cte -> . ID
    (66) var_cte -> . CTE_I
    (67) var_cte -> . CTE_F

    CTE_STRING      shift and go to state 66
    LPAREN          shift and go to state 69
    PLUS            shift and go to state 63
    MINUS           shift and go to state 62
    ID              shift and go to state 70
    CTE_I           shift and go to state 64
    CTE_F           shift and go to state 65

    escrituraAux                   shift and go to state 71
    expresion                      shift and go to state 67
    var_cte                        shift and go to state 60
    termino                        shift and go to state 61
    exp                            shift and go to state 72
    factor                         shift and go to state 68
    factorAux                      shift and go to state 73

state 50

    (34) bloqueAux -> estatuto bloqueAux .

    RBRACE          reduce using rule 34 (bloqueAux -> estatuto bloqueAux .)


state 51

    (42) comparacion -> ID DOUBLEEQUAL . expresion SEMICOLON
    (50) expresion -> . exp
    (51) expresion -> . exp LOWERTHAN exp
    (52) expresion -> . exp MORETHAN exp
    (53) expresion -> . exp DIFFERENT exp
    (54) exp -> . termino
    (55) exp -> . termino PLUS exp
    (56) exp -> . termino MINUS exp
    (57) termino -> . factor
    (58) termino -> . factor TIMES termino
    (59) termino -> . factor DIVIDE termino
    (60) factor -> . LPAREN expresion RPAREN
    (61) factor -> . factorAux
    (62) factorAux -> . PLUS var_cte
    (63) factorAux -> . MINUS var_cte
    (64) factorAux -> . var_cte
    (65) var_cte -> . ID
    (66) var_cte -> . CTE_I
    (67) var_cte -> . CTE_F

    LPAREN          shift and go to state 69
    PLUS            shift and go to state 63
    MINUS           shift and go to state 62
    ID              shift and go to state 70
    CTE_I           shift and go to state 64
    CTE_F           shift and go to state 65

    expresion                      shift and go to state 74
    var_cte                        shift and go to state 60
    termino                        shift and go to state 61
    exp                            shift and go to state 72
    factor                         shift and go to state 68
    factorAux                      shift and go to state 73

state 52

    (41) asignacion -> ID EQUAL . expresion SEMICOLON
    (50) expresion -> . exp
    (51) expresion -> . exp LOWERTHAN exp
    (52) expresion -> . exp MORETHAN exp
    (53) expresion -> . exp DIFFERENT exp
    (54) exp -> . termino
    (55) exp -> . termino PLUS exp
    (56) exp -> . termino MINUS exp
    (57) termino -> . factor
    (58) termino -> . factor TIMES termino
    (59) termino -> . factor DIVIDE termino
    (60) factor -> . LPAREN expresion RPAREN
    (61) factor -> . factorAux
    (62) factorAux -> . PLUS var_cte
    (63) factorAux -> . MINUS var_cte
    (64) factorAux -> . var_cte
    (65) var_cte -> . ID
    (66) var_cte -> . CTE_I
    (67) var_cte -> . CTE_F

    LPAREN          shift and go to state 69
    PLUS            shift and go to state 63
    MINUS           shift and go to state 62
    ID              shift and go to state 70
    CTE_I           shift and go to state 64
    CTE_F           shift and go to state 65

    expresion                      shift and go to state 75
    var_cte                        shift and go to state 60
    termino                        shift and go to state 61
    exp                            shift and go to state 72
    factor                         shift and go to state 68
    factorAux                      shift and go to state 73

state 53

    (43) condicion -> IF LPAREN . expresion RPAREN bloque SEMICOLON
    (44) condicion -> IF LPAREN . expresion RPAREN bloque ELSE bloque SEMICOLON
    (50) expresion -> . exp
    (51) expresion -> . exp LOWERTHAN exp
    (52) expresion -> . exp MORETHAN exp
    (53) expresion -> . exp DIFFERENT exp
    (54) exp -> . termino
    (55) exp -> . termino PLUS exp
    (56) exp -> . termino MINUS exp
    (57) termino -> . factor
    (58) termino -> . factor TIMES termino
    (59) termino -> . factor DIVIDE termino
    (60) factor -> . LPAREN expresion RPAREN
    (61) factor -> . factorAux
    (62) factorAux -> . PLUS var_cte
    (63) factorAux -> . MINUS var_cte
    (64) factorAux -> . var_cte
    (65) var_cte -> . ID
    (66) var_cte -> . CTE_I
    (67) var_cte -> . CTE_F

    LPAREN          shift and go to state 69
    PLUS            shift and go to state 63
    MINUS           shift and go to state 62
    ID              shift and go to state 70
    CTE_I           shift and go to state 64
    CTE_F           shift and go to state 65

    expresion                      shift and go to state 76
    var_cte                        shift and go to state 60
    termino                        shift and go to state 61
    exp                            shift and go to state 72
    factor                         shift and go to state 68
    factorAux                      shift and go to state 73

state 54

    (35) while -> WHILE LPAREN . expresion RPAREN bloque
    (50) expresion -> . exp
    (51) expresion -> . exp LOWERTHAN exp
    (52) expresion -> . exp MORETHAN exp
    (53) expresion -> . exp DIFFERENT exp
    (54) exp -> . termino
    (55) exp -> . termino PLUS exp
    (56) exp -> . termino MINUS exp
    (57) termino -> . factor
    (58) termino -> . factor TIMES termino
    (59) termino -> . factor DIVIDE termino
    (60) factor -> . LPAREN expresion RPAREN
    (61) factor -> . factorAux
    (62) factorAux -> . PLUS var_cte
    (63) factorAux -> . MINUS var_cte
    (64) factorAux -> . var_cte
    (65) var_cte -> . ID
    (66) var_cte -> . CTE_I
    (67) var_cte -> . CTE_F

    LPAREN          shift and go to state 69
    PLUS            shift and go to state 63
    MINUS           shift and go to state 62
    ID              shift and go to state 70
    CTE_I           shift and go to state 64
    CTE_F           shift and go to state 65

    expresion                      shift and go to state 77
    var_cte                        shift and go to state 60
    termino                        shift and go to state 61
    exp                            shift and go to state 72
    factor                         shift and go to state 68
    factorAux                      shift and go to state 73

state 55

    (5) main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE .

    FUNCTION        reduce using rule 5 (main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE .)
    $end            reduce using rule 5 (main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE .)


state 56

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE RBRACE
    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux RBRACE
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE RBRACE function
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux RBRACE function

    LBRACE          shift and go to state 78


state 57

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE RBRACE
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE RBRACE function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux RBRACE function

    RPAREN          shift and go to state 79


state 58

    (30) param -> tipo . ID
    (31) param -> tipo . ID COMA param

    ID              shift and go to state 80


state 59

    (6) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE .

    FUNCTION        reduce using rule 6 (main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE .)
    $end            reduce using rule 6 (main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE .)


state 60

    (64) factorAux -> var_cte .

    TIMES           reduce using rule 64 (factorAux -> var_cte .)
    DIVIDE          reduce using rule 64 (factorAux -> var_cte .)
    PLUS            reduce using rule 64 (factorAux -> var_cte .)
    MINUS           reduce using rule 64 (factorAux -> var_cte .)
    LOWERTHAN       reduce using rule 64 (factorAux -> var_cte .)
    MORETHAN        reduce using rule 64 (factorAux -> var_cte .)
    DIFFERENT       reduce using rule 64 (factorAux -> var_cte .)
    SEMICOLON       reduce using rule 64 (factorAux -> var_cte .)
    RPAREN          reduce using rule 64 (factorAux -> var_cte .)
    COMA            reduce using rule 64 (factorAux -> var_cte .)


state 61

    (54) exp -> termino .
    (55) exp -> termino . PLUS exp
    (56) exp -> termino . MINUS exp

    LOWERTHAN       reduce using rule 54 (exp -> termino .)
    MORETHAN        reduce using rule 54 (exp -> termino .)
    DIFFERENT       reduce using rule 54 (exp -> termino .)
    SEMICOLON       reduce using rule 54 (exp -> termino .)
    RPAREN          reduce using rule 54 (exp -> termino .)
    COMA            reduce using rule 54 (exp -> termino .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82


state 62

    (63) factorAux -> MINUS . var_cte
    (65) var_cte -> . ID
    (66) var_cte -> . CTE_I
    (67) var_cte -> . CTE_F

    ID              shift and go to state 70
    CTE_I           shift and go to state 64
    CTE_F           shift and go to state 65

    var_cte                        shift and go to state 83

state 63

    (62) factorAux -> PLUS . var_cte
    (65) var_cte -> . ID
    (66) var_cte -> . CTE_I
    (67) var_cte -> . CTE_F

    ID              shift and go to state 70
    CTE_I           shift and go to state 64
    CTE_F           shift and go to state 65

    var_cte                        shift and go to state 84

state 64

    (66) var_cte -> CTE_I .

    TIMES           reduce using rule 66 (var_cte -> CTE_I .)
    DIVIDE          reduce using rule 66 (var_cte -> CTE_I .)
    PLUS            reduce using rule 66 (var_cte -> CTE_I .)
    MINUS           reduce using rule 66 (var_cte -> CTE_I .)
    LOWERTHAN       reduce using rule 66 (var_cte -> CTE_I .)
    MORETHAN        reduce using rule 66 (var_cte -> CTE_I .)
    DIFFERENT       reduce using rule 66 (var_cte -> CTE_I .)
    COMA            reduce using rule 66 (var_cte -> CTE_I .)
    RPAREN          reduce using rule 66 (var_cte -> CTE_I .)
    SEMICOLON       reduce using rule 66 (var_cte -> CTE_I .)


state 65

    (67) var_cte -> CTE_F .

    TIMES           reduce using rule 67 (var_cte -> CTE_F .)
    DIVIDE          reduce using rule 67 (var_cte -> CTE_F .)
    PLUS            reduce using rule 67 (var_cte -> CTE_F .)
    MINUS           reduce using rule 67 (var_cte -> CTE_F .)
    LOWERTHAN       reduce using rule 67 (var_cte -> CTE_F .)
    MORETHAN        reduce using rule 67 (var_cte -> CTE_F .)
    DIFFERENT       reduce using rule 67 (var_cte -> CTE_F .)
    COMA            reduce using rule 67 (var_cte -> CTE_F .)
    RPAREN          reduce using rule 67 (var_cte -> CTE_F .)
    SEMICOLON       reduce using rule 67 (var_cte -> CTE_F .)


state 66

    (47) escrituraAux -> CTE_STRING .
    (49) escrituraAux -> CTE_STRING . COMA escrituraAux

    RPAREN          reduce using rule 47 (escrituraAux -> CTE_STRING .)
    COMA            shift and go to state 85


state 67

    (46) escrituraAux -> expresion .
    (48) escrituraAux -> expresion . COMA escrituraAux

    RPAREN          reduce using rule 46 (escrituraAux -> expresion .)
    COMA            shift and go to state 86


state 68

    (57) termino -> factor .
    (58) termino -> factor . TIMES termino
    (59) termino -> factor . DIVIDE termino

    PLUS            reduce using rule 57 (termino -> factor .)
    MINUS           reduce using rule 57 (termino -> factor .)
    LOWERTHAN       reduce using rule 57 (termino -> factor .)
    MORETHAN        reduce using rule 57 (termino -> factor .)
    DIFFERENT       reduce using rule 57 (termino -> factor .)
    COMA            reduce using rule 57 (termino -> factor .)
    RPAREN          reduce using rule 57 (termino -> factor .)
    SEMICOLON       reduce using rule 57 (termino -> factor .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 87


state 69

    (60) factor -> LPAREN . expresion RPAREN
    (50) expresion -> . exp
    (51) expresion -> . exp LOWERTHAN exp
    (52) expresion -> . exp MORETHAN exp
    (53) expresion -> . exp DIFFERENT exp
    (54) exp -> . termino
    (55) exp -> . termino PLUS exp
    (56) exp -> . termino MINUS exp
    (57) termino -> . factor
    (58) termino -> . factor TIMES termino
    (59) termino -> . factor DIVIDE termino
    (60) factor -> . LPAREN expresion RPAREN
    (61) factor -> . factorAux
    (62) factorAux -> . PLUS var_cte
    (63) factorAux -> . MINUS var_cte
    (64) factorAux -> . var_cte
    (65) var_cte -> . ID
    (66) var_cte -> . CTE_I
    (67) var_cte -> . CTE_F

    LPAREN          shift and go to state 69
    PLUS            shift and go to state 63
    MINUS           shift and go to state 62
    ID              shift and go to state 70
    CTE_I           shift and go to state 64
    CTE_F           shift and go to state 65

    expresion                      shift and go to state 89
    var_cte                        shift and go to state 60
    termino                        shift and go to state 61
    exp                            shift and go to state 72
    factor                         shift and go to state 68
    factorAux                      shift and go to state 73

state 70

    (65) var_cte -> ID .

    TIMES           reduce using rule 65 (var_cte -> ID .)
    DIVIDE          reduce using rule 65 (var_cte -> ID .)
    PLUS            reduce using rule 65 (var_cte -> ID .)
    MINUS           reduce using rule 65 (var_cte -> ID .)
    LOWERTHAN       reduce using rule 65 (var_cte -> ID .)
    MORETHAN        reduce using rule 65 (var_cte -> ID .)
    DIFFERENT       reduce using rule 65 (var_cte -> ID .)
    COMA            reduce using rule 65 (var_cte -> ID .)
    RPAREN          reduce using rule 65 (var_cte -> ID .)
    SEMICOLON       reduce using rule 65 (var_cte -> ID .)


state 71

    (45) escritura -> PRINT LPAREN escrituraAux . RPAREN SEMICOLON

    RPAREN          shift and go to state 90


state 72

    (50) expresion -> exp .
    (51) expresion -> exp . LOWERTHAN exp
    (52) expresion -> exp . MORETHAN exp
    (53) expresion -> exp . DIFFERENT exp

    SEMICOLON       reduce using rule 50 (expresion -> exp .)
    COMA            reduce using rule 50 (expresion -> exp .)
    RPAREN          reduce using rule 50 (expresion -> exp .)
    LOWERTHAN       shift and go to state 93
    MORETHAN        shift and go to state 91
    DIFFERENT       shift and go to state 92


state 73

    (61) factor -> factorAux .

    TIMES           reduce using rule 61 (factor -> factorAux .)
    DIVIDE          reduce using rule 61 (factor -> factorAux .)
    PLUS            reduce using rule 61 (factor -> factorAux .)
    MINUS           reduce using rule 61 (factor -> factorAux .)
    LOWERTHAN       reduce using rule 61 (factor -> factorAux .)
    MORETHAN        reduce using rule 61 (factor -> factorAux .)
    DIFFERENT       reduce using rule 61 (factor -> factorAux .)
    RPAREN          reduce using rule 61 (factor -> factorAux .)
    COMA            reduce using rule 61 (factor -> factorAux .)
    SEMICOLON       reduce using rule 61 (factor -> factorAux .)


state 74

    (42) comparacion -> ID DOUBLEEQUAL expresion . SEMICOLON

    SEMICOLON       shift and go to state 94


state 75

    (41) asignacion -> ID EQUAL expresion . SEMICOLON

    SEMICOLON       shift and go to state 95


state 76

    (43) condicion -> IF LPAREN expresion . RPAREN bloque SEMICOLON
    (44) condicion -> IF LPAREN expresion . RPAREN bloque ELSE bloque SEMICOLON

    RPAREN          shift and go to state 96


state 77

    (35) while -> WHILE LPAREN expresion . RPAREN bloque

    RPAREN          shift and go to state 97


state 78

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . RBRACE
    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux RBRACE
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . RBRACE function
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux RBRACE function
    (8) vars -> . VAR varAux1

    RBRACE          shift and go to state 98
    VAR             shift and go to state 8

    vars                           shift and go to state 99

state 79

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE RBRACE
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux RBRACE
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE RBRACE function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux RBRACE function

    LBRACE          shift and go to state 100


state 80

    (30) param -> tipo ID .
    (31) param -> tipo ID . COMA param

    RPAREN          reduce using rule 30 (param -> tipo ID .)
    COMA            shift and go to state 101


state 81

    (55) exp -> termino PLUS . exp
    (54) exp -> . termino
    (55) exp -> . termino PLUS exp
    (56) exp -> . termino MINUS exp
    (57) termino -> . factor
    (58) termino -> . factor TIMES termino
    (59) termino -> . factor DIVIDE termino
    (60) factor -> . LPAREN expresion RPAREN
    (61) factor -> . factorAux
    (62) factorAux -> . PLUS var_cte
    (63) factorAux -> . MINUS var_cte
    (64) factorAux -> . var_cte
    (65) var_cte -> . ID
    (66) var_cte -> . CTE_I
    (67) var_cte -> . CTE_F

    LPAREN          shift and go to state 69
    PLUS            shift and go to state 63
    MINUS           shift and go to state 62
    ID              shift and go to state 70
    CTE_I           shift and go to state 64
    CTE_F           shift and go to state 65

    var_cte                        shift and go to state 60
    termino                        shift and go to state 61
    exp                            shift and go to state 102
    factor                         shift and go to state 68
    factorAux                      shift and go to state 73

state 82

    (56) exp -> termino MINUS . exp
    (54) exp -> . termino
    (55) exp -> . termino PLUS exp
    (56) exp -> . termino MINUS exp
    (57) termino -> . factor
    (58) termino -> . factor TIMES termino
    (59) termino -> . factor DIVIDE termino
    (60) factor -> . LPAREN expresion RPAREN
    (61) factor -> . factorAux
    (62) factorAux -> . PLUS var_cte
    (63) factorAux -> . MINUS var_cte
    (64) factorAux -> . var_cte
    (65) var_cte -> . ID
    (66) var_cte -> . CTE_I
    (67) var_cte -> . CTE_F

    LPAREN          shift and go to state 69
    PLUS            shift and go to state 63
    MINUS           shift and go to state 62
    ID              shift and go to state 70
    CTE_I           shift and go to state 64
    CTE_F           shift and go to state 65

    var_cte                        shift and go to state 60
    termino                        shift and go to state 61
    exp                            shift and go to state 103
    factor                         shift and go to state 68
    factorAux                      shift and go to state 73

state 83

    (63) factorAux -> MINUS var_cte .

    TIMES           reduce using rule 63 (factorAux -> MINUS var_cte .)
    DIVIDE          reduce using rule 63 (factorAux -> MINUS var_cte .)
    PLUS            reduce using rule 63 (factorAux -> MINUS var_cte .)
    MINUS           reduce using rule 63 (factorAux -> MINUS var_cte .)
    LOWERTHAN       reduce using rule 63 (factorAux -> MINUS var_cte .)
    MORETHAN        reduce using rule 63 (factorAux -> MINUS var_cte .)
    DIFFERENT       reduce using rule 63 (factorAux -> MINUS var_cte .)
    SEMICOLON       reduce using rule 63 (factorAux -> MINUS var_cte .)
    RPAREN          reduce using rule 63 (factorAux -> MINUS var_cte .)
    COMA            reduce using rule 63 (factorAux -> MINUS var_cte .)


state 84

    (62) factorAux -> PLUS var_cte .

    TIMES           reduce using rule 62 (factorAux -> PLUS var_cte .)
    DIVIDE          reduce using rule 62 (factorAux -> PLUS var_cte .)
    PLUS            reduce using rule 62 (factorAux -> PLUS var_cte .)
    MINUS           reduce using rule 62 (factorAux -> PLUS var_cte .)
    LOWERTHAN       reduce using rule 62 (factorAux -> PLUS var_cte .)
    MORETHAN        reduce using rule 62 (factorAux -> PLUS var_cte .)
    DIFFERENT       reduce using rule 62 (factorAux -> PLUS var_cte .)
    SEMICOLON       reduce using rule 62 (factorAux -> PLUS var_cte .)
    RPAREN          reduce using rule 62 (factorAux -> PLUS var_cte .)
    COMA            reduce using rule 62 (factorAux -> PLUS var_cte .)


state 85

    (49) escrituraAux -> CTE_STRING COMA . escrituraAux
    (46) escrituraAux -> . expresion
    (47) escrituraAux -> . CTE_STRING
    (48) escrituraAux -> . expresion COMA escrituraAux
    (49) escrituraAux -> . CTE_STRING COMA escrituraAux
    (50) expresion -> . exp
    (51) expresion -> . exp LOWERTHAN exp
    (52) expresion -> . exp MORETHAN exp
    (53) expresion -> . exp DIFFERENT exp
    (54) exp -> . termino
    (55) exp -> . termino PLUS exp
    (56) exp -> . termino MINUS exp
    (57) termino -> . factor
    (58) termino -> . factor TIMES termino
    (59) termino -> . factor DIVIDE termino
    (60) factor -> . LPAREN expresion RPAREN
    (61) factor -> . factorAux
    (62) factorAux -> . PLUS var_cte
    (63) factorAux -> . MINUS var_cte
    (64) factorAux -> . var_cte
    (65) var_cte -> . ID
    (66) var_cte -> . CTE_I
    (67) var_cte -> . CTE_F

    CTE_STRING      shift and go to state 66
    LPAREN          shift and go to state 69
    PLUS            shift and go to state 63
    MINUS           shift and go to state 62
    ID              shift and go to state 70
    CTE_I           shift and go to state 64
    CTE_F           shift and go to state 65

    escrituraAux                   shift and go to state 104
    expresion                      shift and go to state 67
    var_cte                        shift and go to state 60
    termino                        shift and go to state 61
    exp                            shift and go to state 72
    factor                         shift and go to state 68
    factorAux                      shift and go to state 73

state 86

    (48) escrituraAux -> expresion COMA . escrituraAux
    (46) escrituraAux -> . expresion
    (47) escrituraAux -> . CTE_STRING
    (48) escrituraAux -> . expresion COMA escrituraAux
    (49) escrituraAux -> . CTE_STRING COMA escrituraAux
    (50) expresion -> . exp
    (51) expresion -> . exp LOWERTHAN exp
    (52) expresion -> . exp MORETHAN exp
    (53) expresion -> . exp DIFFERENT exp
    (54) exp -> . termino
    (55) exp -> . termino PLUS exp
    (56) exp -> . termino MINUS exp
    (57) termino -> . factor
    (58) termino -> . factor TIMES termino
    (59) termino -> . factor DIVIDE termino
    (60) factor -> . LPAREN expresion RPAREN
    (61) factor -> . factorAux
    (62) factorAux -> . PLUS var_cte
    (63) factorAux -> . MINUS var_cte
    (64) factorAux -> . var_cte
    (65) var_cte -> . ID
    (66) var_cte -> . CTE_I
    (67) var_cte -> . CTE_F

    CTE_STRING      shift and go to state 66
    LPAREN          shift and go to state 69
    PLUS            shift and go to state 63
    MINUS           shift and go to state 62
    ID              shift and go to state 70
    CTE_I           shift and go to state 64
    CTE_F           shift and go to state 65

    expresion                      shift and go to state 67
    escrituraAux                   shift and go to state 105
    var_cte                        shift and go to state 60
    termino                        shift and go to state 61
    exp                            shift and go to state 72
    factor                         shift and go to state 68
    factorAux                      shift and go to state 73

state 87

    (59) termino -> factor DIVIDE . termino
    (57) termino -> . factor
    (58) termino -> . factor TIMES termino
    (59) termino -> . factor DIVIDE termino
    (60) factor -> . LPAREN expresion RPAREN
    (61) factor -> . factorAux
    (62) factorAux -> . PLUS var_cte
    (63) factorAux -> . MINUS var_cte
    (64) factorAux -> . var_cte
    (65) var_cte -> . ID
    (66) var_cte -> . CTE_I
    (67) var_cte -> . CTE_F

    LPAREN          shift and go to state 69
    PLUS            shift and go to state 63
    MINUS           shift and go to state 62
    ID              shift and go to state 70
    CTE_I           shift and go to state 64
    CTE_F           shift and go to state 65

    factorAux                      shift and go to state 73
    var_cte                        shift and go to state 60
    termino                        shift and go to state 106
    factor                         shift and go to state 68

state 88

    (58) termino -> factor TIMES . termino
    (57) termino -> . factor
    (58) termino -> . factor TIMES termino
    (59) termino -> . factor DIVIDE termino
    (60) factor -> . LPAREN expresion RPAREN
    (61) factor -> . factorAux
    (62) factorAux -> . PLUS var_cte
    (63) factorAux -> . MINUS var_cte
    (64) factorAux -> . var_cte
    (65) var_cte -> . ID
    (66) var_cte -> . CTE_I
    (67) var_cte -> . CTE_F

    LPAREN          shift and go to state 69
    PLUS            shift and go to state 63
    MINUS           shift and go to state 62
    ID              shift and go to state 70
    CTE_I           shift and go to state 64
    CTE_F           shift and go to state 65

    factorAux                      shift and go to state 73
    var_cte                        shift and go to state 60
    termino                        shift and go to state 107
    factor                         shift and go to state 68

state 89

    (60) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 108


state 90

    (45) escritura -> PRINT LPAREN escrituraAux RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 109


state 91

    (52) expresion -> exp MORETHAN . exp
    (54) exp -> . termino
    (55) exp -> . termino PLUS exp
    (56) exp -> . termino MINUS exp
    (57) termino -> . factor
    (58) termino -> . factor TIMES termino
    (59) termino -> . factor DIVIDE termino
    (60) factor -> . LPAREN expresion RPAREN
    (61) factor -> . factorAux
    (62) factorAux -> . PLUS var_cte
    (63) factorAux -> . MINUS var_cte
    (64) factorAux -> . var_cte
    (65) var_cte -> . ID
    (66) var_cte -> . CTE_I
    (67) var_cte -> . CTE_F

    LPAREN          shift and go to state 69
    PLUS            shift and go to state 63
    MINUS           shift and go to state 62
    ID              shift and go to state 70
    CTE_I           shift and go to state 64
    CTE_F           shift and go to state 65

    var_cte                        shift and go to state 60
    termino                        shift and go to state 61
    exp                            shift and go to state 110
    factor                         shift and go to state 68
    factorAux                      shift and go to state 73

state 92

    (53) expresion -> exp DIFFERENT . exp
    (54) exp -> . termino
    (55) exp -> . termino PLUS exp
    (56) exp -> . termino MINUS exp
    (57) termino -> . factor
    (58) termino -> . factor TIMES termino
    (59) termino -> . factor DIVIDE termino
    (60) factor -> . LPAREN expresion RPAREN
    (61) factor -> . factorAux
    (62) factorAux -> . PLUS var_cte
    (63) factorAux -> . MINUS var_cte
    (64) factorAux -> . var_cte
    (65) var_cte -> . ID
    (66) var_cte -> . CTE_I
    (67) var_cte -> . CTE_F

    LPAREN          shift and go to state 69
    PLUS            shift and go to state 63
    MINUS           shift and go to state 62
    ID              shift and go to state 70
    CTE_I           shift and go to state 64
    CTE_F           shift and go to state 65

    var_cte                        shift and go to state 60
    termino                        shift and go to state 61
    exp                            shift and go to state 111
    factor                         shift and go to state 68
    factorAux                      shift and go to state 73

state 93

    (51) expresion -> exp LOWERTHAN . exp
    (54) exp -> . termino
    (55) exp -> . termino PLUS exp
    (56) exp -> . termino MINUS exp
    (57) termino -> . factor
    (58) termino -> . factor TIMES termino
    (59) termino -> . factor DIVIDE termino
    (60) factor -> . LPAREN expresion RPAREN
    (61) factor -> . factorAux
    (62) factorAux -> . PLUS var_cte
    (63) factorAux -> . MINUS var_cte
    (64) factorAux -> . var_cte
    (65) var_cte -> . ID
    (66) var_cte -> . CTE_I
    (67) var_cte -> . CTE_F

    LPAREN          shift and go to state 69
    PLUS            shift and go to state 63
    MINUS           shift and go to state 62
    ID              shift and go to state 70
    CTE_I           shift and go to state 64
    CTE_F           shift and go to state 65

    var_cte                        shift and go to state 60
    termino                        shift and go to state 61
    exp                            shift and go to state 112
    factor                         shift and go to state 68
    factorAux                      shift and go to state 73

state 94

    (42) comparacion -> ID DOUBLEEQUAL expresion SEMICOLON .

    ID              reduce using rule 42 (comparacion -> ID DOUBLEEQUAL expresion SEMICOLON .)
    IF              reduce using rule 42 (comparacion -> ID DOUBLEEQUAL expresion SEMICOLON .)
    PRINT           reduce using rule 42 (comparacion -> ID DOUBLEEQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 42 (comparacion -> ID DOUBLEEQUAL expresion SEMICOLON .)
    RBRACE          reduce using rule 42 (comparacion -> ID DOUBLEEQUAL expresion SEMICOLON .)


state 95

    (41) asignacion -> ID EQUAL expresion SEMICOLON .

    ID              reduce using rule 41 (asignacion -> ID EQUAL expresion SEMICOLON .)
    IF              reduce using rule 41 (asignacion -> ID EQUAL expresion SEMICOLON .)
    PRINT           reduce using rule 41 (asignacion -> ID EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 41 (asignacion -> ID EQUAL expresion SEMICOLON .)
    RBRACE          reduce using rule 41 (asignacion -> ID EQUAL expresion SEMICOLON .)


state 96

    (43) condicion -> IF LPAREN expresion RPAREN . bloque SEMICOLON
    (44) condicion -> IF LPAREN expresion RPAREN . bloque ELSE bloque SEMICOLON
    (20) bloque -> . LBRACE RBRACE
    (21) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 113

    bloque                         shift and go to state 114

state 97

    (35) while -> WHILE LPAREN expresion RPAREN . bloque
    (20) bloque -> . LBRACE RBRACE
    (21) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 113

    bloque                         shift and go to state 115

state 98

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE .
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    $end            reduce using rule 22 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 116

state 99

    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux RBRACE
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux RBRACE function
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (36) estatuto -> . asignacion
    (37) estatuto -> . condicion
    (38) estatuto -> . escritura
    (39) estatuto -> . while
    (40) estatuto -> . comparacion
    (41) asignacion -> . ID EQUAL expresion SEMICOLON
    (43) condicion -> . IF LPAREN expresion RPAREN bloque SEMICOLON
    (44) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque SEMICOLON
    (45) escritura -> . PRINT LPAREN escrituraAux RPAREN SEMICOLON
    (35) while -> . WHILE LPAREN expresion RPAREN bloque
    (42) comparacion -> . ID DOUBLEEQUAL expresion SEMICOLON

    ID              shift and go to state 37
    IF              shift and go to state 38
    PRINT           shift and go to state 34
    WHILE           shift and go to state 40

    asignacion                     shift and go to state 39
    estatuto                       shift and go to state 35
    bloqueAux                      shift and go to state 117
    while                          shift and go to state 42
    condicion                      shift and go to state 36
    comparacion                    shift and go to state 43
    escritura                      shift and go to state 44

state 100

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . RBRACE
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux RBRACE
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . RBRACE function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux RBRACE function
    (8) vars -> . VAR varAux1

    RBRACE          shift and go to state 118
    VAR             shift and go to state 8

    vars                           shift and go to state 119

state 101

    (31) param -> tipo ID COMA . param
    (30) param -> . tipo ID
    (31) param -> . tipo ID COMA param
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

    param                          shift and go to state 120
    tipo                           shift and go to state 58

state 102

    (55) exp -> termino PLUS exp .

    LOWERTHAN       reduce using rule 55 (exp -> termino PLUS exp .)
    MORETHAN        reduce using rule 55 (exp -> termino PLUS exp .)
    DIFFERENT       reduce using rule 55 (exp -> termino PLUS exp .)
    SEMICOLON       reduce using rule 55 (exp -> termino PLUS exp .)
    RPAREN          reduce using rule 55 (exp -> termino PLUS exp .)
    COMA            reduce using rule 55 (exp -> termino PLUS exp .)


state 103

    (56) exp -> termino MINUS exp .

    LOWERTHAN       reduce using rule 56 (exp -> termino MINUS exp .)
    MORETHAN        reduce using rule 56 (exp -> termino MINUS exp .)
    DIFFERENT       reduce using rule 56 (exp -> termino MINUS exp .)
    SEMICOLON       reduce using rule 56 (exp -> termino MINUS exp .)
    RPAREN          reduce using rule 56 (exp -> termino MINUS exp .)
    COMA            reduce using rule 56 (exp -> termino MINUS exp .)


state 104

    (49) escrituraAux -> CTE_STRING COMA escrituraAux .

    RPAREN          reduce using rule 49 (escrituraAux -> CTE_STRING COMA escrituraAux .)


state 105

    (48) escrituraAux -> expresion COMA escrituraAux .

    RPAREN          reduce using rule 48 (escrituraAux -> expresion COMA escrituraAux .)


state 106

    (59) termino -> factor DIVIDE termino .

    PLUS            reduce using rule 59 (termino -> factor DIVIDE termino .)
    MINUS           reduce using rule 59 (termino -> factor DIVIDE termino .)
    LOWERTHAN       reduce using rule 59 (termino -> factor DIVIDE termino .)
    MORETHAN        reduce using rule 59 (termino -> factor DIVIDE termino .)
    DIFFERENT       reduce using rule 59 (termino -> factor DIVIDE termino .)
    COMA            reduce using rule 59 (termino -> factor DIVIDE termino .)
    RPAREN          reduce using rule 59 (termino -> factor DIVIDE termino .)
    SEMICOLON       reduce using rule 59 (termino -> factor DIVIDE termino .)


state 107

    (58) termino -> factor TIMES termino .

    PLUS            reduce using rule 58 (termino -> factor TIMES termino .)
    MINUS           reduce using rule 58 (termino -> factor TIMES termino .)
    LOWERTHAN       reduce using rule 58 (termino -> factor TIMES termino .)
    MORETHAN        reduce using rule 58 (termino -> factor TIMES termino .)
    DIFFERENT       reduce using rule 58 (termino -> factor TIMES termino .)
    COMA            reduce using rule 58 (termino -> factor TIMES termino .)
    RPAREN          reduce using rule 58 (termino -> factor TIMES termino .)
    SEMICOLON       reduce using rule 58 (termino -> factor TIMES termino .)


state 108

    (60) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 60 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 60 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 60 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 60 (factor -> LPAREN expresion RPAREN .)
    LOWERTHAN       reduce using rule 60 (factor -> LPAREN expresion RPAREN .)
    MORETHAN        reduce using rule 60 (factor -> LPAREN expresion RPAREN .)
    DIFFERENT       reduce using rule 60 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 60 (factor -> LPAREN expresion RPAREN .)
    COMA            reduce using rule 60 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 60 (factor -> LPAREN expresion RPAREN .)


state 109

    (45) escritura -> PRINT LPAREN escrituraAux RPAREN SEMICOLON .

    ID              reduce using rule 45 (escritura -> PRINT LPAREN escrituraAux RPAREN SEMICOLON .)
    IF              reduce using rule 45 (escritura -> PRINT LPAREN escrituraAux RPAREN SEMICOLON .)
    PRINT           reduce using rule 45 (escritura -> PRINT LPAREN escrituraAux RPAREN SEMICOLON .)
    WHILE           reduce using rule 45 (escritura -> PRINT LPAREN escrituraAux RPAREN SEMICOLON .)
    RBRACE          reduce using rule 45 (escritura -> PRINT LPAREN escrituraAux RPAREN SEMICOLON .)


state 110

    (52) expresion -> exp MORETHAN exp .

    SEMICOLON       reduce using rule 52 (expresion -> exp MORETHAN exp .)
    COMA            reduce using rule 52 (expresion -> exp MORETHAN exp .)
    RPAREN          reduce using rule 52 (expresion -> exp MORETHAN exp .)


state 111

    (53) expresion -> exp DIFFERENT exp .

    SEMICOLON       reduce using rule 53 (expresion -> exp DIFFERENT exp .)
    COMA            reduce using rule 53 (expresion -> exp DIFFERENT exp .)
    RPAREN          reduce using rule 53 (expresion -> exp DIFFERENT exp .)


state 112

    (51) expresion -> exp LOWERTHAN exp .

    SEMICOLON       reduce using rule 51 (expresion -> exp LOWERTHAN exp .)
    COMA            reduce using rule 51 (expresion -> exp LOWERTHAN exp .)
    RPAREN          reduce using rule 51 (expresion -> exp LOWERTHAN exp .)


state 113

    (20) bloque -> LBRACE . RBRACE
    (21) bloque -> LBRACE . bloqueAux RBRACE
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (36) estatuto -> . asignacion
    (37) estatuto -> . condicion
    (38) estatuto -> . escritura
    (39) estatuto -> . while
    (40) estatuto -> . comparacion
    (41) asignacion -> . ID EQUAL expresion SEMICOLON
    (43) condicion -> . IF LPAREN expresion RPAREN bloque SEMICOLON
    (44) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque SEMICOLON
    (45) escritura -> . PRINT LPAREN escrituraAux RPAREN SEMICOLON
    (35) while -> . WHILE LPAREN expresion RPAREN bloque
    (42) comparacion -> . ID DOUBLEEQUAL expresion SEMICOLON

    RBRACE          shift and go to state 121
    ID              shift and go to state 37
    IF              shift and go to state 38
    PRINT           shift and go to state 34
    WHILE           shift and go to state 40

    asignacion                     shift and go to state 39
    estatuto                       shift and go to state 35
    bloqueAux                      shift and go to state 122
    while                          shift and go to state 42
    condicion                      shift and go to state 36
    comparacion                    shift and go to state 43
    escritura                      shift and go to state 44

state 114

    (43) condicion -> IF LPAREN expresion RPAREN bloque . SEMICOLON
    (44) condicion -> IF LPAREN expresion RPAREN bloque . ELSE bloque SEMICOLON

    SEMICOLON       shift and go to state 123
    ELSE            shift and go to state 124


state 115

    (35) while -> WHILE LPAREN expresion RPAREN bloque .

    ID              reduce using rule 35 (while -> WHILE LPAREN expresion RPAREN bloque .)
    IF              reduce using rule 35 (while -> WHILE LPAREN expresion RPAREN bloque .)
    PRINT           reduce using rule 35 (while -> WHILE LPAREN expresion RPAREN bloque .)
    WHILE           reduce using rule 35 (while -> WHILE LPAREN expresion RPAREN bloque .)
    RBRACE          reduce using rule 35 (while -> WHILE LPAREN expresion RPAREN bloque .)


state 116

    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function .

    $end            reduce using rule 24 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function .)


state 117

    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . RBRACE
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . RBRACE function

    RBRACE          shift and go to state 125


state 118

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE .
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    $end            reduce using rule 26 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 126

state 119

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux RBRACE
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux RBRACE function
    (33) bloqueAux -> . estatuto
    (34) bloqueAux -> . estatuto bloqueAux
    (36) estatuto -> . asignacion
    (37) estatuto -> . condicion
    (38) estatuto -> . escritura
    (39) estatuto -> . while
    (40) estatuto -> . comparacion
    (41) asignacion -> . ID EQUAL expresion SEMICOLON
    (43) condicion -> . IF LPAREN expresion RPAREN bloque SEMICOLON
    (44) condicion -> . IF LPAREN expresion RPAREN bloque ELSE bloque SEMICOLON
    (45) escritura -> . PRINT LPAREN escrituraAux RPAREN SEMICOLON
    (35) while -> . WHILE LPAREN expresion RPAREN bloque
    (42) comparacion -> . ID DOUBLEEQUAL expresion SEMICOLON

    ID              shift and go to state 37
    IF              shift and go to state 38
    PRINT           shift and go to state 34
    WHILE           shift and go to state 40

    asignacion                     shift and go to state 39
    estatuto                       shift and go to state 35
    bloqueAux                      shift and go to state 127
    while                          shift and go to state 42
    condicion                      shift and go to state 36
    comparacion                    shift and go to state 43
    escritura                      shift and go to state 44

state 120

    (31) param -> tipo ID COMA param .

    RPAREN          reduce using rule 31 (param -> tipo ID COMA param .)


state 121

    (20) bloque -> LBRACE RBRACE .

    SEMICOLON       reduce using rule 20 (bloque -> LBRACE RBRACE .)
    ELSE            reduce using rule 20 (bloque -> LBRACE RBRACE .)
    ID              reduce using rule 20 (bloque -> LBRACE RBRACE .)
    IF              reduce using rule 20 (bloque -> LBRACE RBRACE .)
    PRINT           reduce using rule 20 (bloque -> LBRACE RBRACE .)
    WHILE           reduce using rule 20 (bloque -> LBRACE RBRACE .)
    RBRACE          reduce using rule 20 (bloque -> LBRACE RBRACE .)


state 122

    (21) bloque -> LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 128


state 123

    (43) condicion -> IF LPAREN expresion RPAREN bloque SEMICOLON .

    ID              reduce using rule 43 (condicion -> IF LPAREN expresion RPAREN bloque SEMICOLON .)
    IF              reduce using rule 43 (condicion -> IF LPAREN expresion RPAREN bloque SEMICOLON .)
    PRINT           reduce using rule 43 (condicion -> IF LPAREN expresion RPAREN bloque SEMICOLON .)
    WHILE           reduce using rule 43 (condicion -> IF LPAREN expresion RPAREN bloque SEMICOLON .)
    RBRACE          reduce using rule 43 (condicion -> IF LPAREN expresion RPAREN bloque SEMICOLON .)


state 124

    (44) condicion -> IF LPAREN expresion RPAREN bloque ELSE . bloque SEMICOLON
    (20) bloque -> . LBRACE RBRACE
    (21) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 113

    bloque                         shift and go to state 129

state 125

    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE .
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    $end            reduce using rule 23 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 130

state 126

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function .

    $end            reduce using rule 28 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function .)


state 127

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . RBRACE
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . RBRACE function

    RBRACE          shift and go to state 131


state 128

    (21) bloque -> LBRACE bloqueAux RBRACE .

    SEMICOLON       reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    ELSE            reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    ID              reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)


state 129

    (44) condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque . SEMICOLON

    SEMICOLON       shift and go to state 132


state 130

    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function .

    $end            reduce using rule 25 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function .)


state 131

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE .
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function

    $end            reduce using rule 27 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 133

state 132

    (44) condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque SEMICOLON .

    ID              reduce using rule 44 (condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque SEMICOLON .)
    IF              reduce using rule 44 (condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque SEMICOLON .)
    PRINT           reduce using rule 44 (condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque SEMICOLON .)
    WHILE           reduce using rule 44 (condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque SEMICOLON .)
    RBRACE          reduce using rule 44 (condicion -> IF LPAREN expresion RPAREN bloque ELSE bloque SEMICOLON .)


state 133

    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function .

    $end            reduce using rule 29 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE function .)

