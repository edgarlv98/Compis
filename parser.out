Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID COLON varsGlobal function main endPrograma
Rule 2     program -> PROGRAM ID COLON function main endPrograma
Rule 3     program -> PROGRAM ID COLON varsGlobal main endPrograma
Rule 4     program -> PROGRAM ID COLON main endPrograma
Rule 5     endPrograma -> <empty>
Rule 6     varsGlobal -> VAR varAuxGlobal1
Rule 7     varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON
Rule 8     varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1
Rule 9     varAuxGlobal2 -> ID
Rule 10    varAuxGlobal2 -> ID COMA varAuxGlobal2
Rule 11    main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc
Rule 12    main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
Rule 13    nomMain -> MAIN
Rule 14    vars -> VAR varAux1
Rule 15    varAux1 -> tipo varAux2 SEMICOLON
Rule 16    varAux1 -> tipo varAux2 SEMICOLON varAux1
Rule 17    varAux2 -> ID
Rule 18    varAux2 -> ID COMA varAux2
Rule 19    tipo -> INT
Rule 20    tipo -> FLOAT
Rule 21    tipo -> CHAR
Rule 22    tipoFunc -> INT
Rule 23    tipoFunc -> FLOAT
Rule 24    tipoFunc -> CHAR
Rule 25    tipoFunc -> VOID
Rule 26    bloque -> LBRACE RBRACE
Rule 27    bloque -> LBRACE bloqueAux RBRACE
Rule 28    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
Rule 29    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
Rule 30    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
Rule 31    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
Rule 32    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
Rule 33    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
Rule 34    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
Rule 35    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
Rule 36    endProc -> <empty>
Rule 37    param -> tipo ID
Rule 38    param -> tipo ID COMA param
Rule 39    param -> empty
Rule 40    empty -> <empty>
Rule 41    push_function -> <empty>
Rule 42    nomFunc -> ID push_function
Rule 43    bloqueAux -> estatuto
Rule 44    bloqueAux -> estatuto bloqueAux
Rule 45    while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
Rule 46    while1 -> <empty>
Rule 47    while2 -> <empty>
Rule 48    while3 -> <empty>
Rule 49    loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
Rule 50    estatuto -> asignacion
Rule 51    estatuto -> condicion
Rule 52    estatuto -> escritura
Rule 53    estatuto -> while
Rule 54    estatuto -> loopFromDo
Rule 55    estatuto -> comparacion
Rule 56    estatuto -> llamadaAFuncion
Rule 57    estatuto -> lectura
Rule 58    llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
Rule 59    llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
Rule 60    actualizaFuncion -> <empty>
Rule 61    gosub -> <empty>
Rule 62    generarEra -> <empty>
Rule 63    paramFuncion -> ID push_id2
Rule 64    paramFuncion -> ID push_id2 COMA paramFuncion
Rule 65    paramFuncion -> expresion
Rule 66    paramFuncion -> expresion COMA paramFuncion
Rule 67    paramFuncion -> empty
Rule 68    push_id2 -> <empty>
Rule 69    asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON
Rule 70    create_asign -> <empty>
Rule 71    comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
Rule 72    condicion -> IF LPAREN expresion RPAREN cond bloque condFinal
Rule 73    condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
Rule 74    cond -> <empty>
Rule 75    condElse -> <empty>
Rule 76    condFinal -> <empty>
Rule 77    escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
Rule 78    lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
Rule 79    quad_print -> <empty>
Rule 80    escrituraAux -> expresion
Rule 81    escrituraAux -> CTE_STRING push_cte
Rule 82    escrituraAux -> expresion COMA escrituraAux
Rule 83    escrituraAux -> CTE_STRING push_cte COMA escrituraAux
Rule 84    escrituraAux -> llamadaAFuncion
Rule 85    expresion -> exp
Rule 86    expresion -> exp comp exp quad_comp
Rule 87    comp -> LOWERTHAN push_poper
Rule 88    comp -> MORETHAN push_poper
Rule 89    comp -> DIFFERENT push_poper
Rule 90    comp -> DOUBLEEQUAL push_poper
Rule 91    comp -> LOWEREQUAL push_poper
Rule 92    comp -> MOREEQUAL push_poper
Rule 93    quad_comp -> <empty>
Rule 94    exp -> termino quad_term
Rule 95    exp -> termino quad_term exp1
Rule 96    exp1 -> PLUS push_poper exp
Rule 97    exp1 -> MINUS push_poper exp
Rule 98    quad_term -> <empty>
Rule 99    quad_fact -> <empty>
Rule 100   termino -> factor quad_fact
Rule 101   termino -> factor quad_fact termino1
Rule 102   termino1 -> TIMES push_poper termino
Rule 103   termino1 -> DIVIDE push_poper termino
Rule 104   factor -> LPAREN expresion RPAREN
Rule 105   factor -> factorAux
Rule 106   factorAux -> PLUS push_poper var_cte
Rule 107   factorAux -> MINUS push_poper var_cte
Rule 108   factorAux -> var_cte
Rule 109   push_id -> <empty>
Rule 110   push_cte -> <empty>
Rule 111   push_poper -> <empty>
Rule 112   var_cte -> ID push_id
Rule 113   var_cte -> CTE_I push_cte
Rule 114   var_cte -> CTE_F push_cte
Rule 115   var_cte -> CTE_STRING push_cte

Terminals, with rules where they appear

AND                  : 
CHAR                 : 21 24
COLON                : 1 2 3 4
COMA                 : 10 18 38 64 66 82 83
CTE_F                : 114
CTE_I                : 113
CTE_STRING           : 81 83 115
DIFFERENT            : 89
DIVIDE               : 103
DO                   : 49
DOUBLEEQUAL          : 71 90
ELSE                 : 73
EQUAL                : 49 69
FLOAT                : 20 23
FROM                 : 49
FUNCTION             : 28 29 30 31 32 33 34 35
ID                   : 1 2 3 4 9 10 17 18 37 38 42 49 58 59 63 64 69 71 78 112
IF                   : 72 73
INPUT                : 78
INT                  : 19 22
LBRACE               : 11 12 26 27 28 29 30 31 32 33 34 35 45 49
LOWEREQUAL           : 91
LOWERTHAN            : 87
LPAREN               : 11 12 28 29 30 31 32 33 34 35 45 49 49 58 59 72 73 77 78 104
MAIN                 : 13
MINUS                : 97 107
MOREEQUAL            : 92
MORETHAN             : 88
OR                   : 
PLUS                 : 96 106
PRINT                : 77
PROGRAM              : 1 2 3 4
RBRACE               : 11 12 26 27 28 29 30 31 32 33 34 35 45 49
RPAREN               : 11 12 28 29 30 31 32 33 34 35 45 49 49 58 59 72 73 77 78 104
SEMICOLON            : 7 8 15 16 59 69 71 77 78
TIMES                : 102
TO                   : 49
VAR                  : 6 14
VOID                 : 25
WHILE                : 45
error                : 

Nonterminals, with rules where they appear

actualizaFuncion     : 58 59
asignacion           : 50
bloque               : 72 73 73
bloqueAux            : 11 12 27 29 31 33 35 44 45 49
comp                 : 86
comparacion          : 55
cond                 : 72 73
condElse             : 73
condFinal            : 72 73
condicion            : 51
create_asign         : 69
empty                : 39 67
endProc              : 11 12 28 29 30 31 32 33 34 35
endPrograma          : 1 2 3 4
escritura            : 52
escrituraAux         : 77 82 83
estatuto             : 43 44
exp                  : 85 86 86 96 97
exp1                 : 95
expresion            : 45 49 49 58 65 66 69 71 72 73 80 82 104
factor               : 100 101
factorAux            : 105
function             : 1 2 30 31 34 35
generarEra           : 58 59
gosub                : 58 59
lectura              : 57
llamadaAFuncion      : 56 84
loopFromDo           : 54
main                 : 1 2 3 4
nomFunc              : 28 29 30 31 32 33 34 35
nomMain              : 11 12
param                : 32 33 34 35 38
paramFuncion         : 58 59 64 66
program              : 0
push_cte             : 81 83 113 114 115
push_function        : 42
push_id              : 69 71 78 112
push_id2             : 63 64
push_poper           : 69 71 77 78 87 88 89 90 91 92 96 97 102 103 106 107
quad_comp            : 86
quad_fact            : 100 101
quad_print           : 77 78
quad_term            : 94 95
termino              : 94 95 102 103
termino1             : 101
tipo                 : 7 8 15 16 37 38
tipoFunc             : 28 29 30 31 32 33 34 35
varAux1              : 14 16
varAux2              : 15 16 18
varAuxGlobal1        : 6 8
varAuxGlobal2        : 7 8 10
var_cte              : 106 107 108
vars                 : 12 29 31 33 35
varsGlobal           : 1 3
while                : 53
while1               : 45
while2               : 45
while3               : 45

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID COLON varsGlobal function main endPrograma
    (2) program -> . PROGRAM ID COLON function main endPrograma
    (3) program -> . PROGRAM ID COLON varsGlobal main endPrograma
    (4) program -> . PROGRAM ID COLON main endPrograma

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID COLON varsGlobal function main endPrograma
    (2) program -> PROGRAM . ID COLON function main endPrograma
    (3) program -> PROGRAM . ID COLON varsGlobal main endPrograma
    (4) program -> PROGRAM . ID COLON main endPrograma

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . COLON varsGlobal function main endPrograma
    (2) program -> PROGRAM ID . COLON function main endPrograma
    (3) program -> PROGRAM ID . COLON varsGlobal main endPrograma
    (4) program -> PROGRAM ID . COLON main endPrograma

    COLON           shift and go to state 4


state 4

    (1) program -> PROGRAM ID COLON . varsGlobal function main endPrograma
    (2) program -> PROGRAM ID COLON . function main endPrograma
    (3) program -> PROGRAM ID COLON . varsGlobal main endPrograma
    (4) program -> PROGRAM ID COLON . main endPrograma
    (6) varsGlobal -> . VAR varAuxGlobal1
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (31) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (33) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (35) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (11) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc
    (12) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (13) nomMain -> . MAIN

    VAR             shift and go to state 10
    FUNCTION        shift and go to state 5
    MAIN            shift and go to state 11

    function                       shift and go to state 9
    varsGlobal                     shift and go to state 7
    nomMain                        shift and go to state 6
    main                           shift and go to state 8

state 5

    (28) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (29) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (31) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (33) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (35) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (22) tipoFunc -> . INT
    (23) tipoFunc -> . FLOAT
    (24) tipoFunc -> . CHAR
    (25) tipoFunc -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    VOID            shift and go to state 13

    tipoFunc                       shift and go to state 16

state 6

    (11) main -> nomMain . LPAREN RPAREN LBRACE bloqueAux RBRACE endProc
    (12) main -> nomMain . LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc

    LPAREN          shift and go to state 17


state 7

    (1) program -> PROGRAM ID COLON varsGlobal . function main endPrograma
    (3) program -> PROGRAM ID COLON varsGlobal . main endPrograma
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (31) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (33) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (35) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (11) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc
    (12) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (13) nomMain -> . MAIN

    FUNCTION        shift and go to state 5
    MAIN            shift and go to state 11

    function                       shift and go to state 18
    nomMain                        shift and go to state 6
    main                           shift and go to state 19

state 8

    (4) program -> PROGRAM ID COLON main . endPrograma
    (5) endPrograma -> .

    $end            reduce using rule 5 (endPrograma -> .)

    endPrograma                    shift and go to state 20

state 9

    (2) program -> PROGRAM ID COLON function . main endPrograma
    (11) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc
    (12) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (13) nomMain -> . MAIN

    MAIN            shift and go to state 11

    nomMain                        shift and go to state 6
    main                           shift and go to state 21

state 10

    (6) varsGlobal -> VAR . varAuxGlobal1
    (7) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON
    (8) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON varAuxGlobal1
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    varAuxGlobal1                  shift and go to state 26
    tipo                           shift and go to state 22

state 11

    (13) nomMain -> MAIN .

    LPAREN          reduce using rule 13 (nomMain -> MAIN .)


state 12

    (22) tipoFunc -> INT .

    ID              reduce using rule 22 (tipoFunc -> INT .)


state 13

    (25) tipoFunc -> VOID .

    ID              reduce using rule 25 (tipoFunc -> VOID .)


state 14

    (23) tipoFunc -> FLOAT .

    ID              reduce using rule 23 (tipoFunc -> FLOAT .)


state 15

    (24) tipoFunc -> CHAR .

    ID              reduce using rule 24 (tipoFunc -> CHAR .)


state 16

    (28) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (29) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (31) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (33) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (35) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (42) nomFunc -> . ID push_function

    ID              shift and go to state 28

    nomFunc                        shift and go to state 27

state 17

    (11) main -> nomMain LPAREN . RPAREN LBRACE bloqueAux RBRACE endProc
    (12) main -> nomMain LPAREN . RPAREN LBRACE vars bloqueAux RBRACE endProc

    RPAREN          shift and go to state 29


state 18

    (1) program -> PROGRAM ID COLON varsGlobal function . main endPrograma
    (11) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc
    (12) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (13) nomMain -> . MAIN

    MAIN            shift and go to state 11

    nomMain                        shift and go to state 6
    main                           shift and go to state 30

state 19

    (3) program -> PROGRAM ID COLON varsGlobal main . endPrograma
    (5) endPrograma -> .

    $end            reduce using rule 5 (endPrograma -> .)

    endPrograma                    shift and go to state 31

state 20

    (4) program -> PROGRAM ID COLON main endPrograma .

    $end            reduce using rule 4 (program -> PROGRAM ID COLON main endPrograma .)


state 21

    (2) program -> PROGRAM ID COLON function main . endPrograma
    (5) endPrograma -> .

    $end            reduce using rule 5 (endPrograma -> .)

    endPrograma                    shift and go to state 32

state 22

    (7) varAuxGlobal1 -> tipo . varAuxGlobal2 SEMICOLON
    (8) varAuxGlobal1 -> tipo . varAuxGlobal2 SEMICOLON varAuxGlobal1
    (9) varAuxGlobal2 -> . ID
    (10) varAuxGlobal2 -> . ID COMA varAuxGlobal2

    ID              shift and go to state 34

    varAuxGlobal2                  shift and go to state 33

state 23

    (19) tipo -> INT .

    ID              reduce using rule 19 (tipo -> INT .)


state 24

    (20) tipo -> FLOAT .

    ID              reduce using rule 20 (tipo -> FLOAT .)


state 25

    (21) tipo -> CHAR .

    ID              reduce using rule 21 (tipo -> CHAR .)


state 26

    (6) varsGlobal -> VAR varAuxGlobal1 .

    FUNCTION        reduce using rule 6 (varsGlobal -> VAR varAuxGlobal1 .)
    MAIN            reduce using rule 6 (varsGlobal -> VAR varAuxGlobal1 .)


state 27

    (28) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE RBRACE endProc
    (29) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE RBRACE endProc function
    (31) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE RBRACE endProc
    (33) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE RBRACE endProc function
    (35) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    LPAREN          shift and go to state 35


state 28

    (42) nomFunc -> ID . push_function
    (41) push_function -> .

    LPAREN          reduce using rule 41 (push_function -> .)

    push_function                  shift and go to state 36

state 29

    (11) main -> nomMain LPAREN RPAREN . LBRACE bloqueAux RBRACE endProc
    (12) main -> nomMain LPAREN RPAREN . LBRACE vars bloqueAux RBRACE endProc

    LBRACE          shift and go to state 37


state 30

    (1) program -> PROGRAM ID COLON varsGlobal function main . endPrograma
    (5) endPrograma -> .

    $end            reduce using rule 5 (endPrograma -> .)

    endPrograma                    shift and go to state 38

state 31

    (3) program -> PROGRAM ID COLON varsGlobal main endPrograma .

    $end            reduce using rule 3 (program -> PROGRAM ID COLON varsGlobal main endPrograma .)


state 32

    (2) program -> PROGRAM ID COLON function main endPrograma .

    $end            reduce using rule 2 (program -> PROGRAM ID COLON function main endPrograma .)


state 33

    (7) varAuxGlobal1 -> tipo varAuxGlobal2 . SEMICOLON
    (8) varAuxGlobal1 -> tipo varAuxGlobal2 . SEMICOLON varAuxGlobal1

    SEMICOLON       shift and go to state 39


state 34

    (9) varAuxGlobal2 -> ID .
    (10) varAuxGlobal2 -> ID . COMA varAuxGlobal2

    SEMICOLON       reduce using rule 9 (varAuxGlobal2 -> ID .)
    COMA            shift and go to state 40


state 35

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE RBRACE endProc
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE RBRACE endProc function
    (31) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE RBRACE endProc
    (33) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE RBRACE endProc function
    (35) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (37) param -> . tipo ID
    (38) param -> . tipo ID COMA param
    (39) param -> . empty
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR
    (40) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 41
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

  ! RPAREN          [ reduce using rule 40 (empty -> .) ]

    tipo                           shift and go to state 44
    param                          shift and go to state 42
    empty                          shift and go to state 43

state 36

    (42) nomFunc -> ID push_function .

    LPAREN          reduce using rule 42 (nomFunc -> ID push_function .)


state 37

    (11) main -> nomMain LPAREN RPAREN LBRACE . bloqueAux RBRACE endProc
    (12) main -> nomMain LPAREN RPAREN LBRACE . vars bloqueAux RBRACE endProc
    (43) bloqueAux -> . estatuto
    (44) bloqueAux -> . estatuto bloqueAux
    (14) vars -> . VAR varAux1
    (50) estatuto -> . asignacion
    (51) estatuto -> . condicion
    (52) estatuto -> . escritura
    (53) estatuto -> . while
    (54) estatuto -> . loopFromDo
    (55) estatuto -> . comparacion
    (56) estatuto -> . llamadaAFuncion
    (57) estatuto -> . lectura
    (69) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (72) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (73) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (77) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (45) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (49) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (71) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (59) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (78) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON

    VAR             shift and go to state 51
    ID              shift and go to state 53
    IF              shift and go to state 48
    PRINT           shift and go to state 46
    WHILE           shift and go to state 58
    FROM            shift and go to state 56
    INPUT           shift and go to state 52

    vars                           shift and go to state 45
    estatuto                       shift and go to state 47
    lectura                        shift and go to state 49
    condicion                      shift and go to state 50
    loopFromDo                     shift and go to state 54
    llamadaAFuncion                shift and go to state 55
    asignacion                     shift and go to state 57
    bloqueAux                      shift and go to state 59
    while                          shift and go to state 60
    comparacion                    shift and go to state 61
    escritura                      shift and go to state 62

state 38

    (1) program -> PROGRAM ID COLON varsGlobal function main endPrograma .

    $end            reduce using rule 1 (program -> PROGRAM ID COLON varsGlobal function main endPrograma .)


state 39

    (7) varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON .
    (8) varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON . varAuxGlobal1
    (7) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON
    (8) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON varAuxGlobal1
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR

    FUNCTION        reduce using rule 7 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON .)
    MAIN            reduce using rule 7 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON .)
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    varAuxGlobal1                  shift and go to state 63
    tipo                           shift and go to state 22

state 40

    (10) varAuxGlobal2 -> ID COMA . varAuxGlobal2
    (9) varAuxGlobal2 -> . ID
    (10) varAuxGlobal2 -> . ID COMA varAuxGlobal2

    ID              shift and go to state 34

    varAuxGlobal2                  shift and go to state 64

state 41

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE RBRACE endProc
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux RBRACE endProc
    (30) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE RBRACE endProc function
    (31) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux RBRACE endProc function

    LBRACE          shift and go to state 65


state 42

    (32) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE RBRACE endProc
    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE RBRACE endProc function
    (35) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux RBRACE endProc function

    RPAREN          shift and go to state 66


state 43

    (39) param -> empty .

    RPAREN          reduce using rule 39 (param -> empty .)


state 44

    (37) param -> tipo . ID
    (38) param -> tipo . ID COMA param

    ID              shift and go to state 67


state 45

    (12) main -> nomMain LPAREN RPAREN LBRACE vars . bloqueAux RBRACE endProc
    (43) bloqueAux -> . estatuto
    (44) bloqueAux -> . estatuto bloqueAux
    (50) estatuto -> . asignacion
    (51) estatuto -> . condicion
    (52) estatuto -> . escritura
    (53) estatuto -> . while
    (54) estatuto -> . loopFromDo
    (55) estatuto -> . comparacion
    (56) estatuto -> . llamadaAFuncion
    (57) estatuto -> . lectura
    (69) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (72) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (73) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (77) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (45) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (49) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (71) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (59) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (78) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON

    ID              shift and go to state 53
    IF              shift and go to state 48
    PRINT           shift and go to state 46
    WHILE           shift and go to state 58
    FROM            shift and go to state 56
    INPUT           shift and go to state 52

    estatuto                       shift and go to state 47
    condicion                      shift and go to state 50
    lectura                        shift and go to state 49
    loopFromDo                     shift and go to state 54
    llamadaAFuncion                shift and go to state 55
    asignacion                     shift and go to state 57
    bloqueAux                      shift and go to state 68
    while                          shift and go to state 60
    comparacion                    shift and go to state 61
    escritura                      shift and go to state 62

state 46

    (77) escritura -> PRINT . push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (111) push_poper -> .

    LPAREN          reduce using rule 111 (push_poper -> .)

    push_poper                     shift and go to state 69

state 47

    (43) bloqueAux -> estatuto .
    (44) bloqueAux -> estatuto . bloqueAux
    (43) bloqueAux -> . estatuto
    (44) bloqueAux -> . estatuto bloqueAux
    (50) estatuto -> . asignacion
    (51) estatuto -> . condicion
    (52) estatuto -> . escritura
    (53) estatuto -> . while
    (54) estatuto -> . loopFromDo
    (55) estatuto -> . comparacion
    (56) estatuto -> . llamadaAFuncion
    (57) estatuto -> . lectura
    (69) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (72) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (73) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (77) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (45) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (49) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (71) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (59) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (78) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON

    RBRACE          reduce using rule 43 (bloqueAux -> estatuto .)
    ID              shift and go to state 53
    IF              shift and go to state 48
    PRINT           shift and go to state 46
    WHILE           shift and go to state 58
    FROM            shift and go to state 56
    INPUT           shift and go to state 52

    estatuto                       shift and go to state 47
    condicion                      shift and go to state 50
    lectura                        shift and go to state 49
    loopFromDo                     shift and go to state 54
    llamadaAFuncion                shift and go to state 55
    asignacion                     shift and go to state 57
    bloqueAux                      shift and go to state 70
    while                          shift and go to state 60
    comparacion                    shift and go to state 61
    escritura                      shift and go to state 62

state 48

    (72) condicion -> IF . LPAREN expresion RPAREN cond bloque condFinal
    (73) condicion -> IF . LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal

    LPAREN          shift and go to state 71


state 49

    (57) estatuto -> lectura .

    ID              reduce using rule 57 (estatuto -> lectura .)
    IF              reduce using rule 57 (estatuto -> lectura .)
    PRINT           reduce using rule 57 (estatuto -> lectura .)
    WHILE           reduce using rule 57 (estatuto -> lectura .)
    FROM            reduce using rule 57 (estatuto -> lectura .)
    INPUT           reduce using rule 57 (estatuto -> lectura .)
    RBRACE          reduce using rule 57 (estatuto -> lectura .)


state 50

    (51) estatuto -> condicion .

    ID              reduce using rule 51 (estatuto -> condicion .)
    IF              reduce using rule 51 (estatuto -> condicion .)
    PRINT           reduce using rule 51 (estatuto -> condicion .)
    WHILE           reduce using rule 51 (estatuto -> condicion .)
    FROM            reduce using rule 51 (estatuto -> condicion .)
    INPUT           reduce using rule 51 (estatuto -> condicion .)
    RBRACE          reduce using rule 51 (estatuto -> condicion .)


state 51

    (14) vars -> VAR . varAux1
    (15) varAux1 -> . tipo varAux2 SEMICOLON
    (16) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    varAux1                        shift and go to state 73
    tipo                           shift and go to state 72

state 52

    (78) lectura -> INPUT . push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (111) push_poper -> .

    LPAREN          reduce using rule 111 (push_poper -> .)

    push_poper                     shift and go to state 74

state 53

    (69) asignacion -> ID . push_id EQUAL push_poper expresion create_asign SEMICOLON
    (71) comparacion -> ID . push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (58) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (59) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (109) push_id -> .
    (60) actualizaFuncion -> .

    EQUAL           reduce using rule 109 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 109 (push_id -> .)
    LPAREN          reduce using rule 60 (actualizaFuncion -> .)

    actualizaFuncion               shift and go to state 75
    push_id                        shift and go to state 76

state 54

    (54) estatuto -> loopFromDo .

    ID              reduce using rule 54 (estatuto -> loopFromDo .)
    IF              reduce using rule 54 (estatuto -> loopFromDo .)
    PRINT           reduce using rule 54 (estatuto -> loopFromDo .)
    WHILE           reduce using rule 54 (estatuto -> loopFromDo .)
    FROM            reduce using rule 54 (estatuto -> loopFromDo .)
    INPUT           reduce using rule 54 (estatuto -> loopFromDo .)
    RBRACE          reduce using rule 54 (estatuto -> loopFromDo .)


state 55

    (56) estatuto -> llamadaAFuncion .

    ID              reduce using rule 56 (estatuto -> llamadaAFuncion .)
    IF              reduce using rule 56 (estatuto -> llamadaAFuncion .)
    PRINT           reduce using rule 56 (estatuto -> llamadaAFuncion .)
    WHILE           reduce using rule 56 (estatuto -> llamadaAFuncion .)
    FROM            reduce using rule 56 (estatuto -> llamadaAFuncion .)
    INPUT           reduce using rule 56 (estatuto -> llamadaAFuncion .)
    RBRACE          reduce using rule 56 (estatuto -> llamadaAFuncion .)


state 56

    (49) loopFromDo -> FROM . LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    LPAREN          shift and go to state 77


state 57

    (50) estatuto -> asignacion .

    ID              reduce using rule 50 (estatuto -> asignacion .)
    IF              reduce using rule 50 (estatuto -> asignacion .)
    PRINT           reduce using rule 50 (estatuto -> asignacion .)
    WHILE           reduce using rule 50 (estatuto -> asignacion .)
    FROM            reduce using rule 50 (estatuto -> asignacion .)
    INPUT           reduce using rule 50 (estatuto -> asignacion .)
    RBRACE          reduce using rule 50 (estatuto -> asignacion .)


state 58

    (45) while -> WHILE . while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (46) while1 -> .

    LPAREN          reduce using rule 46 (while1 -> .)

    while1                         shift and go to state 78

state 59

    (11) main -> nomMain LPAREN RPAREN LBRACE bloqueAux . RBRACE endProc

    RBRACE          shift and go to state 79


state 60

    (53) estatuto -> while .

    ID              reduce using rule 53 (estatuto -> while .)
    IF              reduce using rule 53 (estatuto -> while .)
    PRINT           reduce using rule 53 (estatuto -> while .)
    WHILE           reduce using rule 53 (estatuto -> while .)
    FROM            reduce using rule 53 (estatuto -> while .)
    INPUT           reduce using rule 53 (estatuto -> while .)
    RBRACE          reduce using rule 53 (estatuto -> while .)


state 61

    (55) estatuto -> comparacion .

    ID              reduce using rule 55 (estatuto -> comparacion .)
    IF              reduce using rule 55 (estatuto -> comparacion .)
    PRINT           reduce using rule 55 (estatuto -> comparacion .)
    WHILE           reduce using rule 55 (estatuto -> comparacion .)
    FROM            reduce using rule 55 (estatuto -> comparacion .)
    INPUT           reduce using rule 55 (estatuto -> comparacion .)
    RBRACE          reduce using rule 55 (estatuto -> comparacion .)


state 62

    (52) estatuto -> escritura .

    ID              reduce using rule 52 (estatuto -> escritura .)
    IF              reduce using rule 52 (estatuto -> escritura .)
    PRINT           reduce using rule 52 (estatuto -> escritura .)
    WHILE           reduce using rule 52 (estatuto -> escritura .)
    FROM            reduce using rule 52 (estatuto -> escritura .)
    INPUT           reduce using rule 52 (estatuto -> escritura .)
    RBRACE          reduce using rule 52 (estatuto -> escritura .)


state 63

    (8) varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1 .

    FUNCTION        reduce using rule 8 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1 .)
    MAIN            reduce using rule 8 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1 .)


state 64

    (10) varAuxGlobal2 -> ID COMA varAuxGlobal2 .

    SEMICOLON       reduce using rule 10 (varAuxGlobal2 -> ID COMA varAuxGlobal2 .)


state 65

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . RBRACE endProc
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux RBRACE endProc
    (30) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . RBRACE endProc function
    (31) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux RBRACE endProc function
    (14) vars -> . VAR varAux1

    RBRACE          shift and go to state 80
    VAR             shift and go to state 51

    vars                           shift and go to state 81

state 66

    (32) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE RBRACE endProc
    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux RBRACE endProc
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE RBRACE endProc function
    (35) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux RBRACE endProc function

    LBRACE          shift and go to state 82


state 67

    (37) param -> tipo ID .
    (38) param -> tipo ID . COMA param

    RPAREN          reduce using rule 37 (param -> tipo ID .)
    COMA            shift and go to state 83


state 68

    (12) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux . RBRACE endProc

    RBRACE          shift and go to state 84


state 69

    (77) escritura -> PRINT push_poper . LPAREN escrituraAux RPAREN quad_print SEMICOLON

    LPAREN          shift and go to state 85


state 70

    (44) bloqueAux -> estatuto bloqueAux .

    RBRACE          reduce using rule 44 (bloqueAux -> estatuto bloqueAux .)


state 71

    (72) condicion -> IF LPAREN . expresion RPAREN cond bloque condFinal
    (73) condicion -> IF LPAREN . expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (85) expresion -> . exp
    (86) expresion -> . exp comp exp quad_comp
    (94) exp -> . termino quad_term
    (95) exp -> . termino quad_term exp1
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    ID              shift and go to state 95
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91
    CTE_STRING      shift and go to state 92

    expresion                      shift and go to state 96
    factor                         shift and go to state 90
    termino                        shift and go to state 87
    exp                            shift and go to state 97
    factorAux                      shift and go to state 98
    var_cte                        shift and go to state 86

state 72

    (15) varAux1 -> tipo . varAux2 SEMICOLON
    (16) varAux1 -> tipo . varAux2 SEMICOLON varAux1
    (17) varAux2 -> . ID
    (18) varAux2 -> . ID COMA varAux2

    ID              shift and go to state 100

    varAux2                        shift and go to state 99

state 73

    (14) vars -> VAR varAux1 .

    ID              reduce using rule 14 (vars -> VAR varAux1 .)
    IF              reduce using rule 14 (vars -> VAR varAux1 .)
    PRINT           reduce using rule 14 (vars -> VAR varAux1 .)
    WHILE           reduce using rule 14 (vars -> VAR varAux1 .)
    FROM            reduce using rule 14 (vars -> VAR varAux1 .)
    INPUT           reduce using rule 14 (vars -> VAR varAux1 .)


state 74

    (78) lectura -> INPUT push_poper . LPAREN ID push_id RPAREN quad_print SEMICOLON

    LPAREN          shift and go to state 101


state 75

    (58) llamadaAFuncion -> ID actualizaFuncion . generarEra LPAREN paramFuncion gosub RPAREN expresion
    (59) llamadaAFuncion -> ID actualizaFuncion . generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (62) generarEra -> .

    LPAREN          reduce using rule 62 (generarEra -> .)

    generarEra                     shift and go to state 102

state 76

    (69) asignacion -> ID push_id . EQUAL push_poper expresion create_asign SEMICOLON
    (71) comparacion -> ID push_id . DOUBLEEQUAL push_poper expresion SEMICOLON

    EQUAL           shift and go to state 104
    DOUBLEEQUAL     shift and go to state 103


state 77

    (49) loopFromDo -> FROM LPAREN . ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    ID              shift and go to state 105


state 78

    (45) while -> WHILE while1 . LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3

    LPAREN          shift and go to state 106


state 79

    (11) main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE . endProc
    (36) endProc -> .

    $end            reduce using rule 36 (endProc -> .)

    endProc                        shift and go to state 107

state 80

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE . endProc
    (30) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE . endProc function
    (36) endProc -> .

    FUNCTION        reduce using rule 36 (endProc -> .)
    MAIN            reduce using rule 36 (endProc -> .)

    endProc                        shift and go to state 108

state 81

    (29) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux RBRACE endProc
    (31) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux RBRACE endProc function
    (43) bloqueAux -> . estatuto
    (44) bloqueAux -> . estatuto bloqueAux
    (50) estatuto -> . asignacion
    (51) estatuto -> . condicion
    (52) estatuto -> . escritura
    (53) estatuto -> . while
    (54) estatuto -> . loopFromDo
    (55) estatuto -> . comparacion
    (56) estatuto -> . llamadaAFuncion
    (57) estatuto -> . lectura
    (69) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (72) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (73) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (77) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (45) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (49) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (71) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (59) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (78) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON

    ID              shift and go to state 53
    IF              shift and go to state 48
    PRINT           shift and go to state 46
    WHILE           shift and go to state 58
    FROM            shift and go to state 56
    INPUT           shift and go to state 52

    estatuto                       shift and go to state 47
    condicion                      shift and go to state 50
    lectura                        shift and go to state 49
    loopFromDo                     shift and go to state 54
    llamadaAFuncion                shift and go to state 55
    asignacion                     shift and go to state 57
    bloqueAux                      shift and go to state 109
    while                          shift and go to state 60
    comparacion                    shift and go to state 61
    escritura                      shift and go to state 62

state 82

    (32) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . RBRACE endProc
    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux RBRACE endProc
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . RBRACE endProc function
    (35) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux RBRACE endProc function
    (14) vars -> . VAR varAux1

    RBRACE          shift and go to state 110
    VAR             shift and go to state 51

    vars                           shift and go to state 111

state 83

    (38) param -> tipo ID COMA . param
    (37) param -> . tipo ID
    (38) param -> . tipo ID COMA param
    (39) param -> . empty
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR
    (40) empty -> .

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25
    RPAREN          reduce using rule 40 (empty -> .)

    empty                          shift and go to state 43
    param                          shift and go to state 112
    tipo                           shift and go to state 44

state 84

    (12) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE . endProc
    (36) endProc -> .

    $end            reduce using rule 36 (endProc -> .)

    endProc                        shift and go to state 113

state 85

    (77) escritura -> PRINT push_poper LPAREN . escrituraAux RPAREN quad_print SEMICOLON
    (80) escrituraAux -> . expresion
    (81) escrituraAux -> . CTE_STRING push_cte
    (82) escrituraAux -> . expresion COMA escrituraAux
    (83) escrituraAux -> . CTE_STRING push_cte COMA escrituraAux
    (84) escrituraAux -> . llamadaAFuncion
    (85) expresion -> . exp
    (86) expresion -> . exp comp exp quad_comp
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (59) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (94) exp -> . termino quad_term
    (95) exp -> . termino quad_term exp1
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    CTE_STRING      shift and go to state 114
    ID              shift and go to state 116
    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91

    termino                        shift and go to state 87
    factor                         shift and go to state 90
    expresion                      shift and go to state 115
    var_cte                        shift and go to state 86
    escrituraAux                   shift and go to state 117
    llamadaAFuncion                shift and go to state 118
    exp                            shift and go to state 97
    factorAux                      shift and go to state 98

state 86

    (108) factorAux -> var_cte .

    TIMES           reduce using rule 108 (factorAux -> var_cte .)
    DIVIDE          reduce using rule 108 (factorAux -> var_cte .)
    PLUS            reduce using rule 108 (factorAux -> var_cte .)
    MINUS           reduce using rule 108 (factorAux -> var_cte .)
    LOWERTHAN       reduce using rule 108 (factorAux -> var_cte .)
    MORETHAN        reduce using rule 108 (factorAux -> var_cte .)
    DIFFERENT       reduce using rule 108 (factorAux -> var_cte .)
    DOUBLEEQUAL     reduce using rule 108 (factorAux -> var_cte .)
    LOWEREQUAL      reduce using rule 108 (factorAux -> var_cte .)
    MOREEQUAL       reduce using rule 108 (factorAux -> var_cte .)
    RPAREN          reduce using rule 108 (factorAux -> var_cte .)
    COMA            reduce using rule 108 (factorAux -> var_cte .)
    SEMICOLON       reduce using rule 108 (factorAux -> var_cte .)
    ID              reduce using rule 108 (factorAux -> var_cte .)
    IF              reduce using rule 108 (factorAux -> var_cte .)
    PRINT           reduce using rule 108 (factorAux -> var_cte .)
    WHILE           reduce using rule 108 (factorAux -> var_cte .)
    FROM            reduce using rule 108 (factorAux -> var_cte .)
    INPUT           reduce using rule 108 (factorAux -> var_cte .)
    RBRACE          reduce using rule 108 (factorAux -> var_cte .)


state 87

    (94) exp -> termino . quad_term
    (95) exp -> termino . quad_term exp1
    (98) quad_term -> .

    PLUS            reduce using rule 98 (quad_term -> .)
    MINUS           reduce using rule 98 (quad_term -> .)
    LOWERTHAN       reduce using rule 98 (quad_term -> .)
    MORETHAN        reduce using rule 98 (quad_term -> .)
    DIFFERENT       reduce using rule 98 (quad_term -> .)
    DOUBLEEQUAL     reduce using rule 98 (quad_term -> .)
    LOWEREQUAL      reduce using rule 98 (quad_term -> .)
    MOREEQUAL       reduce using rule 98 (quad_term -> .)
    RPAREN          reduce using rule 98 (quad_term -> .)
    COMA            reduce using rule 98 (quad_term -> .)
    SEMICOLON       reduce using rule 98 (quad_term -> .)
    ID              reduce using rule 98 (quad_term -> .)
    IF              reduce using rule 98 (quad_term -> .)
    PRINT           reduce using rule 98 (quad_term -> .)
    WHILE           reduce using rule 98 (quad_term -> .)
    FROM            reduce using rule 98 (quad_term -> .)
    INPUT           reduce using rule 98 (quad_term -> .)
    RBRACE          reduce using rule 98 (quad_term -> .)

    quad_term                      shift and go to state 119

state 88

    (107) factorAux -> MINUS . push_poper var_cte
    (111) push_poper -> .

    ID              reduce using rule 111 (push_poper -> .)
    CTE_I           reduce using rule 111 (push_poper -> .)
    CTE_F           reduce using rule 111 (push_poper -> .)
    CTE_STRING      reduce using rule 111 (push_poper -> .)

    push_poper                     shift and go to state 120

state 89

    (106) factorAux -> PLUS . push_poper var_cte
    (111) push_poper -> .

    ID              reduce using rule 111 (push_poper -> .)
    CTE_I           reduce using rule 111 (push_poper -> .)
    CTE_F           reduce using rule 111 (push_poper -> .)
    CTE_STRING      reduce using rule 111 (push_poper -> .)

    push_poper                     shift and go to state 121

state 90

    (100) termino -> factor . quad_fact
    (101) termino -> factor . quad_fact termino1
    (99) quad_fact -> .

    TIMES           reduce using rule 99 (quad_fact -> .)
    DIVIDE          reduce using rule 99 (quad_fact -> .)
    PLUS            reduce using rule 99 (quad_fact -> .)
    MINUS           reduce using rule 99 (quad_fact -> .)
    LOWERTHAN       reduce using rule 99 (quad_fact -> .)
    MORETHAN        reduce using rule 99 (quad_fact -> .)
    DIFFERENT       reduce using rule 99 (quad_fact -> .)
    DOUBLEEQUAL     reduce using rule 99 (quad_fact -> .)
    LOWEREQUAL      reduce using rule 99 (quad_fact -> .)
    MOREEQUAL       reduce using rule 99 (quad_fact -> .)
    RPAREN          reduce using rule 99 (quad_fact -> .)
    COMA            reduce using rule 99 (quad_fact -> .)
    SEMICOLON       reduce using rule 99 (quad_fact -> .)
    ID              reduce using rule 99 (quad_fact -> .)
    IF              reduce using rule 99 (quad_fact -> .)
    PRINT           reduce using rule 99 (quad_fact -> .)
    WHILE           reduce using rule 99 (quad_fact -> .)
    FROM            reduce using rule 99 (quad_fact -> .)
    INPUT           reduce using rule 99 (quad_fact -> .)
    RBRACE          reduce using rule 99 (quad_fact -> .)

    quad_fact                      shift and go to state 122

state 91

    (114) var_cte -> CTE_F . push_cte
    (110) push_cte -> .

    TIMES           reduce using rule 110 (push_cte -> .)
    DIVIDE          reduce using rule 110 (push_cte -> .)
    PLUS            reduce using rule 110 (push_cte -> .)
    MINUS           reduce using rule 110 (push_cte -> .)
    LOWERTHAN       reduce using rule 110 (push_cte -> .)
    MORETHAN        reduce using rule 110 (push_cte -> .)
    DIFFERENT       reduce using rule 110 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 110 (push_cte -> .)
    LOWEREQUAL      reduce using rule 110 (push_cte -> .)
    MOREEQUAL       reduce using rule 110 (push_cte -> .)
    RPAREN          reduce using rule 110 (push_cte -> .)
    COMA            reduce using rule 110 (push_cte -> .)
    SEMICOLON       reduce using rule 110 (push_cte -> .)
    ID              reduce using rule 110 (push_cte -> .)
    IF              reduce using rule 110 (push_cte -> .)
    PRINT           reduce using rule 110 (push_cte -> .)
    WHILE           reduce using rule 110 (push_cte -> .)
    FROM            reduce using rule 110 (push_cte -> .)
    INPUT           reduce using rule 110 (push_cte -> .)
    RBRACE          reduce using rule 110 (push_cte -> .)

    push_cte                       shift and go to state 123

state 92

    (115) var_cte -> CTE_STRING . push_cte
    (110) push_cte -> .

    TIMES           reduce using rule 110 (push_cte -> .)
    DIVIDE          reduce using rule 110 (push_cte -> .)
    PLUS            reduce using rule 110 (push_cte -> .)
    MINUS           reduce using rule 110 (push_cte -> .)
    LOWERTHAN       reduce using rule 110 (push_cte -> .)
    MORETHAN        reduce using rule 110 (push_cte -> .)
    DIFFERENT       reduce using rule 110 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 110 (push_cte -> .)
    LOWEREQUAL      reduce using rule 110 (push_cte -> .)
    MOREEQUAL       reduce using rule 110 (push_cte -> .)
    RPAREN          reduce using rule 110 (push_cte -> .)
    COMA            reduce using rule 110 (push_cte -> .)
    SEMICOLON       reduce using rule 110 (push_cte -> .)
    ID              reduce using rule 110 (push_cte -> .)
    IF              reduce using rule 110 (push_cte -> .)
    PRINT           reduce using rule 110 (push_cte -> .)
    WHILE           reduce using rule 110 (push_cte -> .)
    FROM            reduce using rule 110 (push_cte -> .)
    INPUT           reduce using rule 110 (push_cte -> .)
    RBRACE          reduce using rule 110 (push_cte -> .)

    push_cte                       shift and go to state 124

state 93

    (113) var_cte -> CTE_I . push_cte
    (110) push_cte -> .

    TIMES           reduce using rule 110 (push_cte -> .)
    DIVIDE          reduce using rule 110 (push_cte -> .)
    PLUS            reduce using rule 110 (push_cte -> .)
    MINUS           reduce using rule 110 (push_cte -> .)
    LOWERTHAN       reduce using rule 110 (push_cte -> .)
    MORETHAN        reduce using rule 110 (push_cte -> .)
    DIFFERENT       reduce using rule 110 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 110 (push_cte -> .)
    LOWEREQUAL      reduce using rule 110 (push_cte -> .)
    MOREEQUAL       reduce using rule 110 (push_cte -> .)
    RPAREN          reduce using rule 110 (push_cte -> .)
    COMA            reduce using rule 110 (push_cte -> .)
    SEMICOLON       reduce using rule 110 (push_cte -> .)
    ID              reduce using rule 110 (push_cte -> .)
    IF              reduce using rule 110 (push_cte -> .)
    PRINT           reduce using rule 110 (push_cte -> .)
    WHILE           reduce using rule 110 (push_cte -> .)
    FROM            reduce using rule 110 (push_cte -> .)
    INPUT           reduce using rule 110 (push_cte -> .)
    RBRACE          reduce using rule 110 (push_cte -> .)

    push_cte                       shift and go to state 125

state 94

    (104) factor -> LPAREN . expresion RPAREN
    (85) expresion -> . exp
    (86) expresion -> . exp comp exp quad_comp
    (94) exp -> . termino quad_term
    (95) exp -> . termino quad_term exp1
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    ID              shift and go to state 95
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91
    CTE_STRING      shift and go to state 92

    expresion                      shift and go to state 126
    factor                         shift and go to state 90
    termino                        shift and go to state 87
    exp                            shift and go to state 97
    factorAux                      shift and go to state 98
    var_cte                        shift and go to state 86

state 95

    (112) var_cte -> ID . push_id
    (109) push_id -> .

    TIMES           reduce using rule 109 (push_id -> .)
    DIVIDE          reduce using rule 109 (push_id -> .)
    PLUS            reduce using rule 109 (push_id -> .)
    MINUS           reduce using rule 109 (push_id -> .)
    LOWERTHAN       reduce using rule 109 (push_id -> .)
    MORETHAN        reduce using rule 109 (push_id -> .)
    DIFFERENT       reduce using rule 109 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 109 (push_id -> .)
    LOWEREQUAL      reduce using rule 109 (push_id -> .)
    MOREEQUAL       reduce using rule 109 (push_id -> .)
    RPAREN          reduce using rule 109 (push_id -> .)
    COMA            reduce using rule 109 (push_id -> .)
    SEMICOLON       reduce using rule 109 (push_id -> .)
    ID              reduce using rule 109 (push_id -> .)
    IF              reduce using rule 109 (push_id -> .)
    PRINT           reduce using rule 109 (push_id -> .)
    WHILE           reduce using rule 109 (push_id -> .)
    FROM            reduce using rule 109 (push_id -> .)
    INPUT           reduce using rule 109 (push_id -> .)
    RBRACE          reduce using rule 109 (push_id -> .)

    push_id                        shift and go to state 127

state 96

    (72) condicion -> IF LPAREN expresion . RPAREN cond bloque condFinal
    (73) condicion -> IF LPAREN expresion . RPAREN cond bloque ELSE condElse bloque condFinal

    RPAREN          shift and go to state 128


state 97

    (85) expresion -> exp .
    (86) expresion -> exp . comp exp quad_comp
    (87) comp -> . LOWERTHAN push_poper
    (88) comp -> . MORETHAN push_poper
    (89) comp -> . DIFFERENT push_poper
    (90) comp -> . DOUBLEEQUAL push_poper
    (91) comp -> . LOWEREQUAL push_poper
    (92) comp -> . MOREEQUAL push_poper

    COMA            reduce using rule 85 (expresion -> exp .)
    RPAREN          reduce using rule 85 (expresion -> exp .)
    SEMICOLON       reduce using rule 85 (expresion -> exp .)
    ID              reduce using rule 85 (expresion -> exp .)
    IF              reduce using rule 85 (expresion -> exp .)
    PRINT           reduce using rule 85 (expresion -> exp .)
    WHILE           reduce using rule 85 (expresion -> exp .)
    FROM            reduce using rule 85 (expresion -> exp .)
    INPUT           reduce using rule 85 (expresion -> exp .)
    RBRACE          reduce using rule 85 (expresion -> exp .)
    LOWERTHAN       shift and go to state 132
    MORETHAN        shift and go to state 135
    DIFFERENT       shift and go to state 130
    DOUBLEEQUAL     shift and go to state 131
    LOWEREQUAL      shift and go to state 134
    MOREEQUAL       shift and go to state 129

    comp                           shift and go to state 133

state 98

    (105) factor -> factorAux .

    TIMES           reduce using rule 105 (factor -> factorAux .)
    DIVIDE          reduce using rule 105 (factor -> factorAux .)
    PLUS            reduce using rule 105 (factor -> factorAux .)
    MINUS           reduce using rule 105 (factor -> factorAux .)
    LOWERTHAN       reduce using rule 105 (factor -> factorAux .)
    MORETHAN        reduce using rule 105 (factor -> factorAux .)
    DIFFERENT       reduce using rule 105 (factor -> factorAux .)
    DOUBLEEQUAL     reduce using rule 105 (factor -> factorAux .)
    LOWEREQUAL      reduce using rule 105 (factor -> factorAux .)
    MOREEQUAL       reduce using rule 105 (factor -> factorAux .)
    RPAREN          reduce using rule 105 (factor -> factorAux .)
    SEMICOLON       reduce using rule 105 (factor -> factorAux .)
    COMA            reduce using rule 105 (factor -> factorAux .)
    ID              reduce using rule 105 (factor -> factorAux .)
    IF              reduce using rule 105 (factor -> factorAux .)
    PRINT           reduce using rule 105 (factor -> factorAux .)
    WHILE           reduce using rule 105 (factor -> factorAux .)
    FROM            reduce using rule 105 (factor -> factorAux .)
    INPUT           reduce using rule 105 (factor -> factorAux .)
    RBRACE          reduce using rule 105 (factor -> factorAux .)


state 99

    (15) varAux1 -> tipo varAux2 . SEMICOLON
    (16) varAux1 -> tipo varAux2 . SEMICOLON varAux1

    SEMICOLON       shift and go to state 136


state 100

    (17) varAux2 -> ID .
    (18) varAux2 -> ID . COMA varAux2

    SEMICOLON       reduce using rule 17 (varAux2 -> ID .)
    COMA            shift and go to state 137


state 101

    (78) lectura -> INPUT push_poper LPAREN . ID push_id RPAREN quad_print SEMICOLON

    ID              shift and go to state 138


state 102

    (58) llamadaAFuncion -> ID actualizaFuncion generarEra . LPAREN paramFuncion gosub RPAREN expresion
    (59) llamadaAFuncion -> ID actualizaFuncion generarEra . LPAREN paramFuncion gosub RPAREN SEMICOLON

    LPAREN          shift and go to state 139


state 103

    (71) comparacion -> ID push_id DOUBLEEQUAL . push_poper expresion SEMICOLON
    (111) push_poper -> .

    LPAREN          reduce using rule 111 (push_poper -> .)
    PLUS            reduce using rule 111 (push_poper -> .)
    MINUS           reduce using rule 111 (push_poper -> .)
    ID              reduce using rule 111 (push_poper -> .)
    CTE_I           reduce using rule 111 (push_poper -> .)
    CTE_F           reduce using rule 111 (push_poper -> .)
    CTE_STRING      reduce using rule 111 (push_poper -> .)

    push_poper                     shift and go to state 140

state 104

    (69) asignacion -> ID push_id EQUAL . push_poper expresion create_asign SEMICOLON
    (111) push_poper -> .

    LPAREN          reduce using rule 111 (push_poper -> .)
    PLUS            reduce using rule 111 (push_poper -> .)
    MINUS           reduce using rule 111 (push_poper -> .)
    ID              reduce using rule 111 (push_poper -> .)
    CTE_I           reduce using rule 111 (push_poper -> .)
    CTE_F           reduce using rule 111 (push_poper -> .)
    CTE_STRING      reduce using rule 111 (push_poper -> .)

    push_poper                     shift and go to state 141

state 105

    (49) loopFromDo -> FROM LPAREN ID . EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    EQUAL           shift and go to state 142


state 106

    (45) while -> WHILE while1 LPAREN . expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (85) expresion -> . exp
    (86) expresion -> . exp comp exp quad_comp
    (94) exp -> . termino quad_term
    (95) exp -> . termino quad_term exp1
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    ID              shift and go to state 95
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91
    CTE_STRING      shift and go to state 92

    expresion                      shift and go to state 143
    factor                         shift and go to state 90
    var_cte                        shift and go to state 86
    termino                        shift and go to state 87
    exp                            shift and go to state 97
    factorAux                      shift and go to state 98

state 107

    (11) main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc .

    $end            reduce using rule 11 (main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc .)


state 108

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc .
    (30) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc . function
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (31) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (33) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (35) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    MAIN            reduce using rule 28 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 144

state 109

    (29) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . RBRACE endProc
    (31) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . RBRACE endProc function

    RBRACE          shift and go to state 145


state 110

    (32) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE . endProc
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE . endProc function
    (36) endProc -> .

    FUNCTION        reduce using rule 36 (endProc -> .)
    MAIN            reduce using rule 36 (endProc -> .)

    endProc                        shift and go to state 146

state 111

    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux RBRACE endProc
    (35) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux RBRACE endProc function
    (43) bloqueAux -> . estatuto
    (44) bloqueAux -> . estatuto bloqueAux
    (50) estatuto -> . asignacion
    (51) estatuto -> . condicion
    (52) estatuto -> . escritura
    (53) estatuto -> . while
    (54) estatuto -> . loopFromDo
    (55) estatuto -> . comparacion
    (56) estatuto -> . llamadaAFuncion
    (57) estatuto -> . lectura
    (69) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (72) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (73) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (77) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (45) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (49) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (71) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (59) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (78) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON

    ID              shift and go to state 53
    IF              shift and go to state 48
    PRINT           shift and go to state 46
    WHILE           shift and go to state 58
    FROM            shift and go to state 56
    INPUT           shift and go to state 52

    estatuto                       shift and go to state 47
    condicion                      shift and go to state 50
    lectura                        shift and go to state 49
    loopFromDo                     shift and go to state 54
    llamadaAFuncion                shift and go to state 55
    asignacion                     shift and go to state 57
    bloqueAux                      shift and go to state 147
    while                          shift and go to state 60
    comparacion                    shift and go to state 61
    escritura                      shift and go to state 62

state 112

    (38) param -> tipo ID COMA param .

    RPAREN          reduce using rule 38 (param -> tipo ID COMA param .)


state 113

    (12) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .

    $end            reduce using rule 12 (main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .)


state 114

    (81) escrituraAux -> CTE_STRING . push_cte
    (83) escrituraAux -> CTE_STRING . push_cte COMA escrituraAux
    (115) var_cte -> CTE_STRING . push_cte
    (110) push_cte -> .

    COMA            reduce using rule 110 (push_cte -> .)
    RPAREN          reduce using rule 110 (push_cte -> .)
    TIMES           reduce using rule 110 (push_cte -> .)
    DIVIDE          reduce using rule 110 (push_cte -> .)
    PLUS            reduce using rule 110 (push_cte -> .)
    MINUS           reduce using rule 110 (push_cte -> .)
    LOWERTHAN       reduce using rule 110 (push_cte -> .)
    MORETHAN        reduce using rule 110 (push_cte -> .)
    DIFFERENT       reduce using rule 110 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 110 (push_cte -> .)
    LOWEREQUAL      reduce using rule 110 (push_cte -> .)
    MOREEQUAL       reduce using rule 110 (push_cte -> .)

    push_cte                       shift and go to state 148

state 115

    (80) escrituraAux -> expresion .
    (82) escrituraAux -> expresion . COMA escrituraAux

    RPAREN          reduce using rule 80 (escrituraAux -> expresion .)
    COMA            shift and go to state 149


state 116

    (58) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (59) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (112) var_cte -> ID . push_id
    (60) actualizaFuncion -> .
    (109) push_id -> .

    LPAREN          reduce using rule 60 (actualizaFuncion -> .)
    TIMES           reduce using rule 109 (push_id -> .)
    DIVIDE          reduce using rule 109 (push_id -> .)
    PLUS            reduce using rule 109 (push_id -> .)
    MINUS           reduce using rule 109 (push_id -> .)
    LOWERTHAN       reduce using rule 109 (push_id -> .)
    MORETHAN        reduce using rule 109 (push_id -> .)
    DIFFERENT       reduce using rule 109 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 109 (push_id -> .)
    LOWEREQUAL      reduce using rule 109 (push_id -> .)
    MOREEQUAL       reduce using rule 109 (push_id -> .)
    COMA            reduce using rule 109 (push_id -> .)
    RPAREN          reduce using rule 109 (push_id -> .)

    actualizaFuncion               shift and go to state 75
    push_id                        shift and go to state 127

state 117

    (77) escritura -> PRINT push_poper LPAREN escrituraAux . RPAREN quad_print SEMICOLON

    RPAREN          shift and go to state 150


state 118

    (84) escrituraAux -> llamadaAFuncion .

    RPAREN          reduce using rule 84 (escrituraAux -> llamadaAFuncion .)


state 119

    (94) exp -> termino quad_term .
    (95) exp -> termino quad_term . exp1
    (96) exp1 -> . PLUS push_poper exp
    (97) exp1 -> . MINUS push_poper exp

    RPAREN          reduce using rule 94 (exp -> termino quad_term .)
    COMA            reduce using rule 94 (exp -> termino quad_term .)
    SEMICOLON       reduce using rule 94 (exp -> termino quad_term .)
    ID              reduce using rule 94 (exp -> termino quad_term .)
    IF              reduce using rule 94 (exp -> termino quad_term .)
    PRINT           reduce using rule 94 (exp -> termino quad_term .)
    WHILE           reduce using rule 94 (exp -> termino quad_term .)
    FROM            reduce using rule 94 (exp -> termino quad_term .)
    INPUT           reduce using rule 94 (exp -> termino quad_term .)
    RBRACE          reduce using rule 94 (exp -> termino quad_term .)
    LOWERTHAN       reduce using rule 94 (exp -> termino quad_term .)
    MORETHAN        reduce using rule 94 (exp -> termino quad_term .)
    DIFFERENT       reduce using rule 94 (exp -> termino quad_term .)
    DOUBLEEQUAL     reduce using rule 94 (exp -> termino quad_term .)
    LOWEREQUAL      reduce using rule 94 (exp -> termino quad_term .)
    MOREEQUAL       reduce using rule 94 (exp -> termino quad_term .)
    PLUS            shift and go to state 152
    MINUS           shift and go to state 153

    exp1                           shift and go to state 151

state 120

    (107) factorAux -> MINUS push_poper . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 95
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91
    CTE_STRING      shift and go to state 92

    var_cte                        shift and go to state 154

state 121

    (106) factorAux -> PLUS push_poper . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 95
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91
    CTE_STRING      shift and go to state 92

    var_cte                        shift and go to state 155

state 122

    (100) termino -> factor quad_fact .
    (101) termino -> factor quad_fact . termino1
    (102) termino1 -> . TIMES push_poper termino
    (103) termino1 -> . DIVIDE push_poper termino

    PLUS            reduce using rule 100 (termino -> factor quad_fact .)
    MINUS           reduce using rule 100 (termino -> factor quad_fact .)
    LOWERTHAN       reduce using rule 100 (termino -> factor quad_fact .)
    MORETHAN        reduce using rule 100 (termino -> factor quad_fact .)
    DIFFERENT       reduce using rule 100 (termino -> factor quad_fact .)
    DOUBLEEQUAL     reduce using rule 100 (termino -> factor quad_fact .)
    LOWEREQUAL      reduce using rule 100 (termino -> factor quad_fact .)
    MOREEQUAL       reduce using rule 100 (termino -> factor quad_fact .)
    SEMICOLON       reduce using rule 100 (termino -> factor quad_fact .)
    COMA            reduce using rule 100 (termino -> factor quad_fact .)
    RPAREN          reduce using rule 100 (termino -> factor quad_fact .)
    ID              reduce using rule 100 (termino -> factor quad_fact .)
    IF              reduce using rule 100 (termino -> factor quad_fact .)
    PRINT           reduce using rule 100 (termino -> factor quad_fact .)
    WHILE           reduce using rule 100 (termino -> factor quad_fact .)
    FROM            reduce using rule 100 (termino -> factor quad_fact .)
    INPUT           reduce using rule 100 (termino -> factor quad_fact .)
    RBRACE          reduce using rule 100 (termino -> factor quad_fact .)
    TIMES           shift and go to state 158
    DIVIDE          shift and go to state 156

    termino1                       shift and go to state 157

state 123

    (114) var_cte -> CTE_F push_cte .

    TIMES           reduce using rule 114 (var_cte -> CTE_F push_cte .)
    DIVIDE          reduce using rule 114 (var_cte -> CTE_F push_cte .)
    PLUS            reduce using rule 114 (var_cte -> CTE_F push_cte .)
    MINUS           reduce using rule 114 (var_cte -> CTE_F push_cte .)
    LOWERTHAN       reduce using rule 114 (var_cte -> CTE_F push_cte .)
    MORETHAN        reduce using rule 114 (var_cte -> CTE_F push_cte .)
    DIFFERENT       reduce using rule 114 (var_cte -> CTE_F push_cte .)
    DOUBLEEQUAL     reduce using rule 114 (var_cte -> CTE_F push_cte .)
    LOWEREQUAL      reduce using rule 114 (var_cte -> CTE_F push_cte .)
    MOREEQUAL       reduce using rule 114 (var_cte -> CTE_F push_cte .)
    RPAREN          reduce using rule 114 (var_cte -> CTE_F push_cte .)
    COMA            reduce using rule 114 (var_cte -> CTE_F push_cte .)
    SEMICOLON       reduce using rule 114 (var_cte -> CTE_F push_cte .)
    ID              reduce using rule 114 (var_cte -> CTE_F push_cte .)
    IF              reduce using rule 114 (var_cte -> CTE_F push_cte .)
    PRINT           reduce using rule 114 (var_cte -> CTE_F push_cte .)
    WHILE           reduce using rule 114 (var_cte -> CTE_F push_cte .)
    FROM            reduce using rule 114 (var_cte -> CTE_F push_cte .)
    INPUT           reduce using rule 114 (var_cte -> CTE_F push_cte .)
    RBRACE          reduce using rule 114 (var_cte -> CTE_F push_cte .)


state 124

    (115) var_cte -> CTE_STRING push_cte .

    TIMES           reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    DIVIDE          reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    PLUS            reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    MINUS           reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    LOWERTHAN       reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    MORETHAN        reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    DIFFERENT       reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    DOUBLEEQUAL     reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    LOWEREQUAL      reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    MOREEQUAL       reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    RPAREN          reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    COMA            reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    SEMICOLON       reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    ID              reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    IF              reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    PRINT           reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    WHILE           reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    FROM            reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    INPUT           reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    RBRACE          reduce using rule 115 (var_cte -> CTE_STRING push_cte .)


state 125

    (113) var_cte -> CTE_I push_cte .

    TIMES           reduce using rule 113 (var_cte -> CTE_I push_cte .)
    DIVIDE          reduce using rule 113 (var_cte -> CTE_I push_cte .)
    PLUS            reduce using rule 113 (var_cte -> CTE_I push_cte .)
    MINUS           reduce using rule 113 (var_cte -> CTE_I push_cte .)
    LOWERTHAN       reduce using rule 113 (var_cte -> CTE_I push_cte .)
    MORETHAN        reduce using rule 113 (var_cte -> CTE_I push_cte .)
    DIFFERENT       reduce using rule 113 (var_cte -> CTE_I push_cte .)
    DOUBLEEQUAL     reduce using rule 113 (var_cte -> CTE_I push_cte .)
    LOWEREQUAL      reduce using rule 113 (var_cte -> CTE_I push_cte .)
    MOREEQUAL       reduce using rule 113 (var_cte -> CTE_I push_cte .)
    RPAREN          reduce using rule 113 (var_cte -> CTE_I push_cte .)
    COMA            reduce using rule 113 (var_cte -> CTE_I push_cte .)
    SEMICOLON       reduce using rule 113 (var_cte -> CTE_I push_cte .)
    ID              reduce using rule 113 (var_cte -> CTE_I push_cte .)
    IF              reduce using rule 113 (var_cte -> CTE_I push_cte .)
    PRINT           reduce using rule 113 (var_cte -> CTE_I push_cte .)
    WHILE           reduce using rule 113 (var_cte -> CTE_I push_cte .)
    FROM            reduce using rule 113 (var_cte -> CTE_I push_cte .)
    INPUT           reduce using rule 113 (var_cte -> CTE_I push_cte .)
    RBRACE          reduce using rule 113 (var_cte -> CTE_I push_cte .)


state 126

    (104) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 159


state 127

    (112) var_cte -> ID push_id .

    TIMES           reduce using rule 112 (var_cte -> ID push_id .)
    DIVIDE          reduce using rule 112 (var_cte -> ID push_id .)
    PLUS            reduce using rule 112 (var_cte -> ID push_id .)
    MINUS           reduce using rule 112 (var_cte -> ID push_id .)
    LOWERTHAN       reduce using rule 112 (var_cte -> ID push_id .)
    MORETHAN        reduce using rule 112 (var_cte -> ID push_id .)
    DIFFERENT       reduce using rule 112 (var_cte -> ID push_id .)
    DOUBLEEQUAL     reduce using rule 112 (var_cte -> ID push_id .)
    LOWEREQUAL      reduce using rule 112 (var_cte -> ID push_id .)
    MOREEQUAL       reduce using rule 112 (var_cte -> ID push_id .)
    RPAREN          reduce using rule 112 (var_cte -> ID push_id .)
    COMA            reduce using rule 112 (var_cte -> ID push_id .)
    SEMICOLON       reduce using rule 112 (var_cte -> ID push_id .)
    ID              reduce using rule 112 (var_cte -> ID push_id .)
    IF              reduce using rule 112 (var_cte -> ID push_id .)
    PRINT           reduce using rule 112 (var_cte -> ID push_id .)
    WHILE           reduce using rule 112 (var_cte -> ID push_id .)
    FROM            reduce using rule 112 (var_cte -> ID push_id .)
    INPUT           reduce using rule 112 (var_cte -> ID push_id .)
    RBRACE          reduce using rule 112 (var_cte -> ID push_id .)


state 128

    (72) condicion -> IF LPAREN expresion RPAREN . cond bloque condFinal
    (73) condicion -> IF LPAREN expresion RPAREN . cond bloque ELSE condElse bloque condFinal
    (74) cond -> .

    LBRACE          reduce using rule 74 (cond -> .)

    cond                           shift and go to state 160

state 129

    (92) comp -> MOREEQUAL . push_poper
    (111) push_poper -> .

    LPAREN          reduce using rule 111 (push_poper -> .)
    PLUS            reduce using rule 111 (push_poper -> .)
    MINUS           reduce using rule 111 (push_poper -> .)
    ID              reduce using rule 111 (push_poper -> .)
    CTE_I           reduce using rule 111 (push_poper -> .)
    CTE_F           reduce using rule 111 (push_poper -> .)
    CTE_STRING      reduce using rule 111 (push_poper -> .)

    push_poper                     shift and go to state 161

state 130

    (89) comp -> DIFFERENT . push_poper
    (111) push_poper -> .

    LPAREN          reduce using rule 111 (push_poper -> .)
    PLUS            reduce using rule 111 (push_poper -> .)
    MINUS           reduce using rule 111 (push_poper -> .)
    ID              reduce using rule 111 (push_poper -> .)
    CTE_I           reduce using rule 111 (push_poper -> .)
    CTE_F           reduce using rule 111 (push_poper -> .)
    CTE_STRING      reduce using rule 111 (push_poper -> .)

    push_poper                     shift and go to state 162

state 131

    (90) comp -> DOUBLEEQUAL . push_poper
    (111) push_poper -> .

    LPAREN          reduce using rule 111 (push_poper -> .)
    PLUS            reduce using rule 111 (push_poper -> .)
    MINUS           reduce using rule 111 (push_poper -> .)
    ID              reduce using rule 111 (push_poper -> .)
    CTE_I           reduce using rule 111 (push_poper -> .)
    CTE_F           reduce using rule 111 (push_poper -> .)
    CTE_STRING      reduce using rule 111 (push_poper -> .)

    push_poper                     shift and go to state 163

state 132

    (87) comp -> LOWERTHAN . push_poper
    (111) push_poper -> .

    LPAREN          reduce using rule 111 (push_poper -> .)
    PLUS            reduce using rule 111 (push_poper -> .)
    MINUS           reduce using rule 111 (push_poper -> .)
    ID              reduce using rule 111 (push_poper -> .)
    CTE_I           reduce using rule 111 (push_poper -> .)
    CTE_F           reduce using rule 111 (push_poper -> .)
    CTE_STRING      reduce using rule 111 (push_poper -> .)

    push_poper                     shift and go to state 164

state 133

    (86) expresion -> exp comp . exp quad_comp
    (94) exp -> . termino quad_term
    (95) exp -> . termino quad_term exp1
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    ID              shift and go to state 95
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91
    CTE_STRING      shift and go to state 92

    factor                         shift and go to state 90
    termino                        shift and go to state 87
    exp                            shift and go to state 165
    factorAux                      shift and go to state 98
    var_cte                        shift and go to state 86

state 134

    (91) comp -> LOWEREQUAL . push_poper
    (111) push_poper -> .

    LPAREN          reduce using rule 111 (push_poper -> .)
    PLUS            reduce using rule 111 (push_poper -> .)
    MINUS           reduce using rule 111 (push_poper -> .)
    ID              reduce using rule 111 (push_poper -> .)
    CTE_I           reduce using rule 111 (push_poper -> .)
    CTE_F           reduce using rule 111 (push_poper -> .)
    CTE_STRING      reduce using rule 111 (push_poper -> .)

    push_poper                     shift and go to state 166

state 135

    (88) comp -> MORETHAN . push_poper
    (111) push_poper -> .

    LPAREN          reduce using rule 111 (push_poper -> .)
    PLUS            reduce using rule 111 (push_poper -> .)
    MINUS           reduce using rule 111 (push_poper -> .)
    ID              reduce using rule 111 (push_poper -> .)
    CTE_I           reduce using rule 111 (push_poper -> .)
    CTE_F           reduce using rule 111 (push_poper -> .)
    CTE_STRING      reduce using rule 111 (push_poper -> .)

    push_poper                     shift and go to state 167

state 136

    (15) varAux1 -> tipo varAux2 SEMICOLON .
    (16) varAux1 -> tipo varAux2 SEMICOLON . varAux1
    (15) varAux1 -> . tipo varAux2 SEMICOLON
    (16) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR

    ID              reduce using rule 15 (varAux1 -> tipo varAux2 SEMICOLON .)
    IF              reduce using rule 15 (varAux1 -> tipo varAux2 SEMICOLON .)
    PRINT           reduce using rule 15 (varAux1 -> tipo varAux2 SEMICOLON .)
    WHILE           reduce using rule 15 (varAux1 -> tipo varAux2 SEMICOLON .)
    FROM            reduce using rule 15 (varAux1 -> tipo varAux2 SEMICOLON .)
    INPUT           reduce using rule 15 (varAux1 -> tipo varAux2 SEMICOLON .)
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    varAux1                        shift and go to state 168
    tipo                           shift and go to state 72

state 137

    (18) varAux2 -> ID COMA . varAux2
    (17) varAux2 -> . ID
    (18) varAux2 -> . ID COMA varAux2

    ID              shift and go to state 100

    varAux2                        shift and go to state 169

state 138

    (78) lectura -> INPUT push_poper LPAREN ID . push_id RPAREN quad_print SEMICOLON
    (109) push_id -> .

    RPAREN          reduce using rule 109 (push_id -> .)

    push_id                        shift and go to state 170

state 139

    (58) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN . paramFuncion gosub RPAREN expresion
    (59) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN . paramFuncion gosub RPAREN SEMICOLON
    (63) paramFuncion -> . ID push_id2
    (64) paramFuncion -> . ID push_id2 COMA paramFuncion
    (65) paramFuncion -> . expresion
    (66) paramFuncion -> . expresion COMA paramFuncion
    (67) paramFuncion -> . empty
    (85) expresion -> . exp
    (86) expresion -> . exp comp exp quad_comp
    (40) empty -> .
    (94) exp -> . termino quad_term
    (95) exp -> . termino quad_term exp1
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 173
    RPAREN          reduce using rule 40 (empty -> .)
    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91
    CTE_STRING      shift and go to state 92

    expresion                      shift and go to state 174
    paramFuncion                   shift and go to state 171
    empty                          shift and go to state 172
    exp                            shift and go to state 97
    factorAux                      shift and go to state 98
    factor                         shift and go to state 90
    var_cte                        shift and go to state 86
    termino                        shift and go to state 87

state 140

    (71) comparacion -> ID push_id DOUBLEEQUAL push_poper . expresion SEMICOLON
    (85) expresion -> . exp
    (86) expresion -> . exp comp exp quad_comp
    (94) exp -> . termino quad_term
    (95) exp -> . termino quad_term exp1
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    ID              shift and go to state 95
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91
    CTE_STRING      shift and go to state 92

    expresion                      shift and go to state 175
    factor                         shift and go to state 90
    var_cte                        shift and go to state 86
    termino                        shift and go to state 87
    exp                            shift and go to state 97
    factorAux                      shift and go to state 98

state 141

    (69) asignacion -> ID push_id EQUAL push_poper . expresion create_asign SEMICOLON
    (85) expresion -> . exp
    (86) expresion -> . exp comp exp quad_comp
    (94) exp -> . termino quad_term
    (95) exp -> . termino quad_term exp1
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    ID              shift and go to state 95
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91
    CTE_STRING      shift and go to state 92

    expresion                      shift and go to state 176
    var_cte                        shift and go to state 86
    termino                        shift and go to state 87
    exp                            shift and go to state 97
    factorAux                      shift and go to state 98
    factor                         shift and go to state 90

state 142

    (49) loopFromDo -> FROM LPAREN ID EQUAL . expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (85) expresion -> . exp
    (86) expresion -> . exp comp exp quad_comp
    (94) exp -> . termino quad_term
    (95) exp -> . termino quad_term exp1
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    ID              shift and go to state 95
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91
    CTE_STRING      shift and go to state 92

    expresion                      shift and go to state 177
    factor                         shift and go to state 90
    var_cte                        shift and go to state 86
    termino                        shift and go to state 87
    exp                            shift and go to state 97
    factorAux                      shift and go to state 98

state 143

    (45) while -> WHILE while1 LPAREN expresion . RPAREN while2 LBRACE bloqueAux RBRACE while3

    RPAREN          shift and go to state 178


state 144

    (30) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function .

    MAIN            reduce using rule 30 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function .)


state 145

    (29) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE . endProc
    (31) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE . endProc function
    (36) endProc -> .

    FUNCTION        reduce using rule 36 (endProc -> .)
    MAIN            reduce using rule 36 (endProc -> .)

    endProc                        shift and go to state 179

state 146

    (32) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc .
    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc . function
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (31) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (33) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (35) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    MAIN            reduce using rule 32 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 180

state 147

    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . RBRACE endProc
    (35) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . RBRACE endProc function

    RBRACE          shift and go to state 181


state 148

    (81) escrituraAux -> CTE_STRING push_cte .
    (83) escrituraAux -> CTE_STRING push_cte . COMA escrituraAux
    (115) var_cte -> CTE_STRING push_cte .

  ! shift/reduce conflict for COMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 81 (escrituraAux -> CTE_STRING push_cte .)
    RPAREN          reduce using rule 81 (escrituraAux -> CTE_STRING push_cte .)
    COMA            shift and go to state 182
    TIMES           reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    DIVIDE          reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    PLUS            reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    MINUS           reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    LOWERTHAN       reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    MORETHAN        reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    DIFFERENT       reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    DOUBLEEQUAL     reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    LOWEREQUAL      reduce using rule 115 (var_cte -> CTE_STRING push_cte .)
    MOREEQUAL       reduce using rule 115 (var_cte -> CTE_STRING push_cte .)

  ! COMA            [ reduce using rule 115 (var_cte -> CTE_STRING push_cte .) ]
  ! RPAREN          [ reduce using rule 115 (var_cte -> CTE_STRING push_cte .) ]


state 149

    (82) escrituraAux -> expresion COMA . escrituraAux
    (80) escrituraAux -> . expresion
    (81) escrituraAux -> . CTE_STRING push_cte
    (82) escrituraAux -> . expresion COMA escrituraAux
    (83) escrituraAux -> . CTE_STRING push_cte COMA escrituraAux
    (84) escrituraAux -> . llamadaAFuncion
    (85) expresion -> . exp
    (86) expresion -> . exp comp exp quad_comp
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (59) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (94) exp -> . termino quad_term
    (95) exp -> . termino quad_term exp1
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    CTE_STRING      shift and go to state 114
    ID              shift and go to state 116
    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91

    expresion                      shift and go to state 115
    escrituraAux                   shift and go to state 183
    llamadaAFuncion                shift and go to state 118
    var_cte                        shift and go to state 86
    termino                        shift and go to state 87
    exp                            shift and go to state 97
    factorAux                      shift and go to state 98
    factor                         shift and go to state 90

state 150

    (77) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN . quad_print SEMICOLON
    (79) quad_print -> .

    SEMICOLON       reduce using rule 79 (quad_print -> .)

    quad_print                     shift and go to state 184

state 151

    (95) exp -> termino quad_term exp1 .

    RPAREN          reduce using rule 95 (exp -> termino quad_term exp1 .)
    COMA            reduce using rule 95 (exp -> termino quad_term exp1 .)
    SEMICOLON       reduce using rule 95 (exp -> termino quad_term exp1 .)
    ID              reduce using rule 95 (exp -> termino quad_term exp1 .)
    IF              reduce using rule 95 (exp -> termino quad_term exp1 .)
    PRINT           reduce using rule 95 (exp -> termino quad_term exp1 .)
    WHILE           reduce using rule 95 (exp -> termino quad_term exp1 .)
    FROM            reduce using rule 95 (exp -> termino quad_term exp1 .)
    INPUT           reduce using rule 95 (exp -> termino quad_term exp1 .)
    RBRACE          reduce using rule 95 (exp -> termino quad_term exp1 .)
    LOWERTHAN       reduce using rule 95 (exp -> termino quad_term exp1 .)
    MORETHAN        reduce using rule 95 (exp -> termino quad_term exp1 .)
    DIFFERENT       reduce using rule 95 (exp -> termino quad_term exp1 .)
    DOUBLEEQUAL     reduce using rule 95 (exp -> termino quad_term exp1 .)
    LOWEREQUAL      reduce using rule 95 (exp -> termino quad_term exp1 .)
    MOREEQUAL       reduce using rule 95 (exp -> termino quad_term exp1 .)


state 152

    (96) exp1 -> PLUS . push_poper exp
    (111) push_poper -> .

    LPAREN          reduce using rule 111 (push_poper -> .)
    PLUS            reduce using rule 111 (push_poper -> .)
    MINUS           reduce using rule 111 (push_poper -> .)
    ID              reduce using rule 111 (push_poper -> .)
    CTE_I           reduce using rule 111 (push_poper -> .)
    CTE_F           reduce using rule 111 (push_poper -> .)
    CTE_STRING      reduce using rule 111 (push_poper -> .)

    push_poper                     shift and go to state 185

state 153

    (97) exp1 -> MINUS . push_poper exp
    (111) push_poper -> .

    LPAREN          reduce using rule 111 (push_poper -> .)
    PLUS            reduce using rule 111 (push_poper -> .)
    MINUS           reduce using rule 111 (push_poper -> .)
    ID              reduce using rule 111 (push_poper -> .)
    CTE_I           reduce using rule 111 (push_poper -> .)
    CTE_F           reduce using rule 111 (push_poper -> .)
    CTE_STRING      reduce using rule 111 (push_poper -> .)

    push_poper                     shift and go to state 186

state 154

    (107) factorAux -> MINUS push_poper var_cte .

    TIMES           reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    DIVIDE          reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    PLUS            reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    MINUS           reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    MORETHAN        reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    DIFFERENT       reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    DOUBLEEQUAL     reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    LOWEREQUAL      reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    MOREEQUAL       reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    RPAREN          reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    COMA            reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    SEMICOLON       reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    ID              reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    IF              reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    PRINT           reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    WHILE           reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    FROM            reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    INPUT           reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)
    RBRACE          reduce using rule 107 (factorAux -> MINUS push_poper var_cte .)


state 155

    (106) factorAux -> PLUS push_poper var_cte .

    TIMES           reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    DIVIDE          reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    PLUS            reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    MINUS           reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    MORETHAN        reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    DIFFERENT       reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    DOUBLEEQUAL     reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    LOWEREQUAL      reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    MOREEQUAL       reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    RPAREN          reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    COMA            reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    SEMICOLON       reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    ID              reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    IF              reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    PRINT           reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    WHILE           reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    FROM            reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    INPUT           reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)
    RBRACE          reduce using rule 106 (factorAux -> PLUS push_poper var_cte .)


state 156

    (103) termino1 -> DIVIDE . push_poper termino
    (111) push_poper -> .

    LPAREN          reduce using rule 111 (push_poper -> .)
    PLUS            reduce using rule 111 (push_poper -> .)
    MINUS           reduce using rule 111 (push_poper -> .)
    ID              reduce using rule 111 (push_poper -> .)
    CTE_I           reduce using rule 111 (push_poper -> .)
    CTE_F           reduce using rule 111 (push_poper -> .)
    CTE_STRING      reduce using rule 111 (push_poper -> .)

    push_poper                     shift and go to state 187

state 157

    (101) termino -> factor quad_fact termino1 .

    PLUS            reduce using rule 101 (termino -> factor quad_fact termino1 .)
    MINUS           reduce using rule 101 (termino -> factor quad_fact termino1 .)
    LOWERTHAN       reduce using rule 101 (termino -> factor quad_fact termino1 .)
    MORETHAN        reduce using rule 101 (termino -> factor quad_fact termino1 .)
    DIFFERENT       reduce using rule 101 (termino -> factor quad_fact termino1 .)
    DOUBLEEQUAL     reduce using rule 101 (termino -> factor quad_fact termino1 .)
    LOWEREQUAL      reduce using rule 101 (termino -> factor quad_fact termino1 .)
    MOREEQUAL       reduce using rule 101 (termino -> factor quad_fact termino1 .)
    SEMICOLON       reduce using rule 101 (termino -> factor quad_fact termino1 .)
    COMA            reduce using rule 101 (termino -> factor quad_fact termino1 .)
    RPAREN          reduce using rule 101 (termino -> factor quad_fact termino1 .)
    ID              reduce using rule 101 (termino -> factor quad_fact termino1 .)
    IF              reduce using rule 101 (termino -> factor quad_fact termino1 .)
    PRINT           reduce using rule 101 (termino -> factor quad_fact termino1 .)
    WHILE           reduce using rule 101 (termino -> factor quad_fact termino1 .)
    FROM            reduce using rule 101 (termino -> factor quad_fact termino1 .)
    INPUT           reduce using rule 101 (termino -> factor quad_fact termino1 .)
    RBRACE          reduce using rule 101 (termino -> factor quad_fact termino1 .)


state 158

    (102) termino1 -> TIMES . push_poper termino
    (111) push_poper -> .

    LPAREN          reduce using rule 111 (push_poper -> .)
    PLUS            reduce using rule 111 (push_poper -> .)
    MINUS           reduce using rule 111 (push_poper -> .)
    ID              reduce using rule 111 (push_poper -> .)
    CTE_I           reduce using rule 111 (push_poper -> .)
    CTE_F           reduce using rule 111 (push_poper -> .)
    CTE_STRING      reduce using rule 111 (push_poper -> .)

    push_poper                     shift and go to state 188

state 159

    (104) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    LOWERTHAN       reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    MORETHAN        reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    DIFFERENT       reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    DOUBLEEQUAL     reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    LOWEREQUAL      reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    MOREEQUAL       reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    COMA            reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    ID              reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    IF              reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    PRINT           reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    WHILE           reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    FROM            reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    INPUT           reduce using rule 104 (factor -> LPAREN expresion RPAREN .)
    RBRACE          reduce using rule 104 (factor -> LPAREN expresion RPAREN .)


state 160

    (72) condicion -> IF LPAREN expresion RPAREN cond . bloque condFinal
    (73) condicion -> IF LPAREN expresion RPAREN cond . bloque ELSE condElse bloque condFinal
    (26) bloque -> . LBRACE RBRACE
    (27) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 189

    bloque                         shift and go to state 190

state 161

    (92) comp -> MOREEQUAL push_poper .

    LPAREN          reduce using rule 92 (comp -> MOREEQUAL push_poper .)
    PLUS            reduce using rule 92 (comp -> MOREEQUAL push_poper .)
    MINUS           reduce using rule 92 (comp -> MOREEQUAL push_poper .)
    ID              reduce using rule 92 (comp -> MOREEQUAL push_poper .)
    CTE_I           reduce using rule 92 (comp -> MOREEQUAL push_poper .)
    CTE_F           reduce using rule 92 (comp -> MOREEQUAL push_poper .)
    CTE_STRING      reduce using rule 92 (comp -> MOREEQUAL push_poper .)


state 162

    (89) comp -> DIFFERENT push_poper .

    LPAREN          reduce using rule 89 (comp -> DIFFERENT push_poper .)
    PLUS            reduce using rule 89 (comp -> DIFFERENT push_poper .)
    MINUS           reduce using rule 89 (comp -> DIFFERENT push_poper .)
    ID              reduce using rule 89 (comp -> DIFFERENT push_poper .)
    CTE_I           reduce using rule 89 (comp -> DIFFERENT push_poper .)
    CTE_F           reduce using rule 89 (comp -> DIFFERENT push_poper .)
    CTE_STRING      reduce using rule 89 (comp -> DIFFERENT push_poper .)


state 163

    (90) comp -> DOUBLEEQUAL push_poper .

    LPAREN          reduce using rule 90 (comp -> DOUBLEEQUAL push_poper .)
    PLUS            reduce using rule 90 (comp -> DOUBLEEQUAL push_poper .)
    MINUS           reduce using rule 90 (comp -> DOUBLEEQUAL push_poper .)
    ID              reduce using rule 90 (comp -> DOUBLEEQUAL push_poper .)
    CTE_I           reduce using rule 90 (comp -> DOUBLEEQUAL push_poper .)
    CTE_F           reduce using rule 90 (comp -> DOUBLEEQUAL push_poper .)
    CTE_STRING      reduce using rule 90 (comp -> DOUBLEEQUAL push_poper .)


state 164

    (87) comp -> LOWERTHAN push_poper .

    LPAREN          reduce using rule 87 (comp -> LOWERTHAN push_poper .)
    PLUS            reduce using rule 87 (comp -> LOWERTHAN push_poper .)
    MINUS           reduce using rule 87 (comp -> LOWERTHAN push_poper .)
    ID              reduce using rule 87 (comp -> LOWERTHAN push_poper .)
    CTE_I           reduce using rule 87 (comp -> LOWERTHAN push_poper .)
    CTE_F           reduce using rule 87 (comp -> LOWERTHAN push_poper .)
    CTE_STRING      reduce using rule 87 (comp -> LOWERTHAN push_poper .)


state 165

    (86) expresion -> exp comp exp . quad_comp
    (93) quad_comp -> .

    RPAREN          reduce using rule 93 (quad_comp -> .)
    COMA            reduce using rule 93 (quad_comp -> .)
    SEMICOLON       reduce using rule 93 (quad_comp -> .)
    ID              reduce using rule 93 (quad_comp -> .)
    IF              reduce using rule 93 (quad_comp -> .)
    PRINT           reduce using rule 93 (quad_comp -> .)
    WHILE           reduce using rule 93 (quad_comp -> .)
    FROM            reduce using rule 93 (quad_comp -> .)
    INPUT           reduce using rule 93 (quad_comp -> .)
    RBRACE          reduce using rule 93 (quad_comp -> .)

    quad_comp                      shift and go to state 191

state 166

    (91) comp -> LOWEREQUAL push_poper .

    LPAREN          reduce using rule 91 (comp -> LOWEREQUAL push_poper .)
    PLUS            reduce using rule 91 (comp -> LOWEREQUAL push_poper .)
    MINUS           reduce using rule 91 (comp -> LOWEREQUAL push_poper .)
    ID              reduce using rule 91 (comp -> LOWEREQUAL push_poper .)
    CTE_I           reduce using rule 91 (comp -> LOWEREQUAL push_poper .)
    CTE_F           reduce using rule 91 (comp -> LOWEREQUAL push_poper .)
    CTE_STRING      reduce using rule 91 (comp -> LOWEREQUAL push_poper .)


state 167

    (88) comp -> MORETHAN push_poper .

    LPAREN          reduce using rule 88 (comp -> MORETHAN push_poper .)
    PLUS            reduce using rule 88 (comp -> MORETHAN push_poper .)
    MINUS           reduce using rule 88 (comp -> MORETHAN push_poper .)
    ID              reduce using rule 88 (comp -> MORETHAN push_poper .)
    CTE_I           reduce using rule 88 (comp -> MORETHAN push_poper .)
    CTE_F           reduce using rule 88 (comp -> MORETHAN push_poper .)
    CTE_STRING      reduce using rule 88 (comp -> MORETHAN push_poper .)


state 168

    (16) varAux1 -> tipo varAux2 SEMICOLON varAux1 .

    ID              reduce using rule 16 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    IF              reduce using rule 16 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    PRINT           reduce using rule 16 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    WHILE           reduce using rule 16 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    FROM            reduce using rule 16 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    INPUT           reduce using rule 16 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)


state 169

    (18) varAux2 -> ID COMA varAux2 .

    SEMICOLON       reduce using rule 18 (varAux2 -> ID COMA varAux2 .)


state 170

    (78) lectura -> INPUT push_poper LPAREN ID push_id . RPAREN quad_print SEMICOLON

    RPAREN          shift and go to state 192


state 171

    (58) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion . gosub RPAREN expresion
    (59) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion . gosub RPAREN SEMICOLON
    (61) gosub -> .

    RPAREN          reduce using rule 61 (gosub -> .)

    gosub                          shift and go to state 193

state 172

    (67) paramFuncion -> empty .

    RPAREN          reduce using rule 67 (paramFuncion -> empty .)


state 173

    (63) paramFuncion -> ID . push_id2
    (64) paramFuncion -> ID . push_id2 COMA paramFuncion
    (112) var_cte -> ID . push_id
    (68) push_id2 -> .
    (109) push_id -> .

  ! reduce/reduce conflict for COMA resolved using rule 68 (push_id2 -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 68 (push_id2 -> .)
    COMA            reduce using rule 68 (push_id2 -> .)
    RPAREN          reduce using rule 68 (push_id2 -> .)
    TIMES           reduce using rule 109 (push_id -> .)
    DIVIDE          reduce using rule 109 (push_id -> .)
    PLUS            reduce using rule 109 (push_id -> .)
    MINUS           reduce using rule 109 (push_id -> .)
    LOWERTHAN       reduce using rule 109 (push_id -> .)
    MORETHAN        reduce using rule 109 (push_id -> .)
    DIFFERENT       reduce using rule 109 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 109 (push_id -> .)
    LOWEREQUAL      reduce using rule 109 (push_id -> .)
    MOREEQUAL       reduce using rule 109 (push_id -> .)

  ! COMA            [ reduce using rule 109 (push_id -> .) ]
  ! RPAREN          [ reduce using rule 109 (push_id -> .) ]

    push_id                        shift and go to state 127
    push_id2                       shift and go to state 194

state 174

    (65) paramFuncion -> expresion .
    (66) paramFuncion -> expresion . COMA paramFuncion

    RPAREN          reduce using rule 65 (paramFuncion -> expresion .)
    COMA            shift and go to state 195


state 175

    (71) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion . SEMICOLON

    SEMICOLON       shift and go to state 196


state 176

    (69) asignacion -> ID push_id EQUAL push_poper expresion . create_asign SEMICOLON
    (70) create_asign -> .

    SEMICOLON       reduce using rule 70 (create_asign -> .)

    create_asign                   shift and go to state 197

state 177

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion . RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    RPAREN          shift and go to state 198


state 178

    (45) while -> WHILE while1 LPAREN expresion RPAREN . while2 LBRACE bloqueAux RBRACE while3
    (47) while2 -> .

    LBRACE          reduce using rule 47 (while2 -> .)

    while2                         shift and go to state 199

state 179

    (29) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .
    (31) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc . function
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (31) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (33) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (35) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    MAIN            reduce using rule 29 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 200

state 180

    (34) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function .

    MAIN            reduce using rule 34 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function .)


state 181

    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE . endProc
    (35) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE . endProc function
    (36) endProc -> .

    FUNCTION        reduce using rule 36 (endProc -> .)
    MAIN            reduce using rule 36 (endProc -> .)

    endProc                        shift and go to state 201

state 182

    (83) escrituraAux -> CTE_STRING push_cte COMA . escrituraAux
    (80) escrituraAux -> . expresion
    (81) escrituraAux -> . CTE_STRING push_cte
    (82) escrituraAux -> . expresion COMA escrituraAux
    (83) escrituraAux -> . CTE_STRING push_cte COMA escrituraAux
    (84) escrituraAux -> . llamadaAFuncion
    (85) expresion -> . exp
    (86) expresion -> . exp comp exp quad_comp
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (59) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (94) exp -> . termino quad_term
    (95) exp -> . termino quad_term exp1
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    CTE_STRING      shift and go to state 114
    ID              shift and go to state 116
    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91

    escrituraAux                   shift and go to state 202
    expresion                      shift and go to state 115
    llamadaAFuncion                shift and go to state 118
    var_cte                        shift and go to state 86
    termino                        shift and go to state 87
    exp                            shift and go to state 97
    factorAux                      shift and go to state 98
    factor                         shift and go to state 90

state 183

    (82) escrituraAux -> expresion COMA escrituraAux .

    RPAREN          reduce using rule 82 (escrituraAux -> expresion COMA escrituraAux .)


state 184

    (77) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print . SEMICOLON

    SEMICOLON       shift and go to state 203


state 185

    (96) exp1 -> PLUS push_poper . exp
    (94) exp -> . termino quad_term
    (95) exp -> . termino quad_term exp1
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    ID              shift and go to state 95
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91
    CTE_STRING      shift and go to state 92

    termino                        shift and go to state 87
    exp                            shift and go to state 204
    factor                         shift and go to state 90
    factorAux                      shift and go to state 98
    var_cte                        shift and go to state 86

state 186

    (97) exp1 -> MINUS push_poper . exp
    (94) exp -> . termino quad_term
    (95) exp -> . termino quad_term exp1
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    ID              shift and go to state 95
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91
    CTE_STRING      shift and go to state 92

    termino                        shift and go to state 87
    exp                            shift and go to state 205
    factor                         shift and go to state 90
    factorAux                      shift and go to state 98
    var_cte                        shift and go to state 86

state 187

    (103) termino1 -> DIVIDE push_poper . termino
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    ID              shift and go to state 95
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91
    CTE_STRING      shift and go to state 92

    termino                        shift and go to state 206
    factor                         shift and go to state 90
    factorAux                      shift and go to state 98
    var_cte                        shift and go to state 86

state 188

    (102) termino1 -> TIMES push_poper . termino
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    ID              shift and go to state 95
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91
    CTE_STRING      shift and go to state 92

    termino                        shift and go to state 207
    factor                         shift and go to state 90
    factorAux                      shift and go to state 98
    var_cte                        shift and go to state 86

state 189

    (26) bloque -> LBRACE . RBRACE
    (27) bloque -> LBRACE . bloqueAux RBRACE
    (43) bloqueAux -> . estatuto
    (44) bloqueAux -> . estatuto bloqueAux
    (50) estatuto -> . asignacion
    (51) estatuto -> . condicion
    (52) estatuto -> . escritura
    (53) estatuto -> . while
    (54) estatuto -> . loopFromDo
    (55) estatuto -> . comparacion
    (56) estatuto -> . llamadaAFuncion
    (57) estatuto -> . lectura
    (69) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (72) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (73) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (77) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (45) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (49) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (71) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (59) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (78) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON

    RBRACE          shift and go to state 208
    ID              shift and go to state 53
    IF              shift and go to state 48
    PRINT           shift and go to state 46
    WHILE           shift and go to state 58
    FROM            shift and go to state 56
    INPUT           shift and go to state 52

    estatuto                       shift and go to state 47
    condicion                      shift and go to state 50
    lectura                        shift and go to state 49
    loopFromDo                     shift and go to state 54
    llamadaAFuncion                shift and go to state 55
    asignacion                     shift and go to state 57
    bloqueAux                      shift and go to state 209
    while                          shift and go to state 60
    comparacion                    shift and go to state 61
    escritura                      shift and go to state 62

state 190

    (72) condicion -> IF LPAREN expresion RPAREN cond bloque . condFinal
    (73) condicion -> IF LPAREN expresion RPAREN cond bloque . ELSE condElse bloque condFinal
    (76) condFinal -> .

    ELSE            shift and go to state 211
    ID              reduce using rule 76 (condFinal -> .)
    IF              reduce using rule 76 (condFinal -> .)
    PRINT           reduce using rule 76 (condFinal -> .)
    WHILE           reduce using rule 76 (condFinal -> .)
    FROM            reduce using rule 76 (condFinal -> .)
    INPUT           reduce using rule 76 (condFinal -> .)
    RBRACE          reduce using rule 76 (condFinal -> .)

    condFinal                      shift and go to state 210

state 191

    (86) expresion -> exp comp exp quad_comp .

    COMA            reduce using rule 86 (expresion -> exp comp exp quad_comp .)
    RPAREN          reduce using rule 86 (expresion -> exp comp exp quad_comp .)
    SEMICOLON       reduce using rule 86 (expresion -> exp comp exp quad_comp .)
    ID              reduce using rule 86 (expresion -> exp comp exp quad_comp .)
    IF              reduce using rule 86 (expresion -> exp comp exp quad_comp .)
    PRINT           reduce using rule 86 (expresion -> exp comp exp quad_comp .)
    WHILE           reduce using rule 86 (expresion -> exp comp exp quad_comp .)
    FROM            reduce using rule 86 (expresion -> exp comp exp quad_comp .)
    INPUT           reduce using rule 86 (expresion -> exp comp exp quad_comp .)
    RBRACE          reduce using rule 86 (expresion -> exp comp exp quad_comp .)


state 192

    (78) lectura -> INPUT push_poper LPAREN ID push_id RPAREN . quad_print SEMICOLON
    (79) quad_print -> .

    SEMICOLON       reduce using rule 79 (quad_print -> .)

    quad_print                     shift and go to state 212

state 193

    (58) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub . RPAREN expresion
    (59) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub . RPAREN SEMICOLON

    RPAREN          shift and go to state 213


state 194

    (63) paramFuncion -> ID push_id2 .
    (64) paramFuncion -> ID push_id2 . COMA paramFuncion

    RPAREN          reduce using rule 63 (paramFuncion -> ID push_id2 .)
    COMA            shift and go to state 214


state 195

    (66) paramFuncion -> expresion COMA . paramFuncion
    (63) paramFuncion -> . ID push_id2
    (64) paramFuncion -> . ID push_id2 COMA paramFuncion
    (65) paramFuncion -> . expresion
    (66) paramFuncion -> . expresion COMA paramFuncion
    (67) paramFuncion -> . empty
    (85) expresion -> . exp
    (86) expresion -> . exp comp exp quad_comp
    (40) empty -> .
    (94) exp -> . termino quad_term
    (95) exp -> . termino quad_term exp1
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 173
    RPAREN          reduce using rule 40 (empty -> .)
    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91
    CTE_STRING      shift and go to state 92

    expresion                      shift and go to state 174
    paramFuncion                   shift and go to state 215
    termino                        shift and go to state 87
    exp                            shift and go to state 97
    factorAux                      shift and go to state 98
    factor                         shift and go to state 90
    var_cte                        shift and go to state 86
    empty                          shift and go to state 172

state 196

    (71) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .

    ID              reduce using rule 71 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    IF              reduce using rule 71 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    PRINT           reduce using rule 71 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    WHILE           reduce using rule 71 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    FROM            reduce using rule 71 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    INPUT           reduce using rule 71 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    RBRACE          reduce using rule 71 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)


state 197

    (69) asignacion -> ID push_id EQUAL push_poper expresion create_asign . SEMICOLON

    SEMICOLON       shift and go to state 216


state 198

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN . TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    TO              shift and go to state 217


state 199

    (45) while -> WHILE while1 LPAREN expresion RPAREN while2 . LBRACE bloqueAux RBRACE while3

    LBRACE          shift and go to state 218


state 200

    (31) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function .

    MAIN            reduce using rule 31 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function .)


state 201

    (33) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc .
    (35) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc . function
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (30) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (31) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (32) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (33) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (34) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (35) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    MAIN            reduce using rule 33 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc .)
    FUNCTION        shift and go to state 5

    function                       shift and go to state 219

state 202

    (83) escrituraAux -> CTE_STRING push_cte COMA escrituraAux .

    RPAREN          reduce using rule 83 (escrituraAux -> CTE_STRING push_cte COMA escrituraAux .)


state 203

    (77) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .

    ID              reduce using rule 77 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    IF              reduce using rule 77 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    PRINT           reduce using rule 77 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    WHILE           reduce using rule 77 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    FROM            reduce using rule 77 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    INPUT           reduce using rule 77 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    RBRACE          reduce using rule 77 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)


state 204

    (96) exp1 -> PLUS push_poper exp .

    LOWERTHAN       reduce using rule 96 (exp1 -> PLUS push_poper exp .)
    MORETHAN        reduce using rule 96 (exp1 -> PLUS push_poper exp .)
    DIFFERENT       reduce using rule 96 (exp1 -> PLUS push_poper exp .)
    DOUBLEEQUAL     reduce using rule 96 (exp1 -> PLUS push_poper exp .)
    LOWEREQUAL      reduce using rule 96 (exp1 -> PLUS push_poper exp .)
    MOREEQUAL       reduce using rule 96 (exp1 -> PLUS push_poper exp .)
    RPAREN          reduce using rule 96 (exp1 -> PLUS push_poper exp .)
    COMA            reduce using rule 96 (exp1 -> PLUS push_poper exp .)
    SEMICOLON       reduce using rule 96 (exp1 -> PLUS push_poper exp .)
    ID              reduce using rule 96 (exp1 -> PLUS push_poper exp .)
    IF              reduce using rule 96 (exp1 -> PLUS push_poper exp .)
    PRINT           reduce using rule 96 (exp1 -> PLUS push_poper exp .)
    WHILE           reduce using rule 96 (exp1 -> PLUS push_poper exp .)
    FROM            reduce using rule 96 (exp1 -> PLUS push_poper exp .)
    INPUT           reduce using rule 96 (exp1 -> PLUS push_poper exp .)
    RBRACE          reduce using rule 96 (exp1 -> PLUS push_poper exp .)


state 205

    (97) exp1 -> MINUS push_poper exp .

    LOWERTHAN       reduce using rule 97 (exp1 -> MINUS push_poper exp .)
    MORETHAN        reduce using rule 97 (exp1 -> MINUS push_poper exp .)
    DIFFERENT       reduce using rule 97 (exp1 -> MINUS push_poper exp .)
    DOUBLEEQUAL     reduce using rule 97 (exp1 -> MINUS push_poper exp .)
    LOWEREQUAL      reduce using rule 97 (exp1 -> MINUS push_poper exp .)
    MOREEQUAL       reduce using rule 97 (exp1 -> MINUS push_poper exp .)
    RPAREN          reduce using rule 97 (exp1 -> MINUS push_poper exp .)
    COMA            reduce using rule 97 (exp1 -> MINUS push_poper exp .)
    SEMICOLON       reduce using rule 97 (exp1 -> MINUS push_poper exp .)
    ID              reduce using rule 97 (exp1 -> MINUS push_poper exp .)
    IF              reduce using rule 97 (exp1 -> MINUS push_poper exp .)
    PRINT           reduce using rule 97 (exp1 -> MINUS push_poper exp .)
    WHILE           reduce using rule 97 (exp1 -> MINUS push_poper exp .)
    FROM            reduce using rule 97 (exp1 -> MINUS push_poper exp .)
    INPUT           reduce using rule 97 (exp1 -> MINUS push_poper exp .)
    RBRACE          reduce using rule 97 (exp1 -> MINUS push_poper exp .)


state 206

    (103) termino1 -> DIVIDE push_poper termino .

    PLUS            reduce using rule 103 (termino1 -> DIVIDE push_poper termino .)
    MINUS           reduce using rule 103 (termino1 -> DIVIDE push_poper termino .)
    LOWERTHAN       reduce using rule 103 (termino1 -> DIVIDE push_poper termino .)
    MORETHAN        reduce using rule 103 (termino1 -> DIVIDE push_poper termino .)
    DIFFERENT       reduce using rule 103 (termino1 -> DIVIDE push_poper termino .)
    DOUBLEEQUAL     reduce using rule 103 (termino1 -> DIVIDE push_poper termino .)
    LOWEREQUAL      reduce using rule 103 (termino1 -> DIVIDE push_poper termino .)
    MOREEQUAL       reduce using rule 103 (termino1 -> DIVIDE push_poper termino .)
    RPAREN          reduce using rule 103 (termino1 -> DIVIDE push_poper termino .)
    COMA            reduce using rule 103 (termino1 -> DIVIDE push_poper termino .)
    SEMICOLON       reduce using rule 103 (termino1 -> DIVIDE push_poper termino .)
    ID              reduce using rule 103 (termino1 -> DIVIDE push_poper termino .)
    IF              reduce using rule 103 (termino1 -> DIVIDE push_poper termino .)
    PRINT           reduce using rule 103 (termino1 -> DIVIDE push_poper termino .)
    WHILE           reduce using rule 103 (termino1 -> DIVIDE push_poper termino .)
    FROM            reduce using rule 103 (termino1 -> DIVIDE push_poper termino .)
    INPUT           reduce using rule 103 (termino1 -> DIVIDE push_poper termino .)
    RBRACE          reduce using rule 103 (termino1 -> DIVIDE push_poper termino .)


state 207

    (102) termino1 -> TIMES push_poper termino .

    PLUS            reduce using rule 102 (termino1 -> TIMES push_poper termino .)
    MINUS           reduce using rule 102 (termino1 -> TIMES push_poper termino .)
    LOWERTHAN       reduce using rule 102 (termino1 -> TIMES push_poper termino .)
    MORETHAN        reduce using rule 102 (termino1 -> TIMES push_poper termino .)
    DIFFERENT       reduce using rule 102 (termino1 -> TIMES push_poper termino .)
    DOUBLEEQUAL     reduce using rule 102 (termino1 -> TIMES push_poper termino .)
    LOWEREQUAL      reduce using rule 102 (termino1 -> TIMES push_poper termino .)
    MOREEQUAL       reduce using rule 102 (termino1 -> TIMES push_poper termino .)
    RPAREN          reduce using rule 102 (termino1 -> TIMES push_poper termino .)
    COMA            reduce using rule 102 (termino1 -> TIMES push_poper termino .)
    SEMICOLON       reduce using rule 102 (termino1 -> TIMES push_poper termino .)
    ID              reduce using rule 102 (termino1 -> TIMES push_poper termino .)
    IF              reduce using rule 102 (termino1 -> TIMES push_poper termino .)
    PRINT           reduce using rule 102 (termino1 -> TIMES push_poper termino .)
    WHILE           reduce using rule 102 (termino1 -> TIMES push_poper termino .)
    FROM            reduce using rule 102 (termino1 -> TIMES push_poper termino .)
    INPUT           reduce using rule 102 (termino1 -> TIMES push_poper termino .)
    RBRACE          reduce using rule 102 (termino1 -> TIMES push_poper termino .)


state 208

    (26) bloque -> LBRACE RBRACE .

    ELSE            reduce using rule 26 (bloque -> LBRACE RBRACE .)
    ID              reduce using rule 26 (bloque -> LBRACE RBRACE .)
    IF              reduce using rule 26 (bloque -> LBRACE RBRACE .)
    PRINT           reduce using rule 26 (bloque -> LBRACE RBRACE .)
    WHILE           reduce using rule 26 (bloque -> LBRACE RBRACE .)
    FROM            reduce using rule 26 (bloque -> LBRACE RBRACE .)
    INPUT           reduce using rule 26 (bloque -> LBRACE RBRACE .)
    RBRACE          reduce using rule 26 (bloque -> LBRACE RBRACE .)


state 209

    (27) bloque -> LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 220


state 210

    (72) condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .

    ID              reduce using rule 72 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    IF              reduce using rule 72 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    PRINT           reduce using rule 72 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    WHILE           reduce using rule 72 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    FROM            reduce using rule 72 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    INPUT           reduce using rule 72 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    RBRACE          reduce using rule 72 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)


state 211

    (73) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE . condElse bloque condFinal
    (75) condElse -> .

    LBRACE          reduce using rule 75 (condElse -> .)

    condElse                       shift and go to state 221

state 212

    (78) lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print . SEMICOLON

    SEMICOLON       shift and go to state 222


state 213

    (58) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN . expresion
    (59) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN . SEMICOLON
    (85) expresion -> . exp
    (86) expresion -> . exp comp exp quad_comp
    (94) exp -> . termino quad_term
    (95) exp -> . termino quad_term exp1
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    SEMICOLON       shift and go to state 223
    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    ID              shift and go to state 95
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91
    CTE_STRING      shift and go to state 92

    expresion                      shift and go to state 224
    termino                        shift and go to state 87
    exp                            shift and go to state 97
    factorAux                      shift and go to state 98
    factor                         shift and go to state 90
    var_cte                        shift and go to state 86

state 214

    (64) paramFuncion -> ID push_id2 COMA . paramFuncion
    (63) paramFuncion -> . ID push_id2
    (64) paramFuncion -> . ID push_id2 COMA paramFuncion
    (65) paramFuncion -> . expresion
    (66) paramFuncion -> . expresion COMA paramFuncion
    (67) paramFuncion -> . empty
    (85) expresion -> . exp
    (86) expresion -> . exp comp exp quad_comp
    (40) empty -> .
    (94) exp -> . termino quad_term
    (95) exp -> . termino quad_term exp1
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    ID              shift and go to state 173
    RPAREN          reduce using rule 40 (empty -> .)
    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91
    CTE_STRING      shift and go to state 92

    expresion                      shift and go to state 174
    paramFuncion                   shift and go to state 225
    termino                        shift and go to state 87
    exp                            shift and go to state 97
    factorAux                      shift and go to state 98
    factor                         shift and go to state 90
    var_cte                        shift and go to state 86
    empty                          shift and go to state 172

state 215

    (66) paramFuncion -> expresion COMA paramFuncion .

    RPAREN          reduce using rule 66 (paramFuncion -> expresion COMA paramFuncion .)


state 216

    (69) asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .

    ID              reduce using rule 69 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    IF              reduce using rule 69 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    PRINT           reduce using rule 69 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    WHILE           reduce using rule 69 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    FROM            reduce using rule 69 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    INPUT           reduce using rule 69 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    RBRACE          reduce using rule 69 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)


state 217

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO . LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    LPAREN          shift and go to state 226


state 218

    (45) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE . bloqueAux RBRACE while3
    (43) bloqueAux -> . estatuto
    (44) bloqueAux -> . estatuto bloqueAux
    (50) estatuto -> . asignacion
    (51) estatuto -> . condicion
    (52) estatuto -> . escritura
    (53) estatuto -> . while
    (54) estatuto -> . loopFromDo
    (55) estatuto -> . comparacion
    (56) estatuto -> . llamadaAFuncion
    (57) estatuto -> . lectura
    (69) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (72) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (73) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (77) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (45) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (49) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (71) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (59) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (78) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON

    ID              shift and go to state 53
    IF              shift and go to state 48
    PRINT           shift and go to state 46
    WHILE           shift and go to state 58
    FROM            shift and go to state 56
    INPUT           shift and go to state 52

    estatuto                       shift and go to state 47
    condicion                      shift and go to state 50
    lectura                        shift and go to state 49
    loopFromDo                     shift and go to state 54
    llamadaAFuncion                shift and go to state 55
    asignacion                     shift and go to state 57
    bloqueAux                      shift and go to state 227
    while                          shift and go to state 60
    comparacion                    shift and go to state 61
    escritura                      shift and go to state 62

state 219

    (35) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function .

    MAIN            reduce using rule 35 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function .)


state 220

    (27) bloque -> LBRACE bloqueAux RBRACE .

    ELSE            reduce using rule 27 (bloque -> LBRACE bloqueAux RBRACE .)
    ID              reduce using rule 27 (bloque -> LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 27 (bloque -> LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 27 (bloque -> LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 27 (bloque -> LBRACE bloqueAux RBRACE .)
    FROM            reduce using rule 27 (bloque -> LBRACE bloqueAux RBRACE .)
    INPUT           reduce using rule 27 (bloque -> LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 27 (bloque -> LBRACE bloqueAux RBRACE .)


state 221

    (73) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse . bloque condFinal
    (26) bloque -> . LBRACE RBRACE
    (27) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 189

    bloque                         shift and go to state 228

state 222

    (78) lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .

    ID              reduce using rule 78 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    IF              reduce using rule 78 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    PRINT           reduce using rule 78 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    WHILE           reduce using rule 78 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    FROM            reduce using rule 78 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    INPUT           reduce using rule 78 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    RBRACE          reduce using rule 78 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)


state 223

    (59) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .

    RPAREN          reduce using rule 59 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    ID              reduce using rule 59 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    IF              reduce using rule 59 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    PRINT           reduce using rule 59 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    WHILE           reduce using rule 59 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    FROM            reduce using rule 59 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    INPUT           reduce using rule 59 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    RBRACE          reduce using rule 59 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)


state 224

    (58) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .

    RPAREN          reduce using rule 58 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    ID              reduce using rule 58 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    IF              reduce using rule 58 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    PRINT           reduce using rule 58 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    WHILE           reduce using rule 58 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    FROM            reduce using rule 58 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    INPUT           reduce using rule 58 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    RBRACE          reduce using rule 58 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)


state 225

    (64) paramFuncion -> ID push_id2 COMA paramFuncion .

    RPAREN          reduce using rule 64 (paramFuncion -> ID push_id2 COMA paramFuncion .)


state 226

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN . expresion RPAREN DO LBRACE bloqueAux RBRACE
    (85) expresion -> . exp
    (86) expresion -> . exp comp exp quad_comp
    (94) exp -> . termino quad_term
    (95) exp -> . termino quad_term exp1
    (100) termino -> . factor quad_fact
    (101) termino -> . factor quad_fact termino1
    (104) factor -> . LPAREN expresion RPAREN
    (105) factor -> . factorAux
    (106) factorAux -> . PLUS push_poper var_cte
    (107) factorAux -> . MINUS push_poper var_cte
    (108) factorAux -> . var_cte
    (112) var_cte -> . ID push_id
    (113) var_cte -> . CTE_I push_cte
    (114) var_cte -> . CTE_F push_cte
    (115) var_cte -> . CTE_STRING push_cte

    LPAREN          shift and go to state 94
    PLUS            shift and go to state 89
    MINUS           shift and go to state 88
    ID              shift and go to state 95
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 91
    CTE_STRING      shift and go to state 92

    expresion                      shift and go to state 229
    factor                         shift and go to state 90
    var_cte                        shift and go to state 86
    termino                        shift and go to state 87
    exp                            shift and go to state 97
    factorAux                      shift and go to state 98

state 227

    (45) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux . RBRACE while3

    RBRACE          shift and go to state 230


state 228

    (73) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque . condFinal
    (76) condFinal -> .

    ID              reduce using rule 76 (condFinal -> .)
    IF              reduce using rule 76 (condFinal -> .)
    PRINT           reduce using rule 76 (condFinal -> .)
    WHILE           reduce using rule 76 (condFinal -> .)
    FROM            reduce using rule 76 (condFinal -> .)
    INPUT           reduce using rule 76 (condFinal -> .)
    RBRACE          reduce using rule 76 (condFinal -> .)

    condFinal                      shift and go to state 231

state 229

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion . RPAREN DO LBRACE bloqueAux RBRACE

    RPAREN          shift and go to state 232


state 230

    (45) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE . while3
    (48) while3 -> .

    ID              reduce using rule 48 (while3 -> .)
    IF              reduce using rule 48 (while3 -> .)
    PRINT           reduce using rule 48 (while3 -> .)
    WHILE           reduce using rule 48 (while3 -> .)
    FROM            reduce using rule 48 (while3 -> .)
    INPUT           reduce using rule 48 (while3 -> .)
    RBRACE          reduce using rule 48 (while3 -> .)

    while3                         shift and go to state 233

state 231

    (73) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .

    ID              reduce using rule 73 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    IF              reduce using rule 73 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    PRINT           reduce using rule 73 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    WHILE           reduce using rule 73 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    FROM            reduce using rule 73 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    INPUT           reduce using rule 73 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    RBRACE          reduce using rule 73 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)


state 232

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN . DO LBRACE bloqueAux RBRACE

    DO              shift and go to state 234


state 233

    (45) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .

    ID              reduce using rule 45 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    IF              reduce using rule 45 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    PRINT           reduce using rule 45 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    WHILE           reduce using rule 45 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    FROM            reduce using rule 45 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    INPUT           reduce using rule 45 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    RBRACE          reduce using rule 45 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)


state 234

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 235


state 235

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE . bloqueAux RBRACE
    (43) bloqueAux -> . estatuto
    (44) bloqueAux -> . estatuto bloqueAux
    (50) estatuto -> . asignacion
    (51) estatuto -> . condicion
    (52) estatuto -> . escritura
    (53) estatuto -> . while
    (54) estatuto -> . loopFromDo
    (55) estatuto -> . comparacion
    (56) estatuto -> . llamadaAFuncion
    (57) estatuto -> . lectura
    (69) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (72) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (73) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (77) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (45) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (49) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (71) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (58) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (59) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (78) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON

    ID              shift and go to state 53
    IF              shift and go to state 48
    PRINT           shift and go to state 46
    WHILE           shift and go to state 58
    FROM            shift and go to state 56
    INPUT           shift and go to state 52

    estatuto                       shift and go to state 47
    condicion                      shift and go to state 50
    lectura                        shift and go to state 49
    loopFromDo                     shift and go to state 54
    llamadaAFuncion                shift and go to state 55
    asignacion                     shift and go to state 57
    bloqueAux                      shift and go to state 236
    while                          shift and go to state 60
    comparacion                    shift and go to state 61
    escritura                      shift and go to state 62

state 236

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 237


state 237

    (49) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .

    ID              reduce using rule 49 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 49 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 49 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 49 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    FROM            reduce using rule 49 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    INPUT           reduce using rule 49 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 49 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 35 resolved as shift
WARNING: shift/reduce conflict for COMA in state 148 resolved as shift
WARNING: reduce/reduce conflict in state 148 resolved using rule (escrituraAux -> CTE_STRING push_cte)
WARNING: rejected rule (var_cte -> CTE_STRING push_cte) in state 148
WARNING: reduce/reduce conflict in state 173 resolved using rule (push_id2 -> <empty>)
WARNING: rejected rule (push_id -> <empty>) in state 173
