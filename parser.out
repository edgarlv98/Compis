Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    DETERMINANT
    INVERSA
    OR
    TRANSPUESTA

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID COLON varsGlobal function main endPrograma
Rule 2     program -> PROGRAM ID COLON function main endPrograma
Rule 3     program -> PROGRAM ID COLON varsGlobal main endPrograma
Rule 4     program -> PROGRAM ID COLON main endPrograma
Rule 5     endPrograma -> <empty>
Rule 6     varsGlobal -> VAR varAuxGlobal1
Rule 7     varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON
Rule 8     varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1
Rule 9     varAuxGlobal2 -> ID
Rule 10    varAuxGlobal2 -> ID COMA varAuxGlobal2
Rule 11    varAuxGlobal2 -> ID LCORCH CTE_I RCORCH
Rule 12    varAuxGlobal2 -> ID LCORCH CTE_I RCORCH COMA varAuxGlobal2
Rule 13    varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH
Rule 14    varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2
Rule 15    main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
Rule 16    main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
Rule 17    nomMain -> MAIN
Rule 18    vars -> VAR varAux1
Rule 19    varAux1 -> tipo varAux2 SEMICOLON
Rule 20    varAux1 -> tipo varAux2 SEMICOLON varAux1
Rule 21    varAux2 -> ID push_var
Rule 22    varAux2 -> ID push_var COMA varAux2
Rule 23    varAux2 -> ID LCORCH CTE_I RCORCH push_arreglo
Rule 24    varAux2 -> ID LCORCH CTE_I RCORCH push_arreglo COMA varAux2
Rule 25    varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
Rule 26    varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2
Rule 27    push_var -> <empty>
Rule 28    push_arreglo -> <empty>
Rule 29    push_matriz -> <empty>
Rule 30    tipo -> INT
Rule 31    tipo -> FLOAT
Rule 32    tipo -> CHAR
Rule 33    tipoFunc -> INT
Rule 34    tipoFunc -> FLOAT
Rule 35    tipoFunc -> CHAR
Rule 36    tipoFunc -> VOID
Rule 37    bloque -> LBRACE RBRACE
Rule 38    bloque -> LBRACE bloqueAux RBRACE
Rule 39    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
Rule 40    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
Rule 41    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
Rule 42    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
Rule 43    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
Rule 44    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
Rule 45    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
Rule 46    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
Rule 47    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
Rule 48    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
Rule 49    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
Rule 50    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
Rule 51    functionReturn -> RETURN exp creaCuadReturn SEMICOLON
Rule 52    functionReturn -> empty
Rule 53    creaCuadReturn -> <empty>
Rule 54    endProc -> <empty>
Rule 55    param -> tipo ID paramAvarTable
Rule 56    param -> tipo ID paramAvarTable COMA param
Rule 57    param -> empty
Rule 58    paramAvarTable -> <empty>
Rule 59    empty -> <empty>
Rule 60    push_function -> <empty>
Rule 61    nomFunc -> ID push_function
Rule 62    bloqueAux -> estatuto
Rule 63    bloqueAux -> estatuto bloqueAux
Rule 64    while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
Rule 65    while1 -> <empty>
Rule 66    while2 -> <empty>
Rule 67    while3 -> <empty>
Rule 68    loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
Rule 69    estatuto -> asignacion
Rule 70    estatuto -> condicion
Rule 71    estatuto -> escritura
Rule 72    estatuto -> while
Rule 73    estatuto -> loopFromDo
Rule 74    estatuto -> comparacion
Rule 75    estatuto -> llamadaAFuncion
Rule 76    estatuto -> lectura
Rule 77    llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
Rule 78    llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
Rule 79    actualizaFuncion -> <empty>
Rule 80    gosub -> <empty>
Rule 81    generarEra -> <empty>
Rule 82    paramFuncion -> ID push_id2 paramFuncionAux
Rule 83    paramFuncion -> ID push_id2 paramFuncionAux COMA paramFuncion
Rule 84    paramFuncion -> exp paramFuncionAux
Rule 85    paramFuncion -> exp paramFuncionAux COMA paramFuncion
Rule 86    paramFuncion -> empty
Rule 87    paramFuncionAux -> <empty>
Rule 88    push_id2 -> <empty>
Rule 89    arreglo -> ID push_id LCORCH exp RCORCH ver_dim1
Rule 90    asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON
Rule 91    asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON
Rule 92    asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
Rule 93    push_id_dimensionada -> <empty>
Rule 94    create_asign_dim -> <empty>
Rule 95    ver_dim1 -> <empty>
Rule 96    create_asign -> <empty>
Rule 97    comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
Rule 98    condicion -> IF LPAREN expresion RPAREN cond bloque condFinal
Rule 99    condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
Rule 100   cond -> <empty>
Rule 101   condElse -> <empty>
Rule 102   condFinal -> <empty>
Rule 103   escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
Rule 104   escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
Rule 105   lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
Rule 106   quad_print -> <empty>
Rule 107   escrituraAux -> expresion
Rule 108   escrituraAux -> CTE_STRING push_cte
Rule 109   escrituraAux -> expresion COMA escrituraAux
Rule 110   escrituraAux -> CTE_STRING push_cte COMA escrituraAux
Rule 111   escrituraAux -> llamadaAFuncion
Rule 112   expresion -> exp
Rule 113   expresion -> exp comp exp quad_comp
Rule 114   comp -> LOWERTHAN push_poper
Rule 115   comp -> MORETHAN push_poper
Rule 116   comp -> DIFFERENT push_poper
Rule 117   comp -> DOUBLEEQUAL push_poper
Rule 118   comp -> LOWEREQUAL push_poper
Rule 119   comp -> MOREEQUAL push_poper
Rule 120   quad_comp -> <empty>
Rule 121   exp -> termino quad_term
Rule 122   exp -> termino quad_term exp1
Rule 123   exp1 -> PLUS push_poper exp
Rule 124   exp1 -> MINUS push_poper exp
Rule 125   quad_term -> <empty>
Rule 126   quad_fact -> <empty>
Rule 127   termino -> factor quad_fact
Rule 128   termino -> factor quad_fact termino1
Rule 129   termino1 -> TIMES push_poper termino
Rule 130   termino1 -> DIVIDE push_poper termino
Rule 131   factor -> LPAREN expresion RPAREN
Rule 132   factor -> factorAux
Rule 133   factorAux -> PLUS push_poper var_cte
Rule 134   factorAux -> MINUS push_poper var_cte
Rule 135   factorAux -> var_cte
Rule 136   push_id -> <empty>
Rule 137   push_cte -> <empty>
Rule 138   push_poper -> <empty>
Rule 139   var_cte -> ID push_id
Rule 140   var_cte -> CTE_I push_cte
Rule 141   var_cte -> CTE_F push_cte
Rule 142   var_cte -> CTE_STRING push_cte
Rule 143   var_cte -> arreglo

Terminals, with rules where they appear

AND                  : 
CHAR                 : 32 35
COLON                : 1 2 3 4
COMA                 : 10 12 14 22 24 26 56 83 85 109 110
CTE_F                : 141
CTE_I                : 11 12 13 13 14 14 23 24 25 25 26 26 140
CTE_STRING           : 108 110 142
DETERMINANT          : 
DIFFERENT            : 116
DIVIDE               : 130
DO                   : 68
DOUBLEEQUAL          : 97 117
ELSE                 : 99
EQUAL                : 68 90 91 92
FLOAT                : 31 34
FROM                 : 68
FUNCTION             : 39 40 41 42 43 44 45 46 47 48 49 50
ID                   : 1 2 3 4 9 10 11 12 13 14 21 22 23 24 25 26 55 56 61 68 77 78 82 83 89 90 92 97 105 139
IF                   : 98 99
INPUT                : 105
INT                  : 30 33
INVERSA              : 
LBRACE               : 15 16 37 38 39 40 41 42 43 44 45 46 47 48 49 50 64 68
LCORCH               : 11 12 13 13 14 14 23 24 25 25 26 26 89
LOWEREQUAL           : 118
LOWERTHAN            : 114
LPAREN               : 15 16 39 40 41 42 43 44 45 46 47 48 49 50 64 68 68 77 78 98 99 103 104 105 131
MAIN                 : 17
MINUS                : 124 134
MOREEQUAL            : 119
MORETHAN             : 115
OR                   : 
PLUS                 : 123 133
PRINT                : 103 104
PROGRAM              : 1 2 3 4
RBRACE               : 15 16 37 38 39 40 41 42 43 44 45 46 47 48 49 50 64 68
RCORCH               : 11 12 13 13 14 14 23 24 25 25 26 26 89
RETURN               : 51
RPAREN               : 15 16 39 40 41 42 43 44 45 46 47 48 49 50 64 68 68 77 78 98 99 103 104 105 131
SEMICOLON            : 7 8 19 20 51 90 91 92 97 103 104 105
TIMES                : 129
TO                   : 68
TRANSPUESTA          : 
VAR                  : 6 18
VOID                 : 36
WHILE                : 64
error                : 

Nonterminals, with rules where they appear

actualizaFuncion     : 77 78
arreglo              : 91 143
asignacion           : 69
bloque               : 98 99 99
bloqueAux            : 15 16 38 40 42 43 44 46 47 48 50 63 64 68
comp                 : 113
comparacion          : 74
cond                 : 98 99
condElse             : 99
condFinal            : 98 99
condicion            : 70
creaCuadReturn       : 51
create_asign         : 90 91 92
create_asign_dim     : 
empty                : 52 57 86
endProc              : 39 40 41 42 43 44 45 46 47 48 49 50
endPrograma          : 1 2 3 4
escritura            : 71
escrituraAux         : 103 109 110
estatuto             : 62 63
exp                  : 51 84 85 89 112 113 113 123 124
exp1                 : 122
expresion            : 64 68 68 77 90 91 97 98 99 107 109 131
factor               : 127 128
factorAux            : 132
function             : 1 2 41 42 44 47 49 50
functionReturn       : 39 40 41 42 43 44 45 46 47 48 49 50
generarEra           : 77 78
gosub                : 77 78
lectura              : 76
llamadaAFuncion      : 75 92 104 111
loopFromDo           : 73
main                 : 1 2 3 4
nomFunc              : 39 40 41 42 43 44 45 46 47 48 49 50
nomMain              : 15 16
param                : 45 46 47 48 49 50 56
paramAvarTable       : 55 56
paramFuncion         : 77 78 83 85
paramFuncionAux      : 82 83 84 85
program              : 0
push_arreglo         : 23 24
push_cte             : 108 110 140 141 142
push_function        : 61
push_id              : 89 90 92 97 105 139
push_id2             : 82 83
push_id_dimensionada : 
push_matriz          : 25 26
push_poper           : 90 91 92 97 103 104 105 114 115 116 117 118 119 123 124 129 130 133 134
push_var             : 21 22
quad_comp            : 113
quad_fact            : 127 128
quad_print           : 103 104 105
quad_term            : 121 122
termino              : 121 122 129 130
termino1             : 128
tipo                 : 7 8 19 20 55 56
tipoFunc             : 39 40 41 42 43 44 45 46 47 48 49 50
varAux1              : 18 20
varAux2              : 19 20 22 24 26
varAuxGlobal1        : 6 8
varAuxGlobal2        : 7 8 10 12 14
var_cte              : 133 134 135
vars                 : 16 40 42 48 50
varsGlobal           : 1 3
ver_dim1             : 89
while                : 72
while1               : 64
while2               : 64
while3               : 64

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID COLON varsGlobal function main endPrograma
    (2) program -> . PROGRAM ID COLON function main endPrograma
    (3) program -> . PROGRAM ID COLON varsGlobal main endPrograma
    (4) program -> . PROGRAM ID COLON main endPrograma

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID COLON varsGlobal function main endPrograma
    (2) program -> PROGRAM . ID COLON function main endPrograma
    (3) program -> PROGRAM . ID COLON varsGlobal main endPrograma
    (4) program -> PROGRAM . ID COLON main endPrograma

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . COLON varsGlobal function main endPrograma
    (2) program -> PROGRAM ID . COLON function main endPrograma
    (3) program -> PROGRAM ID . COLON varsGlobal main endPrograma
    (4) program -> PROGRAM ID . COLON main endPrograma

    COLON           shift and go to state 4


state 4

    (1) program -> PROGRAM ID COLON . varsGlobal function main endPrograma
    (2) program -> PROGRAM ID COLON . function main endPrograma
    (3) program -> PROGRAM ID COLON . varsGlobal main endPrograma
    (4) program -> PROGRAM ID COLON . main endPrograma
    (6) varsGlobal -> . VAR varAuxGlobal1
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (15) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (16) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (17) nomMain -> . MAIN

    VAR             shift and go to state 8
    FUNCTION        shift and go to state 9
    MAIN            shift and go to state 11

    varsGlobal                     shift and go to state 5
    function                       shift and go to state 6
    main                           shift and go to state 7
    nomMain                        shift and go to state 10

state 5

    (1) program -> PROGRAM ID COLON varsGlobal . function main endPrograma
    (3) program -> PROGRAM ID COLON varsGlobal . main endPrograma
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (15) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (16) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (17) nomMain -> . MAIN

    FUNCTION        shift and go to state 9
    MAIN            shift and go to state 11

    function                       shift and go to state 12
    main                           shift and go to state 13
    nomMain                        shift and go to state 10

state 6

    (2) program -> PROGRAM ID COLON function . main endPrograma
    (15) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (16) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (17) nomMain -> . MAIN

    MAIN            shift and go to state 11

    main                           shift and go to state 14
    nomMain                        shift and go to state 10

state 7

    (4) program -> PROGRAM ID COLON main . endPrograma
    (5) endPrograma -> .

    $end            reduce using rule 5 (endPrograma -> .)

    endPrograma                    shift and go to state 15

state 8

    (6) varsGlobal -> VAR . varAuxGlobal1
    (7) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON
    (8) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON varAuxGlobal1
    (30) tipo -> . INT
    (31) tipo -> . FLOAT
    (32) tipo -> . CHAR

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    varAuxGlobal1                  shift and go to state 16
    tipo                           shift and go to state 17

state 9

    (39) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (33) tipoFunc -> . INT
    (34) tipoFunc -> . FLOAT
    (35) tipoFunc -> . CHAR
    (36) tipoFunc -> . VOID

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    VOID            shift and go to state 25

    tipoFunc                       shift and go to state 21

state 10

    (15) main -> nomMain . LPAREN RPAREN LBRACE bloqueAux RBRACE
    (16) main -> nomMain . LPAREN RPAREN LBRACE vars bloqueAux RBRACE

    LPAREN          shift and go to state 26


state 11

    (17) nomMain -> MAIN .

    LPAREN          reduce using rule 17 (nomMain -> MAIN .)


state 12

    (1) program -> PROGRAM ID COLON varsGlobal function . main endPrograma
    (15) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE
    (16) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE
    (17) nomMain -> . MAIN

    MAIN            shift and go to state 11

    main                           shift and go to state 27
    nomMain                        shift and go to state 10

state 13

    (3) program -> PROGRAM ID COLON varsGlobal main . endPrograma
    (5) endPrograma -> .

    $end            reduce using rule 5 (endPrograma -> .)

    endPrograma                    shift and go to state 28

state 14

    (2) program -> PROGRAM ID COLON function main . endPrograma
    (5) endPrograma -> .

    $end            reduce using rule 5 (endPrograma -> .)

    endPrograma                    shift and go to state 29

state 15

    (4) program -> PROGRAM ID COLON main endPrograma .

    $end            reduce using rule 4 (program -> PROGRAM ID COLON main endPrograma .)


state 16

    (6) varsGlobal -> VAR varAuxGlobal1 .

    FUNCTION        reduce using rule 6 (varsGlobal -> VAR varAuxGlobal1 .)
    MAIN            reduce using rule 6 (varsGlobal -> VAR varAuxGlobal1 .)


state 17

    (7) varAuxGlobal1 -> tipo . varAuxGlobal2 SEMICOLON
    (8) varAuxGlobal1 -> tipo . varAuxGlobal2 SEMICOLON varAuxGlobal1
    (9) varAuxGlobal2 -> . ID
    (10) varAuxGlobal2 -> . ID COMA varAuxGlobal2
    (11) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH
    (12) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    ID              shift and go to state 31

    varAuxGlobal2                  shift and go to state 30

state 18

    (30) tipo -> INT .

    ID              reduce using rule 30 (tipo -> INT .)


state 19

    (31) tipo -> FLOAT .

    ID              reduce using rule 31 (tipo -> FLOAT .)


state 20

    (32) tipo -> CHAR .

    ID              reduce using rule 32 (tipo -> CHAR .)


state 21

    (39) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (61) nomFunc -> . ID push_function

    ID              shift and go to state 33

    nomFunc                        shift and go to state 32

state 22

    (33) tipoFunc -> INT .

    ID              reduce using rule 33 (tipoFunc -> INT .)


state 23

    (34) tipoFunc -> FLOAT .

    ID              reduce using rule 34 (tipoFunc -> FLOAT .)


state 24

    (35) tipoFunc -> CHAR .

    ID              reduce using rule 35 (tipoFunc -> CHAR .)


state 25

    (36) tipoFunc -> VOID .

    ID              reduce using rule 36 (tipoFunc -> VOID .)


state 26

    (15) main -> nomMain LPAREN . RPAREN LBRACE bloqueAux RBRACE
    (16) main -> nomMain LPAREN . RPAREN LBRACE vars bloqueAux RBRACE

    RPAREN          shift and go to state 34


state 27

    (1) program -> PROGRAM ID COLON varsGlobal function main . endPrograma
    (5) endPrograma -> .

    $end            reduce using rule 5 (endPrograma -> .)

    endPrograma                    shift and go to state 35

state 28

    (3) program -> PROGRAM ID COLON varsGlobal main endPrograma .

    $end            reduce using rule 3 (program -> PROGRAM ID COLON varsGlobal main endPrograma .)


state 29

    (2) program -> PROGRAM ID COLON function main endPrograma .

    $end            reduce using rule 2 (program -> PROGRAM ID COLON function main endPrograma .)


state 30

    (7) varAuxGlobal1 -> tipo varAuxGlobal2 . SEMICOLON
    (8) varAuxGlobal1 -> tipo varAuxGlobal2 . SEMICOLON varAuxGlobal1

    SEMICOLON       shift and go to state 36


state 31

    (9) varAuxGlobal2 -> ID .
    (10) varAuxGlobal2 -> ID . COMA varAuxGlobal2
    (11) varAuxGlobal2 -> ID . LCORCH CTE_I RCORCH
    (12) varAuxGlobal2 -> ID . LCORCH CTE_I RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> ID . LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> ID . LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    SEMICOLON       reduce using rule 9 (varAuxGlobal2 -> ID .)
    COMA            shift and go to state 37
    LCORCH          shift and go to state 38


state 32

    (39) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function

    LPAREN          shift and go to state 39


state 33

    (61) nomFunc -> ID . push_function
    (60) push_function -> .

    LPAREN          reduce using rule 60 (push_function -> .)

    push_function                  shift and go to state 40

state 34

    (15) main -> nomMain LPAREN RPAREN . LBRACE bloqueAux RBRACE
    (16) main -> nomMain LPAREN RPAREN . LBRACE vars bloqueAux RBRACE

    LBRACE          shift and go to state 41


state 35

    (1) program -> PROGRAM ID COLON varsGlobal function main endPrograma .

    $end            reduce using rule 1 (program -> PROGRAM ID COLON varsGlobal function main endPrograma .)


state 36

    (7) varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON .
    (8) varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON . varAuxGlobal1
    (7) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON
    (8) varAuxGlobal1 -> . tipo varAuxGlobal2 SEMICOLON varAuxGlobal1
    (30) tipo -> . INT
    (31) tipo -> . FLOAT
    (32) tipo -> . CHAR

    FUNCTION        reduce using rule 7 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON .)
    MAIN            reduce using rule 7 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    tipo                           shift and go to state 17
    varAuxGlobal1                  shift and go to state 42

state 37

    (10) varAuxGlobal2 -> ID COMA . varAuxGlobal2
    (9) varAuxGlobal2 -> . ID
    (10) varAuxGlobal2 -> . ID COMA varAuxGlobal2
    (11) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH
    (12) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    ID              shift and go to state 31

    varAuxGlobal2                  shift and go to state 43

state 38

    (11) varAuxGlobal2 -> ID LCORCH . CTE_I RCORCH
    (12) varAuxGlobal2 -> ID LCORCH . CTE_I RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> ID LCORCH . CTE_I RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> ID LCORCH . CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    CTE_I           shift and go to state 44


state 39

    (39) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (55) param -> . tipo ID paramAvarTable
    (56) param -> . tipo ID paramAvarTable COMA param
    (57) param -> . empty
    (30) tipo -> . INT
    (31) tipo -> . FLOAT
    (32) tipo -> . CHAR
    (59) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 45
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

  ! RPAREN          [ reduce using rule 59 (empty -> .) ]

    param                          shift and go to state 46
    tipo                           shift and go to state 47
    empty                          shift and go to state 48

state 40

    (61) nomFunc -> ID push_function .

    LPAREN          reduce using rule 61 (nomFunc -> ID push_function .)


state 41

    (15) main -> nomMain LPAREN RPAREN LBRACE . bloqueAux RBRACE
    (16) main -> nomMain LPAREN RPAREN LBRACE . vars bloqueAux RBRACE
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (18) vars -> . VAR varAux1
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (90) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (91) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (98) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (103) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (104) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (97) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (105) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    VAR             shift and go to state 52
    ID              shift and go to state 61
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    WHILE           shift and go to state 65
    FROM            shift and go to state 66
    INPUT           shift and go to state 67

    bloqueAux                      shift and go to state 49
    vars                           shift and go to state 50
    estatuto                       shift and go to state 51
    asignacion                     shift and go to state 53
    condicion                      shift and go to state 54
    escritura                      shift and go to state 55
    while                          shift and go to state 56
    loopFromDo                     shift and go to state 57
    comparacion                    shift and go to state 58
    llamadaAFuncion                shift and go to state 59
    lectura                        shift and go to state 60
    arreglo                        shift and go to state 62

state 42

    (8) varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1 .

    FUNCTION        reduce using rule 8 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1 .)
    MAIN            reduce using rule 8 (varAuxGlobal1 -> tipo varAuxGlobal2 SEMICOLON varAuxGlobal1 .)


state 43

    (10) varAuxGlobal2 -> ID COMA varAuxGlobal2 .

    SEMICOLON       reduce using rule 10 (varAuxGlobal2 -> ID COMA varAuxGlobal2 .)


state 44

    (11) varAuxGlobal2 -> ID LCORCH CTE_I . RCORCH
    (12) varAuxGlobal2 -> ID LCORCH CTE_I . RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> ID LCORCH CTE_I . RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> ID LCORCH CTE_I . RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    RCORCH          shift and go to state 68


state 45

    (39) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE functionReturn RBRACE endProc
    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE functionReturn RBRACE endProc function
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE bloqueAux functionReturn RBRACE endProc function

    LBRACE          shift and go to state 69


state 46

    (45) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function

    RPAREN          shift and go to state 70


state 47

    (55) param -> tipo . ID paramAvarTable
    (56) param -> tipo . ID paramAvarTable COMA param

    ID              shift and go to state 71


state 48

    (57) param -> empty .

    RPAREN          reduce using rule 57 (param -> empty .)


state 49

    (15) main -> nomMain LPAREN RPAREN LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 72


state 50

    (16) main -> nomMain LPAREN RPAREN LBRACE vars . bloqueAux RBRACE
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (90) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (91) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (98) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (103) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (104) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (97) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (105) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 61
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    WHILE           shift and go to state 65
    FROM            shift and go to state 66
    INPUT           shift and go to state 67

    bloqueAux                      shift and go to state 73
    estatuto                       shift and go to state 51
    asignacion                     shift and go to state 53
    condicion                      shift and go to state 54
    escritura                      shift and go to state 55
    while                          shift and go to state 56
    loopFromDo                     shift and go to state 57
    comparacion                    shift and go to state 58
    llamadaAFuncion                shift and go to state 59
    lectura                        shift and go to state 60
    arreglo                        shift and go to state 62

state 51

    (62) bloqueAux -> estatuto .
    (63) bloqueAux -> estatuto . bloqueAux
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (90) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (91) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (98) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (103) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (104) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (97) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (105) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    RBRACE          reduce using rule 62 (bloqueAux -> estatuto .)
    RETURN          reduce using rule 62 (bloqueAux -> estatuto .)
    ID              shift and go to state 61
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    WHILE           shift and go to state 65
    FROM            shift and go to state 66
    INPUT           shift and go to state 67

    estatuto                       shift and go to state 51
    bloqueAux                      shift and go to state 74
    asignacion                     shift and go to state 53
    condicion                      shift and go to state 54
    escritura                      shift and go to state 55
    while                          shift and go to state 56
    loopFromDo                     shift and go to state 57
    comparacion                    shift and go to state 58
    llamadaAFuncion                shift and go to state 59
    lectura                        shift and go to state 60
    arreglo                        shift and go to state 62

state 52

    (18) vars -> VAR . varAux1
    (19) varAux1 -> . tipo varAux2 SEMICOLON
    (20) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (30) tipo -> . INT
    (31) tipo -> . FLOAT
    (32) tipo -> . CHAR

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    varAux1                        shift and go to state 75
    tipo                           shift and go to state 76

state 53

    (69) estatuto -> asignacion .

    ID              reduce using rule 69 (estatuto -> asignacion .)
    IF              reduce using rule 69 (estatuto -> asignacion .)
    PRINT           reduce using rule 69 (estatuto -> asignacion .)
    WHILE           reduce using rule 69 (estatuto -> asignacion .)
    FROM            reduce using rule 69 (estatuto -> asignacion .)
    INPUT           reduce using rule 69 (estatuto -> asignacion .)
    RBRACE          reduce using rule 69 (estatuto -> asignacion .)
    RETURN          reduce using rule 69 (estatuto -> asignacion .)


state 54

    (70) estatuto -> condicion .

    ID              reduce using rule 70 (estatuto -> condicion .)
    IF              reduce using rule 70 (estatuto -> condicion .)
    PRINT           reduce using rule 70 (estatuto -> condicion .)
    WHILE           reduce using rule 70 (estatuto -> condicion .)
    FROM            reduce using rule 70 (estatuto -> condicion .)
    INPUT           reduce using rule 70 (estatuto -> condicion .)
    RBRACE          reduce using rule 70 (estatuto -> condicion .)
    RETURN          reduce using rule 70 (estatuto -> condicion .)


state 55

    (71) estatuto -> escritura .

    ID              reduce using rule 71 (estatuto -> escritura .)
    IF              reduce using rule 71 (estatuto -> escritura .)
    PRINT           reduce using rule 71 (estatuto -> escritura .)
    WHILE           reduce using rule 71 (estatuto -> escritura .)
    FROM            reduce using rule 71 (estatuto -> escritura .)
    INPUT           reduce using rule 71 (estatuto -> escritura .)
    RBRACE          reduce using rule 71 (estatuto -> escritura .)
    RETURN          reduce using rule 71 (estatuto -> escritura .)


state 56

    (72) estatuto -> while .

    ID              reduce using rule 72 (estatuto -> while .)
    IF              reduce using rule 72 (estatuto -> while .)
    PRINT           reduce using rule 72 (estatuto -> while .)
    WHILE           reduce using rule 72 (estatuto -> while .)
    FROM            reduce using rule 72 (estatuto -> while .)
    INPUT           reduce using rule 72 (estatuto -> while .)
    RBRACE          reduce using rule 72 (estatuto -> while .)
    RETURN          reduce using rule 72 (estatuto -> while .)


state 57

    (73) estatuto -> loopFromDo .

    ID              reduce using rule 73 (estatuto -> loopFromDo .)
    IF              reduce using rule 73 (estatuto -> loopFromDo .)
    PRINT           reduce using rule 73 (estatuto -> loopFromDo .)
    WHILE           reduce using rule 73 (estatuto -> loopFromDo .)
    FROM            reduce using rule 73 (estatuto -> loopFromDo .)
    INPUT           reduce using rule 73 (estatuto -> loopFromDo .)
    RBRACE          reduce using rule 73 (estatuto -> loopFromDo .)
    RETURN          reduce using rule 73 (estatuto -> loopFromDo .)


state 58

    (74) estatuto -> comparacion .

    ID              reduce using rule 74 (estatuto -> comparacion .)
    IF              reduce using rule 74 (estatuto -> comparacion .)
    PRINT           reduce using rule 74 (estatuto -> comparacion .)
    WHILE           reduce using rule 74 (estatuto -> comparacion .)
    FROM            reduce using rule 74 (estatuto -> comparacion .)
    INPUT           reduce using rule 74 (estatuto -> comparacion .)
    RBRACE          reduce using rule 74 (estatuto -> comparacion .)
    RETURN          reduce using rule 74 (estatuto -> comparacion .)


state 59

    (75) estatuto -> llamadaAFuncion .

    ID              reduce using rule 75 (estatuto -> llamadaAFuncion .)
    IF              reduce using rule 75 (estatuto -> llamadaAFuncion .)
    PRINT           reduce using rule 75 (estatuto -> llamadaAFuncion .)
    WHILE           reduce using rule 75 (estatuto -> llamadaAFuncion .)
    FROM            reduce using rule 75 (estatuto -> llamadaAFuncion .)
    INPUT           reduce using rule 75 (estatuto -> llamadaAFuncion .)
    RBRACE          reduce using rule 75 (estatuto -> llamadaAFuncion .)
    RETURN          reduce using rule 75 (estatuto -> llamadaAFuncion .)


state 60

    (76) estatuto -> lectura .

    ID              reduce using rule 76 (estatuto -> lectura .)
    IF              reduce using rule 76 (estatuto -> lectura .)
    PRINT           reduce using rule 76 (estatuto -> lectura .)
    WHILE           reduce using rule 76 (estatuto -> lectura .)
    FROM            reduce using rule 76 (estatuto -> lectura .)
    INPUT           reduce using rule 76 (estatuto -> lectura .)
    RBRACE          reduce using rule 76 (estatuto -> lectura .)
    RETURN          reduce using rule 76 (estatuto -> lectura .)


state 61

    (90) asignacion -> ID . push_id EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> ID . push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (97) comparacion -> ID . push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (89) arreglo -> ID . push_id LCORCH exp RCORCH ver_dim1
    (136) push_id -> .
    (79) actualizaFuncion -> .

    EQUAL           reduce using rule 136 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 136 (push_id -> .)
    LCORCH          reduce using rule 136 (push_id -> .)
    LPAREN          reduce using rule 79 (actualizaFuncion -> .)

    push_id                        shift and go to state 77
    actualizaFuncion               shift and go to state 78

state 62

    (91) asignacion -> arreglo . EQUAL push_poper expresion create_asign SEMICOLON

    EQUAL           shift and go to state 79


state 63

    (98) condicion -> IF . LPAREN expresion RPAREN cond bloque condFinal
    (99) condicion -> IF . LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal

    LPAREN          shift and go to state 80


state 64

    (103) escritura -> PRINT . push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (104) escritura -> PRINT . push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (138) push_poper -> .

    LPAREN          reduce using rule 138 (push_poper -> .)

    push_poper                     shift and go to state 81

state 65

    (64) while -> WHILE . while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (65) while1 -> .

    LPAREN          reduce using rule 65 (while1 -> .)

    while1                         shift and go to state 82

state 66

    (68) loopFromDo -> FROM . LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    LPAREN          shift and go to state 83


state 67

    (105) lectura -> INPUT . push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (138) push_poper -> .

    LPAREN          reduce using rule 138 (push_poper -> .)

    push_poper                     shift and go to state 84

state 68

    (11) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH .
    (12) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH . COMA varAuxGlobal2
    (13) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH . LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH . LCORCH CTE_I RCORCH COMA varAuxGlobal2

    SEMICOLON       reduce using rule 11 (varAuxGlobal2 -> ID LCORCH CTE_I RCORCH .)
    COMA            shift and go to state 86
    LCORCH          shift and go to state 85


state 69

    (39) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . functionReturn RBRACE endProc
    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux functionReturn RBRACE endProc
    (41) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . functionReturn RBRACE endProc function
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . bloqueAux functionReturn RBRACE endProc
    (44) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . bloqueAux functionReturn RBRACE endProc function
    (51) functionReturn -> . RETURN exp creaCuadReturn SEMICOLON
    (52) functionReturn -> . empty
    (18) vars -> . VAR varAux1
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (59) empty -> .
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (90) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (91) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (98) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (103) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (104) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (97) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (105) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    RETURN          shift and go to state 90
    VAR             shift and go to state 52
    RBRACE          reduce using rule 59 (empty -> .)
    ID              shift and go to state 61
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    WHILE           shift and go to state 65
    FROM            shift and go to state 66
    INPUT           shift and go to state 67

    functionReturn                 shift and go to state 87
    vars                           shift and go to state 88
    bloqueAux                      shift and go to state 89
    empty                          shift and go to state 91
    estatuto                       shift and go to state 51
    asignacion                     shift and go to state 53
    condicion                      shift and go to state 54
    escritura                      shift and go to state 55
    while                          shift and go to state 56
    loopFromDo                     shift and go to state 57
    comparacion                    shift and go to state 58
    llamadaAFuncion                shift and go to state 59
    lectura                        shift and go to state 60
    arreglo                        shift and go to state 62

state 70

    (45) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE functionReturn RBRACE endProc
    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE functionReturn RBRACE endProc function
    (50) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux functionReturn RBRACE endProc function

    LBRACE          shift and go to state 92


state 71

    (55) param -> tipo ID . paramAvarTable
    (56) param -> tipo ID . paramAvarTable COMA param
    (58) paramAvarTable -> .

    COMA            reduce using rule 58 (paramAvarTable -> .)
    RPAREN          reduce using rule 58 (paramAvarTable -> .)

    paramAvarTable                 shift and go to state 93

state 72

    (15) main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE .

    $end            reduce using rule 15 (main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE .)


state 73

    (16) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux . RBRACE

    RBRACE          shift and go to state 94


state 74

    (63) bloqueAux -> estatuto bloqueAux .

    RBRACE          reduce using rule 63 (bloqueAux -> estatuto bloqueAux .)
    RETURN          reduce using rule 63 (bloqueAux -> estatuto bloqueAux .)


state 75

    (18) vars -> VAR varAux1 .

    ID              reduce using rule 18 (vars -> VAR varAux1 .)
    IF              reduce using rule 18 (vars -> VAR varAux1 .)
    PRINT           reduce using rule 18 (vars -> VAR varAux1 .)
    WHILE           reduce using rule 18 (vars -> VAR varAux1 .)
    FROM            reduce using rule 18 (vars -> VAR varAux1 .)
    INPUT           reduce using rule 18 (vars -> VAR varAux1 .)


state 76

    (19) varAux1 -> tipo . varAux2 SEMICOLON
    (20) varAux1 -> tipo . varAux2 SEMICOLON varAux1
    (21) varAux2 -> . ID push_var
    (22) varAux2 -> . ID push_var COMA varAux2
    (23) varAux2 -> . ID LCORCH CTE_I RCORCH push_arreglo
    (24) varAux2 -> . ID LCORCH CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    ID              shift and go to state 96

    varAux2                        shift and go to state 95

state 77

    (90) asignacion -> ID push_id . EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> ID push_id . EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (97) comparacion -> ID push_id . DOUBLEEQUAL push_poper expresion SEMICOLON
    (89) arreglo -> ID push_id . LCORCH exp RCORCH ver_dim1

    EQUAL           shift and go to state 97
    DOUBLEEQUAL     shift and go to state 98
    LCORCH          shift and go to state 99


state 78

    (77) llamadaAFuncion -> ID actualizaFuncion . generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> ID actualizaFuncion . generarEra LPAREN paramFuncion gosub RPAREN
    (81) generarEra -> .

    LPAREN          reduce using rule 81 (generarEra -> .)

    generarEra                     shift and go to state 100

state 79

    (91) asignacion -> arreglo EQUAL . push_poper expresion create_asign SEMICOLON
    (138) push_poper -> .

    LPAREN          reduce using rule 138 (push_poper -> .)
    PLUS            reduce using rule 138 (push_poper -> .)
    MINUS           reduce using rule 138 (push_poper -> .)
    ID              reduce using rule 138 (push_poper -> .)
    CTE_I           reduce using rule 138 (push_poper -> .)
    CTE_F           reduce using rule 138 (push_poper -> .)
    CTE_STRING      reduce using rule 138 (push_poper -> .)

    push_poper                     shift and go to state 101

state 80

    (98) condicion -> IF LPAREN . expresion RPAREN cond bloque condFinal
    (99) condicion -> IF LPAREN . expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (112) expresion -> . exp
    (113) expresion -> . exp comp exp quad_comp
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    expresion                      shift and go to state 103
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 81

    (103) escritura -> PRINT push_poper . LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (104) escritura -> PRINT push_poper . LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON

    LPAREN          shift and go to state 116


state 82

    (64) while -> WHILE while1 . LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3

    LPAREN          shift and go to state 117


state 83

    (68) loopFromDo -> FROM LPAREN . ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    ID              shift and go to state 118


state 84

    (105) lectura -> INPUT push_poper . LPAREN ID push_id RPAREN quad_print SEMICOLON

    LPAREN          shift and go to state 119


state 85

    (13) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH . CTE_I RCORCH
    (14) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH . CTE_I RCORCH COMA varAuxGlobal2

    CTE_I           shift and go to state 120


state 86

    (12) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH COMA . varAuxGlobal2
    (9) varAuxGlobal2 -> . ID
    (10) varAuxGlobal2 -> . ID COMA varAuxGlobal2
    (11) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH
    (12) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    ID              shift and go to state 31

    varAuxGlobal2                  shift and go to state 121

state 87

    (39) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn . RBRACE endProc
    (41) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn . RBRACE endProc function

    RBRACE          shift and go to state 122


state 88

    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux functionReturn RBRACE endProc
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux functionReturn RBRACE endProc function
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (90) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (91) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (98) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (103) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (104) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (97) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (105) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 61
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    WHILE           shift and go to state 65
    FROM            shift and go to state 66
    INPUT           shift and go to state 67

    bloqueAux                      shift and go to state 123
    estatuto                       shift and go to state 51
    asignacion                     shift and go to state 53
    condicion                      shift and go to state 54
    escritura                      shift and go to state 55
    while                          shift and go to state 56
    loopFromDo                     shift and go to state 57
    comparacion                    shift and go to state 58
    llamadaAFuncion                shift and go to state 59
    lectura                        shift and go to state 60
    arreglo                        shift and go to state 62

state 89

    (43) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux . functionReturn RBRACE endProc
    (44) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux . functionReturn RBRACE endProc function
    (51) functionReturn -> . RETURN exp creaCuadReturn SEMICOLON
    (52) functionReturn -> . empty
    (59) empty -> .

    RETURN          shift and go to state 90
    RBRACE          reduce using rule 59 (empty -> .)

    functionReturn                 shift and go to state 124
    empty                          shift and go to state 91

state 90

    (51) functionReturn -> RETURN . exp creaCuadReturn SEMICOLON
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    exp                            shift and go to state 125
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 91

    (52) functionReturn -> empty .

    RBRACE          reduce using rule 52 (functionReturn -> empty .)


state 92

    (45) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . functionReturn RBRACE endProc
    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . bloqueAux functionReturn RBRACE endProc
    (47) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . bloqueAux functionReturn RBRACE endProc function
    (48) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux functionReturn RBRACE endProc
    (49) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . functionReturn RBRACE endProc function
    (50) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux functionReturn RBRACE endProc function
    (51) functionReturn -> . RETURN exp creaCuadReturn SEMICOLON
    (52) functionReturn -> . empty
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (18) vars -> . VAR varAux1
    (59) empty -> .
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (90) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (91) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (98) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (103) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (104) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (97) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (105) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    RETURN          shift and go to state 90
    VAR             shift and go to state 52
    RBRACE          reduce using rule 59 (empty -> .)
    ID              shift and go to state 61
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    WHILE           shift and go to state 65
    FROM            shift and go to state 66
    INPUT           shift and go to state 67

    functionReturn                 shift and go to state 126
    bloqueAux                      shift and go to state 127
    vars                           shift and go to state 128
    empty                          shift and go to state 91
    estatuto                       shift and go to state 51
    asignacion                     shift and go to state 53
    condicion                      shift and go to state 54
    escritura                      shift and go to state 55
    while                          shift and go to state 56
    loopFromDo                     shift and go to state 57
    comparacion                    shift and go to state 58
    llamadaAFuncion                shift and go to state 59
    lectura                        shift and go to state 60
    arreglo                        shift and go to state 62

state 93

    (55) param -> tipo ID paramAvarTable .
    (56) param -> tipo ID paramAvarTable . COMA param

    RPAREN          reduce using rule 55 (param -> tipo ID paramAvarTable .)
    COMA            shift and go to state 129


state 94

    (16) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE .

    $end            reduce using rule 16 (main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE .)


state 95

    (19) varAux1 -> tipo varAux2 . SEMICOLON
    (20) varAux1 -> tipo varAux2 . SEMICOLON varAux1

    SEMICOLON       shift and go to state 130


state 96

    (21) varAux2 -> ID . push_var
    (22) varAux2 -> ID . push_var COMA varAux2
    (23) varAux2 -> ID . LCORCH CTE_I RCORCH push_arreglo
    (24) varAux2 -> ID . LCORCH CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> ID . LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> ID . LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2
    (27) push_var -> .

    LCORCH          shift and go to state 132
    COMA            reduce using rule 27 (push_var -> .)
    SEMICOLON       reduce using rule 27 (push_var -> .)

    push_var                       shift and go to state 131

state 97

    (90) asignacion -> ID push_id EQUAL . push_poper expresion create_asign SEMICOLON
    (92) asignacion -> ID push_id EQUAL . push_poper llamadaAFuncion create_asign SEMICOLON
    (138) push_poper -> .

    ID              reduce using rule 138 (push_poper -> .)
    LPAREN          reduce using rule 138 (push_poper -> .)
    PLUS            reduce using rule 138 (push_poper -> .)
    MINUS           reduce using rule 138 (push_poper -> .)
    CTE_I           reduce using rule 138 (push_poper -> .)
    CTE_F           reduce using rule 138 (push_poper -> .)
    CTE_STRING      reduce using rule 138 (push_poper -> .)

    push_poper                     shift and go to state 133

state 98

    (97) comparacion -> ID push_id DOUBLEEQUAL . push_poper expresion SEMICOLON
    (138) push_poper -> .

    LPAREN          reduce using rule 138 (push_poper -> .)
    PLUS            reduce using rule 138 (push_poper -> .)
    MINUS           reduce using rule 138 (push_poper -> .)
    ID              reduce using rule 138 (push_poper -> .)
    CTE_I           reduce using rule 138 (push_poper -> .)
    CTE_F           reduce using rule 138 (push_poper -> .)
    CTE_STRING      reduce using rule 138 (push_poper -> .)

    push_poper                     shift and go to state 134

state 99

    (89) arreglo -> ID push_id LCORCH . exp RCORCH ver_dim1
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    exp                            shift and go to state 135
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 100

    (77) llamadaAFuncion -> ID actualizaFuncion generarEra . LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> ID actualizaFuncion generarEra . LPAREN paramFuncion gosub RPAREN

    LPAREN          shift and go to state 136


state 101

    (91) asignacion -> arreglo EQUAL push_poper . expresion create_asign SEMICOLON
    (112) expresion -> . exp
    (113) expresion -> . exp comp exp quad_comp
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    arreglo                        shift and go to state 115
    expresion                      shift and go to state 137
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109

state 102

    (131) factor -> LPAREN . expresion RPAREN
    (112) expresion -> . exp
    (113) expresion -> . exp comp exp quad_comp
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    expresion                      shift and go to state 138
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 103

    (98) condicion -> IF LPAREN expresion . RPAREN cond bloque condFinal
    (99) condicion -> IF LPAREN expresion . RPAREN cond bloque ELSE condElse bloque condFinal

    RPAREN          shift and go to state 139


state 104

    (112) expresion -> exp .
    (113) expresion -> exp . comp exp quad_comp
    (114) comp -> . LOWERTHAN push_poper
    (115) comp -> . MORETHAN push_poper
    (116) comp -> . DIFFERENT push_poper
    (117) comp -> . DOUBLEEQUAL push_poper
    (118) comp -> . LOWEREQUAL push_poper
    (119) comp -> . MOREEQUAL push_poper

    RPAREN          reduce using rule 112 (expresion -> exp .)
    SEMICOLON       reduce using rule 112 (expresion -> exp .)
    COMA            reduce using rule 112 (expresion -> exp .)
    ID              reduce using rule 112 (expresion -> exp .)
    IF              reduce using rule 112 (expresion -> exp .)
    PRINT           reduce using rule 112 (expresion -> exp .)
    WHILE           reduce using rule 112 (expresion -> exp .)
    FROM            reduce using rule 112 (expresion -> exp .)
    INPUT           reduce using rule 112 (expresion -> exp .)
    RBRACE          reduce using rule 112 (expresion -> exp .)
    RETURN          reduce using rule 112 (expresion -> exp .)
    LOWERTHAN       shift and go to state 141
    MORETHAN        shift and go to state 142
    DIFFERENT       shift and go to state 143
    DOUBLEEQUAL     shift and go to state 144
    LOWEREQUAL      shift and go to state 145
    MOREEQUAL       shift and go to state 146

    comp                           shift and go to state 140

state 105

    (121) exp -> termino . quad_term
    (122) exp -> termino . quad_term exp1
    (125) quad_term -> .

    PLUS            reduce using rule 125 (quad_term -> .)
    MINUS           reduce using rule 125 (quad_term -> .)
    LOWERTHAN       reduce using rule 125 (quad_term -> .)
    MORETHAN        reduce using rule 125 (quad_term -> .)
    DIFFERENT       reduce using rule 125 (quad_term -> .)
    DOUBLEEQUAL     reduce using rule 125 (quad_term -> .)
    LOWEREQUAL      reduce using rule 125 (quad_term -> .)
    MOREEQUAL       reduce using rule 125 (quad_term -> .)
    RPAREN          reduce using rule 125 (quad_term -> .)
    SEMICOLON       reduce using rule 125 (quad_term -> .)
    RCORCH          reduce using rule 125 (quad_term -> .)
    COMA            reduce using rule 125 (quad_term -> .)
    ID              reduce using rule 125 (quad_term -> .)
    IF              reduce using rule 125 (quad_term -> .)
    PRINT           reduce using rule 125 (quad_term -> .)
    WHILE           reduce using rule 125 (quad_term -> .)
    FROM            reduce using rule 125 (quad_term -> .)
    INPUT           reduce using rule 125 (quad_term -> .)
    RBRACE          reduce using rule 125 (quad_term -> .)
    RETURN          reduce using rule 125 (quad_term -> .)

    quad_term                      shift and go to state 147

state 106

    (127) termino -> factor . quad_fact
    (128) termino -> factor . quad_fact termino1
    (126) quad_fact -> .

    TIMES           reduce using rule 126 (quad_fact -> .)
    DIVIDE          reduce using rule 126 (quad_fact -> .)
    PLUS            reduce using rule 126 (quad_fact -> .)
    MINUS           reduce using rule 126 (quad_fact -> .)
    LOWERTHAN       reduce using rule 126 (quad_fact -> .)
    MORETHAN        reduce using rule 126 (quad_fact -> .)
    DIFFERENT       reduce using rule 126 (quad_fact -> .)
    DOUBLEEQUAL     reduce using rule 126 (quad_fact -> .)
    LOWEREQUAL      reduce using rule 126 (quad_fact -> .)
    MOREEQUAL       reduce using rule 126 (quad_fact -> .)
    RPAREN          reduce using rule 126 (quad_fact -> .)
    SEMICOLON       reduce using rule 126 (quad_fact -> .)
    RCORCH          reduce using rule 126 (quad_fact -> .)
    COMA            reduce using rule 126 (quad_fact -> .)
    ID              reduce using rule 126 (quad_fact -> .)
    IF              reduce using rule 126 (quad_fact -> .)
    PRINT           reduce using rule 126 (quad_fact -> .)
    WHILE           reduce using rule 126 (quad_fact -> .)
    FROM            reduce using rule 126 (quad_fact -> .)
    INPUT           reduce using rule 126 (quad_fact -> .)
    RBRACE          reduce using rule 126 (quad_fact -> .)
    RETURN          reduce using rule 126 (quad_fact -> .)

    quad_fact                      shift and go to state 148

state 107

    (132) factor -> factorAux .

    TIMES           reduce using rule 132 (factor -> factorAux .)
    DIVIDE          reduce using rule 132 (factor -> factorAux .)
    PLUS            reduce using rule 132 (factor -> factorAux .)
    MINUS           reduce using rule 132 (factor -> factorAux .)
    LOWERTHAN       reduce using rule 132 (factor -> factorAux .)
    MORETHAN        reduce using rule 132 (factor -> factorAux .)
    DIFFERENT       reduce using rule 132 (factor -> factorAux .)
    DOUBLEEQUAL     reduce using rule 132 (factor -> factorAux .)
    LOWEREQUAL      reduce using rule 132 (factor -> factorAux .)
    MOREEQUAL       reduce using rule 132 (factor -> factorAux .)
    RPAREN          reduce using rule 132 (factor -> factorAux .)
    SEMICOLON       reduce using rule 132 (factor -> factorAux .)
    RCORCH          reduce using rule 132 (factor -> factorAux .)
    COMA            reduce using rule 132 (factor -> factorAux .)
    ID              reduce using rule 132 (factor -> factorAux .)
    IF              reduce using rule 132 (factor -> factorAux .)
    PRINT           reduce using rule 132 (factor -> factorAux .)
    WHILE           reduce using rule 132 (factor -> factorAux .)
    FROM            reduce using rule 132 (factor -> factorAux .)
    INPUT           reduce using rule 132 (factor -> factorAux .)
    RBRACE          reduce using rule 132 (factor -> factorAux .)
    RETURN          reduce using rule 132 (factor -> factorAux .)


state 108

    (133) factorAux -> PLUS . push_poper var_cte
    (138) push_poper -> .

    ID              reduce using rule 138 (push_poper -> .)
    CTE_I           reduce using rule 138 (push_poper -> .)
    CTE_F           reduce using rule 138 (push_poper -> .)
    CTE_STRING      reduce using rule 138 (push_poper -> .)

    push_poper                     shift and go to state 149

state 109

    (135) factorAux -> var_cte .

    TIMES           reduce using rule 135 (factorAux -> var_cte .)
    DIVIDE          reduce using rule 135 (factorAux -> var_cte .)
    PLUS            reduce using rule 135 (factorAux -> var_cte .)
    MINUS           reduce using rule 135 (factorAux -> var_cte .)
    LOWERTHAN       reduce using rule 135 (factorAux -> var_cte .)
    MORETHAN        reduce using rule 135 (factorAux -> var_cte .)
    DIFFERENT       reduce using rule 135 (factorAux -> var_cte .)
    DOUBLEEQUAL     reduce using rule 135 (factorAux -> var_cte .)
    LOWEREQUAL      reduce using rule 135 (factorAux -> var_cte .)
    MOREEQUAL       reduce using rule 135 (factorAux -> var_cte .)
    RPAREN          reduce using rule 135 (factorAux -> var_cte .)
    SEMICOLON       reduce using rule 135 (factorAux -> var_cte .)
    RCORCH          reduce using rule 135 (factorAux -> var_cte .)
    COMA            reduce using rule 135 (factorAux -> var_cte .)
    ID              reduce using rule 135 (factorAux -> var_cte .)
    IF              reduce using rule 135 (factorAux -> var_cte .)
    PRINT           reduce using rule 135 (factorAux -> var_cte .)
    WHILE           reduce using rule 135 (factorAux -> var_cte .)
    FROM            reduce using rule 135 (factorAux -> var_cte .)
    INPUT           reduce using rule 135 (factorAux -> var_cte .)
    RBRACE          reduce using rule 135 (factorAux -> var_cte .)
    RETURN          reduce using rule 135 (factorAux -> var_cte .)


state 110

    (134) factorAux -> MINUS . push_poper var_cte
    (138) push_poper -> .

    ID              reduce using rule 138 (push_poper -> .)
    CTE_I           reduce using rule 138 (push_poper -> .)
    CTE_F           reduce using rule 138 (push_poper -> .)
    CTE_STRING      reduce using rule 138 (push_poper -> .)

    push_poper                     shift and go to state 150

state 111

    (139) var_cte -> ID . push_id
    (89) arreglo -> ID . push_id LCORCH exp RCORCH ver_dim1
    (136) push_id -> .

    LCORCH          reduce using rule 136 (push_id -> .)
    TIMES           reduce using rule 136 (push_id -> .)
    DIVIDE          reduce using rule 136 (push_id -> .)
    PLUS            reduce using rule 136 (push_id -> .)
    MINUS           reduce using rule 136 (push_id -> .)
    LOWERTHAN       reduce using rule 136 (push_id -> .)
    MORETHAN        reduce using rule 136 (push_id -> .)
    DIFFERENT       reduce using rule 136 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 136 (push_id -> .)
    LOWEREQUAL      reduce using rule 136 (push_id -> .)
    MOREEQUAL       reduce using rule 136 (push_id -> .)
    RPAREN          reduce using rule 136 (push_id -> .)
    SEMICOLON       reduce using rule 136 (push_id -> .)
    RCORCH          reduce using rule 136 (push_id -> .)
    COMA            reduce using rule 136 (push_id -> .)
    ID              reduce using rule 136 (push_id -> .)
    IF              reduce using rule 136 (push_id -> .)
    PRINT           reduce using rule 136 (push_id -> .)
    WHILE           reduce using rule 136 (push_id -> .)
    FROM            reduce using rule 136 (push_id -> .)
    INPUT           reduce using rule 136 (push_id -> .)
    RBRACE          reduce using rule 136 (push_id -> .)
    RETURN          reduce using rule 136 (push_id -> .)

    push_id                        shift and go to state 151

state 112

    (140) var_cte -> CTE_I . push_cte
    (137) push_cte -> .

    TIMES           reduce using rule 137 (push_cte -> .)
    DIVIDE          reduce using rule 137 (push_cte -> .)
    PLUS            reduce using rule 137 (push_cte -> .)
    MINUS           reduce using rule 137 (push_cte -> .)
    LOWERTHAN       reduce using rule 137 (push_cte -> .)
    MORETHAN        reduce using rule 137 (push_cte -> .)
    DIFFERENT       reduce using rule 137 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 137 (push_cte -> .)
    LOWEREQUAL      reduce using rule 137 (push_cte -> .)
    MOREEQUAL       reduce using rule 137 (push_cte -> .)
    RPAREN          reduce using rule 137 (push_cte -> .)
    SEMICOLON       reduce using rule 137 (push_cte -> .)
    RCORCH          reduce using rule 137 (push_cte -> .)
    COMA            reduce using rule 137 (push_cte -> .)
    ID              reduce using rule 137 (push_cte -> .)
    IF              reduce using rule 137 (push_cte -> .)
    PRINT           reduce using rule 137 (push_cte -> .)
    WHILE           reduce using rule 137 (push_cte -> .)
    FROM            reduce using rule 137 (push_cte -> .)
    INPUT           reduce using rule 137 (push_cte -> .)
    RBRACE          reduce using rule 137 (push_cte -> .)
    RETURN          reduce using rule 137 (push_cte -> .)

    push_cte                       shift and go to state 152

state 113

    (141) var_cte -> CTE_F . push_cte
    (137) push_cte -> .

    TIMES           reduce using rule 137 (push_cte -> .)
    DIVIDE          reduce using rule 137 (push_cte -> .)
    PLUS            reduce using rule 137 (push_cte -> .)
    MINUS           reduce using rule 137 (push_cte -> .)
    LOWERTHAN       reduce using rule 137 (push_cte -> .)
    MORETHAN        reduce using rule 137 (push_cte -> .)
    DIFFERENT       reduce using rule 137 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 137 (push_cte -> .)
    LOWEREQUAL      reduce using rule 137 (push_cte -> .)
    MOREEQUAL       reduce using rule 137 (push_cte -> .)
    RPAREN          reduce using rule 137 (push_cte -> .)
    SEMICOLON       reduce using rule 137 (push_cte -> .)
    RCORCH          reduce using rule 137 (push_cte -> .)
    COMA            reduce using rule 137 (push_cte -> .)
    ID              reduce using rule 137 (push_cte -> .)
    IF              reduce using rule 137 (push_cte -> .)
    PRINT           reduce using rule 137 (push_cte -> .)
    WHILE           reduce using rule 137 (push_cte -> .)
    FROM            reduce using rule 137 (push_cte -> .)
    INPUT           reduce using rule 137 (push_cte -> .)
    RBRACE          reduce using rule 137 (push_cte -> .)
    RETURN          reduce using rule 137 (push_cte -> .)

    push_cte                       shift and go to state 153

state 114

    (142) var_cte -> CTE_STRING . push_cte
    (137) push_cte -> .

    TIMES           reduce using rule 137 (push_cte -> .)
    DIVIDE          reduce using rule 137 (push_cte -> .)
    PLUS            reduce using rule 137 (push_cte -> .)
    MINUS           reduce using rule 137 (push_cte -> .)
    LOWERTHAN       reduce using rule 137 (push_cte -> .)
    MORETHAN        reduce using rule 137 (push_cte -> .)
    DIFFERENT       reduce using rule 137 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 137 (push_cte -> .)
    LOWEREQUAL      reduce using rule 137 (push_cte -> .)
    MOREEQUAL       reduce using rule 137 (push_cte -> .)
    RPAREN          reduce using rule 137 (push_cte -> .)
    SEMICOLON       reduce using rule 137 (push_cte -> .)
    RCORCH          reduce using rule 137 (push_cte -> .)
    COMA            reduce using rule 137 (push_cte -> .)
    ID              reduce using rule 137 (push_cte -> .)
    IF              reduce using rule 137 (push_cte -> .)
    PRINT           reduce using rule 137 (push_cte -> .)
    WHILE           reduce using rule 137 (push_cte -> .)
    FROM            reduce using rule 137 (push_cte -> .)
    INPUT           reduce using rule 137 (push_cte -> .)
    RBRACE          reduce using rule 137 (push_cte -> .)
    RETURN          reduce using rule 137 (push_cte -> .)

    push_cte                       shift and go to state 154

state 115

    (143) var_cte -> arreglo .

    TIMES           reduce using rule 143 (var_cte -> arreglo .)
    DIVIDE          reduce using rule 143 (var_cte -> arreglo .)
    PLUS            reduce using rule 143 (var_cte -> arreglo .)
    MINUS           reduce using rule 143 (var_cte -> arreglo .)
    LOWERTHAN       reduce using rule 143 (var_cte -> arreglo .)
    MORETHAN        reduce using rule 143 (var_cte -> arreglo .)
    DIFFERENT       reduce using rule 143 (var_cte -> arreglo .)
    DOUBLEEQUAL     reduce using rule 143 (var_cte -> arreglo .)
    LOWEREQUAL      reduce using rule 143 (var_cte -> arreglo .)
    MOREEQUAL       reduce using rule 143 (var_cte -> arreglo .)
    RPAREN          reduce using rule 143 (var_cte -> arreglo .)
    SEMICOLON       reduce using rule 143 (var_cte -> arreglo .)
    RCORCH          reduce using rule 143 (var_cte -> arreglo .)
    COMA            reduce using rule 143 (var_cte -> arreglo .)
    ID              reduce using rule 143 (var_cte -> arreglo .)
    IF              reduce using rule 143 (var_cte -> arreglo .)
    PRINT           reduce using rule 143 (var_cte -> arreglo .)
    WHILE           reduce using rule 143 (var_cte -> arreglo .)
    FROM            reduce using rule 143 (var_cte -> arreglo .)
    INPUT           reduce using rule 143 (var_cte -> arreglo .)
    RBRACE          reduce using rule 143 (var_cte -> arreglo .)
    RETURN          reduce using rule 143 (var_cte -> arreglo .)


state 116

    (103) escritura -> PRINT push_poper LPAREN . escrituraAux RPAREN quad_print SEMICOLON
    (104) escritura -> PRINT push_poper LPAREN . llamadaAFuncion RPAREN quad_print SEMICOLON
    (107) escrituraAux -> . expresion
    (108) escrituraAux -> . CTE_STRING push_cte
    (109) escrituraAux -> . expresion COMA escrituraAux
    (110) escrituraAux -> . CTE_STRING push_cte COMA escrituraAux
    (111) escrituraAux -> . llamadaAFuncion
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (112) expresion -> . exp
    (113) expresion -> . exp comp exp quad_comp
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    CTE_STRING      shift and go to state 158
    ID              shift and go to state 159
    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113

    escrituraAux                   shift and go to state 155
    llamadaAFuncion                shift and go to state 156
    expresion                      shift and go to state 157
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 117

    (64) while -> WHILE while1 LPAREN . expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (112) expresion -> . exp
    (113) expresion -> . exp comp exp quad_comp
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    expresion                      shift and go to state 160
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 118

    (68) loopFromDo -> FROM LPAREN ID . EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    EQUAL           shift and go to state 161


state 119

    (105) lectura -> INPUT push_poper LPAREN . ID push_id RPAREN quad_print SEMICOLON

    ID              shift and go to state 162


state 120

    (13) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I . RCORCH
    (14) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I . RCORCH COMA varAuxGlobal2

    RCORCH          shift and go to state 163


state 121

    (12) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH COMA varAuxGlobal2 .

    SEMICOLON       reduce using rule 12 (varAuxGlobal2 -> ID LCORCH CTE_I RCORCH COMA varAuxGlobal2 .)


state 122

    (39) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE . endProc
    (41) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE . endProc function
    (54) endProc -> .

    FUNCTION        reduce using rule 54 (endProc -> .)
    MAIN            reduce using rule 54 (endProc -> .)

    endProc                        shift and go to state 164

state 123

    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . functionReturn RBRACE endProc
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . functionReturn RBRACE endProc function
    (51) functionReturn -> . RETURN exp creaCuadReturn SEMICOLON
    (52) functionReturn -> . empty
    (59) empty -> .

    RETURN          shift and go to state 90
    RBRACE          reduce using rule 59 (empty -> .)

    functionReturn                 shift and go to state 165
    empty                          shift and go to state 91

state 124

    (43) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn . RBRACE endProc
    (44) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn . RBRACE endProc function

    RBRACE          shift and go to state 166


state 125

    (51) functionReturn -> RETURN exp . creaCuadReturn SEMICOLON
    (53) creaCuadReturn -> .

    SEMICOLON       reduce using rule 53 (creaCuadReturn -> .)

    creaCuadReturn                 shift and go to state 167

state 126

    (45) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn . RBRACE endProc
    (49) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn . RBRACE endProc function

    RBRACE          shift and go to state 168


state 127

    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux . functionReturn RBRACE endProc
    (47) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux . functionReturn RBRACE endProc function
    (51) functionReturn -> . RETURN exp creaCuadReturn SEMICOLON
    (52) functionReturn -> . empty
    (59) empty -> .

    RETURN          shift and go to state 90
    RBRACE          reduce using rule 59 (empty -> .)

    functionReturn                 shift and go to state 169
    empty                          shift and go to state 91

state 128

    (48) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux functionReturn RBRACE endProc
    (50) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux functionReturn RBRACE endProc function
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (90) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (91) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (98) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (103) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (104) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (97) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (105) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 61
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    WHILE           shift and go to state 65
    FROM            shift and go to state 66
    INPUT           shift and go to state 67

    bloqueAux                      shift and go to state 170
    estatuto                       shift and go to state 51
    asignacion                     shift and go to state 53
    condicion                      shift and go to state 54
    escritura                      shift and go to state 55
    while                          shift and go to state 56
    loopFromDo                     shift and go to state 57
    comparacion                    shift and go to state 58
    llamadaAFuncion                shift and go to state 59
    lectura                        shift and go to state 60
    arreglo                        shift and go to state 62

state 129

    (56) param -> tipo ID paramAvarTable COMA . param
    (55) param -> . tipo ID paramAvarTable
    (56) param -> . tipo ID paramAvarTable COMA param
    (57) param -> . empty
    (30) tipo -> . INT
    (31) tipo -> . FLOAT
    (32) tipo -> . CHAR
    (59) empty -> .

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    RPAREN          reduce using rule 59 (empty -> .)

    tipo                           shift and go to state 47
    param                          shift and go to state 171
    empty                          shift and go to state 48

state 130

    (19) varAux1 -> tipo varAux2 SEMICOLON .
    (20) varAux1 -> tipo varAux2 SEMICOLON . varAux1
    (19) varAux1 -> . tipo varAux2 SEMICOLON
    (20) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (30) tipo -> . INT
    (31) tipo -> . FLOAT
    (32) tipo -> . CHAR

    ID              reduce using rule 19 (varAux1 -> tipo varAux2 SEMICOLON .)
    IF              reduce using rule 19 (varAux1 -> tipo varAux2 SEMICOLON .)
    PRINT           reduce using rule 19 (varAux1 -> tipo varAux2 SEMICOLON .)
    WHILE           reduce using rule 19 (varAux1 -> tipo varAux2 SEMICOLON .)
    FROM            reduce using rule 19 (varAux1 -> tipo varAux2 SEMICOLON .)
    INPUT           reduce using rule 19 (varAux1 -> tipo varAux2 SEMICOLON .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    tipo                           shift and go to state 76
    varAux1                        shift and go to state 172

state 131

    (21) varAux2 -> ID push_var .
    (22) varAux2 -> ID push_var . COMA varAux2

    SEMICOLON       reduce using rule 21 (varAux2 -> ID push_var .)
    COMA            shift and go to state 173


state 132

    (23) varAux2 -> ID LCORCH . CTE_I RCORCH push_arreglo
    (24) varAux2 -> ID LCORCH . CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> ID LCORCH . CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> ID LCORCH . CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    CTE_I           shift and go to state 174


state 133

    (90) asignacion -> ID push_id EQUAL push_poper . expresion create_asign SEMICOLON
    (92) asignacion -> ID push_id EQUAL push_poper . llamadaAFuncion create_asign SEMICOLON
    (112) expresion -> . exp
    (113) expresion -> . exp comp exp quad_comp
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 159
    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    expresion                      shift and go to state 175
    llamadaAFuncion                shift and go to state 176
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 134

    (97) comparacion -> ID push_id DOUBLEEQUAL push_poper . expresion SEMICOLON
    (112) expresion -> . exp
    (113) expresion -> . exp comp exp quad_comp
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    expresion                      shift and go to state 177
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 135

    (89) arreglo -> ID push_id LCORCH exp . RCORCH ver_dim1

    RCORCH          shift and go to state 178


state 136

    (77) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN . paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN . paramFuncion gosub RPAREN
    (82) paramFuncion -> . ID push_id2 paramFuncionAux
    (83) paramFuncion -> . ID push_id2 paramFuncionAux COMA paramFuncion
    (84) paramFuncion -> . exp paramFuncionAux
    (85) paramFuncion -> . exp paramFuncionAux COMA paramFuncion
    (86) paramFuncion -> . empty
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (59) empty -> .
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 179
    RPAREN          reduce using rule 59 (empty -> .)
    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    paramFuncion                   shift and go to state 180
    exp                            shift and go to state 181
    empty                          shift and go to state 182
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 137

    (91) asignacion -> arreglo EQUAL push_poper expresion . create_asign SEMICOLON
    (96) create_asign -> .

    SEMICOLON       reduce using rule 96 (create_asign -> .)

    create_asign                   shift and go to state 183

state 138

    (131) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 184


state 139

    (98) condicion -> IF LPAREN expresion RPAREN . cond bloque condFinal
    (99) condicion -> IF LPAREN expresion RPAREN . cond bloque ELSE condElse bloque condFinal
    (100) cond -> .

    LBRACE          reduce using rule 100 (cond -> .)

    cond                           shift and go to state 185

state 140

    (113) expresion -> exp comp . exp quad_comp
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    exp                            shift and go to state 186
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 141

    (114) comp -> LOWERTHAN . push_poper
    (138) push_poper -> .

    LPAREN          reduce using rule 138 (push_poper -> .)
    PLUS            reduce using rule 138 (push_poper -> .)
    MINUS           reduce using rule 138 (push_poper -> .)
    ID              reduce using rule 138 (push_poper -> .)
    CTE_I           reduce using rule 138 (push_poper -> .)
    CTE_F           reduce using rule 138 (push_poper -> .)
    CTE_STRING      reduce using rule 138 (push_poper -> .)

    push_poper                     shift and go to state 187

state 142

    (115) comp -> MORETHAN . push_poper
    (138) push_poper -> .

    LPAREN          reduce using rule 138 (push_poper -> .)
    PLUS            reduce using rule 138 (push_poper -> .)
    MINUS           reduce using rule 138 (push_poper -> .)
    ID              reduce using rule 138 (push_poper -> .)
    CTE_I           reduce using rule 138 (push_poper -> .)
    CTE_F           reduce using rule 138 (push_poper -> .)
    CTE_STRING      reduce using rule 138 (push_poper -> .)

    push_poper                     shift and go to state 188

state 143

    (116) comp -> DIFFERENT . push_poper
    (138) push_poper -> .

    LPAREN          reduce using rule 138 (push_poper -> .)
    PLUS            reduce using rule 138 (push_poper -> .)
    MINUS           reduce using rule 138 (push_poper -> .)
    ID              reduce using rule 138 (push_poper -> .)
    CTE_I           reduce using rule 138 (push_poper -> .)
    CTE_F           reduce using rule 138 (push_poper -> .)
    CTE_STRING      reduce using rule 138 (push_poper -> .)

    push_poper                     shift and go to state 189

state 144

    (117) comp -> DOUBLEEQUAL . push_poper
    (138) push_poper -> .

    LPAREN          reduce using rule 138 (push_poper -> .)
    PLUS            reduce using rule 138 (push_poper -> .)
    MINUS           reduce using rule 138 (push_poper -> .)
    ID              reduce using rule 138 (push_poper -> .)
    CTE_I           reduce using rule 138 (push_poper -> .)
    CTE_F           reduce using rule 138 (push_poper -> .)
    CTE_STRING      reduce using rule 138 (push_poper -> .)

    push_poper                     shift and go to state 190

state 145

    (118) comp -> LOWEREQUAL . push_poper
    (138) push_poper -> .

    LPAREN          reduce using rule 138 (push_poper -> .)
    PLUS            reduce using rule 138 (push_poper -> .)
    MINUS           reduce using rule 138 (push_poper -> .)
    ID              reduce using rule 138 (push_poper -> .)
    CTE_I           reduce using rule 138 (push_poper -> .)
    CTE_F           reduce using rule 138 (push_poper -> .)
    CTE_STRING      reduce using rule 138 (push_poper -> .)

    push_poper                     shift and go to state 191

state 146

    (119) comp -> MOREEQUAL . push_poper
    (138) push_poper -> .

    LPAREN          reduce using rule 138 (push_poper -> .)
    PLUS            reduce using rule 138 (push_poper -> .)
    MINUS           reduce using rule 138 (push_poper -> .)
    ID              reduce using rule 138 (push_poper -> .)
    CTE_I           reduce using rule 138 (push_poper -> .)
    CTE_F           reduce using rule 138 (push_poper -> .)
    CTE_STRING      reduce using rule 138 (push_poper -> .)

    push_poper                     shift and go to state 192

state 147

    (121) exp -> termino quad_term .
    (122) exp -> termino quad_term . exp1
    (123) exp1 -> . PLUS push_poper exp
    (124) exp1 -> . MINUS push_poper exp

    LOWERTHAN       reduce using rule 121 (exp -> termino quad_term .)
    MORETHAN        reduce using rule 121 (exp -> termino quad_term .)
    DIFFERENT       reduce using rule 121 (exp -> termino quad_term .)
    DOUBLEEQUAL     reduce using rule 121 (exp -> termino quad_term .)
    LOWEREQUAL      reduce using rule 121 (exp -> termino quad_term .)
    MOREEQUAL       reduce using rule 121 (exp -> termino quad_term .)
    RPAREN          reduce using rule 121 (exp -> termino quad_term .)
    SEMICOLON       reduce using rule 121 (exp -> termino quad_term .)
    RCORCH          reduce using rule 121 (exp -> termino quad_term .)
    COMA            reduce using rule 121 (exp -> termino quad_term .)
    ID              reduce using rule 121 (exp -> termino quad_term .)
    IF              reduce using rule 121 (exp -> termino quad_term .)
    PRINT           reduce using rule 121 (exp -> termino quad_term .)
    WHILE           reduce using rule 121 (exp -> termino quad_term .)
    FROM            reduce using rule 121 (exp -> termino quad_term .)
    INPUT           reduce using rule 121 (exp -> termino quad_term .)
    RBRACE          reduce using rule 121 (exp -> termino quad_term .)
    RETURN          reduce using rule 121 (exp -> termino quad_term .)
    PLUS            shift and go to state 194
    MINUS           shift and go to state 195

    exp1                           shift and go to state 193

state 148

    (127) termino -> factor quad_fact .
    (128) termino -> factor quad_fact . termino1
    (129) termino1 -> . TIMES push_poper termino
    (130) termino1 -> . DIVIDE push_poper termino

    PLUS            reduce using rule 127 (termino -> factor quad_fact .)
    MINUS           reduce using rule 127 (termino -> factor quad_fact .)
    LOWERTHAN       reduce using rule 127 (termino -> factor quad_fact .)
    MORETHAN        reduce using rule 127 (termino -> factor quad_fact .)
    DIFFERENT       reduce using rule 127 (termino -> factor quad_fact .)
    DOUBLEEQUAL     reduce using rule 127 (termino -> factor quad_fact .)
    LOWEREQUAL      reduce using rule 127 (termino -> factor quad_fact .)
    MOREEQUAL       reduce using rule 127 (termino -> factor quad_fact .)
    RPAREN          reduce using rule 127 (termino -> factor quad_fact .)
    SEMICOLON       reduce using rule 127 (termino -> factor quad_fact .)
    RCORCH          reduce using rule 127 (termino -> factor quad_fact .)
    COMA            reduce using rule 127 (termino -> factor quad_fact .)
    ID              reduce using rule 127 (termino -> factor quad_fact .)
    IF              reduce using rule 127 (termino -> factor quad_fact .)
    PRINT           reduce using rule 127 (termino -> factor quad_fact .)
    WHILE           reduce using rule 127 (termino -> factor quad_fact .)
    FROM            reduce using rule 127 (termino -> factor quad_fact .)
    INPUT           reduce using rule 127 (termino -> factor quad_fact .)
    RBRACE          reduce using rule 127 (termino -> factor quad_fact .)
    RETURN          reduce using rule 127 (termino -> factor quad_fact .)
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198

    termino1                       shift and go to state 196

state 149

    (133) factorAux -> PLUS push_poper . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 111
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    var_cte                        shift and go to state 199
    arreglo                        shift and go to state 115

state 150

    (134) factorAux -> MINUS push_poper . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 111
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    var_cte                        shift and go to state 200
    arreglo                        shift and go to state 115

state 151

    (139) var_cte -> ID push_id .
    (89) arreglo -> ID push_id . LCORCH exp RCORCH ver_dim1

    TIMES           reduce using rule 139 (var_cte -> ID push_id .)
    DIVIDE          reduce using rule 139 (var_cte -> ID push_id .)
    PLUS            reduce using rule 139 (var_cte -> ID push_id .)
    MINUS           reduce using rule 139 (var_cte -> ID push_id .)
    LOWERTHAN       reduce using rule 139 (var_cte -> ID push_id .)
    MORETHAN        reduce using rule 139 (var_cte -> ID push_id .)
    DIFFERENT       reduce using rule 139 (var_cte -> ID push_id .)
    DOUBLEEQUAL     reduce using rule 139 (var_cte -> ID push_id .)
    LOWEREQUAL      reduce using rule 139 (var_cte -> ID push_id .)
    MOREEQUAL       reduce using rule 139 (var_cte -> ID push_id .)
    RPAREN          reduce using rule 139 (var_cte -> ID push_id .)
    SEMICOLON       reduce using rule 139 (var_cte -> ID push_id .)
    RCORCH          reduce using rule 139 (var_cte -> ID push_id .)
    COMA            reduce using rule 139 (var_cte -> ID push_id .)
    ID              reduce using rule 139 (var_cte -> ID push_id .)
    IF              reduce using rule 139 (var_cte -> ID push_id .)
    PRINT           reduce using rule 139 (var_cte -> ID push_id .)
    WHILE           reduce using rule 139 (var_cte -> ID push_id .)
    FROM            reduce using rule 139 (var_cte -> ID push_id .)
    INPUT           reduce using rule 139 (var_cte -> ID push_id .)
    RBRACE          reduce using rule 139 (var_cte -> ID push_id .)
    RETURN          reduce using rule 139 (var_cte -> ID push_id .)
    LCORCH          shift and go to state 99


state 152

    (140) var_cte -> CTE_I push_cte .

    TIMES           reduce using rule 140 (var_cte -> CTE_I push_cte .)
    DIVIDE          reduce using rule 140 (var_cte -> CTE_I push_cte .)
    PLUS            reduce using rule 140 (var_cte -> CTE_I push_cte .)
    MINUS           reduce using rule 140 (var_cte -> CTE_I push_cte .)
    LOWERTHAN       reduce using rule 140 (var_cte -> CTE_I push_cte .)
    MORETHAN        reduce using rule 140 (var_cte -> CTE_I push_cte .)
    DIFFERENT       reduce using rule 140 (var_cte -> CTE_I push_cte .)
    DOUBLEEQUAL     reduce using rule 140 (var_cte -> CTE_I push_cte .)
    LOWEREQUAL      reduce using rule 140 (var_cte -> CTE_I push_cte .)
    MOREEQUAL       reduce using rule 140 (var_cte -> CTE_I push_cte .)
    RPAREN          reduce using rule 140 (var_cte -> CTE_I push_cte .)
    SEMICOLON       reduce using rule 140 (var_cte -> CTE_I push_cte .)
    RCORCH          reduce using rule 140 (var_cte -> CTE_I push_cte .)
    COMA            reduce using rule 140 (var_cte -> CTE_I push_cte .)
    ID              reduce using rule 140 (var_cte -> CTE_I push_cte .)
    IF              reduce using rule 140 (var_cte -> CTE_I push_cte .)
    PRINT           reduce using rule 140 (var_cte -> CTE_I push_cte .)
    WHILE           reduce using rule 140 (var_cte -> CTE_I push_cte .)
    FROM            reduce using rule 140 (var_cte -> CTE_I push_cte .)
    INPUT           reduce using rule 140 (var_cte -> CTE_I push_cte .)
    RBRACE          reduce using rule 140 (var_cte -> CTE_I push_cte .)
    RETURN          reduce using rule 140 (var_cte -> CTE_I push_cte .)


state 153

    (141) var_cte -> CTE_F push_cte .

    TIMES           reduce using rule 141 (var_cte -> CTE_F push_cte .)
    DIVIDE          reduce using rule 141 (var_cte -> CTE_F push_cte .)
    PLUS            reduce using rule 141 (var_cte -> CTE_F push_cte .)
    MINUS           reduce using rule 141 (var_cte -> CTE_F push_cte .)
    LOWERTHAN       reduce using rule 141 (var_cte -> CTE_F push_cte .)
    MORETHAN        reduce using rule 141 (var_cte -> CTE_F push_cte .)
    DIFFERENT       reduce using rule 141 (var_cte -> CTE_F push_cte .)
    DOUBLEEQUAL     reduce using rule 141 (var_cte -> CTE_F push_cte .)
    LOWEREQUAL      reduce using rule 141 (var_cte -> CTE_F push_cte .)
    MOREEQUAL       reduce using rule 141 (var_cte -> CTE_F push_cte .)
    RPAREN          reduce using rule 141 (var_cte -> CTE_F push_cte .)
    SEMICOLON       reduce using rule 141 (var_cte -> CTE_F push_cte .)
    RCORCH          reduce using rule 141 (var_cte -> CTE_F push_cte .)
    COMA            reduce using rule 141 (var_cte -> CTE_F push_cte .)
    ID              reduce using rule 141 (var_cte -> CTE_F push_cte .)
    IF              reduce using rule 141 (var_cte -> CTE_F push_cte .)
    PRINT           reduce using rule 141 (var_cte -> CTE_F push_cte .)
    WHILE           reduce using rule 141 (var_cte -> CTE_F push_cte .)
    FROM            reduce using rule 141 (var_cte -> CTE_F push_cte .)
    INPUT           reduce using rule 141 (var_cte -> CTE_F push_cte .)
    RBRACE          reduce using rule 141 (var_cte -> CTE_F push_cte .)
    RETURN          reduce using rule 141 (var_cte -> CTE_F push_cte .)


state 154

    (142) var_cte -> CTE_STRING push_cte .

    TIMES           reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    DIVIDE          reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    PLUS            reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    MINUS           reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    LOWERTHAN       reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    MORETHAN        reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    DIFFERENT       reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    DOUBLEEQUAL     reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    LOWEREQUAL      reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    MOREEQUAL       reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    RPAREN          reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    SEMICOLON       reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    RCORCH          reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    COMA            reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    ID              reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    IF              reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    PRINT           reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    WHILE           reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    FROM            reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    INPUT           reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    RBRACE          reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    RETURN          reduce using rule 142 (var_cte -> CTE_STRING push_cte .)


state 155

    (103) escritura -> PRINT push_poper LPAREN escrituraAux . RPAREN quad_print SEMICOLON

    RPAREN          shift and go to state 201


state 156

    (104) escritura -> PRINT push_poper LPAREN llamadaAFuncion . RPAREN quad_print SEMICOLON
    (111) escrituraAux -> llamadaAFuncion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 202

  ! RPAREN          [ reduce using rule 111 (escrituraAux -> llamadaAFuncion .) ]


state 157

    (107) escrituraAux -> expresion .
    (109) escrituraAux -> expresion . COMA escrituraAux

    RPAREN          reduce using rule 107 (escrituraAux -> expresion .)
    COMA            shift and go to state 203


state 158

    (108) escrituraAux -> CTE_STRING . push_cte
    (110) escrituraAux -> CTE_STRING . push_cte COMA escrituraAux
    (142) var_cte -> CTE_STRING . push_cte
    (137) push_cte -> .

    COMA            reduce using rule 137 (push_cte -> .)
    RPAREN          reduce using rule 137 (push_cte -> .)
    TIMES           reduce using rule 137 (push_cte -> .)
    DIVIDE          reduce using rule 137 (push_cte -> .)
    PLUS            reduce using rule 137 (push_cte -> .)
    MINUS           reduce using rule 137 (push_cte -> .)
    LOWERTHAN       reduce using rule 137 (push_cte -> .)
    MORETHAN        reduce using rule 137 (push_cte -> .)
    DIFFERENT       reduce using rule 137 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 137 (push_cte -> .)
    LOWEREQUAL      reduce using rule 137 (push_cte -> .)
    MOREEQUAL       reduce using rule 137 (push_cte -> .)

    push_cte                       shift and go to state 204

state 159

    (77) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> ID . actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (139) var_cte -> ID . push_id
    (89) arreglo -> ID . push_id LCORCH exp RCORCH ver_dim1
    (79) actualizaFuncion -> .
    (136) push_id -> .

    LPAREN          reduce using rule 79 (actualizaFuncion -> .)
    LCORCH          reduce using rule 136 (push_id -> .)
    TIMES           reduce using rule 136 (push_id -> .)
    DIVIDE          reduce using rule 136 (push_id -> .)
    PLUS            reduce using rule 136 (push_id -> .)
    MINUS           reduce using rule 136 (push_id -> .)
    LOWERTHAN       reduce using rule 136 (push_id -> .)
    MORETHAN        reduce using rule 136 (push_id -> .)
    DIFFERENT       reduce using rule 136 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 136 (push_id -> .)
    LOWEREQUAL      reduce using rule 136 (push_id -> .)
    MOREEQUAL       reduce using rule 136 (push_id -> .)
    COMA            reduce using rule 136 (push_id -> .)
    RPAREN          reduce using rule 136 (push_id -> .)
    SEMICOLON       reduce using rule 136 (push_id -> .)

    actualizaFuncion               shift and go to state 78
    push_id                        shift and go to state 151

state 160

    (64) while -> WHILE while1 LPAREN expresion . RPAREN while2 LBRACE bloqueAux RBRACE while3

    RPAREN          shift and go to state 205


state 161

    (68) loopFromDo -> FROM LPAREN ID EQUAL . expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (112) expresion -> . exp
    (113) expresion -> . exp comp exp quad_comp
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    expresion                      shift and go to state 206
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 162

    (105) lectura -> INPUT push_poper LPAREN ID . push_id RPAREN quad_print SEMICOLON
    (136) push_id -> .

    RPAREN          reduce using rule 136 (push_id -> .)

    push_id                        shift and go to state 207

state 163

    (13) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH .
    (14) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH . COMA varAuxGlobal2

    SEMICOLON       reduce using rule 13 (varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH .)
    COMA            shift and go to state 208


state 164

    (39) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc .
    (41) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc . function
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function

    MAIN            reduce using rule 39 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc .)
    FUNCTION        shift and go to state 9

    function                       shift and go to state 209

state 165

    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn . RBRACE endProc
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn . RBRACE endProc function

    RBRACE          shift and go to state 210


state 166

    (43) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE . endProc
    (44) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE . endProc function
    (54) endProc -> .

    FUNCTION        reduce using rule 54 (endProc -> .)
    MAIN            reduce using rule 54 (endProc -> .)

    endProc                        shift and go to state 211

state 167

    (51) functionReturn -> RETURN exp creaCuadReturn . SEMICOLON

    SEMICOLON       shift and go to state 212


state 168

    (45) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE . endProc
    (49) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE . endProc function
    (54) endProc -> .

    FUNCTION        reduce using rule 54 (endProc -> .)
    MAIN            reduce using rule 54 (endProc -> .)

    endProc                        shift and go to state 213

state 169

    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn . RBRACE endProc
    (47) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn . RBRACE endProc function

    RBRACE          shift and go to state 214


state 170

    (48) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . functionReturn RBRACE endProc
    (50) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . functionReturn RBRACE endProc function
    (51) functionReturn -> . RETURN exp creaCuadReturn SEMICOLON
    (52) functionReturn -> . empty
    (59) empty -> .

    RETURN          shift and go to state 90
    RBRACE          reduce using rule 59 (empty -> .)

    functionReturn                 shift and go to state 215
    empty                          shift and go to state 91

state 171

    (56) param -> tipo ID paramAvarTable COMA param .

    RPAREN          reduce using rule 56 (param -> tipo ID paramAvarTable COMA param .)


state 172

    (20) varAux1 -> tipo varAux2 SEMICOLON varAux1 .

    ID              reduce using rule 20 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    IF              reduce using rule 20 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    PRINT           reduce using rule 20 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    WHILE           reduce using rule 20 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    FROM            reduce using rule 20 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    INPUT           reduce using rule 20 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)


state 173

    (22) varAux2 -> ID push_var COMA . varAux2
    (21) varAux2 -> . ID push_var
    (22) varAux2 -> . ID push_var COMA varAux2
    (23) varAux2 -> . ID LCORCH CTE_I RCORCH push_arreglo
    (24) varAux2 -> . ID LCORCH CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    ID              shift and go to state 96

    varAux2                        shift and go to state 216

state 174

    (23) varAux2 -> ID LCORCH CTE_I . RCORCH push_arreglo
    (24) varAux2 -> ID LCORCH CTE_I . RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> ID LCORCH CTE_I . RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> ID LCORCH CTE_I . RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    RCORCH          shift and go to state 217


state 175

    (90) asignacion -> ID push_id EQUAL push_poper expresion . create_asign SEMICOLON
    (96) create_asign -> .

    SEMICOLON       reduce using rule 96 (create_asign -> .)

    create_asign                   shift and go to state 218

state 176

    (92) asignacion -> ID push_id EQUAL push_poper llamadaAFuncion . create_asign SEMICOLON
    (96) create_asign -> .

    SEMICOLON       reduce using rule 96 (create_asign -> .)

    create_asign                   shift and go to state 219

state 177

    (97) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion . SEMICOLON

    SEMICOLON       shift and go to state 220


state 178

    (89) arreglo -> ID push_id LCORCH exp RCORCH . ver_dim1
    (95) ver_dim1 -> .

    EQUAL           reduce using rule 95 (ver_dim1 -> .)
    TIMES           reduce using rule 95 (ver_dim1 -> .)
    DIVIDE          reduce using rule 95 (ver_dim1 -> .)
    PLUS            reduce using rule 95 (ver_dim1 -> .)
    MINUS           reduce using rule 95 (ver_dim1 -> .)
    LOWERTHAN       reduce using rule 95 (ver_dim1 -> .)
    MORETHAN        reduce using rule 95 (ver_dim1 -> .)
    DIFFERENT       reduce using rule 95 (ver_dim1 -> .)
    DOUBLEEQUAL     reduce using rule 95 (ver_dim1 -> .)
    LOWEREQUAL      reduce using rule 95 (ver_dim1 -> .)
    MOREEQUAL       reduce using rule 95 (ver_dim1 -> .)
    RPAREN          reduce using rule 95 (ver_dim1 -> .)
    SEMICOLON       reduce using rule 95 (ver_dim1 -> .)
    RCORCH          reduce using rule 95 (ver_dim1 -> .)
    COMA            reduce using rule 95 (ver_dim1 -> .)
    ID              reduce using rule 95 (ver_dim1 -> .)
    IF              reduce using rule 95 (ver_dim1 -> .)
    PRINT           reduce using rule 95 (ver_dim1 -> .)
    WHILE           reduce using rule 95 (ver_dim1 -> .)
    FROM            reduce using rule 95 (ver_dim1 -> .)
    INPUT           reduce using rule 95 (ver_dim1 -> .)
    RBRACE          reduce using rule 95 (ver_dim1 -> .)
    RETURN          reduce using rule 95 (ver_dim1 -> .)

    ver_dim1                       shift and go to state 221

state 179

    (82) paramFuncion -> ID . push_id2 paramFuncionAux
    (83) paramFuncion -> ID . push_id2 paramFuncionAux COMA paramFuncion
    (139) var_cte -> ID . push_id
    (89) arreglo -> ID . push_id LCORCH exp RCORCH ver_dim1
    (88) push_id2 -> .
    (136) push_id -> .

  ! reduce/reduce conflict for COMA resolved using rule 88 (push_id2 -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 88 (push_id2 -> .)
    COMA            reduce using rule 88 (push_id2 -> .)
    RPAREN          reduce using rule 88 (push_id2 -> .)
    LCORCH          reduce using rule 136 (push_id -> .)
    TIMES           reduce using rule 136 (push_id -> .)
    DIVIDE          reduce using rule 136 (push_id -> .)
    PLUS            reduce using rule 136 (push_id -> .)
    MINUS           reduce using rule 136 (push_id -> .)

  ! COMA            [ reduce using rule 136 (push_id -> .) ]
  ! RPAREN          [ reduce using rule 136 (push_id -> .) ]

    push_id2                       shift and go to state 222
    push_id                        shift and go to state 151

state 180

    (77) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion . gosub RPAREN expresion
    (78) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion . gosub RPAREN
    (80) gosub -> .

    RPAREN          reduce using rule 80 (gosub -> .)

    gosub                          shift and go to state 223

state 181

    (84) paramFuncion -> exp . paramFuncionAux
    (85) paramFuncion -> exp . paramFuncionAux COMA paramFuncion
    (87) paramFuncionAux -> .

    COMA            reduce using rule 87 (paramFuncionAux -> .)
    RPAREN          reduce using rule 87 (paramFuncionAux -> .)

    paramFuncionAux                shift and go to state 224

state 182

    (86) paramFuncion -> empty .

    RPAREN          reduce using rule 86 (paramFuncion -> empty .)


state 183

    (91) asignacion -> arreglo EQUAL push_poper expresion create_asign . SEMICOLON

    SEMICOLON       shift and go to state 225


state 184

    (131) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    LOWERTHAN       reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    MORETHAN        reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    DIFFERENT       reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    DOUBLEEQUAL     reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    LOWEREQUAL      reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    MOREEQUAL       reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    RCORCH          reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    COMA            reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    ID              reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    IF              reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    PRINT           reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    WHILE           reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    FROM            reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    INPUT           reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    RBRACE          reduce using rule 131 (factor -> LPAREN expresion RPAREN .)
    RETURN          reduce using rule 131 (factor -> LPAREN expresion RPAREN .)


state 185

    (98) condicion -> IF LPAREN expresion RPAREN cond . bloque condFinal
    (99) condicion -> IF LPAREN expresion RPAREN cond . bloque ELSE condElse bloque condFinal
    (37) bloque -> . LBRACE RBRACE
    (38) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 227

    bloque                         shift and go to state 226

state 186

    (113) expresion -> exp comp exp . quad_comp
    (120) quad_comp -> .

    RPAREN          reduce using rule 120 (quad_comp -> .)
    SEMICOLON       reduce using rule 120 (quad_comp -> .)
    COMA            reduce using rule 120 (quad_comp -> .)
    ID              reduce using rule 120 (quad_comp -> .)
    IF              reduce using rule 120 (quad_comp -> .)
    PRINT           reduce using rule 120 (quad_comp -> .)
    WHILE           reduce using rule 120 (quad_comp -> .)
    FROM            reduce using rule 120 (quad_comp -> .)
    INPUT           reduce using rule 120 (quad_comp -> .)
    RBRACE          reduce using rule 120 (quad_comp -> .)
    RETURN          reduce using rule 120 (quad_comp -> .)

    quad_comp                      shift and go to state 228

state 187

    (114) comp -> LOWERTHAN push_poper .

    LPAREN          reduce using rule 114 (comp -> LOWERTHAN push_poper .)
    PLUS            reduce using rule 114 (comp -> LOWERTHAN push_poper .)
    MINUS           reduce using rule 114 (comp -> LOWERTHAN push_poper .)
    ID              reduce using rule 114 (comp -> LOWERTHAN push_poper .)
    CTE_I           reduce using rule 114 (comp -> LOWERTHAN push_poper .)
    CTE_F           reduce using rule 114 (comp -> LOWERTHAN push_poper .)
    CTE_STRING      reduce using rule 114 (comp -> LOWERTHAN push_poper .)


state 188

    (115) comp -> MORETHAN push_poper .

    LPAREN          reduce using rule 115 (comp -> MORETHAN push_poper .)
    PLUS            reduce using rule 115 (comp -> MORETHAN push_poper .)
    MINUS           reduce using rule 115 (comp -> MORETHAN push_poper .)
    ID              reduce using rule 115 (comp -> MORETHAN push_poper .)
    CTE_I           reduce using rule 115 (comp -> MORETHAN push_poper .)
    CTE_F           reduce using rule 115 (comp -> MORETHAN push_poper .)
    CTE_STRING      reduce using rule 115 (comp -> MORETHAN push_poper .)


state 189

    (116) comp -> DIFFERENT push_poper .

    LPAREN          reduce using rule 116 (comp -> DIFFERENT push_poper .)
    PLUS            reduce using rule 116 (comp -> DIFFERENT push_poper .)
    MINUS           reduce using rule 116 (comp -> DIFFERENT push_poper .)
    ID              reduce using rule 116 (comp -> DIFFERENT push_poper .)
    CTE_I           reduce using rule 116 (comp -> DIFFERENT push_poper .)
    CTE_F           reduce using rule 116 (comp -> DIFFERENT push_poper .)
    CTE_STRING      reduce using rule 116 (comp -> DIFFERENT push_poper .)


state 190

    (117) comp -> DOUBLEEQUAL push_poper .

    LPAREN          reduce using rule 117 (comp -> DOUBLEEQUAL push_poper .)
    PLUS            reduce using rule 117 (comp -> DOUBLEEQUAL push_poper .)
    MINUS           reduce using rule 117 (comp -> DOUBLEEQUAL push_poper .)
    ID              reduce using rule 117 (comp -> DOUBLEEQUAL push_poper .)
    CTE_I           reduce using rule 117 (comp -> DOUBLEEQUAL push_poper .)
    CTE_F           reduce using rule 117 (comp -> DOUBLEEQUAL push_poper .)
    CTE_STRING      reduce using rule 117 (comp -> DOUBLEEQUAL push_poper .)


state 191

    (118) comp -> LOWEREQUAL push_poper .

    LPAREN          reduce using rule 118 (comp -> LOWEREQUAL push_poper .)
    PLUS            reduce using rule 118 (comp -> LOWEREQUAL push_poper .)
    MINUS           reduce using rule 118 (comp -> LOWEREQUAL push_poper .)
    ID              reduce using rule 118 (comp -> LOWEREQUAL push_poper .)
    CTE_I           reduce using rule 118 (comp -> LOWEREQUAL push_poper .)
    CTE_F           reduce using rule 118 (comp -> LOWEREQUAL push_poper .)
    CTE_STRING      reduce using rule 118 (comp -> LOWEREQUAL push_poper .)


state 192

    (119) comp -> MOREEQUAL push_poper .

    LPAREN          reduce using rule 119 (comp -> MOREEQUAL push_poper .)
    PLUS            reduce using rule 119 (comp -> MOREEQUAL push_poper .)
    MINUS           reduce using rule 119 (comp -> MOREEQUAL push_poper .)
    ID              reduce using rule 119 (comp -> MOREEQUAL push_poper .)
    CTE_I           reduce using rule 119 (comp -> MOREEQUAL push_poper .)
    CTE_F           reduce using rule 119 (comp -> MOREEQUAL push_poper .)
    CTE_STRING      reduce using rule 119 (comp -> MOREEQUAL push_poper .)


state 193

    (122) exp -> termino quad_term exp1 .

    LOWERTHAN       reduce using rule 122 (exp -> termino quad_term exp1 .)
    MORETHAN        reduce using rule 122 (exp -> termino quad_term exp1 .)
    DIFFERENT       reduce using rule 122 (exp -> termino quad_term exp1 .)
    DOUBLEEQUAL     reduce using rule 122 (exp -> termino quad_term exp1 .)
    LOWEREQUAL      reduce using rule 122 (exp -> termino quad_term exp1 .)
    MOREEQUAL       reduce using rule 122 (exp -> termino quad_term exp1 .)
    RPAREN          reduce using rule 122 (exp -> termino quad_term exp1 .)
    SEMICOLON       reduce using rule 122 (exp -> termino quad_term exp1 .)
    RCORCH          reduce using rule 122 (exp -> termino quad_term exp1 .)
    COMA            reduce using rule 122 (exp -> termino quad_term exp1 .)
    ID              reduce using rule 122 (exp -> termino quad_term exp1 .)
    IF              reduce using rule 122 (exp -> termino quad_term exp1 .)
    PRINT           reduce using rule 122 (exp -> termino quad_term exp1 .)
    WHILE           reduce using rule 122 (exp -> termino quad_term exp1 .)
    FROM            reduce using rule 122 (exp -> termino quad_term exp1 .)
    INPUT           reduce using rule 122 (exp -> termino quad_term exp1 .)
    RBRACE          reduce using rule 122 (exp -> termino quad_term exp1 .)
    RETURN          reduce using rule 122 (exp -> termino quad_term exp1 .)


state 194

    (123) exp1 -> PLUS . push_poper exp
    (138) push_poper -> .

    LPAREN          reduce using rule 138 (push_poper -> .)
    PLUS            reduce using rule 138 (push_poper -> .)
    MINUS           reduce using rule 138 (push_poper -> .)
    ID              reduce using rule 138 (push_poper -> .)
    CTE_I           reduce using rule 138 (push_poper -> .)
    CTE_F           reduce using rule 138 (push_poper -> .)
    CTE_STRING      reduce using rule 138 (push_poper -> .)

    push_poper                     shift and go to state 229

state 195

    (124) exp1 -> MINUS . push_poper exp
    (138) push_poper -> .

    LPAREN          reduce using rule 138 (push_poper -> .)
    PLUS            reduce using rule 138 (push_poper -> .)
    MINUS           reduce using rule 138 (push_poper -> .)
    ID              reduce using rule 138 (push_poper -> .)
    CTE_I           reduce using rule 138 (push_poper -> .)
    CTE_F           reduce using rule 138 (push_poper -> .)
    CTE_STRING      reduce using rule 138 (push_poper -> .)

    push_poper                     shift and go to state 230

state 196

    (128) termino -> factor quad_fact termino1 .

    PLUS            reduce using rule 128 (termino -> factor quad_fact termino1 .)
    MINUS           reduce using rule 128 (termino -> factor quad_fact termino1 .)
    LOWERTHAN       reduce using rule 128 (termino -> factor quad_fact termino1 .)
    MORETHAN        reduce using rule 128 (termino -> factor quad_fact termino1 .)
    DIFFERENT       reduce using rule 128 (termino -> factor quad_fact termino1 .)
    DOUBLEEQUAL     reduce using rule 128 (termino -> factor quad_fact termino1 .)
    LOWEREQUAL      reduce using rule 128 (termino -> factor quad_fact termino1 .)
    MOREEQUAL       reduce using rule 128 (termino -> factor quad_fact termino1 .)
    RPAREN          reduce using rule 128 (termino -> factor quad_fact termino1 .)
    SEMICOLON       reduce using rule 128 (termino -> factor quad_fact termino1 .)
    RCORCH          reduce using rule 128 (termino -> factor quad_fact termino1 .)
    COMA            reduce using rule 128 (termino -> factor quad_fact termino1 .)
    ID              reduce using rule 128 (termino -> factor quad_fact termino1 .)
    IF              reduce using rule 128 (termino -> factor quad_fact termino1 .)
    PRINT           reduce using rule 128 (termino -> factor quad_fact termino1 .)
    WHILE           reduce using rule 128 (termino -> factor quad_fact termino1 .)
    FROM            reduce using rule 128 (termino -> factor quad_fact termino1 .)
    INPUT           reduce using rule 128 (termino -> factor quad_fact termino1 .)
    RBRACE          reduce using rule 128 (termino -> factor quad_fact termino1 .)
    RETURN          reduce using rule 128 (termino -> factor quad_fact termino1 .)


state 197

    (129) termino1 -> TIMES . push_poper termino
    (138) push_poper -> .

    LPAREN          reduce using rule 138 (push_poper -> .)
    PLUS            reduce using rule 138 (push_poper -> .)
    MINUS           reduce using rule 138 (push_poper -> .)
    ID              reduce using rule 138 (push_poper -> .)
    CTE_I           reduce using rule 138 (push_poper -> .)
    CTE_F           reduce using rule 138 (push_poper -> .)
    CTE_STRING      reduce using rule 138 (push_poper -> .)

    push_poper                     shift and go to state 231

state 198

    (130) termino1 -> DIVIDE . push_poper termino
    (138) push_poper -> .

    LPAREN          reduce using rule 138 (push_poper -> .)
    PLUS            reduce using rule 138 (push_poper -> .)
    MINUS           reduce using rule 138 (push_poper -> .)
    ID              reduce using rule 138 (push_poper -> .)
    CTE_I           reduce using rule 138 (push_poper -> .)
    CTE_F           reduce using rule 138 (push_poper -> .)
    CTE_STRING      reduce using rule 138 (push_poper -> .)

    push_poper                     shift and go to state 232

state 199

    (133) factorAux -> PLUS push_poper var_cte .

    TIMES           reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    DIVIDE          reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    PLUS            reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    MINUS           reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    MORETHAN        reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    DIFFERENT       reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    DOUBLEEQUAL     reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    LOWEREQUAL      reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    MOREEQUAL       reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    RPAREN          reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    SEMICOLON       reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    RCORCH          reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    COMA            reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    ID              reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    IF              reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    PRINT           reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    WHILE           reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    FROM            reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    INPUT           reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    RBRACE          reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)
    RETURN          reduce using rule 133 (factorAux -> PLUS push_poper var_cte .)


state 200

    (134) factorAux -> MINUS push_poper var_cte .

    TIMES           reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    DIVIDE          reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    PLUS            reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    MINUS           reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    MORETHAN        reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    DIFFERENT       reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    DOUBLEEQUAL     reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    LOWEREQUAL      reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    MOREEQUAL       reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    RPAREN          reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    SEMICOLON       reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    RCORCH          reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    COMA            reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    ID              reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    IF              reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    PRINT           reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    WHILE           reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    FROM            reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    INPUT           reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    RBRACE          reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)
    RETURN          reduce using rule 134 (factorAux -> MINUS push_poper var_cte .)


state 201

    (103) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN . quad_print SEMICOLON
    (106) quad_print -> .

    SEMICOLON       reduce using rule 106 (quad_print -> .)

    quad_print                     shift and go to state 233

state 202

    (104) escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN . quad_print SEMICOLON
    (106) quad_print -> .

    SEMICOLON       reduce using rule 106 (quad_print -> .)

    quad_print                     shift and go to state 234

state 203

    (109) escrituraAux -> expresion COMA . escrituraAux
    (107) escrituraAux -> . expresion
    (108) escrituraAux -> . CTE_STRING push_cte
    (109) escrituraAux -> . expresion COMA escrituraAux
    (110) escrituraAux -> . CTE_STRING push_cte COMA escrituraAux
    (111) escrituraAux -> . llamadaAFuncion
    (112) expresion -> . exp
    (113) expresion -> . exp comp exp quad_comp
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    CTE_STRING      shift and go to state 158
    ID              shift and go to state 159
    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113

    expresion                      shift and go to state 157
    escrituraAux                   shift and go to state 235
    llamadaAFuncion                shift and go to state 236
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 204

    (108) escrituraAux -> CTE_STRING push_cte .
    (110) escrituraAux -> CTE_STRING push_cte . COMA escrituraAux
    (142) var_cte -> CTE_STRING push_cte .

  ! shift/reduce conflict for COMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 108 (escrituraAux -> CTE_STRING push_cte .)
    RPAREN          reduce using rule 108 (escrituraAux -> CTE_STRING push_cte .)
    COMA            shift and go to state 237
    TIMES           reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    DIVIDE          reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    PLUS            reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    MINUS           reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    LOWERTHAN       reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    MORETHAN        reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    DIFFERENT       reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    DOUBLEEQUAL     reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    LOWEREQUAL      reduce using rule 142 (var_cte -> CTE_STRING push_cte .)
    MOREEQUAL       reduce using rule 142 (var_cte -> CTE_STRING push_cte .)

  ! COMA            [ reduce using rule 142 (var_cte -> CTE_STRING push_cte .) ]
  ! RPAREN          [ reduce using rule 142 (var_cte -> CTE_STRING push_cte .) ]


state 205

    (64) while -> WHILE while1 LPAREN expresion RPAREN . while2 LBRACE bloqueAux RBRACE while3
    (66) while2 -> .

    LBRACE          reduce using rule 66 (while2 -> .)

    while2                         shift and go to state 238

state 206

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion . RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    RPAREN          shift and go to state 239


state 207

    (105) lectura -> INPUT push_poper LPAREN ID push_id . RPAREN quad_print SEMICOLON

    RPAREN          shift and go to state 240


state 208

    (14) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA . varAuxGlobal2
    (9) varAuxGlobal2 -> . ID
    (10) varAuxGlobal2 -> . ID COMA varAuxGlobal2
    (11) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH
    (12) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH COMA varAuxGlobal2
    (13) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH
    (14) varAuxGlobal2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2

    ID              shift and go to state 31

    varAuxGlobal2                  shift and go to state 241

state 209

    (41) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function .

    MAIN            reduce using rule 41 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function .)


state 210

    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE . endProc
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE . endProc function
    (54) endProc -> .

    FUNCTION        reduce using rule 54 (endProc -> .)
    MAIN            reduce using rule 54 (endProc -> .)

    endProc                        shift and go to state 242

state 211

    (43) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc .
    (44) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc . function
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function

    MAIN            reduce using rule 43 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc .)
    FUNCTION        shift and go to state 9

    function                       shift and go to state 243

state 212

    (51) functionReturn -> RETURN exp creaCuadReturn SEMICOLON .

    RBRACE          reduce using rule 51 (functionReturn -> RETURN exp creaCuadReturn SEMICOLON .)


state 213

    (45) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc .
    (49) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc . function
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function

    MAIN            reduce using rule 45 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc .)
    FUNCTION        shift and go to state 9

    function                       shift and go to state 244

state 214

    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE . endProc
    (47) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE . endProc function
    (54) endProc -> .

    FUNCTION        reduce using rule 54 (endProc -> .)
    MAIN            reduce using rule 54 (endProc -> .)

    endProc                        shift and go to state 245

state 215

    (48) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn . RBRACE endProc
    (50) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn . RBRACE endProc function

    RBRACE          shift and go to state 246


state 216

    (22) varAux2 -> ID push_var COMA varAux2 .

    SEMICOLON       reduce using rule 22 (varAux2 -> ID push_var COMA varAux2 .)


state 217

    (23) varAux2 -> ID LCORCH CTE_I RCORCH . push_arreglo
    (24) varAux2 -> ID LCORCH CTE_I RCORCH . push_arreglo COMA varAux2
    (25) varAux2 -> ID LCORCH CTE_I RCORCH . LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> ID LCORCH CTE_I RCORCH . LCORCH CTE_I RCORCH push_matriz COMA varAux2
    (28) push_arreglo -> .

    LCORCH          shift and go to state 247
    COMA            reduce using rule 28 (push_arreglo -> .)
    SEMICOLON       reduce using rule 28 (push_arreglo -> .)

    push_arreglo                   shift and go to state 248

state 218

    (90) asignacion -> ID push_id EQUAL push_poper expresion create_asign . SEMICOLON

    SEMICOLON       shift and go to state 249


state 219

    (92) asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign . SEMICOLON

    SEMICOLON       shift and go to state 250


state 220

    (97) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .

    ID              reduce using rule 97 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    IF              reduce using rule 97 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    PRINT           reduce using rule 97 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    WHILE           reduce using rule 97 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    FROM            reduce using rule 97 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    INPUT           reduce using rule 97 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    RBRACE          reduce using rule 97 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    RETURN          reduce using rule 97 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)


state 221

    (89) arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .

    EQUAL           reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    TIMES           reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    DIVIDE          reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    PLUS            reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    MINUS           reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    LOWERTHAN       reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    MORETHAN        reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    DIFFERENT       reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    DOUBLEEQUAL     reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    LOWEREQUAL      reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    MOREEQUAL       reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    RPAREN          reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    SEMICOLON       reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    RCORCH          reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    COMA            reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    ID              reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    IF              reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    PRINT           reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    WHILE           reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    FROM            reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    INPUT           reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    RBRACE          reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)
    RETURN          reduce using rule 89 (arreglo -> ID push_id LCORCH exp RCORCH ver_dim1 .)


state 222

    (82) paramFuncion -> ID push_id2 . paramFuncionAux
    (83) paramFuncion -> ID push_id2 . paramFuncionAux COMA paramFuncion
    (87) paramFuncionAux -> .

    COMA            reduce using rule 87 (paramFuncionAux -> .)
    RPAREN          reduce using rule 87 (paramFuncionAux -> .)

    paramFuncionAux                shift and go to state 251

state 223

    (77) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub . RPAREN expresion
    (78) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub . RPAREN

    RPAREN          shift and go to state 252


state 224

    (84) paramFuncion -> exp paramFuncionAux .
    (85) paramFuncion -> exp paramFuncionAux . COMA paramFuncion

    RPAREN          reduce using rule 84 (paramFuncion -> exp paramFuncionAux .)
    COMA            shift and go to state 253


state 225

    (91) asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON .

    ID              reduce using rule 91 (asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON .)
    IF              reduce using rule 91 (asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON .)
    PRINT           reduce using rule 91 (asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON .)
    WHILE           reduce using rule 91 (asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON .)
    FROM            reduce using rule 91 (asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON .)
    INPUT           reduce using rule 91 (asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON .)
    RBRACE          reduce using rule 91 (asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON .)
    RETURN          reduce using rule 91 (asignacion -> arreglo EQUAL push_poper expresion create_asign SEMICOLON .)


state 226

    (98) condicion -> IF LPAREN expresion RPAREN cond bloque . condFinal
    (99) condicion -> IF LPAREN expresion RPAREN cond bloque . ELSE condElse bloque condFinal
    (102) condFinal -> .

    ELSE            shift and go to state 255
    ID              reduce using rule 102 (condFinal -> .)
    IF              reduce using rule 102 (condFinal -> .)
    PRINT           reduce using rule 102 (condFinal -> .)
    WHILE           reduce using rule 102 (condFinal -> .)
    FROM            reduce using rule 102 (condFinal -> .)
    INPUT           reduce using rule 102 (condFinal -> .)
    RBRACE          reduce using rule 102 (condFinal -> .)
    RETURN          reduce using rule 102 (condFinal -> .)

    condFinal                      shift and go to state 254

state 227

    (37) bloque -> LBRACE . RBRACE
    (38) bloque -> LBRACE . bloqueAux RBRACE
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (90) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (91) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (98) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (103) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (104) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (97) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (105) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    RBRACE          shift and go to state 256
    ID              shift and go to state 61
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    WHILE           shift and go to state 65
    FROM            shift and go to state 66
    INPUT           shift and go to state 67

    bloqueAux                      shift and go to state 257
    estatuto                       shift and go to state 51
    asignacion                     shift and go to state 53
    condicion                      shift and go to state 54
    escritura                      shift and go to state 55
    while                          shift and go to state 56
    loopFromDo                     shift and go to state 57
    comparacion                    shift and go to state 58
    llamadaAFuncion                shift and go to state 59
    lectura                        shift and go to state 60
    arreglo                        shift and go to state 62

state 228

    (113) expresion -> exp comp exp quad_comp .

    RPAREN          reduce using rule 113 (expresion -> exp comp exp quad_comp .)
    SEMICOLON       reduce using rule 113 (expresion -> exp comp exp quad_comp .)
    COMA            reduce using rule 113 (expresion -> exp comp exp quad_comp .)
    ID              reduce using rule 113 (expresion -> exp comp exp quad_comp .)
    IF              reduce using rule 113 (expresion -> exp comp exp quad_comp .)
    PRINT           reduce using rule 113 (expresion -> exp comp exp quad_comp .)
    WHILE           reduce using rule 113 (expresion -> exp comp exp quad_comp .)
    FROM            reduce using rule 113 (expresion -> exp comp exp quad_comp .)
    INPUT           reduce using rule 113 (expresion -> exp comp exp quad_comp .)
    RBRACE          reduce using rule 113 (expresion -> exp comp exp quad_comp .)
    RETURN          reduce using rule 113 (expresion -> exp comp exp quad_comp .)


state 229

    (123) exp1 -> PLUS push_poper . exp
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    exp                            shift and go to state 258
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 230

    (124) exp1 -> MINUS push_poper . exp
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    exp                            shift and go to state 259
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 231

    (129) termino1 -> TIMES push_poper . termino
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    termino                        shift and go to state 260
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 232

    (130) termino1 -> DIVIDE push_poper . termino
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    termino                        shift and go to state 261
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 233

    (103) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print . SEMICOLON

    SEMICOLON       shift and go to state 262


state 234

    (104) escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print . SEMICOLON

    SEMICOLON       shift and go to state 263


state 235

    (109) escrituraAux -> expresion COMA escrituraAux .

    RPAREN          reduce using rule 109 (escrituraAux -> expresion COMA escrituraAux .)


state 236

    (111) escrituraAux -> llamadaAFuncion .

    RPAREN          reduce using rule 111 (escrituraAux -> llamadaAFuncion .)


state 237

    (110) escrituraAux -> CTE_STRING push_cte COMA . escrituraAux
    (107) escrituraAux -> . expresion
    (108) escrituraAux -> . CTE_STRING push_cte
    (109) escrituraAux -> . expresion COMA escrituraAux
    (110) escrituraAux -> . CTE_STRING push_cte COMA escrituraAux
    (111) escrituraAux -> . llamadaAFuncion
    (112) expresion -> . exp
    (113) expresion -> . exp comp exp quad_comp
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    CTE_STRING      shift and go to state 158
    ID              shift and go to state 159
    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113

    escrituraAux                   shift and go to state 264
    expresion                      shift and go to state 157
    llamadaAFuncion                shift and go to state 236
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 238

    (64) while -> WHILE while1 LPAREN expresion RPAREN while2 . LBRACE bloqueAux RBRACE while3

    LBRACE          shift and go to state 265


state 239

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN . TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    TO              shift and go to state 266


state 240

    (105) lectura -> INPUT push_poper LPAREN ID push_id RPAREN . quad_print SEMICOLON
    (106) quad_print -> .

    SEMICOLON       reduce using rule 106 (quad_print -> .)

    quad_print                     shift and go to state 267

state 241

    (14) varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2 .

    SEMICOLON       reduce using rule 14 (varAuxGlobal2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH COMA varAuxGlobal2 .)


state 242

    (40) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc .
    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc . function
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function

    MAIN            reduce using rule 40 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc .)
    FUNCTION        shift and go to state 9

    function                       shift and go to state 268

state 243

    (44) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function .

    MAIN            reduce using rule 44 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function .)


state 244

    (49) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function .

    MAIN            reduce using rule 49 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function .)


state 245

    (46) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc .
    (47) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc . function
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function

    MAIN            reduce using rule 46 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc .)
    FUNCTION        shift and go to state 9

    function                       shift and go to state 269

state 246

    (48) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE . endProc
    (50) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE . endProc function
    (54) endProc -> .

    FUNCTION        reduce using rule 54 (endProc -> .)
    MAIN            reduce using rule 54 (endProc -> .)

    endProc                        shift and go to state 270

state 247

    (25) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH . CTE_I RCORCH push_matriz
    (26) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH . CTE_I RCORCH push_matriz COMA varAux2

    CTE_I           shift and go to state 271


state 248

    (23) varAux2 -> ID LCORCH CTE_I RCORCH push_arreglo .
    (24) varAux2 -> ID LCORCH CTE_I RCORCH push_arreglo . COMA varAux2

    SEMICOLON       reduce using rule 23 (varAux2 -> ID LCORCH CTE_I RCORCH push_arreglo .)
    COMA            shift and go to state 272


state 249

    (90) asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .

    ID              reduce using rule 90 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    IF              reduce using rule 90 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    PRINT           reduce using rule 90 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    WHILE           reduce using rule 90 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    FROM            reduce using rule 90 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    INPUT           reduce using rule 90 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    RBRACE          reduce using rule 90 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    RETURN          reduce using rule 90 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)


state 250

    (92) asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON .

    ID              reduce using rule 92 (asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON .)
    IF              reduce using rule 92 (asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON .)
    PRINT           reduce using rule 92 (asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON .)
    WHILE           reduce using rule 92 (asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON .)
    FROM            reduce using rule 92 (asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON .)
    INPUT           reduce using rule 92 (asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON .)
    RBRACE          reduce using rule 92 (asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON .)
    RETURN          reduce using rule 92 (asignacion -> ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON .)


state 251

    (82) paramFuncion -> ID push_id2 paramFuncionAux .
    (83) paramFuncion -> ID push_id2 paramFuncionAux . COMA paramFuncion

    RPAREN          reduce using rule 82 (paramFuncion -> ID push_id2 paramFuncionAux .)
    COMA            shift and go to state 273


state 252

    (77) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN . expresion
    (78) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .
    (112) expresion -> . exp
    (113) expresion -> . exp comp exp quad_comp
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

  ! shift/reduce conflict for ID resolved as shift
    IF              reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .)
    PRINT           reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .)
    WHILE           reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .)
    FROM            reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .)
    INPUT           reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .)
    RBRACE          reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .)
    RETURN          reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .)
    RPAREN          reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .)
    SEMICOLON       reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .)
    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

  ! ID              [ reduce using rule 78 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN .) ]

    expresion                      shift and go to state 274
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 253

    (85) paramFuncion -> exp paramFuncionAux COMA . paramFuncion
    (82) paramFuncion -> . ID push_id2 paramFuncionAux
    (83) paramFuncion -> . ID push_id2 paramFuncionAux COMA paramFuncion
    (84) paramFuncion -> . exp paramFuncionAux
    (85) paramFuncion -> . exp paramFuncionAux COMA paramFuncion
    (86) paramFuncion -> . empty
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (59) empty -> .
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 179
    RPAREN          reduce using rule 59 (empty -> .)
    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    exp                            shift and go to state 181
    paramFuncion                   shift and go to state 275
    empty                          shift and go to state 182
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 254

    (98) condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .

    ID              reduce using rule 98 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    IF              reduce using rule 98 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    PRINT           reduce using rule 98 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    WHILE           reduce using rule 98 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    FROM            reduce using rule 98 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    INPUT           reduce using rule 98 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    RBRACE          reduce using rule 98 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    RETURN          reduce using rule 98 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)


state 255

    (99) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE . condElse bloque condFinal
    (101) condElse -> .

    LBRACE          reduce using rule 101 (condElse -> .)

    condElse                       shift and go to state 276

state 256

    (37) bloque -> LBRACE RBRACE .

    ELSE            reduce using rule 37 (bloque -> LBRACE RBRACE .)
    ID              reduce using rule 37 (bloque -> LBRACE RBRACE .)
    IF              reduce using rule 37 (bloque -> LBRACE RBRACE .)
    PRINT           reduce using rule 37 (bloque -> LBRACE RBRACE .)
    WHILE           reduce using rule 37 (bloque -> LBRACE RBRACE .)
    FROM            reduce using rule 37 (bloque -> LBRACE RBRACE .)
    INPUT           reduce using rule 37 (bloque -> LBRACE RBRACE .)
    RBRACE          reduce using rule 37 (bloque -> LBRACE RBRACE .)
    RETURN          reduce using rule 37 (bloque -> LBRACE RBRACE .)


state 257

    (38) bloque -> LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 277


state 258

    (123) exp1 -> PLUS push_poper exp .

    LOWERTHAN       reduce using rule 123 (exp1 -> PLUS push_poper exp .)
    MORETHAN        reduce using rule 123 (exp1 -> PLUS push_poper exp .)
    DIFFERENT       reduce using rule 123 (exp1 -> PLUS push_poper exp .)
    DOUBLEEQUAL     reduce using rule 123 (exp1 -> PLUS push_poper exp .)
    LOWEREQUAL      reduce using rule 123 (exp1 -> PLUS push_poper exp .)
    MOREEQUAL       reduce using rule 123 (exp1 -> PLUS push_poper exp .)
    RPAREN          reduce using rule 123 (exp1 -> PLUS push_poper exp .)
    SEMICOLON       reduce using rule 123 (exp1 -> PLUS push_poper exp .)
    RCORCH          reduce using rule 123 (exp1 -> PLUS push_poper exp .)
    COMA            reduce using rule 123 (exp1 -> PLUS push_poper exp .)
    ID              reduce using rule 123 (exp1 -> PLUS push_poper exp .)
    IF              reduce using rule 123 (exp1 -> PLUS push_poper exp .)
    PRINT           reduce using rule 123 (exp1 -> PLUS push_poper exp .)
    WHILE           reduce using rule 123 (exp1 -> PLUS push_poper exp .)
    FROM            reduce using rule 123 (exp1 -> PLUS push_poper exp .)
    INPUT           reduce using rule 123 (exp1 -> PLUS push_poper exp .)
    RBRACE          reduce using rule 123 (exp1 -> PLUS push_poper exp .)
    RETURN          reduce using rule 123 (exp1 -> PLUS push_poper exp .)


state 259

    (124) exp1 -> MINUS push_poper exp .

    LOWERTHAN       reduce using rule 124 (exp1 -> MINUS push_poper exp .)
    MORETHAN        reduce using rule 124 (exp1 -> MINUS push_poper exp .)
    DIFFERENT       reduce using rule 124 (exp1 -> MINUS push_poper exp .)
    DOUBLEEQUAL     reduce using rule 124 (exp1 -> MINUS push_poper exp .)
    LOWEREQUAL      reduce using rule 124 (exp1 -> MINUS push_poper exp .)
    MOREEQUAL       reduce using rule 124 (exp1 -> MINUS push_poper exp .)
    RPAREN          reduce using rule 124 (exp1 -> MINUS push_poper exp .)
    SEMICOLON       reduce using rule 124 (exp1 -> MINUS push_poper exp .)
    RCORCH          reduce using rule 124 (exp1 -> MINUS push_poper exp .)
    COMA            reduce using rule 124 (exp1 -> MINUS push_poper exp .)
    ID              reduce using rule 124 (exp1 -> MINUS push_poper exp .)
    IF              reduce using rule 124 (exp1 -> MINUS push_poper exp .)
    PRINT           reduce using rule 124 (exp1 -> MINUS push_poper exp .)
    WHILE           reduce using rule 124 (exp1 -> MINUS push_poper exp .)
    FROM            reduce using rule 124 (exp1 -> MINUS push_poper exp .)
    INPUT           reduce using rule 124 (exp1 -> MINUS push_poper exp .)
    RBRACE          reduce using rule 124 (exp1 -> MINUS push_poper exp .)
    RETURN          reduce using rule 124 (exp1 -> MINUS push_poper exp .)


state 260

    (129) termino1 -> TIMES push_poper termino .

    PLUS            reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    MINUS           reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    LOWERTHAN       reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    MORETHAN        reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    DIFFERENT       reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    DOUBLEEQUAL     reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    LOWEREQUAL      reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    MOREEQUAL       reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    RPAREN          reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    SEMICOLON       reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    RCORCH          reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    COMA            reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    ID              reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    IF              reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    PRINT           reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    WHILE           reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    FROM            reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    INPUT           reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    RBRACE          reduce using rule 129 (termino1 -> TIMES push_poper termino .)
    RETURN          reduce using rule 129 (termino1 -> TIMES push_poper termino .)


state 261

    (130) termino1 -> DIVIDE push_poper termino .

    PLUS            reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    MINUS           reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    LOWERTHAN       reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    MORETHAN        reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    DIFFERENT       reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    DOUBLEEQUAL     reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    LOWEREQUAL      reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    MOREEQUAL       reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    RPAREN          reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    SEMICOLON       reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    RCORCH          reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    COMA            reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    ID              reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    IF              reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    PRINT           reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    WHILE           reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    FROM            reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    INPUT           reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    RBRACE          reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)
    RETURN          reduce using rule 130 (termino1 -> DIVIDE push_poper termino .)


state 262

    (103) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .

    ID              reduce using rule 103 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    IF              reduce using rule 103 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    PRINT           reduce using rule 103 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    WHILE           reduce using rule 103 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    FROM            reduce using rule 103 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    INPUT           reduce using rule 103 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    RBRACE          reduce using rule 103 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    RETURN          reduce using rule 103 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)


state 263

    (104) escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON .

    ID              reduce using rule 104 (escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON .)
    IF              reduce using rule 104 (escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON .)
    PRINT           reduce using rule 104 (escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON .)
    WHILE           reduce using rule 104 (escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON .)
    FROM            reduce using rule 104 (escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON .)
    INPUT           reduce using rule 104 (escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON .)
    RBRACE          reduce using rule 104 (escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON .)
    RETURN          reduce using rule 104 (escritura -> PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON .)


state 264

    (110) escrituraAux -> CTE_STRING push_cte COMA escrituraAux .

    RPAREN          reduce using rule 110 (escrituraAux -> CTE_STRING push_cte COMA escrituraAux .)


state 265

    (64) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE . bloqueAux RBRACE while3
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (90) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (91) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (98) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (103) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (104) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (97) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (105) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 61
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    WHILE           shift and go to state 65
    FROM            shift and go to state 66
    INPUT           shift and go to state 67

    bloqueAux                      shift and go to state 278
    estatuto                       shift and go to state 51
    asignacion                     shift and go to state 53
    condicion                      shift and go to state 54
    escritura                      shift and go to state 55
    while                          shift and go to state 56
    loopFromDo                     shift and go to state 57
    comparacion                    shift and go to state 58
    llamadaAFuncion                shift and go to state 59
    lectura                        shift and go to state 60
    arreglo                        shift and go to state 62

state 266

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO . LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    LPAREN          shift and go to state 279


state 267

    (105) lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print . SEMICOLON

    SEMICOLON       shift and go to state 280


state 268

    (42) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function .

    MAIN            reduce using rule 42 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function .)


state 269

    (47) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function .

    MAIN            reduce using rule 47 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function .)


state 270

    (48) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc .
    (50) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc . function
    (39) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc
    (40) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (41) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE functionReturn RBRACE endProc function
    (42) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function
    (43) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (44) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (45) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc
    (46) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc
    (47) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE bloqueAux functionReturn RBRACE endProc function
    (48) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc
    (49) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE functionReturn RBRACE endProc function
    (50) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function

    MAIN            reduce using rule 48 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc .)
    FUNCTION        shift and go to state 9

    function                       shift and go to state 281

state 271

    (25) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I . RCORCH push_matriz
    (26) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I . RCORCH push_matriz COMA varAux2

    RCORCH          shift and go to state 282


state 272

    (24) varAux2 -> ID LCORCH CTE_I RCORCH push_arreglo COMA . varAux2
    (21) varAux2 -> . ID push_var
    (22) varAux2 -> . ID push_var COMA varAux2
    (23) varAux2 -> . ID LCORCH CTE_I RCORCH push_arreglo
    (24) varAux2 -> . ID LCORCH CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    ID              shift and go to state 96

    varAux2                        shift and go to state 283

state 273

    (83) paramFuncion -> ID push_id2 paramFuncionAux COMA . paramFuncion
    (82) paramFuncion -> . ID push_id2 paramFuncionAux
    (83) paramFuncion -> . ID push_id2 paramFuncionAux COMA paramFuncion
    (84) paramFuncion -> . exp paramFuncionAux
    (85) paramFuncion -> . exp paramFuncionAux COMA paramFuncion
    (86) paramFuncion -> . empty
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (59) empty -> .
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 179
    RPAREN          reduce using rule 59 (empty -> .)
    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    paramFuncion                   shift and go to state 284
    exp                            shift and go to state 181
    empty                          shift and go to state 182
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 274

    (77) llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .

    ID              reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    IF              reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    PRINT           reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    WHILE           reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    FROM            reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    INPUT           reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    RBRACE          reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    RETURN          reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    RPAREN          reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    SEMICOLON       reduce using rule 77 (llamadaAFuncion -> ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion .)


state 275

    (85) paramFuncion -> exp paramFuncionAux COMA paramFuncion .

    RPAREN          reduce using rule 85 (paramFuncion -> exp paramFuncionAux COMA paramFuncion .)


state 276

    (99) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse . bloque condFinal
    (37) bloque -> . LBRACE RBRACE
    (38) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 227

    bloque                         shift and go to state 285

state 277

    (38) bloque -> LBRACE bloqueAux RBRACE .

    ELSE            reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    ID              reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    FROM            reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    INPUT           reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)
    RETURN          reduce using rule 38 (bloque -> LBRACE bloqueAux RBRACE .)


state 278

    (64) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux . RBRACE while3

    RBRACE          shift and go to state 286


state 279

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN . expresion RPAREN DO LBRACE bloqueAux RBRACE
    (112) expresion -> . exp
    (113) expresion -> . exp comp exp quad_comp
    (121) exp -> . termino quad_term
    (122) exp -> . termino quad_term exp1
    (127) termino -> . factor quad_fact
    (128) termino -> . factor quad_fact termino1
    (131) factor -> . LPAREN expresion RPAREN
    (132) factor -> . factorAux
    (133) factorAux -> . PLUS push_poper var_cte
    (134) factorAux -> . MINUS push_poper var_cte
    (135) factorAux -> . var_cte
    (139) var_cte -> . ID push_id
    (140) var_cte -> . CTE_I push_cte
    (141) var_cte -> . CTE_F push_cte
    (142) var_cte -> . CTE_STRING push_cte
    (143) var_cte -> . arreglo
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    LPAREN          shift and go to state 102
    PLUS            shift and go to state 108
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_I           shift and go to state 112
    CTE_F           shift and go to state 113
    CTE_STRING      shift and go to state 114

    expresion                      shift and go to state 287
    exp                            shift and go to state 104
    termino                        shift and go to state 105
    factor                         shift and go to state 106
    factorAux                      shift and go to state 107
    var_cte                        shift and go to state 109
    arreglo                        shift and go to state 115

state 280

    (105) lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .

    ID              reduce using rule 105 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    IF              reduce using rule 105 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    PRINT           reduce using rule 105 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    WHILE           reduce using rule 105 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    FROM            reduce using rule 105 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    INPUT           reduce using rule 105 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    RBRACE          reduce using rule 105 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)
    RETURN          reduce using rule 105 (lectura -> INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON .)


state 281

    (50) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function .

    MAIN            reduce using rule 50 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux functionReturn RBRACE endProc function .)


state 282

    (25) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH . push_matriz
    (26) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH . push_matriz COMA varAux2
    (29) push_matriz -> .

    COMA            reduce using rule 29 (push_matriz -> .)
    SEMICOLON       reduce using rule 29 (push_matriz -> .)

    push_matriz                    shift and go to state 288

state 283

    (24) varAux2 -> ID LCORCH CTE_I RCORCH push_arreglo COMA varAux2 .

    SEMICOLON       reduce using rule 24 (varAux2 -> ID LCORCH CTE_I RCORCH push_arreglo COMA varAux2 .)


state 284

    (83) paramFuncion -> ID push_id2 paramFuncionAux COMA paramFuncion .

    RPAREN          reduce using rule 83 (paramFuncion -> ID push_id2 paramFuncionAux COMA paramFuncion .)


state 285

    (99) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque . condFinal
    (102) condFinal -> .

    ID              reduce using rule 102 (condFinal -> .)
    IF              reduce using rule 102 (condFinal -> .)
    PRINT           reduce using rule 102 (condFinal -> .)
    WHILE           reduce using rule 102 (condFinal -> .)
    FROM            reduce using rule 102 (condFinal -> .)
    INPUT           reduce using rule 102 (condFinal -> .)
    RBRACE          reduce using rule 102 (condFinal -> .)
    RETURN          reduce using rule 102 (condFinal -> .)

    condFinal                      shift and go to state 289

state 286

    (64) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE . while3
    (67) while3 -> .

    ID              reduce using rule 67 (while3 -> .)
    IF              reduce using rule 67 (while3 -> .)
    PRINT           reduce using rule 67 (while3 -> .)
    WHILE           reduce using rule 67 (while3 -> .)
    FROM            reduce using rule 67 (while3 -> .)
    INPUT           reduce using rule 67 (while3 -> .)
    RBRACE          reduce using rule 67 (while3 -> .)
    RETURN          reduce using rule 67 (while3 -> .)

    while3                         shift and go to state 290

state 287

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion . RPAREN DO LBRACE bloqueAux RBRACE

    RPAREN          shift and go to state 291


state 288

    (25) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz .
    (26) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz . COMA varAux2

    SEMICOLON       reduce using rule 25 (varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz .)
    COMA            shift and go to state 292


state 289

    (99) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .

    ID              reduce using rule 99 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    IF              reduce using rule 99 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    PRINT           reduce using rule 99 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    WHILE           reduce using rule 99 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    FROM            reduce using rule 99 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    INPUT           reduce using rule 99 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    RBRACE          reduce using rule 99 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    RETURN          reduce using rule 99 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)


state 290

    (64) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .

    ID              reduce using rule 64 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    IF              reduce using rule 64 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    PRINT           reduce using rule 64 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    WHILE           reduce using rule 64 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    FROM            reduce using rule 64 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    INPUT           reduce using rule 64 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    RBRACE          reduce using rule 64 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    RETURN          reduce using rule 64 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)


state 291

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN . DO LBRACE bloqueAux RBRACE

    DO              shift and go to state 293


state 292

    (26) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA . varAux2
    (21) varAux2 -> . ID push_var
    (22) varAux2 -> . ID push_var COMA varAux2
    (23) varAux2 -> . ID LCORCH CTE_I RCORCH push_arreglo
    (24) varAux2 -> . ID LCORCH CTE_I RCORCH push_arreglo COMA varAux2
    (25) varAux2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz
    (26) varAux2 -> . ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2

    ID              shift and go to state 96

    varAux2                        shift and go to state 294

state 293

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 295


state 294

    (26) varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2 .

    SEMICOLON       reduce using rule 26 (varAux2 -> ID LCORCH CTE_I RCORCH LCORCH CTE_I RCORCH push_matriz COMA varAux2 .)


state 295

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE . bloqueAux RBRACE
    (62) bloqueAux -> . estatuto
    (63) bloqueAux -> . estatuto bloqueAux
    (69) estatuto -> . asignacion
    (70) estatuto -> . condicion
    (71) estatuto -> . escritura
    (72) estatuto -> . while
    (73) estatuto -> . loopFromDo
    (74) estatuto -> . comparacion
    (75) estatuto -> . llamadaAFuncion
    (76) estatuto -> . lectura
    (90) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (91) asignacion -> . arreglo EQUAL push_poper expresion create_asign SEMICOLON
    (92) asignacion -> . ID push_id EQUAL push_poper llamadaAFuncion create_asign SEMICOLON
    (98) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (99) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (103) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (104) escritura -> . PRINT push_poper LPAREN llamadaAFuncion RPAREN quad_print SEMICOLON
    (64) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (68) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (97) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (77) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN expresion
    (78) llamadaAFuncion -> . ID actualizaFuncion generarEra LPAREN paramFuncion gosub RPAREN
    (105) lectura -> . INPUT push_poper LPAREN ID push_id RPAREN quad_print SEMICOLON
    (89) arreglo -> . ID push_id LCORCH exp RCORCH ver_dim1

    ID              shift and go to state 61
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    WHILE           shift and go to state 65
    FROM            shift and go to state 66
    INPUT           shift and go to state 67

    bloqueAux                      shift and go to state 296
    estatuto                       shift and go to state 51
    asignacion                     shift and go to state 53
    condicion                      shift and go to state 54
    escritura                      shift and go to state 55
    while                          shift and go to state 56
    loopFromDo                     shift and go to state 57
    comparacion                    shift and go to state 58
    llamadaAFuncion                shift and go to state 59
    lectura                        shift and go to state 60
    arreglo                        shift and go to state 62

state 296

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 297


state 297

    (68) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .

    ID              reduce using rule 68 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 68 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 68 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 68 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    FROM            reduce using rule 68 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    INPUT           reduce using rule 68 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 68 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    RETURN          reduce using rule 68 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 39 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 156 resolved as shift
WARNING: shift/reduce conflict for COMA in state 204 resolved as shift
WARNING: shift/reduce conflict for ID in state 252 resolved as shift
WARNING: reduce/reduce conflict in state 179 resolved using rule (push_id2 -> <empty>)
WARNING: rejected rule (push_id -> <empty>) in state 179
WARNING: reduce/reduce conflict in state 204 resolved using rule (escrituraAux -> CTE_STRING push_cte)
WARNING: rejected rule (var_cte -> CTE_STRING push_cte) in state 204
