Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID COLON vars main function
Rule 2     program -> PROGRAM ID COLON main function
Rule 3     program -> PROGRAM ID COLON vars main
Rule 4     program -> PROGRAM ID COLON main
Rule 5     main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc
Rule 6     main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
Rule 7     nomMain -> MAIN
Rule 8     vars -> VAR varAux1
Rule 9     varAux1 -> tipo varAux2 SEMICOLON
Rule 10    varAux1 -> tipo varAux2 SEMICOLON varAux1
Rule 11    varAux2 -> ID
Rule 12    varAux2 -> ID COMA varAux2
Rule 13    tipo -> INT
Rule 14    tipo -> FLOAT
Rule 15    tipo -> CHAR
Rule 16    tipoFunc -> INT
Rule 17    tipoFunc -> FLOAT
Rule 18    tipoFunc -> CHAR
Rule 19    tipoFunc -> VOID
Rule 20    bloque -> LBRACE RBRACE
Rule 21    bloque -> LBRACE bloqueAux RBRACE
Rule 22    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
Rule 23    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
Rule 24    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
Rule 25    function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
Rule 26    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
Rule 27    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
Rule 28    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
Rule 29    function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
Rule 30    endProc -> <empty>
Rule 31    param -> tipo ID
Rule 32    param -> tipo ID COMA param
Rule 33    param -> empty
Rule 34    empty -> <empty>
Rule 35    nomFunc -> ID
Rule 36    bloqueAux -> estatuto
Rule 37    bloqueAux -> estatuto bloqueAux
Rule 38    while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
Rule 39    while1 -> <empty>
Rule 40    while2 -> <empty>
Rule 41    while3 -> <empty>
Rule 42    loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
Rule 43    estatuto -> asignacion
Rule 44    estatuto -> condicion
Rule 45    estatuto -> escritura
Rule 46    estatuto -> while
Rule 47    estatuto -> loopFromDo
Rule 48    estatuto -> comparacion
Rule 49    estatuto -> llamadaAFuncion
Rule 50    llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN expresion
Rule 51    llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
Rule 52    gosub -> <empty>
Rule 53    generarEra -> <empty>
Rule 54    paramFuncion -> ID push_id
Rule 55    paramFuncion -> ID push_id COMA paramFuncion
Rule 56    paramFuncion -> expresion
Rule 57    paramFuncion -> expresion COMA paramFuncion
Rule 58    paramFuncion -> empty
Rule 59    asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON
Rule 60    create_asign -> <empty>
Rule 61    comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
Rule 62    condicion -> IF LPAREN expresion RPAREN cond bloque condFinal
Rule 63    condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
Rule 64    cond -> <empty>
Rule 65    condElse -> <empty>
Rule 66    condFinal -> <empty>
Rule 67    escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
Rule 68    quad_print -> <empty>
Rule 69    escrituraAux -> expresion
Rule 70    escrituraAux -> CTE_STRING
Rule 71    escrituraAux -> expresion COMA escrituraAux
Rule 72    escrituraAux -> CTE_STRING COMA escrituraAux
Rule 73    escrituraAux -> llamadaAFuncion
Rule 74    expresion -> exp
Rule 75    expresion -> exp comp exp quad_comp
Rule 76    comp -> LOWERTHAN push_poper
Rule 77    comp -> MORETHAN push_poper
Rule 78    comp -> DIFFERENT push_poper
Rule 79    comp -> DOUBLEEQUAL push_poper
Rule 80    quad_comp -> <empty>
Rule 81    exp -> termino quad_term
Rule 82    exp -> termino quad_term exp1
Rule 83    exp1 -> PLUS push_poper exp
Rule 84    exp1 -> MINUS push_poper exp
Rule 85    quad_term -> <empty>
Rule 86    quad_fact -> <empty>
Rule 87    termino -> factor quad_fact
Rule 88    termino -> factor quad_fact termino1
Rule 89    termino1 -> TIMES push_poper termino
Rule 90    termino1 -> DIVIDE push_poper termino
Rule 91    factor -> LPAREN expresion RPAREN
Rule 92    factor -> factorAux
Rule 93    factorAux -> PLUS push_poper var_cte
Rule 94    factorAux -> MINUS push_poper var_cte
Rule 95    factorAux -> var_cte
Rule 96    push_id -> <empty>
Rule 97    push_cte -> <empty>
Rule 98    push_poper -> <empty>
Rule 99    var_cte -> ID push_id
Rule 100   var_cte -> CTE_I push_cte
Rule 101   var_cte -> CTE_F push_cte

Terminals, with rules where they appear

AND                  : 
CHAR                 : 15 18
COLON                : 1 2 3 4
COMA                 : 12 32 55 57 71 72
CTE_F                : 101
CTE_I                : 100
CTE_STRING           : 70 72
DIFFERENT            : 78
DIVIDE               : 90
DO                   : 42
DOUBLEEQUAL          : 61 79
ELSE                 : 63
EQUAL                : 42 59
FLOAT                : 14 17
FROM                 : 42
FUNCTION             : 22 23 24 25 26 27 28 29
ID                   : 1 2 3 4 11 12 31 32 35 42 50 51 54 55 59 61 99
IF                   : 62 63
INT                  : 13 16
LBRACE               : 5 6 20 21 22 23 24 25 26 27 28 29 38 42
LOWERTHAN            : 76
LPAREN               : 5 6 22 23 24 25 26 27 28 29 38 42 42 50 51 62 63 67 91
MAIN                 : 7
MINUS                : 84 94
MORETHAN             : 77
OR                   : 
PLUS                 : 83 93
PRINT                : 67
PROGRAM              : 1 2 3 4
RBRACE               : 5 6 20 21 22 23 24 25 26 27 28 29 38 42
RPAREN               : 5 6 22 23 24 25 26 27 28 29 38 42 42 50 51 62 63 67 91
SEMICOLON            : 9 10 51 59 61 67
TIMES                : 89
TO                   : 42
VAR                  : 8
VOID                 : 19
WHILE                : 38
error                : 

Nonterminals, with rules where they appear

asignacion           : 43
bloque               : 62 63 63
bloqueAux            : 5 6 21 23 25 27 29 37 38 42
comp                 : 75
comparacion          : 48
cond                 : 62 63
condElse             : 63
condFinal            : 62 63
condicion            : 44
create_asign         : 59
empty                : 33 58
endProc              : 5 6 22 23 24 25 26 27 28 29
escritura            : 45
escrituraAux         : 67 71 72
estatuto             : 36 37
exp                  : 74 75 75 83 84
exp1                 : 82
expresion            : 38 42 42 50 56 57 59 61 62 63 69 71 91
factor               : 87 88
factorAux            : 92
function             : 1 2 24 25 28 29
generarEra           : 50 51
gosub                : 50 51
llamadaAFuncion      : 49 73
loopFromDo           : 47
main                 : 1 2 3 4
nomFunc              : 22 23 24 25 26 27 28 29
nomMain              : 5 6
param                : 26 27 28 29 32
paramFuncion         : 50 51 55 57
program              : 0
push_cte             : 100 101
push_id              : 54 55 59 61 99
push_poper           : 59 61 67 76 77 78 79 83 84 89 90 93 94
quad_comp            : 75
quad_fact            : 87 88
quad_print           : 67
quad_term            : 81 82
termino              : 81 82 89 90
termino1             : 88
tipo                 : 9 10 31 32
tipoFunc             : 22 23 24 25 26 27 28 29
varAux1              : 8 10
varAux2              : 9 10 12
var_cte              : 93 94 95
vars                 : 1 3 6 23 25 27 29
while                : 46
while1               : 38
while2               : 38
while3               : 38

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID COLON vars main function
    (2) program -> . PROGRAM ID COLON main function
    (3) program -> . PROGRAM ID COLON vars main
    (4) program -> . PROGRAM ID COLON main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID COLON vars main function
    (2) program -> PROGRAM . ID COLON main function
    (3) program -> PROGRAM . ID COLON vars main
    (4) program -> PROGRAM . ID COLON main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . COLON vars main function
    (2) program -> PROGRAM ID . COLON main function
    (3) program -> PROGRAM ID . COLON vars main
    (4) program -> PROGRAM ID . COLON main

    COLON           shift and go to state 4


state 4

    (1) program -> PROGRAM ID COLON . vars main function
    (2) program -> PROGRAM ID COLON . main function
    (3) program -> PROGRAM ID COLON . vars main
    (4) program -> PROGRAM ID COLON . main
    (8) vars -> . VAR varAux1
    (5) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc
    (6) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (7) nomMain -> . MAIN

    VAR             shift and go to state 8
    MAIN            shift and go to state 6

    vars                           shift and go to state 5
    nomMain                        shift and go to state 7
    main                           shift and go to state 9

state 5

    (1) program -> PROGRAM ID COLON vars . main function
    (3) program -> PROGRAM ID COLON vars . main
    (5) main -> . nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc
    (6) main -> . nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (7) nomMain -> . MAIN

    MAIN            shift and go to state 6

    nomMain                        shift and go to state 7
    main                           shift and go to state 10

state 6

    (7) nomMain -> MAIN .

    LPAREN          reduce using rule 7 (nomMain -> MAIN .)


state 7

    (5) main -> nomMain . LPAREN RPAREN LBRACE bloqueAux RBRACE endProc
    (6) main -> nomMain . LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc

    LPAREN          shift and go to state 11


state 8

    (8) vars -> VAR . varAux1
    (9) varAux1 -> . tipo varAux2 SEMICOLON
    (10) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

    varAux1                        shift and go to state 16
    tipo                           shift and go to state 13

state 9

    (2) program -> PROGRAM ID COLON main . function
    (4) program -> PROGRAM ID COLON main .
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    $end            reduce using rule 4 (program -> PROGRAM ID COLON main .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 17

state 10

    (1) program -> PROGRAM ID COLON vars main . function
    (3) program -> PROGRAM ID COLON vars main .
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    $end            reduce using rule 3 (program -> PROGRAM ID COLON vars main .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 19

state 11

    (5) main -> nomMain LPAREN . RPAREN LBRACE bloqueAux RBRACE endProc
    (6) main -> nomMain LPAREN . RPAREN LBRACE vars bloqueAux RBRACE endProc

    RPAREN          shift and go to state 20


state 12

    (15) tipo -> CHAR .

    ID              reduce using rule 15 (tipo -> CHAR .)


state 13

    (9) varAux1 -> tipo . varAux2 SEMICOLON
    (10) varAux1 -> tipo . varAux2 SEMICOLON varAux1
    (11) varAux2 -> . ID
    (12) varAux2 -> . ID COMA varAux2

    ID              shift and go to state 22

    varAux2                        shift and go to state 21

state 14

    (13) tipo -> INT .

    ID              reduce using rule 13 (tipo -> INT .)


state 15

    (14) tipo -> FLOAT .

    ID              reduce using rule 14 (tipo -> FLOAT .)


state 16

    (8) vars -> VAR varAux1 .

    ID              reduce using rule 8 (vars -> VAR varAux1 .)
    IF              reduce using rule 8 (vars -> VAR varAux1 .)
    PRINT           reduce using rule 8 (vars -> VAR varAux1 .)
    WHILE           reduce using rule 8 (vars -> VAR varAux1 .)
    FROM            reduce using rule 8 (vars -> VAR varAux1 .)
    MAIN            reduce using rule 8 (vars -> VAR varAux1 .)


state 17

    (2) program -> PROGRAM ID COLON main function .

    $end            reduce using rule 2 (program -> PROGRAM ID COLON main function .)


state 18

    (22) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (23) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (24) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (25) function -> FUNCTION . tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (26) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (27) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (28) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (29) function -> FUNCTION . tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (16) tipoFunc -> . INT
    (17) tipoFunc -> . FLOAT
    (18) tipoFunc -> . CHAR
    (19) tipoFunc -> . VOID

    INT             shift and go to state 23
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26
    VOID            shift and go to state 24

    tipoFunc                       shift and go to state 27

state 19

    (1) program -> PROGRAM ID COLON vars main function .

    $end            reduce using rule 1 (program -> PROGRAM ID COLON vars main function .)


state 20

    (5) main -> nomMain LPAREN RPAREN . LBRACE bloqueAux RBRACE endProc
    (6) main -> nomMain LPAREN RPAREN . LBRACE vars bloqueAux RBRACE endProc

    LBRACE          shift and go to state 28


state 21

    (9) varAux1 -> tipo varAux2 . SEMICOLON
    (10) varAux1 -> tipo varAux2 . SEMICOLON varAux1

    SEMICOLON       shift and go to state 29


state 22

    (11) varAux2 -> ID .
    (12) varAux2 -> ID . COMA varAux2

    SEMICOLON       reduce using rule 11 (varAux2 -> ID .)
    COMA            shift and go to state 30


state 23

    (16) tipoFunc -> INT .

    ID              reduce using rule 16 (tipoFunc -> INT .)


state 24

    (19) tipoFunc -> VOID .

    ID              reduce using rule 19 (tipoFunc -> VOID .)


state 25

    (17) tipoFunc -> FLOAT .

    ID              reduce using rule 17 (tipoFunc -> FLOAT .)


state 26

    (18) tipoFunc -> CHAR .

    ID              reduce using rule 18 (tipoFunc -> CHAR .)


state 27

    (22) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (23) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (24) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (25) function -> FUNCTION tipoFunc . nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (26) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (27) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (28) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (29) function -> FUNCTION tipoFunc . nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (35) nomFunc -> . ID

    ID              shift and go to state 32

    nomFunc                        shift and go to state 31

state 28

    (5) main -> nomMain LPAREN RPAREN LBRACE . bloqueAux RBRACE endProc
    (6) main -> nomMain LPAREN RPAREN LBRACE . vars bloqueAux RBRACE endProc
    (36) bloqueAux -> . estatuto
    (37) bloqueAux -> . estatuto bloqueAux
    (8) vars -> . VAR varAux1
    (43) estatuto -> . asignacion
    (44) estatuto -> . condicion
    (45) estatuto -> . escritura
    (46) estatuto -> . while
    (47) estatuto -> . loopFromDo
    (48) estatuto -> . comparacion
    (49) estatuto -> . llamadaAFuncion
    (59) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (62) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (63) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (67) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (38) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (42) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (61) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (50) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN expresion
    (51) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    VAR             shift and go to state 8
    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 43
    FROM            shift and go to state 41

    vars                           shift and go to state 33
    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 39
    llamadaAFuncion                shift and go to state 40
    asignacion                     shift and go to state 42
    bloqueAux                      shift and go to state 44
    while                          shift and go to state 45
    comparacion                    shift and go to state 46
    escritura                      shift and go to state 47

state 29

    (9) varAux1 -> tipo varAux2 SEMICOLON .
    (10) varAux1 -> tipo varAux2 SEMICOLON . varAux1
    (9) varAux1 -> . tipo varAux2 SEMICOLON
    (10) varAux1 -> . tipo varAux2 SEMICOLON varAux1
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR

    MAIN            reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    ID              reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    IF              reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    PRINT           reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    WHILE           reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    FROM            reduce using rule 9 (varAux1 -> tipo varAux2 SEMICOLON .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

    varAux1                        shift and go to state 48
    tipo                           shift and go to state 13

state 30

    (12) varAux2 -> ID COMA . varAux2
    (11) varAux2 -> . ID
    (12) varAux2 -> . ID COMA varAux2

    ID              shift and go to state 22

    varAux2                        shift and go to state 49

state 31

    (22) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE RBRACE endProc
    (23) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (24) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE RBRACE endProc function
    (25) function -> FUNCTION tipoFunc nomFunc . LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (26) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE RBRACE endProc
    (27) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (28) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE RBRACE endProc function
    (29) function -> FUNCTION tipoFunc nomFunc . LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    LPAREN          shift and go to state 50


state 32

    (35) nomFunc -> ID .

    LPAREN          reduce using rule 35 (nomFunc -> ID .)


state 33

    (6) main -> nomMain LPAREN RPAREN LBRACE vars . bloqueAux RBRACE endProc
    (36) bloqueAux -> . estatuto
    (37) bloqueAux -> . estatuto bloqueAux
    (43) estatuto -> . asignacion
    (44) estatuto -> . condicion
    (45) estatuto -> . escritura
    (46) estatuto -> . while
    (47) estatuto -> . loopFromDo
    (48) estatuto -> . comparacion
    (49) estatuto -> . llamadaAFuncion
    (59) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (62) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (63) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (67) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (38) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (42) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (61) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (50) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN expresion
    (51) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 43
    FROM            shift and go to state 41

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 39
    llamadaAFuncion                shift and go to state 40
    asignacion                     shift and go to state 42
    bloqueAux                      shift and go to state 51
    while                          shift and go to state 45
    comparacion                    shift and go to state 46
    escritura                      shift and go to state 47

state 34

    (67) escritura -> PRINT . push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (98) push_poper -> .

    LPAREN          reduce using rule 98 (push_poper -> .)

    push_poper                     shift and go to state 52

state 35

    (36) bloqueAux -> estatuto .
    (37) bloqueAux -> estatuto . bloqueAux
    (36) bloqueAux -> . estatuto
    (37) bloqueAux -> . estatuto bloqueAux
    (43) estatuto -> . asignacion
    (44) estatuto -> . condicion
    (45) estatuto -> . escritura
    (46) estatuto -> . while
    (47) estatuto -> . loopFromDo
    (48) estatuto -> . comparacion
    (49) estatuto -> . llamadaAFuncion
    (59) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (62) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (63) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (67) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (38) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (42) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (61) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (50) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN expresion
    (51) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    RBRACE          reduce using rule 36 (bloqueAux -> estatuto .)
    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 43
    FROM            shift and go to state 41

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 39
    llamadaAFuncion                shift and go to state 40
    asignacion                     shift and go to state 42
    bloqueAux                      shift and go to state 53
    while                          shift and go to state 45
    comparacion                    shift and go to state 46
    escritura                      shift and go to state 47

state 36

    (62) condicion -> IF . LPAREN expresion RPAREN cond bloque condFinal
    (63) condicion -> IF . LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal

    LPAREN          shift and go to state 54


state 37

    (44) estatuto -> condicion .

    ID              reduce using rule 44 (estatuto -> condicion .)
    IF              reduce using rule 44 (estatuto -> condicion .)
    PRINT           reduce using rule 44 (estatuto -> condicion .)
    WHILE           reduce using rule 44 (estatuto -> condicion .)
    FROM            reduce using rule 44 (estatuto -> condicion .)
    RBRACE          reduce using rule 44 (estatuto -> condicion .)


state 38

    (59) asignacion -> ID . push_id EQUAL push_poper expresion create_asign SEMICOLON
    (61) comparacion -> ID . push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (50) llamadaAFuncion -> ID . generarEra LPAREN paramFuncion gosub RPAREN expresion
    (51) llamadaAFuncion -> ID . generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (96) push_id -> .
    (53) generarEra -> .

    EQUAL           reduce using rule 96 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 96 (push_id -> .)
    LPAREN          reduce using rule 53 (generarEra -> .)

    push_id                        shift and go to state 55
    generarEra                     shift and go to state 56

state 39

    (47) estatuto -> loopFromDo .

    ID              reduce using rule 47 (estatuto -> loopFromDo .)
    IF              reduce using rule 47 (estatuto -> loopFromDo .)
    PRINT           reduce using rule 47 (estatuto -> loopFromDo .)
    WHILE           reduce using rule 47 (estatuto -> loopFromDo .)
    FROM            reduce using rule 47 (estatuto -> loopFromDo .)
    RBRACE          reduce using rule 47 (estatuto -> loopFromDo .)


state 40

    (49) estatuto -> llamadaAFuncion .

    ID              reduce using rule 49 (estatuto -> llamadaAFuncion .)
    IF              reduce using rule 49 (estatuto -> llamadaAFuncion .)
    PRINT           reduce using rule 49 (estatuto -> llamadaAFuncion .)
    WHILE           reduce using rule 49 (estatuto -> llamadaAFuncion .)
    FROM            reduce using rule 49 (estatuto -> llamadaAFuncion .)
    RBRACE          reduce using rule 49 (estatuto -> llamadaAFuncion .)


state 41

    (42) loopFromDo -> FROM . LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    LPAREN          shift and go to state 57


state 42

    (43) estatuto -> asignacion .

    ID              reduce using rule 43 (estatuto -> asignacion .)
    IF              reduce using rule 43 (estatuto -> asignacion .)
    PRINT           reduce using rule 43 (estatuto -> asignacion .)
    WHILE           reduce using rule 43 (estatuto -> asignacion .)
    FROM            reduce using rule 43 (estatuto -> asignacion .)
    RBRACE          reduce using rule 43 (estatuto -> asignacion .)


state 43

    (38) while -> WHILE . while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (39) while1 -> .

    LPAREN          reduce using rule 39 (while1 -> .)

    while1                         shift and go to state 58

state 44

    (5) main -> nomMain LPAREN RPAREN LBRACE bloqueAux . RBRACE endProc

    RBRACE          shift and go to state 59


state 45

    (46) estatuto -> while .

    ID              reduce using rule 46 (estatuto -> while .)
    IF              reduce using rule 46 (estatuto -> while .)
    PRINT           reduce using rule 46 (estatuto -> while .)
    WHILE           reduce using rule 46 (estatuto -> while .)
    FROM            reduce using rule 46 (estatuto -> while .)
    RBRACE          reduce using rule 46 (estatuto -> while .)


state 46

    (48) estatuto -> comparacion .

    ID              reduce using rule 48 (estatuto -> comparacion .)
    IF              reduce using rule 48 (estatuto -> comparacion .)
    PRINT           reduce using rule 48 (estatuto -> comparacion .)
    WHILE           reduce using rule 48 (estatuto -> comparacion .)
    FROM            reduce using rule 48 (estatuto -> comparacion .)
    RBRACE          reduce using rule 48 (estatuto -> comparacion .)


state 47

    (45) estatuto -> escritura .

    ID              reduce using rule 45 (estatuto -> escritura .)
    IF              reduce using rule 45 (estatuto -> escritura .)
    PRINT           reduce using rule 45 (estatuto -> escritura .)
    WHILE           reduce using rule 45 (estatuto -> escritura .)
    FROM            reduce using rule 45 (estatuto -> escritura .)
    RBRACE          reduce using rule 45 (estatuto -> escritura .)


state 48

    (10) varAux1 -> tipo varAux2 SEMICOLON varAux1 .

    MAIN            reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    ID              reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    IF              reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    PRINT           reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    WHILE           reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)
    FROM            reduce using rule 10 (varAux1 -> tipo varAux2 SEMICOLON varAux1 .)


state 49

    (12) varAux2 -> ID COMA varAux2 .

    SEMICOLON       reduce using rule 12 (varAux2 -> ID COMA varAux2 .)


state 50

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE RBRACE endProc
    (23) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux RBRACE endProc
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE RBRACE endProc function
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN . RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (26) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE RBRACE endProc
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE RBRACE endProc function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN . param RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (31) param -> . tipo ID
    (32) param -> . tipo ID COMA param
    (33) param -> . empty
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR
    (34) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 60
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12

  ! RPAREN          [ reduce using rule 34 (empty -> .) ]

    tipo                           shift and go to state 63
    param                          shift and go to state 61
    empty                          shift and go to state 62

state 51

    (6) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux . RBRACE endProc

    RBRACE          shift and go to state 64


state 52

    (67) escritura -> PRINT push_poper . LPAREN escrituraAux RPAREN quad_print SEMICOLON

    LPAREN          shift and go to state 65


state 53

    (37) bloqueAux -> estatuto bloqueAux .

    RBRACE          reduce using rule 37 (bloqueAux -> estatuto bloqueAux .)


state 54

    (62) condicion -> IF LPAREN . expresion RPAREN cond bloque condFinal
    (63) condicion -> IF LPAREN . expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (74) expresion -> . exp
    (75) expresion -> . exp comp exp quad_comp
    (81) exp -> . termino quad_term
    (82) exp -> . termino quad_term exp1
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    ID              shift and go to state 74
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    expresion                      shift and go to state 75
    factor                         shift and go to state 70
    termino                        shift and go to state 67
    exp                            shift and go to state 76
    factorAux                      shift and go to state 77
    var_cte                        shift and go to state 66

state 55

    (59) asignacion -> ID push_id . EQUAL push_poper expresion create_asign SEMICOLON
    (61) comparacion -> ID push_id . DOUBLEEQUAL push_poper expresion SEMICOLON

    EQUAL           shift and go to state 79
    DOUBLEEQUAL     shift and go to state 78


state 56

    (50) llamadaAFuncion -> ID generarEra . LPAREN paramFuncion gosub RPAREN expresion
    (51) llamadaAFuncion -> ID generarEra . LPAREN paramFuncion gosub RPAREN SEMICOLON

    LPAREN          shift and go to state 80


state 57

    (42) loopFromDo -> FROM LPAREN . ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    ID              shift and go to state 81


state 58

    (38) while -> WHILE while1 . LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3

    LPAREN          shift and go to state 82


state 59

    (5) main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE . endProc
    (30) endProc -> .

    FUNCTION        reduce using rule 30 (endProc -> .)
    $end            reduce using rule 30 (endProc -> .)

    endProc                        shift and go to state 83

state 60

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE RBRACE endProc
    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux RBRACE endProc
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE RBRACE endProc function
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN . LBRACE vars bloqueAux RBRACE endProc function

    LBRACE          shift and go to state 84


state 61

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE RBRACE endProc
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux RBRACE endProc
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE RBRACE endProc function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param . RPAREN LBRACE vars bloqueAux RBRACE endProc function

    RPAREN          shift and go to state 85


state 62

    (33) param -> empty .

    RPAREN          reduce using rule 33 (param -> empty .)


state 63

    (31) param -> tipo . ID
    (32) param -> tipo . ID COMA param

    ID              shift and go to state 86


state 64

    (6) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE . endProc
    (30) endProc -> .

    FUNCTION        reduce using rule 30 (endProc -> .)
    $end            reduce using rule 30 (endProc -> .)

    endProc                        shift and go to state 87

state 65

    (67) escritura -> PRINT push_poper LPAREN . escrituraAux RPAREN quad_print SEMICOLON
    (69) escrituraAux -> . expresion
    (70) escrituraAux -> . CTE_STRING
    (71) escrituraAux -> . expresion COMA escrituraAux
    (72) escrituraAux -> . CTE_STRING COMA escrituraAux
    (73) escrituraAux -> . llamadaAFuncion
    (74) expresion -> . exp
    (75) expresion -> . exp comp exp quad_comp
    (50) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN expresion
    (51) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (81) exp -> . termino quad_term
    (82) exp -> . termino quad_term exp1
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    CTE_STRING      shift and go to state 88
    ID              shift and go to state 90
    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    escrituraAux                   shift and go to state 91
    expresion                      shift and go to state 89
    llamadaAFuncion                shift and go to state 92
    termino                        shift and go to state 67
    exp                            shift and go to state 76
    factorAux                      shift and go to state 77
    factor                         shift and go to state 70
    var_cte                        shift and go to state 66

state 66

    (95) factorAux -> var_cte .

    TIMES           reduce using rule 95 (factorAux -> var_cte .)
    DIVIDE          reduce using rule 95 (factorAux -> var_cte .)
    PLUS            reduce using rule 95 (factorAux -> var_cte .)
    MINUS           reduce using rule 95 (factorAux -> var_cte .)
    LOWERTHAN       reduce using rule 95 (factorAux -> var_cte .)
    MORETHAN        reduce using rule 95 (factorAux -> var_cte .)
    DIFFERENT       reduce using rule 95 (factorAux -> var_cte .)
    DOUBLEEQUAL     reduce using rule 95 (factorAux -> var_cte .)
    RPAREN          reduce using rule 95 (factorAux -> var_cte .)
    COMA            reduce using rule 95 (factorAux -> var_cte .)
    SEMICOLON       reduce using rule 95 (factorAux -> var_cte .)
    ID              reduce using rule 95 (factorAux -> var_cte .)
    IF              reduce using rule 95 (factorAux -> var_cte .)
    PRINT           reduce using rule 95 (factorAux -> var_cte .)
    WHILE           reduce using rule 95 (factorAux -> var_cte .)
    FROM            reduce using rule 95 (factorAux -> var_cte .)
    RBRACE          reduce using rule 95 (factorAux -> var_cte .)


state 67

    (81) exp -> termino . quad_term
    (82) exp -> termino . quad_term exp1
    (85) quad_term -> .

    PLUS            reduce using rule 85 (quad_term -> .)
    MINUS           reduce using rule 85 (quad_term -> .)
    LOWERTHAN       reduce using rule 85 (quad_term -> .)
    MORETHAN        reduce using rule 85 (quad_term -> .)
    DIFFERENT       reduce using rule 85 (quad_term -> .)
    DOUBLEEQUAL     reduce using rule 85 (quad_term -> .)
    RPAREN          reduce using rule 85 (quad_term -> .)
    COMA            reduce using rule 85 (quad_term -> .)
    SEMICOLON       reduce using rule 85 (quad_term -> .)
    ID              reduce using rule 85 (quad_term -> .)
    IF              reduce using rule 85 (quad_term -> .)
    PRINT           reduce using rule 85 (quad_term -> .)
    WHILE           reduce using rule 85 (quad_term -> .)
    FROM            reduce using rule 85 (quad_term -> .)
    RBRACE          reduce using rule 85 (quad_term -> .)

    quad_term                      shift and go to state 93

state 68

    (94) factorAux -> MINUS . push_poper var_cte
    (98) push_poper -> .

    ID              reduce using rule 98 (push_poper -> .)
    CTE_I           reduce using rule 98 (push_poper -> .)
    CTE_F           reduce using rule 98 (push_poper -> .)

    push_poper                     shift and go to state 94

state 69

    (93) factorAux -> PLUS . push_poper var_cte
    (98) push_poper -> .

    ID              reduce using rule 98 (push_poper -> .)
    CTE_I           reduce using rule 98 (push_poper -> .)
    CTE_F           reduce using rule 98 (push_poper -> .)

    push_poper                     shift and go to state 95

state 70

    (87) termino -> factor . quad_fact
    (88) termino -> factor . quad_fact termino1
    (86) quad_fact -> .

    TIMES           reduce using rule 86 (quad_fact -> .)
    DIVIDE          reduce using rule 86 (quad_fact -> .)
    PLUS            reduce using rule 86 (quad_fact -> .)
    MINUS           reduce using rule 86 (quad_fact -> .)
    LOWERTHAN       reduce using rule 86 (quad_fact -> .)
    MORETHAN        reduce using rule 86 (quad_fact -> .)
    DIFFERENT       reduce using rule 86 (quad_fact -> .)
    DOUBLEEQUAL     reduce using rule 86 (quad_fact -> .)
    RPAREN          reduce using rule 86 (quad_fact -> .)
    COMA            reduce using rule 86 (quad_fact -> .)
    SEMICOLON       reduce using rule 86 (quad_fact -> .)
    ID              reduce using rule 86 (quad_fact -> .)
    IF              reduce using rule 86 (quad_fact -> .)
    PRINT           reduce using rule 86 (quad_fact -> .)
    WHILE           reduce using rule 86 (quad_fact -> .)
    FROM            reduce using rule 86 (quad_fact -> .)
    RBRACE          reduce using rule 86 (quad_fact -> .)

    quad_fact                      shift and go to state 96

state 71

    (101) var_cte -> CTE_F . push_cte
    (97) push_cte -> .

    TIMES           reduce using rule 97 (push_cte -> .)
    DIVIDE          reduce using rule 97 (push_cte -> .)
    PLUS            reduce using rule 97 (push_cte -> .)
    MINUS           reduce using rule 97 (push_cte -> .)
    LOWERTHAN       reduce using rule 97 (push_cte -> .)
    MORETHAN        reduce using rule 97 (push_cte -> .)
    DIFFERENT       reduce using rule 97 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 97 (push_cte -> .)
    RPAREN          reduce using rule 97 (push_cte -> .)
    COMA            reduce using rule 97 (push_cte -> .)
    SEMICOLON       reduce using rule 97 (push_cte -> .)
    ID              reduce using rule 97 (push_cte -> .)
    IF              reduce using rule 97 (push_cte -> .)
    PRINT           reduce using rule 97 (push_cte -> .)
    WHILE           reduce using rule 97 (push_cte -> .)
    FROM            reduce using rule 97 (push_cte -> .)
    RBRACE          reduce using rule 97 (push_cte -> .)

    push_cte                       shift and go to state 97

state 72

    (100) var_cte -> CTE_I . push_cte
    (97) push_cte -> .

    TIMES           reduce using rule 97 (push_cte -> .)
    DIVIDE          reduce using rule 97 (push_cte -> .)
    PLUS            reduce using rule 97 (push_cte -> .)
    MINUS           reduce using rule 97 (push_cte -> .)
    LOWERTHAN       reduce using rule 97 (push_cte -> .)
    MORETHAN        reduce using rule 97 (push_cte -> .)
    DIFFERENT       reduce using rule 97 (push_cte -> .)
    DOUBLEEQUAL     reduce using rule 97 (push_cte -> .)
    RPAREN          reduce using rule 97 (push_cte -> .)
    COMA            reduce using rule 97 (push_cte -> .)
    SEMICOLON       reduce using rule 97 (push_cte -> .)
    ID              reduce using rule 97 (push_cte -> .)
    IF              reduce using rule 97 (push_cte -> .)
    PRINT           reduce using rule 97 (push_cte -> .)
    WHILE           reduce using rule 97 (push_cte -> .)
    FROM            reduce using rule 97 (push_cte -> .)
    RBRACE          reduce using rule 97 (push_cte -> .)

    push_cte                       shift and go to state 98

state 73

    (91) factor -> LPAREN . expresion RPAREN
    (74) expresion -> . exp
    (75) expresion -> . exp comp exp quad_comp
    (81) exp -> . termino quad_term
    (82) exp -> . termino quad_term exp1
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    ID              shift and go to state 74
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    expresion                      shift and go to state 99
    factor                         shift and go to state 70
    termino                        shift and go to state 67
    exp                            shift and go to state 76
    factorAux                      shift and go to state 77
    var_cte                        shift and go to state 66

state 74

    (99) var_cte -> ID . push_id
    (96) push_id -> .

    TIMES           reduce using rule 96 (push_id -> .)
    DIVIDE          reduce using rule 96 (push_id -> .)
    PLUS            reduce using rule 96 (push_id -> .)
    MINUS           reduce using rule 96 (push_id -> .)
    LOWERTHAN       reduce using rule 96 (push_id -> .)
    MORETHAN        reduce using rule 96 (push_id -> .)
    DIFFERENT       reduce using rule 96 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 96 (push_id -> .)
    RPAREN          reduce using rule 96 (push_id -> .)
    COMA            reduce using rule 96 (push_id -> .)
    SEMICOLON       reduce using rule 96 (push_id -> .)
    ID              reduce using rule 96 (push_id -> .)
    IF              reduce using rule 96 (push_id -> .)
    PRINT           reduce using rule 96 (push_id -> .)
    WHILE           reduce using rule 96 (push_id -> .)
    FROM            reduce using rule 96 (push_id -> .)
    RBRACE          reduce using rule 96 (push_id -> .)

    push_id                        shift and go to state 100

state 75

    (62) condicion -> IF LPAREN expresion . RPAREN cond bloque condFinal
    (63) condicion -> IF LPAREN expresion . RPAREN cond bloque ELSE condElse bloque condFinal

    RPAREN          shift and go to state 101


state 76

    (74) expresion -> exp .
    (75) expresion -> exp . comp exp quad_comp
    (76) comp -> . LOWERTHAN push_poper
    (77) comp -> . MORETHAN push_poper
    (78) comp -> . DIFFERENT push_poper
    (79) comp -> . DOUBLEEQUAL push_poper

    COMA            reduce using rule 74 (expresion -> exp .)
    RPAREN          reduce using rule 74 (expresion -> exp .)
    SEMICOLON       reduce using rule 74 (expresion -> exp .)
    ID              reduce using rule 74 (expresion -> exp .)
    IF              reduce using rule 74 (expresion -> exp .)
    PRINT           reduce using rule 74 (expresion -> exp .)
    WHILE           reduce using rule 74 (expresion -> exp .)
    FROM            reduce using rule 74 (expresion -> exp .)
    RBRACE          reduce using rule 74 (expresion -> exp .)
    LOWERTHAN       shift and go to state 104
    MORETHAN        shift and go to state 106
    DIFFERENT       shift and go to state 102
    DOUBLEEQUAL     shift and go to state 103

    comp                           shift and go to state 105

state 77

    (92) factor -> factorAux .

    TIMES           reduce using rule 92 (factor -> factorAux .)
    DIVIDE          reduce using rule 92 (factor -> factorAux .)
    PLUS            reduce using rule 92 (factor -> factorAux .)
    MINUS           reduce using rule 92 (factor -> factorAux .)
    LOWERTHAN       reduce using rule 92 (factor -> factorAux .)
    MORETHAN        reduce using rule 92 (factor -> factorAux .)
    DIFFERENT       reduce using rule 92 (factor -> factorAux .)
    DOUBLEEQUAL     reduce using rule 92 (factor -> factorAux .)
    RPAREN          reduce using rule 92 (factor -> factorAux .)
    COMA            reduce using rule 92 (factor -> factorAux .)
    SEMICOLON       reduce using rule 92 (factor -> factorAux .)
    ID              reduce using rule 92 (factor -> factorAux .)
    IF              reduce using rule 92 (factor -> factorAux .)
    PRINT           reduce using rule 92 (factor -> factorAux .)
    WHILE           reduce using rule 92 (factor -> factorAux .)
    FROM            reduce using rule 92 (factor -> factorAux .)
    RBRACE          reduce using rule 92 (factor -> factorAux .)


state 78

    (61) comparacion -> ID push_id DOUBLEEQUAL . push_poper expresion SEMICOLON
    (98) push_poper -> .

    LPAREN          reduce using rule 98 (push_poper -> .)
    PLUS            reduce using rule 98 (push_poper -> .)
    MINUS           reduce using rule 98 (push_poper -> .)
    ID              reduce using rule 98 (push_poper -> .)
    CTE_I           reduce using rule 98 (push_poper -> .)
    CTE_F           reduce using rule 98 (push_poper -> .)

    push_poper                     shift and go to state 107

state 79

    (59) asignacion -> ID push_id EQUAL . push_poper expresion create_asign SEMICOLON
    (98) push_poper -> .

    LPAREN          reduce using rule 98 (push_poper -> .)
    PLUS            reduce using rule 98 (push_poper -> .)
    MINUS           reduce using rule 98 (push_poper -> .)
    ID              reduce using rule 98 (push_poper -> .)
    CTE_I           reduce using rule 98 (push_poper -> .)
    CTE_F           reduce using rule 98 (push_poper -> .)

    push_poper                     shift and go to state 108

state 80

    (50) llamadaAFuncion -> ID generarEra LPAREN . paramFuncion gosub RPAREN expresion
    (51) llamadaAFuncion -> ID generarEra LPAREN . paramFuncion gosub RPAREN SEMICOLON
    (54) paramFuncion -> . ID push_id
    (55) paramFuncion -> . ID push_id COMA paramFuncion
    (56) paramFuncion -> . expresion
    (57) paramFuncion -> . expresion COMA paramFuncion
    (58) paramFuncion -> . empty
    (74) expresion -> . exp
    (75) expresion -> . exp comp exp quad_comp
    (34) empty -> .
    (81) exp -> . termino quad_term
    (82) exp -> . termino quad_term exp1
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    ID              shift and go to state 111
    RPAREN          reduce using rule 34 (empty -> .)
    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    expresion                      shift and go to state 112
    paramFuncion                   shift and go to state 109
    var_cte                        shift and go to state 66
    exp                            shift and go to state 76
    factorAux                      shift and go to state 77
    factor                         shift and go to state 70
    empty                          shift and go to state 110
    termino                        shift and go to state 67

state 81

    (42) loopFromDo -> FROM LPAREN ID . EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    EQUAL           shift and go to state 113


state 82

    (38) while -> WHILE while1 LPAREN . expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (74) expresion -> . exp
    (75) expresion -> . exp comp exp quad_comp
    (81) exp -> . termino quad_term
    (82) exp -> . termino quad_term exp1
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    ID              shift and go to state 74
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    expresion                      shift and go to state 114
    factor                         shift and go to state 70
    var_cte                        shift and go to state 66
    termino                        shift and go to state 67
    exp                            shift and go to state 76
    factorAux                      shift and go to state 77

state 83

    (5) main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc .

    FUNCTION        reduce using rule 5 (main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc .)
    $end            reduce using rule 5 (main -> nomMain LPAREN RPAREN LBRACE bloqueAux RBRACE endProc .)


state 84

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . RBRACE endProc
    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux RBRACE endProc
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . RBRACE endProc function
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE . vars bloqueAux RBRACE endProc function
    (8) vars -> . VAR varAux1

    RBRACE          shift and go to state 115
    VAR             shift and go to state 8

    vars                           shift and go to state 116

state 85

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE RBRACE endProc
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux RBRACE endProc
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE RBRACE endProc function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN . LBRACE vars bloqueAux RBRACE endProc function

    LBRACE          shift and go to state 117


state 86

    (31) param -> tipo ID .
    (32) param -> tipo ID . COMA param

    RPAREN          reduce using rule 31 (param -> tipo ID .)
    COMA            shift and go to state 118


state 87

    (6) main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .

    FUNCTION        reduce using rule 6 (main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .)
    $end            reduce using rule 6 (main -> nomMain LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .)


state 88

    (70) escrituraAux -> CTE_STRING .
    (72) escrituraAux -> CTE_STRING . COMA escrituraAux

    RPAREN          reduce using rule 70 (escrituraAux -> CTE_STRING .)
    COMA            shift and go to state 119


state 89

    (69) escrituraAux -> expresion .
    (71) escrituraAux -> expresion . COMA escrituraAux

    RPAREN          reduce using rule 69 (escrituraAux -> expresion .)
    COMA            shift and go to state 120


state 90

    (50) llamadaAFuncion -> ID . generarEra LPAREN paramFuncion gosub RPAREN expresion
    (51) llamadaAFuncion -> ID . generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (99) var_cte -> ID . push_id
    (53) generarEra -> .
    (96) push_id -> .

    LPAREN          reduce using rule 53 (generarEra -> .)
    TIMES           reduce using rule 96 (push_id -> .)
    DIVIDE          reduce using rule 96 (push_id -> .)
    PLUS            reduce using rule 96 (push_id -> .)
    MINUS           reduce using rule 96 (push_id -> .)
    LOWERTHAN       reduce using rule 96 (push_id -> .)
    MORETHAN        reduce using rule 96 (push_id -> .)
    DIFFERENT       reduce using rule 96 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 96 (push_id -> .)
    COMA            reduce using rule 96 (push_id -> .)
    RPAREN          reduce using rule 96 (push_id -> .)

    push_id                        shift and go to state 100
    generarEra                     shift and go to state 56

state 91

    (67) escritura -> PRINT push_poper LPAREN escrituraAux . RPAREN quad_print SEMICOLON

    RPAREN          shift and go to state 121


state 92

    (73) escrituraAux -> llamadaAFuncion .

    RPAREN          reduce using rule 73 (escrituraAux -> llamadaAFuncion .)


state 93

    (81) exp -> termino quad_term .
    (82) exp -> termino quad_term . exp1
    (83) exp1 -> . PLUS push_poper exp
    (84) exp1 -> . MINUS push_poper exp

    LOWERTHAN       reduce using rule 81 (exp -> termino quad_term .)
    MORETHAN        reduce using rule 81 (exp -> termino quad_term .)
    DIFFERENT       reduce using rule 81 (exp -> termino quad_term .)
    DOUBLEEQUAL     reduce using rule 81 (exp -> termino quad_term .)
    RPAREN          reduce using rule 81 (exp -> termino quad_term .)
    COMA            reduce using rule 81 (exp -> termino quad_term .)
    SEMICOLON       reduce using rule 81 (exp -> termino quad_term .)
    ID              reduce using rule 81 (exp -> termino quad_term .)
    IF              reduce using rule 81 (exp -> termino quad_term .)
    PRINT           reduce using rule 81 (exp -> termino quad_term .)
    WHILE           reduce using rule 81 (exp -> termino quad_term .)
    FROM            reduce using rule 81 (exp -> termino quad_term .)
    RBRACE          reduce using rule 81 (exp -> termino quad_term .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124

    exp1                           shift and go to state 122

state 94

    (94) factorAux -> MINUS push_poper . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    ID              shift and go to state 74
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    var_cte                        shift and go to state 125

state 95

    (93) factorAux -> PLUS push_poper . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    ID              shift and go to state 74
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    var_cte                        shift and go to state 126

state 96

    (87) termino -> factor quad_fact .
    (88) termino -> factor quad_fact . termino1
    (89) termino1 -> . TIMES push_poper termino
    (90) termino1 -> . DIVIDE push_poper termino

    PLUS            reduce using rule 87 (termino -> factor quad_fact .)
    MINUS           reduce using rule 87 (termino -> factor quad_fact .)
    LOWERTHAN       reduce using rule 87 (termino -> factor quad_fact .)
    MORETHAN        reduce using rule 87 (termino -> factor quad_fact .)
    DIFFERENT       reduce using rule 87 (termino -> factor quad_fact .)
    DOUBLEEQUAL     reduce using rule 87 (termino -> factor quad_fact .)
    ID              reduce using rule 87 (termino -> factor quad_fact .)
    IF              reduce using rule 87 (termino -> factor quad_fact .)
    PRINT           reduce using rule 87 (termino -> factor quad_fact .)
    WHILE           reduce using rule 87 (termino -> factor quad_fact .)
    FROM            reduce using rule 87 (termino -> factor quad_fact .)
    RBRACE          reduce using rule 87 (termino -> factor quad_fact .)
    RPAREN          reduce using rule 87 (termino -> factor quad_fact .)
    COMA            reduce using rule 87 (termino -> factor quad_fact .)
    SEMICOLON       reduce using rule 87 (termino -> factor quad_fact .)
    TIMES           shift and go to state 129
    DIVIDE          shift and go to state 127

    termino1                       shift and go to state 128

state 97

    (101) var_cte -> CTE_F push_cte .

    TIMES           reduce using rule 101 (var_cte -> CTE_F push_cte .)
    DIVIDE          reduce using rule 101 (var_cte -> CTE_F push_cte .)
    PLUS            reduce using rule 101 (var_cte -> CTE_F push_cte .)
    MINUS           reduce using rule 101 (var_cte -> CTE_F push_cte .)
    LOWERTHAN       reduce using rule 101 (var_cte -> CTE_F push_cte .)
    MORETHAN        reduce using rule 101 (var_cte -> CTE_F push_cte .)
    DIFFERENT       reduce using rule 101 (var_cte -> CTE_F push_cte .)
    DOUBLEEQUAL     reduce using rule 101 (var_cte -> CTE_F push_cte .)
    COMA            reduce using rule 101 (var_cte -> CTE_F push_cte .)
    RPAREN          reduce using rule 101 (var_cte -> CTE_F push_cte .)
    SEMICOLON       reduce using rule 101 (var_cte -> CTE_F push_cte .)
    ID              reduce using rule 101 (var_cte -> CTE_F push_cte .)
    IF              reduce using rule 101 (var_cte -> CTE_F push_cte .)
    PRINT           reduce using rule 101 (var_cte -> CTE_F push_cte .)
    WHILE           reduce using rule 101 (var_cte -> CTE_F push_cte .)
    FROM            reduce using rule 101 (var_cte -> CTE_F push_cte .)
    RBRACE          reduce using rule 101 (var_cte -> CTE_F push_cte .)


state 98

    (100) var_cte -> CTE_I push_cte .

    TIMES           reduce using rule 100 (var_cte -> CTE_I push_cte .)
    DIVIDE          reduce using rule 100 (var_cte -> CTE_I push_cte .)
    PLUS            reduce using rule 100 (var_cte -> CTE_I push_cte .)
    MINUS           reduce using rule 100 (var_cte -> CTE_I push_cte .)
    LOWERTHAN       reduce using rule 100 (var_cte -> CTE_I push_cte .)
    MORETHAN        reduce using rule 100 (var_cte -> CTE_I push_cte .)
    DIFFERENT       reduce using rule 100 (var_cte -> CTE_I push_cte .)
    DOUBLEEQUAL     reduce using rule 100 (var_cte -> CTE_I push_cte .)
    COMA            reduce using rule 100 (var_cte -> CTE_I push_cte .)
    RPAREN          reduce using rule 100 (var_cte -> CTE_I push_cte .)
    SEMICOLON       reduce using rule 100 (var_cte -> CTE_I push_cte .)
    ID              reduce using rule 100 (var_cte -> CTE_I push_cte .)
    IF              reduce using rule 100 (var_cte -> CTE_I push_cte .)
    PRINT           reduce using rule 100 (var_cte -> CTE_I push_cte .)
    WHILE           reduce using rule 100 (var_cte -> CTE_I push_cte .)
    FROM            reduce using rule 100 (var_cte -> CTE_I push_cte .)
    RBRACE          reduce using rule 100 (var_cte -> CTE_I push_cte .)


state 99

    (91) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 130


state 100

    (99) var_cte -> ID push_id .

    TIMES           reduce using rule 99 (var_cte -> ID push_id .)
    DIVIDE          reduce using rule 99 (var_cte -> ID push_id .)
    PLUS            reduce using rule 99 (var_cte -> ID push_id .)
    MINUS           reduce using rule 99 (var_cte -> ID push_id .)
    LOWERTHAN       reduce using rule 99 (var_cte -> ID push_id .)
    MORETHAN        reduce using rule 99 (var_cte -> ID push_id .)
    DIFFERENT       reduce using rule 99 (var_cte -> ID push_id .)
    DOUBLEEQUAL     reduce using rule 99 (var_cte -> ID push_id .)
    COMA            reduce using rule 99 (var_cte -> ID push_id .)
    RPAREN          reduce using rule 99 (var_cte -> ID push_id .)
    SEMICOLON       reduce using rule 99 (var_cte -> ID push_id .)
    ID              reduce using rule 99 (var_cte -> ID push_id .)
    IF              reduce using rule 99 (var_cte -> ID push_id .)
    PRINT           reduce using rule 99 (var_cte -> ID push_id .)
    WHILE           reduce using rule 99 (var_cte -> ID push_id .)
    FROM            reduce using rule 99 (var_cte -> ID push_id .)
    RBRACE          reduce using rule 99 (var_cte -> ID push_id .)


state 101

    (62) condicion -> IF LPAREN expresion RPAREN . cond bloque condFinal
    (63) condicion -> IF LPAREN expresion RPAREN . cond bloque ELSE condElse bloque condFinal
    (64) cond -> .

    LBRACE          reduce using rule 64 (cond -> .)

    cond                           shift and go to state 131

state 102

    (78) comp -> DIFFERENT . push_poper
    (98) push_poper -> .

    LPAREN          reduce using rule 98 (push_poper -> .)
    PLUS            reduce using rule 98 (push_poper -> .)
    MINUS           reduce using rule 98 (push_poper -> .)
    ID              reduce using rule 98 (push_poper -> .)
    CTE_I           reduce using rule 98 (push_poper -> .)
    CTE_F           reduce using rule 98 (push_poper -> .)

    push_poper                     shift and go to state 132

state 103

    (79) comp -> DOUBLEEQUAL . push_poper
    (98) push_poper -> .

    LPAREN          reduce using rule 98 (push_poper -> .)
    PLUS            reduce using rule 98 (push_poper -> .)
    MINUS           reduce using rule 98 (push_poper -> .)
    ID              reduce using rule 98 (push_poper -> .)
    CTE_I           reduce using rule 98 (push_poper -> .)
    CTE_F           reduce using rule 98 (push_poper -> .)

    push_poper                     shift and go to state 133

state 104

    (76) comp -> LOWERTHAN . push_poper
    (98) push_poper -> .

    LPAREN          reduce using rule 98 (push_poper -> .)
    PLUS            reduce using rule 98 (push_poper -> .)
    MINUS           reduce using rule 98 (push_poper -> .)
    ID              reduce using rule 98 (push_poper -> .)
    CTE_I           reduce using rule 98 (push_poper -> .)
    CTE_F           reduce using rule 98 (push_poper -> .)

    push_poper                     shift and go to state 134

state 105

    (75) expresion -> exp comp . exp quad_comp
    (81) exp -> . termino quad_term
    (82) exp -> . termino quad_term exp1
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    ID              shift and go to state 74
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    factor                         shift and go to state 70
    termino                        shift and go to state 67
    exp                            shift and go to state 135
    factorAux                      shift and go to state 77
    var_cte                        shift and go to state 66

state 106

    (77) comp -> MORETHAN . push_poper
    (98) push_poper -> .

    LPAREN          reduce using rule 98 (push_poper -> .)
    PLUS            reduce using rule 98 (push_poper -> .)
    MINUS           reduce using rule 98 (push_poper -> .)
    ID              reduce using rule 98 (push_poper -> .)
    CTE_I           reduce using rule 98 (push_poper -> .)
    CTE_F           reduce using rule 98 (push_poper -> .)

    push_poper                     shift and go to state 136

state 107

    (61) comparacion -> ID push_id DOUBLEEQUAL push_poper . expresion SEMICOLON
    (74) expresion -> . exp
    (75) expresion -> . exp comp exp quad_comp
    (81) exp -> . termino quad_term
    (82) exp -> . termino quad_term exp1
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    ID              shift and go to state 74
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    expresion                      shift and go to state 137
    factor                         shift and go to state 70
    var_cte                        shift and go to state 66
    termino                        shift and go to state 67
    exp                            shift and go to state 76
    factorAux                      shift and go to state 77

state 108

    (59) asignacion -> ID push_id EQUAL push_poper . expresion create_asign SEMICOLON
    (74) expresion -> . exp
    (75) expresion -> . exp comp exp quad_comp
    (81) exp -> . termino quad_term
    (82) exp -> . termino quad_term exp1
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    ID              shift and go to state 74
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    expresion                      shift and go to state 138
    var_cte                        shift and go to state 66
    termino                        shift and go to state 67
    exp                            shift and go to state 76
    factorAux                      shift and go to state 77
    factor                         shift and go to state 70

state 109

    (50) llamadaAFuncion -> ID generarEra LPAREN paramFuncion . gosub RPAREN expresion
    (51) llamadaAFuncion -> ID generarEra LPAREN paramFuncion . gosub RPAREN SEMICOLON
    (52) gosub -> .

    RPAREN          reduce using rule 52 (gosub -> .)

    gosub                          shift and go to state 139

state 110

    (58) paramFuncion -> empty .

    RPAREN          reduce using rule 58 (paramFuncion -> empty .)


state 111

    (54) paramFuncion -> ID . push_id
    (55) paramFuncion -> ID . push_id COMA paramFuncion
    (99) var_cte -> ID . push_id
    (96) push_id -> .

    COMA            reduce using rule 96 (push_id -> .)
    RPAREN          reduce using rule 96 (push_id -> .)
    TIMES           reduce using rule 96 (push_id -> .)
    DIVIDE          reduce using rule 96 (push_id -> .)
    PLUS            reduce using rule 96 (push_id -> .)
    MINUS           reduce using rule 96 (push_id -> .)
    LOWERTHAN       reduce using rule 96 (push_id -> .)
    MORETHAN        reduce using rule 96 (push_id -> .)
    DIFFERENT       reduce using rule 96 (push_id -> .)
    DOUBLEEQUAL     reduce using rule 96 (push_id -> .)

    push_id                        shift and go to state 140

state 112

    (56) paramFuncion -> expresion .
    (57) paramFuncion -> expresion . COMA paramFuncion

    RPAREN          reduce using rule 56 (paramFuncion -> expresion .)
    COMA            shift and go to state 141


state 113

    (42) loopFromDo -> FROM LPAREN ID EQUAL . expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (74) expresion -> . exp
    (75) expresion -> . exp comp exp quad_comp
    (81) exp -> . termino quad_term
    (82) exp -> . termino quad_term exp1
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    ID              shift and go to state 74
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    expresion                      shift and go to state 142
    factor                         shift and go to state 70
    var_cte                        shift and go to state 66
    termino                        shift and go to state 67
    exp                            shift and go to state 76
    factorAux                      shift and go to state 77

state 114

    (38) while -> WHILE while1 LPAREN expresion . RPAREN while2 LBRACE bloqueAux RBRACE while3

    RPAREN          shift and go to state 143


state 115

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE . endProc
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE . endProc function
    (30) endProc -> .

    FUNCTION        reduce using rule 30 (endProc -> .)
    $end            reduce using rule 30 (endProc -> .)

    endProc                        shift and go to state 144

state 116

    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux RBRACE endProc
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars . bloqueAux RBRACE endProc function
    (36) bloqueAux -> . estatuto
    (37) bloqueAux -> . estatuto bloqueAux
    (43) estatuto -> . asignacion
    (44) estatuto -> . condicion
    (45) estatuto -> . escritura
    (46) estatuto -> . while
    (47) estatuto -> . loopFromDo
    (48) estatuto -> . comparacion
    (49) estatuto -> . llamadaAFuncion
    (59) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (62) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (63) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (67) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (38) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (42) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (61) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (50) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN expresion
    (51) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 43
    FROM            shift and go to state 41

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 39
    llamadaAFuncion                shift and go to state 40
    asignacion                     shift and go to state 42
    bloqueAux                      shift and go to state 145
    while                          shift and go to state 45
    comparacion                    shift and go to state 46
    escritura                      shift and go to state 47

state 117

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . RBRACE endProc
    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux RBRACE endProc
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . RBRACE endProc function
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE . vars bloqueAux RBRACE endProc function
    (8) vars -> . VAR varAux1

    RBRACE          shift and go to state 146
    VAR             shift and go to state 8

    vars                           shift and go to state 147

state 118

    (32) param -> tipo ID COMA . param
    (31) param -> . tipo ID
    (32) param -> . tipo ID COMA param
    (33) param -> . empty
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . CHAR
    (34) empty -> .

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 12
    RPAREN          reduce using rule 34 (empty -> .)

    empty                          shift and go to state 62
    param                          shift and go to state 148
    tipo                           shift and go to state 63

state 119

    (72) escrituraAux -> CTE_STRING COMA . escrituraAux
    (69) escrituraAux -> . expresion
    (70) escrituraAux -> . CTE_STRING
    (71) escrituraAux -> . expresion COMA escrituraAux
    (72) escrituraAux -> . CTE_STRING COMA escrituraAux
    (73) escrituraAux -> . llamadaAFuncion
    (74) expresion -> . exp
    (75) expresion -> . exp comp exp quad_comp
    (50) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN expresion
    (51) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (81) exp -> . termino quad_term
    (82) exp -> . termino quad_term exp1
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    CTE_STRING      shift and go to state 88
    ID              shift and go to state 90
    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    escrituraAux                   shift and go to state 149
    expresion                      shift and go to state 89
    llamadaAFuncion                shift and go to state 92
    termino                        shift and go to state 67
    exp                            shift and go to state 76
    factorAux                      shift and go to state 77
    factor                         shift and go to state 70
    var_cte                        shift and go to state 66

state 120

    (71) escrituraAux -> expresion COMA . escrituraAux
    (69) escrituraAux -> . expresion
    (70) escrituraAux -> . CTE_STRING
    (71) escrituraAux -> . expresion COMA escrituraAux
    (72) escrituraAux -> . CTE_STRING COMA escrituraAux
    (73) escrituraAux -> . llamadaAFuncion
    (74) expresion -> . exp
    (75) expresion -> . exp comp exp quad_comp
    (50) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN expresion
    (51) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON
    (81) exp -> . termino quad_term
    (82) exp -> . termino quad_term exp1
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    CTE_STRING      shift and go to state 88
    ID              shift and go to state 90
    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    expresion                      shift and go to state 89
    escrituraAux                   shift and go to state 150
    llamadaAFuncion                shift and go to state 92
    termino                        shift and go to state 67
    exp                            shift and go to state 76
    factorAux                      shift and go to state 77
    factor                         shift and go to state 70
    var_cte                        shift and go to state 66

state 121

    (67) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN . quad_print SEMICOLON
    (68) quad_print -> .

    SEMICOLON       reduce using rule 68 (quad_print -> .)

    quad_print                     shift and go to state 151

state 122

    (82) exp -> termino quad_term exp1 .

    LOWERTHAN       reduce using rule 82 (exp -> termino quad_term exp1 .)
    MORETHAN        reduce using rule 82 (exp -> termino quad_term exp1 .)
    DIFFERENT       reduce using rule 82 (exp -> termino quad_term exp1 .)
    DOUBLEEQUAL     reduce using rule 82 (exp -> termino quad_term exp1 .)
    RPAREN          reduce using rule 82 (exp -> termino quad_term exp1 .)
    COMA            reduce using rule 82 (exp -> termino quad_term exp1 .)
    SEMICOLON       reduce using rule 82 (exp -> termino quad_term exp1 .)
    ID              reduce using rule 82 (exp -> termino quad_term exp1 .)
    IF              reduce using rule 82 (exp -> termino quad_term exp1 .)
    PRINT           reduce using rule 82 (exp -> termino quad_term exp1 .)
    WHILE           reduce using rule 82 (exp -> termino quad_term exp1 .)
    FROM            reduce using rule 82 (exp -> termino quad_term exp1 .)
    RBRACE          reduce using rule 82 (exp -> termino quad_term exp1 .)


state 123

    (83) exp1 -> PLUS . push_poper exp
    (98) push_poper -> .

    LPAREN          reduce using rule 98 (push_poper -> .)
    PLUS            reduce using rule 98 (push_poper -> .)
    MINUS           reduce using rule 98 (push_poper -> .)
    ID              reduce using rule 98 (push_poper -> .)
    CTE_I           reduce using rule 98 (push_poper -> .)
    CTE_F           reduce using rule 98 (push_poper -> .)

    push_poper                     shift and go to state 152

state 124

    (84) exp1 -> MINUS . push_poper exp
    (98) push_poper -> .

    LPAREN          reduce using rule 98 (push_poper -> .)
    PLUS            reduce using rule 98 (push_poper -> .)
    MINUS           reduce using rule 98 (push_poper -> .)
    ID              reduce using rule 98 (push_poper -> .)
    CTE_I           reduce using rule 98 (push_poper -> .)
    CTE_F           reduce using rule 98 (push_poper -> .)

    push_poper                     shift and go to state 153

state 125

    (94) factorAux -> MINUS push_poper var_cte .

    TIMES           reduce using rule 94 (factorAux -> MINUS push_poper var_cte .)
    DIVIDE          reduce using rule 94 (factorAux -> MINUS push_poper var_cte .)
    PLUS            reduce using rule 94 (factorAux -> MINUS push_poper var_cte .)
    MINUS           reduce using rule 94 (factorAux -> MINUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 94 (factorAux -> MINUS push_poper var_cte .)
    MORETHAN        reduce using rule 94 (factorAux -> MINUS push_poper var_cte .)
    DIFFERENT       reduce using rule 94 (factorAux -> MINUS push_poper var_cte .)
    DOUBLEEQUAL     reduce using rule 94 (factorAux -> MINUS push_poper var_cte .)
    RPAREN          reduce using rule 94 (factorAux -> MINUS push_poper var_cte .)
    COMA            reduce using rule 94 (factorAux -> MINUS push_poper var_cte .)
    SEMICOLON       reduce using rule 94 (factorAux -> MINUS push_poper var_cte .)
    ID              reduce using rule 94 (factorAux -> MINUS push_poper var_cte .)
    IF              reduce using rule 94 (factorAux -> MINUS push_poper var_cte .)
    PRINT           reduce using rule 94 (factorAux -> MINUS push_poper var_cte .)
    WHILE           reduce using rule 94 (factorAux -> MINUS push_poper var_cte .)
    FROM            reduce using rule 94 (factorAux -> MINUS push_poper var_cte .)
    RBRACE          reduce using rule 94 (factorAux -> MINUS push_poper var_cte .)


state 126

    (93) factorAux -> PLUS push_poper var_cte .

    TIMES           reduce using rule 93 (factorAux -> PLUS push_poper var_cte .)
    DIVIDE          reduce using rule 93 (factorAux -> PLUS push_poper var_cte .)
    PLUS            reduce using rule 93 (factorAux -> PLUS push_poper var_cte .)
    MINUS           reduce using rule 93 (factorAux -> PLUS push_poper var_cte .)
    LOWERTHAN       reduce using rule 93 (factorAux -> PLUS push_poper var_cte .)
    MORETHAN        reduce using rule 93 (factorAux -> PLUS push_poper var_cte .)
    DIFFERENT       reduce using rule 93 (factorAux -> PLUS push_poper var_cte .)
    DOUBLEEQUAL     reduce using rule 93 (factorAux -> PLUS push_poper var_cte .)
    RPAREN          reduce using rule 93 (factorAux -> PLUS push_poper var_cte .)
    COMA            reduce using rule 93 (factorAux -> PLUS push_poper var_cte .)
    SEMICOLON       reduce using rule 93 (factorAux -> PLUS push_poper var_cte .)
    ID              reduce using rule 93 (factorAux -> PLUS push_poper var_cte .)
    IF              reduce using rule 93 (factorAux -> PLUS push_poper var_cte .)
    PRINT           reduce using rule 93 (factorAux -> PLUS push_poper var_cte .)
    WHILE           reduce using rule 93 (factorAux -> PLUS push_poper var_cte .)
    FROM            reduce using rule 93 (factorAux -> PLUS push_poper var_cte .)
    RBRACE          reduce using rule 93 (factorAux -> PLUS push_poper var_cte .)


state 127

    (90) termino1 -> DIVIDE . push_poper termino
    (98) push_poper -> .

    LPAREN          reduce using rule 98 (push_poper -> .)
    PLUS            reduce using rule 98 (push_poper -> .)
    MINUS           reduce using rule 98 (push_poper -> .)
    ID              reduce using rule 98 (push_poper -> .)
    CTE_I           reduce using rule 98 (push_poper -> .)
    CTE_F           reduce using rule 98 (push_poper -> .)

    push_poper                     shift and go to state 154

state 128

    (88) termino -> factor quad_fact termino1 .

    PLUS            reduce using rule 88 (termino -> factor quad_fact termino1 .)
    MINUS           reduce using rule 88 (termino -> factor quad_fact termino1 .)
    LOWERTHAN       reduce using rule 88 (termino -> factor quad_fact termino1 .)
    MORETHAN        reduce using rule 88 (termino -> factor quad_fact termino1 .)
    DIFFERENT       reduce using rule 88 (termino -> factor quad_fact termino1 .)
    DOUBLEEQUAL     reduce using rule 88 (termino -> factor quad_fact termino1 .)
    ID              reduce using rule 88 (termino -> factor quad_fact termino1 .)
    IF              reduce using rule 88 (termino -> factor quad_fact termino1 .)
    PRINT           reduce using rule 88 (termino -> factor quad_fact termino1 .)
    WHILE           reduce using rule 88 (termino -> factor quad_fact termino1 .)
    FROM            reduce using rule 88 (termino -> factor quad_fact termino1 .)
    RBRACE          reduce using rule 88 (termino -> factor quad_fact termino1 .)
    RPAREN          reduce using rule 88 (termino -> factor quad_fact termino1 .)
    COMA            reduce using rule 88 (termino -> factor quad_fact termino1 .)
    SEMICOLON       reduce using rule 88 (termino -> factor quad_fact termino1 .)


state 129

    (89) termino1 -> TIMES . push_poper termino
    (98) push_poper -> .

    LPAREN          reduce using rule 98 (push_poper -> .)
    PLUS            reduce using rule 98 (push_poper -> .)
    MINUS           reduce using rule 98 (push_poper -> .)
    ID              reduce using rule 98 (push_poper -> .)
    CTE_I           reduce using rule 98 (push_poper -> .)
    CTE_F           reduce using rule 98 (push_poper -> .)

    push_poper                     shift and go to state 155

state 130

    (91) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 91 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 91 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 91 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 91 (factor -> LPAREN expresion RPAREN .)
    LOWERTHAN       reduce using rule 91 (factor -> LPAREN expresion RPAREN .)
    MORETHAN        reduce using rule 91 (factor -> LPAREN expresion RPAREN .)
    DIFFERENT       reduce using rule 91 (factor -> LPAREN expresion RPAREN .)
    DOUBLEEQUAL     reduce using rule 91 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 91 (factor -> LPAREN expresion RPAREN .)
    COMA            reduce using rule 91 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 91 (factor -> LPAREN expresion RPAREN .)
    ID              reduce using rule 91 (factor -> LPAREN expresion RPAREN .)
    IF              reduce using rule 91 (factor -> LPAREN expresion RPAREN .)
    PRINT           reduce using rule 91 (factor -> LPAREN expresion RPAREN .)
    WHILE           reduce using rule 91 (factor -> LPAREN expresion RPAREN .)
    FROM            reduce using rule 91 (factor -> LPAREN expresion RPAREN .)
    RBRACE          reduce using rule 91 (factor -> LPAREN expresion RPAREN .)


state 131

    (62) condicion -> IF LPAREN expresion RPAREN cond . bloque condFinal
    (63) condicion -> IF LPAREN expresion RPAREN cond . bloque ELSE condElse bloque condFinal
    (20) bloque -> . LBRACE RBRACE
    (21) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 156

    bloque                         shift and go to state 157

state 132

    (78) comp -> DIFFERENT push_poper .

    LPAREN          reduce using rule 78 (comp -> DIFFERENT push_poper .)
    PLUS            reduce using rule 78 (comp -> DIFFERENT push_poper .)
    MINUS           reduce using rule 78 (comp -> DIFFERENT push_poper .)
    ID              reduce using rule 78 (comp -> DIFFERENT push_poper .)
    CTE_I           reduce using rule 78 (comp -> DIFFERENT push_poper .)
    CTE_F           reduce using rule 78 (comp -> DIFFERENT push_poper .)


state 133

    (79) comp -> DOUBLEEQUAL push_poper .

    LPAREN          reduce using rule 79 (comp -> DOUBLEEQUAL push_poper .)
    PLUS            reduce using rule 79 (comp -> DOUBLEEQUAL push_poper .)
    MINUS           reduce using rule 79 (comp -> DOUBLEEQUAL push_poper .)
    ID              reduce using rule 79 (comp -> DOUBLEEQUAL push_poper .)
    CTE_I           reduce using rule 79 (comp -> DOUBLEEQUAL push_poper .)
    CTE_F           reduce using rule 79 (comp -> DOUBLEEQUAL push_poper .)


state 134

    (76) comp -> LOWERTHAN push_poper .

    LPAREN          reduce using rule 76 (comp -> LOWERTHAN push_poper .)
    PLUS            reduce using rule 76 (comp -> LOWERTHAN push_poper .)
    MINUS           reduce using rule 76 (comp -> LOWERTHAN push_poper .)
    ID              reduce using rule 76 (comp -> LOWERTHAN push_poper .)
    CTE_I           reduce using rule 76 (comp -> LOWERTHAN push_poper .)
    CTE_F           reduce using rule 76 (comp -> LOWERTHAN push_poper .)


state 135

    (75) expresion -> exp comp exp . quad_comp
    (80) quad_comp -> .

    RPAREN          reduce using rule 80 (quad_comp -> .)
    COMA            reduce using rule 80 (quad_comp -> .)
    SEMICOLON       reduce using rule 80 (quad_comp -> .)
    ID              reduce using rule 80 (quad_comp -> .)
    IF              reduce using rule 80 (quad_comp -> .)
    PRINT           reduce using rule 80 (quad_comp -> .)
    WHILE           reduce using rule 80 (quad_comp -> .)
    FROM            reduce using rule 80 (quad_comp -> .)
    RBRACE          reduce using rule 80 (quad_comp -> .)

    quad_comp                      shift and go to state 158

state 136

    (77) comp -> MORETHAN push_poper .

    LPAREN          reduce using rule 77 (comp -> MORETHAN push_poper .)
    PLUS            reduce using rule 77 (comp -> MORETHAN push_poper .)
    MINUS           reduce using rule 77 (comp -> MORETHAN push_poper .)
    ID              reduce using rule 77 (comp -> MORETHAN push_poper .)
    CTE_I           reduce using rule 77 (comp -> MORETHAN push_poper .)
    CTE_F           reduce using rule 77 (comp -> MORETHAN push_poper .)


state 137

    (61) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion . SEMICOLON

    SEMICOLON       shift and go to state 159


state 138

    (59) asignacion -> ID push_id EQUAL push_poper expresion . create_asign SEMICOLON
    (60) create_asign -> .

    SEMICOLON       reduce using rule 60 (create_asign -> .)

    create_asign                   shift and go to state 160

state 139

    (50) llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub . RPAREN expresion
    (51) llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub . RPAREN SEMICOLON

    RPAREN          shift and go to state 161


state 140

    (54) paramFuncion -> ID push_id .
    (55) paramFuncion -> ID push_id . COMA paramFuncion
    (99) var_cte -> ID push_id .

  ! shift/reduce conflict for COMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 54 (paramFuncion -> ID push_id .)
    RPAREN          reduce using rule 54 (paramFuncion -> ID push_id .)
    COMA            shift and go to state 162
    TIMES           reduce using rule 99 (var_cte -> ID push_id .)
    DIVIDE          reduce using rule 99 (var_cte -> ID push_id .)
    PLUS            reduce using rule 99 (var_cte -> ID push_id .)
    MINUS           reduce using rule 99 (var_cte -> ID push_id .)
    LOWERTHAN       reduce using rule 99 (var_cte -> ID push_id .)
    MORETHAN        reduce using rule 99 (var_cte -> ID push_id .)
    DIFFERENT       reduce using rule 99 (var_cte -> ID push_id .)
    DOUBLEEQUAL     reduce using rule 99 (var_cte -> ID push_id .)

  ! COMA            [ reduce using rule 99 (var_cte -> ID push_id .) ]
  ! RPAREN          [ reduce using rule 99 (var_cte -> ID push_id .) ]


state 141

    (57) paramFuncion -> expresion COMA . paramFuncion
    (54) paramFuncion -> . ID push_id
    (55) paramFuncion -> . ID push_id COMA paramFuncion
    (56) paramFuncion -> . expresion
    (57) paramFuncion -> . expresion COMA paramFuncion
    (58) paramFuncion -> . empty
    (74) expresion -> . exp
    (75) expresion -> . exp comp exp quad_comp
    (34) empty -> .
    (81) exp -> . termino quad_term
    (82) exp -> . termino quad_term exp1
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    ID              shift and go to state 111
    RPAREN          reduce using rule 34 (empty -> .)
    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    expresion                      shift and go to state 112
    paramFuncion                   shift and go to state 163
    var_cte                        shift and go to state 66
    termino                        shift and go to state 67
    exp                            shift and go to state 76
    factorAux                      shift and go to state 77
    factor                         shift and go to state 70
    empty                          shift and go to state 110

state 142

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion . RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    RPAREN          shift and go to state 164


state 143

    (38) while -> WHILE while1 LPAREN expresion RPAREN . while2 LBRACE bloqueAux RBRACE while3
    (40) while2 -> .

    LBRACE          reduce using rule 40 (while2 -> .)

    while2                         shift and go to state 165

state 144

    (22) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc .
    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    $end            reduce using rule 22 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 166

state 145

    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . RBRACE endProc
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux . RBRACE endProc function

    RBRACE          shift and go to state 167


state 146

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE . endProc
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE . endProc function
    (30) endProc -> .

    FUNCTION        reduce using rule 30 (endProc -> .)
    $end            reduce using rule 30 (endProc -> .)

    endProc                        shift and go to state 168

state 147

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux RBRACE endProc
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars . bloqueAux RBRACE endProc function
    (36) bloqueAux -> . estatuto
    (37) bloqueAux -> . estatuto bloqueAux
    (43) estatuto -> . asignacion
    (44) estatuto -> . condicion
    (45) estatuto -> . escritura
    (46) estatuto -> . while
    (47) estatuto -> . loopFromDo
    (48) estatuto -> . comparacion
    (49) estatuto -> . llamadaAFuncion
    (59) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (62) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (63) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (67) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (38) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (42) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (61) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (50) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN expresion
    (51) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 43
    FROM            shift and go to state 41

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 39
    llamadaAFuncion                shift and go to state 40
    asignacion                     shift and go to state 42
    bloqueAux                      shift and go to state 169
    while                          shift and go to state 45
    comparacion                    shift and go to state 46
    escritura                      shift and go to state 47

state 148

    (32) param -> tipo ID COMA param .

    RPAREN          reduce using rule 32 (param -> tipo ID COMA param .)


state 149

    (72) escrituraAux -> CTE_STRING COMA escrituraAux .

    RPAREN          reduce using rule 72 (escrituraAux -> CTE_STRING COMA escrituraAux .)


state 150

    (71) escrituraAux -> expresion COMA escrituraAux .

    RPAREN          reduce using rule 71 (escrituraAux -> expresion COMA escrituraAux .)


state 151

    (67) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print . SEMICOLON

    SEMICOLON       shift and go to state 170


state 152

    (83) exp1 -> PLUS push_poper . exp
    (81) exp -> . termino quad_term
    (82) exp -> . termino quad_term exp1
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    ID              shift and go to state 74
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    termino                        shift and go to state 67
    exp                            shift and go to state 171
    factor                         shift and go to state 70
    factorAux                      shift and go to state 77
    var_cte                        shift and go to state 66

state 153

    (84) exp1 -> MINUS push_poper . exp
    (81) exp -> . termino quad_term
    (82) exp -> . termino quad_term exp1
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    ID              shift and go to state 74
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    termino                        shift and go to state 67
    exp                            shift and go to state 172
    factor                         shift and go to state 70
    factorAux                      shift and go to state 77
    var_cte                        shift and go to state 66

state 154

    (90) termino1 -> DIVIDE push_poper . termino
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    ID              shift and go to state 74
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    termino                        shift and go to state 173
    factor                         shift and go to state 70
    factorAux                      shift and go to state 77
    var_cte                        shift and go to state 66

state 155

    (89) termino1 -> TIMES push_poper . termino
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    ID              shift and go to state 74
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    termino                        shift and go to state 174
    factor                         shift and go to state 70
    factorAux                      shift and go to state 77
    var_cte                        shift and go to state 66

state 156

    (20) bloque -> LBRACE . RBRACE
    (21) bloque -> LBRACE . bloqueAux RBRACE
    (36) bloqueAux -> . estatuto
    (37) bloqueAux -> . estatuto bloqueAux
    (43) estatuto -> . asignacion
    (44) estatuto -> . condicion
    (45) estatuto -> . escritura
    (46) estatuto -> . while
    (47) estatuto -> . loopFromDo
    (48) estatuto -> . comparacion
    (49) estatuto -> . llamadaAFuncion
    (59) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (62) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (63) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (67) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (38) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (42) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (61) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (50) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN expresion
    (51) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    RBRACE          shift and go to state 175
    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 43
    FROM            shift and go to state 41

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 39
    llamadaAFuncion                shift and go to state 40
    asignacion                     shift and go to state 42
    bloqueAux                      shift and go to state 176
    while                          shift and go to state 45
    comparacion                    shift and go to state 46
    escritura                      shift and go to state 47

state 157

    (62) condicion -> IF LPAREN expresion RPAREN cond bloque . condFinal
    (63) condicion -> IF LPAREN expresion RPAREN cond bloque . ELSE condElse bloque condFinal
    (66) condFinal -> .

    ELSE            shift and go to state 178
    ID              reduce using rule 66 (condFinal -> .)
    IF              reduce using rule 66 (condFinal -> .)
    PRINT           reduce using rule 66 (condFinal -> .)
    WHILE           reduce using rule 66 (condFinal -> .)
    FROM            reduce using rule 66 (condFinal -> .)
    RBRACE          reduce using rule 66 (condFinal -> .)

    condFinal                      shift and go to state 177

state 158

    (75) expresion -> exp comp exp quad_comp .

    COMA            reduce using rule 75 (expresion -> exp comp exp quad_comp .)
    RPAREN          reduce using rule 75 (expresion -> exp comp exp quad_comp .)
    SEMICOLON       reduce using rule 75 (expresion -> exp comp exp quad_comp .)
    ID              reduce using rule 75 (expresion -> exp comp exp quad_comp .)
    IF              reduce using rule 75 (expresion -> exp comp exp quad_comp .)
    PRINT           reduce using rule 75 (expresion -> exp comp exp quad_comp .)
    WHILE           reduce using rule 75 (expresion -> exp comp exp quad_comp .)
    FROM            reduce using rule 75 (expresion -> exp comp exp quad_comp .)
    RBRACE          reduce using rule 75 (expresion -> exp comp exp quad_comp .)


state 159

    (61) comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .

    ID              reduce using rule 61 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    IF              reduce using rule 61 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    PRINT           reduce using rule 61 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    WHILE           reduce using rule 61 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    FROM            reduce using rule 61 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)
    RBRACE          reduce using rule 61 (comparacion -> ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON .)


state 160

    (59) asignacion -> ID push_id EQUAL push_poper expresion create_asign . SEMICOLON

    SEMICOLON       shift and go to state 179


state 161

    (50) llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN . expresion
    (51) llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN . SEMICOLON
    (74) expresion -> . exp
    (75) expresion -> . exp comp exp quad_comp
    (81) exp -> . termino quad_term
    (82) exp -> . termino quad_term exp1
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    SEMICOLON       shift and go to state 180
    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    ID              shift and go to state 74
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    expresion                      shift and go to state 181
    termino                        shift and go to state 67
    exp                            shift and go to state 76
    factorAux                      shift and go to state 77
    factor                         shift and go to state 70
    var_cte                        shift and go to state 66

state 162

    (55) paramFuncion -> ID push_id COMA . paramFuncion
    (54) paramFuncion -> . ID push_id
    (55) paramFuncion -> . ID push_id COMA paramFuncion
    (56) paramFuncion -> . expresion
    (57) paramFuncion -> . expresion COMA paramFuncion
    (58) paramFuncion -> . empty
    (74) expresion -> . exp
    (75) expresion -> . exp comp exp quad_comp
    (34) empty -> .
    (81) exp -> . termino quad_term
    (82) exp -> . termino quad_term exp1
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    ID              shift and go to state 111
    RPAREN          reduce using rule 34 (empty -> .)
    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    expresion                      shift and go to state 112
    paramFuncion                   shift and go to state 182
    var_cte                        shift and go to state 66
    termino                        shift and go to state 67
    exp                            shift and go to state 76
    factorAux                      shift and go to state 77
    factor                         shift and go to state 70
    empty                          shift and go to state 110

state 163

    (57) paramFuncion -> expresion COMA paramFuncion .

    RPAREN          reduce using rule 57 (paramFuncion -> expresion COMA paramFuncion .)


state 164

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN . TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    TO              shift and go to state 183


state 165

    (38) while -> WHILE while1 LPAREN expresion RPAREN while2 . LBRACE bloqueAux RBRACE while3

    LBRACE          shift and go to state 184


state 166

    (24) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function .

    $end            reduce using rule 24 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function .)


state 167

    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE . endProc
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE . endProc function
    (30) endProc -> .

    FUNCTION        reduce using rule 30 (endProc -> .)
    $end            reduce using rule 30 (endProc -> .)

    endProc                        shift and go to state 185

state 168

    (26) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc .
    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    $end            reduce using rule 26 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 186

state 169

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . RBRACE endProc
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux . RBRACE endProc function

    RBRACE          shift and go to state 187


state 170

    (67) escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .

    ID              reduce using rule 67 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    IF              reduce using rule 67 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    PRINT           reduce using rule 67 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    WHILE           reduce using rule 67 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    FROM            reduce using rule 67 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)
    RBRACE          reduce using rule 67 (escritura -> PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON .)


state 171

    (83) exp1 -> PLUS push_poper exp .

    LOWERTHAN       reduce using rule 83 (exp1 -> PLUS push_poper exp .)
    MORETHAN        reduce using rule 83 (exp1 -> PLUS push_poper exp .)
    DIFFERENT       reduce using rule 83 (exp1 -> PLUS push_poper exp .)
    DOUBLEEQUAL     reduce using rule 83 (exp1 -> PLUS push_poper exp .)
    RPAREN          reduce using rule 83 (exp1 -> PLUS push_poper exp .)
    COMA            reduce using rule 83 (exp1 -> PLUS push_poper exp .)
    SEMICOLON       reduce using rule 83 (exp1 -> PLUS push_poper exp .)
    ID              reduce using rule 83 (exp1 -> PLUS push_poper exp .)
    IF              reduce using rule 83 (exp1 -> PLUS push_poper exp .)
    PRINT           reduce using rule 83 (exp1 -> PLUS push_poper exp .)
    WHILE           reduce using rule 83 (exp1 -> PLUS push_poper exp .)
    FROM            reduce using rule 83 (exp1 -> PLUS push_poper exp .)
    RBRACE          reduce using rule 83 (exp1 -> PLUS push_poper exp .)


state 172

    (84) exp1 -> MINUS push_poper exp .

    LOWERTHAN       reduce using rule 84 (exp1 -> MINUS push_poper exp .)
    MORETHAN        reduce using rule 84 (exp1 -> MINUS push_poper exp .)
    DIFFERENT       reduce using rule 84 (exp1 -> MINUS push_poper exp .)
    DOUBLEEQUAL     reduce using rule 84 (exp1 -> MINUS push_poper exp .)
    RPAREN          reduce using rule 84 (exp1 -> MINUS push_poper exp .)
    COMA            reduce using rule 84 (exp1 -> MINUS push_poper exp .)
    SEMICOLON       reduce using rule 84 (exp1 -> MINUS push_poper exp .)
    ID              reduce using rule 84 (exp1 -> MINUS push_poper exp .)
    IF              reduce using rule 84 (exp1 -> MINUS push_poper exp .)
    PRINT           reduce using rule 84 (exp1 -> MINUS push_poper exp .)
    WHILE           reduce using rule 84 (exp1 -> MINUS push_poper exp .)
    FROM            reduce using rule 84 (exp1 -> MINUS push_poper exp .)
    RBRACE          reduce using rule 84 (exp1 -> MINUS push_poper exp .)


state 173

    (90) termino1 -> DIVIDE push_poper termino .

    PLUS            reduce using rule 90 (termino1 -> DIVIDE push_poper termino .)
    MINUS           reduce using rule 90 (termino1 -> DIVIDE push_poper termino .)
    LOWERTHAN       reduce using rule 90 (termino1 -> DIVIDE push_poper termino .)
    MORETHAN        reduce using rule 90 (termino1 -> DIVIDE push_poper termino .)
    DIFFERENT       reduce using rule 90 (termino1 -> DIVIDE push_poper termino .)
    DOUBLEEQUAL     reduce using rule 90 (termino1 -> DIVIDE push_poper termino .)
    RPAREN          reduce using rule 90 (termino1 -> DIVIDE push_poper termino .)
    COMA            reduce using rule 90 (termino1 -> DIVIDE push_poper termino .)
    SEMICOLON       reduce using rule 90 (termino1 -> DIVIDE push_poper termino .)
    ID              reduce using rule 90 (termino1 -> DIVIDE push_poper termino .)
    IF              reduce using rule 90 (termino1 -> DIVIDE push_poper termino .)
    PRINT           reduce using rule 90 (termino1 -> DIVIDE push_poper termino .)
    WHILE           reduce using rule 90 (termino1 -> DIVIDE push_poper termino .)
    FROM            reduce using rule 90 (termino1 -> DIVIDE push_poper termino .)
    RBRACE          reduce using rule 90 (termino1 -> DIVIDE push_poper termino .)


state 174

    (89) termino1 -> TIMES push_poper termino .

    PLUS            reduce using rule 89 (termino1 -> TIMES push_poper termino .)
    MINUS           reduce using rule 89 (termino1 -> TIMES push_poper termino .)
    LOWERTHAN       reduce using rule 89 (termino1 -> TIMES push_poper termino .)
    MORETHAN        reduce using rule 89 (termino1 -> TIMES push_poper termino .)
    DIFFERENT       reduce using rule 89 (termino1 -> TIMES push_poper termino .)
    DOUBLEEQUAL     reduce using rule 89 (termino1 -> TIMES push_poper termino .)
    RPAREN          reduce using rule 89 (termino1 -> TIMES push_poper termino .)
    COMA            reduce using rule 89 (termino1 -> TIMES push_poper termino .)
    SEMICOLON       reduce using rule 89 (termino1 -> TIMES push_poper termino .)
    ID              reduce using rule 89 (termino1 -> TIMES push_poper termino .)
    IF              reduce using rule 89 (termino1 -> TIMES push_poper termino .)
    PRINT           reduce using rule 89 (termino1 -> TIMES push_poper termino .)
    WHILE           reduce using rule 89 (termino1 -> TIMES push_poper termino .)
    FROM            reduce using rule 89 (termino1 -> TIMES push_poper termino .)
    RBRACE          reduce using rule 89 (termino1 -> TIMES push_poper termino .)


state 175

    (20) bloque -> LBRACE RBRACE .

    ID              reduce using rule 20 (bloque -> LBRACE RBRACE .)
    IF              reduce using rule 20 (bloque -> LBRACE RBRACE .)
    PRINT           reduce using rule 20 (bloque -> LBRACE RBRACE .)
    WHILE           reduce using rule 20 (bloque -> LBRACE RBRACE .)
    FROM            reduce using rule 20 (bloque -> LBRACE RBRACE .)
    RBRACE          reduce using rule 20 (bloque -> LBRACE RBRACE .)
    ELSE            reduce using rule 20 (bloque -> LBRACE RBRACE .)


state 176

    (21) bloque -> LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 188


state 177

    (62) condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .

    ID              reduce using rule 62 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    IF              reduce using rule 62 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    PRINT           reduce using rule 62 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    WHILE           reduce using rule 62 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    FROM            reduce using rule 62 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)
    RBRACE          reduce using rule 62 (condicion -> IF LPAREN expresion RPAREN cond bloque condFinal .)


state 178

    (63) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE . condElse bloque condFinal
    (65) condElse -> .

    LBRACE          reduce using rule 65 (condElse -> .)

    condElse                       shift and go to state 189

state 179

    (59) asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .

    ID              reduce using rule 59 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    IF              reduce using rule 59 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    PRINT           reduce using rule 59 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    WHILE           reduce using rule 59 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    FROM            reduce using rule 59 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)
    RBRACE          reduce using rule 59 (asignacion -> ID push_id EQUAL push_poper expresion create_asign SEMICOLON .)


state 180

    (51) llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .

    RPAREN          reduce using rule 51 (llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    ID              reduce using rule 51 (llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    IF              reduce using rule 51 (llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    PRINT           reduce using rule 51 (llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    WHILE           reduce using rule 51 (llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    FROM            reduce using rule 51 (llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)
    RBRACE          reduce using rule 51 (llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON .)


state 181

    (50) llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN expresion .

    RPAREN          reduce using rule 50 (llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    ID              reduce using rule 50 (llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    IF              reduce using rule 50 (llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    PRINT           reduce using rule 50 (llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    WHILE           reduce using rule 50 (llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    FROM            reduce using rule 50 (llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN expresion .)
    RBRACE          reduce using rule 50 (llamadaAFuncion -> ID generarEra LPAREN paramFuncion gosub RPAREN expresion .)


state 182

    (55) paramFuncion -> ID push_id COMA paramFuncion .

    RPAREN          reduce using rule 55 (paramFuncion -> ID push_id COMA paramFuncion .)


state 183

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO . LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE

    LPAREN          shift and go to state 190


state 184

    (38) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE . bloqueAux RBRACE while3
    (36) bloqueAux -> . estatuto
    (37) bloqueAux -> . estatuto bloqueAux
    (43) estatuto -> . asignacion
    (44) estatuto -> . condicion
    (45) estatuto -> . escritura
    (46) estatuto -> . while
    (47) estatuto -> . loopFromDo
    (48) estatuto -> . comparacion
    (49) estatuto -> . llamadaAFuncion
    (59) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (62) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (63) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (67) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (38) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (42) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (61) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (50) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN expresion
    (51) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 43
    FROM            shift and go to state 41

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 39
    llamadaAFuncion                shift and go to state 40
    asignacion                     shift and go to state 42
    bloqueAux                      shift and go to state 191
    while                          shift and go to state 45
    comparacion                    shift and go to state 46
    escritura                      shift and go to state 47

state 185

    (23) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .
    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    $end            reduce using rule 23 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 192

state 186

    (28) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function .

    $end            reduce using rule 28 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function .)


state 187

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE . endProc
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE . endProc function
    (30) endProc -> .

    FUNCTION        reduce using rule 30 (endProc -> .)
    $end            reduce using rule 30 (endProc -> .)

    endProc                        shift and go to state 193

state 188

    (21) bloque -> LBRACE bloqueAux RBRACE .

    ID              reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    FROM            reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)
    ELSE            reduce using rule 21 (bloque -> LBRACE bloqueAux RBRACE .)


state 189

    (63) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse . bloque condFinal
    (20) bloque -> . LBRACE RBRACE
    (21) bloque -> . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 156

    bloque                         shift and go to state 194

state 190

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN . expresion RPAREN DO LBRACE bloqueAux RBRACE
    (74) expresion -> . exp
    (75) expresion -> . exp comp exp quad_comp
    (81) exp -> . termino quad_term
    (82) exp -> . termino quad_term exp1
    (87) termino -> . factor quad_fact
    (88) termino -> . factor quad_fact termino1
    (91) factor -> . LPAREN expresion RPAREN
    (92) factor -> . factorAux
    (93) factorAux -> . PLUS push_poper var_cte
    (94) factorAux -> . MINUS push_poper var_cte
    (95) factorAux -> . var_cte
    (99) var_cte -> . ID push_id
    (100) var_cte -> . CTE_I push_cte
    (101) var_cte -> . CTE_F push_cte

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 69
    MINUS           shift and go to state 68
    ID              shift and go to state 74
    CTE_I           shift and go to state 72
    CTE_F           shift and go to state 71

    expresion                      shift and go to state 195
    factor                         shift and go to state 70
    var_cte                        shift and go to state 66
    termino                        shift and go to state 67
    exp                            shift and go to state 76
    factorAux                      shift and go to state 77

state 191

    (38) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux . RBRACE while3

    RBRACE          shift and go to state 196


state 192

    (25) function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function .

    $end            reduce using rule 25 (function -> FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function .)


state 193

    (27) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc .
    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc . function
    (22) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc
    (23) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc
    (24) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE RBRACE endProc function
    (25) function -> . FUNCTION tipoFunc nomFunc LPAREN RPAREN LBRACE vars bloqueAux RBRACE endProc function
    (26) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc
    (27) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc
    (28) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE RBRACE endProc function
    (29) function -> . FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function

    $end            reduce using rule 27 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 197

state 194

    (63) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque . condFinal
    (66) condFinal -> .

    ID              reduce using rule 66 (condFinal -> .)
    IF              reduce using rule 66 (condFinal -> .)
    PRINT           reduce using rule 66 (condFinal -> .)
    WHILE           reduce using rule 66 (condFinal -> .)
    FROM            reduce using rule 66 (condFinal -> .)
    RBRACE          reduce using rule 66 (condFinal -> .)

    condFinal                      shift and go to state 198

state 195

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion . RPAREN DO LBRACE bloqueAux RBRACE

    RPAREN          shift and go to state 199


state 196

    (38) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE . while3
    (41) while3 -> .

    ID              reduce using rule 41 (while3 -> .)
    IF              reduce using rule 41 (while3 -> .)
    PRINT           reduce using rule 41 (while3 -> .)
    WHILE           reduce using rule 41 (while3 -> .)
    FROM            reduce using rule 41 (while3 -> .)
    RBRACE          reduce using rule 41 (while3 -> .)

    while3                         shift and go to state 200

state 197

    (29) function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function .

    $end            reduce using rule 29 (function -> FUNCTION tipoFunc nomFunc LPAREN param RPAREN LBRACE vars bloqueAux RBRACE endProc function .)


state 198

    (63) condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .

    ID              reduce using rule 63 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    IF              reduce using rule 63 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    PRINT           reduce using rule 63 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    WHILE           reduce using rule 63 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    FROM            reduce using rule 63 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)
    RBRACE          reduce using rule 63 (condicion -> IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal .)


state 199

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN . DO LBRACE bloqueAux RBRACE

    DO              shift and go to state 201


state 200

    (38) while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .

    ID              reduce using rule 38 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    IF              reduce using rule 38 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    PRINT           reduce using rule 38 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    WHILE           reduce using rule 38 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    FROM            reduce using rule 38 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)
    RBRACE          reduce using rule 38 (while -> WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3 .)


state 201

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO . LBRACE bloqueAux RBRACE

    LBRACE          shift and go to state 202


state 202

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE . bloqueAux RBRACE
    (36) bloqueAux -> . estatuto
    (37) bloqueAux -> . estatuto bloqueAux
    (43) estatuto -> . asignacion
    (44) estatuto -> . condicion
    (45) estatuto -> . escritura
    (46) estatuto -> . while
    (47) estatuto -> . loopFromDo
    (48) estatuto -> . comparacion
    (49) estatuto -> . llamadaAFuncion
    (59) asignacion -> . ID push_id EQUAL push_poper expresion create_asign SEMICOLON
    (62) condicion -> . IF LPAREN expresion RPAREN cond bloque condFinal
    (63) condicion -> . IF LPAREN expresion RPAREN cond bloque ELSE condElse bloque condFinal
    (67) escritura -> . PRINT push_poper LPAREN escrituraAux RPAREN quad_print SEMICOLON
    (38) while -> . WHILE while1 LPAREN expresion RPAREN while2 LBRACE bloqueAux RBRACE while3
    (42) loopFromDo -> . FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE
    (61) comparacion -> . ID push_id DOUBLEEQUAL push_poper expresion SEMICOLON
    (50) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN expresion
    (51) llamadaAFuncion -> . ID generarEra LPAREN paramFuncion gosub RPAREN SEMICOLON

    ID              shift and go to state 38
    IF              shift and go to state 36
    PRINT           shift and go to state 34
    WHILE           shift and go to state 43
    FROM            shift and go to state 41

    estatuto                       shift and go to state 35
    condicion                      shift and go to state 37
    loopFromDo                     shift and go to state 39
    llamadaAFuncion                shift and go to state 40
    asignacion                     shift and go to state 42
    bloqueAux                      shift and go to state 203
    while                          shift and go to state 45
    comparacion                    shift and go to state 46
    escritura                      shift and go to state 47

state 203

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux . RBRACE

    RBRACE          shift and go to state 204


state 204

    (42) loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .

    ID              reduce using rule 42 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    IF              reduce using rule 42 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    PRINT           reduce using rule 42 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    WHILE           reduce using rule 42 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    FROM            reduce using rule 42 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)
    RBRACE          reduce using rule 42 (loopFromDo -> FROM LPAREN ID EQUAL expresion RPAREN TO LPAREN expresion RPAREN DO LBRACE bloqueAux RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 50 resolved as shift
WARNING: shift/reduce conflict for COMA in state 140 resolved as shift
WARNING: reduce/reduce conflict in state 140 resolved using rule (paramFuncion -> ID push_id)
WARNING: rejected rule (var_cte -> ID push_id) in state 140
